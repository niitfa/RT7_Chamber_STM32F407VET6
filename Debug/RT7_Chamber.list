
RT7_Chamber.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d90  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  08008f18  08008f18  00018f18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009748  08009748  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009748  08009748  00019748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009750  08009750  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009750  08009750  00019750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009754  08009754  00019754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08009758  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d8  2**0
                  CONTENTS
 10 .bss          00000a64  200000d8  200000d8  000200d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000b3c  20000b3c  000200d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 14 .debug_info   000192c2  00000000  00000000  0002014b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000462a  00000000  00000000  0003940d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001648  00000000  00000000  0003da38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001106  00000000  00000000  0003f080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000254e3  00000000  00000000  00040186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e25e  00000000  00000000  00065669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d3ce0  00000000  00000000  000838c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006408  00000000  00000000  001575a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0015d9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000d8 	.word	0x200000d8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008f00 	.word	0x08008f00

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000dc 	.word	0x200000dc
 80001c4:	08008f00 	.word	0x08008f00

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_uldivmod>:
 8000b30:	b953      	cbnz	r3, 8000b48 <__aeabi_uldivmod+0x18>
 8000b32:	b94a      	cbnz	r2, 8000b48 <__aeabi_uldivmod+0x18>
 8000b34:	2900      	cmp	r1, #0
 8000b36:	bf08      	it	eq
 8000b38:	2800      	cmpeq	r0, #0
 8000b3a:	bf1c      	itt	ne
 8000b3c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b40:	f04f 30ff 	movne.w	r0, #4294967295
 8000b44:	f000 b9a6 	b.w	8000e94 <__aeabi_idiv0>
 8000b48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b50:	f000 f83c 	bl	8000bcc <__udivmoddi4>
 8000b54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b5c:	b004      	add	sp, #16
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2lz>:
 8000b60:	b538      	push	{r3, r4, r5, lr}
 8000b62:	2200      	movs	r2, #0
 8000b64:	2300      	movs	r3, #0
 8000b66:	4604      	mov	r4, r0
 8000b68:	460d      	mov	r5, r1
 8000b6a:	f7ff ff5b 	bl	8000a24 <__aeabi_dcmplt>
 8000b6e:	b928      	cbnz	r0, 8000b7c <__aeabi_d2lz+0x1c>
 8000b70:	4620      	mov	r0, r4
 8000b72:	4629      	mov	r1, r5
 8000b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b78:	f000 b80a 	b.w	8000b90 <__aeabi_d2ulz>
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000b82:	f000 f805 	bl	8000b90 <__aeabi_d2ulz>
 8000b86:	4240      	negs	r0, r0
 8000b88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b8c:	bd38      	pop	{r3, r4, r5, pc}
 8000b8e:	bf00      	nop

08000b90 <__aeabi_d2ulz>:
 8000b90:	b5d0      	push	{r4, r6, r7, lr}
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <__aeabi_d2ulz+0x34>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	4606      	mov	r6, r0
 8000b98:	460f      	mov	r7, r1
 8000b9a:	f7ff fcd1 	bl	8000540 <__aeabi_dmul>
 8000b9e:	f7ff ffa7 	bl	8000af0 <__aeabi_d2uiz>
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	f7ff fc52 	bl	800044c <__aeabi_ui2d>
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <__aeabi_d2ulz+0x38>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	f7ff fcc8 	bl	8000540 <__aeabi_dmul>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	4630      	mov	r0, r6
 8000bb6:	4639      	mov	r1, r7
 8000bb8:	f7ff fb0a 	bl	80001d0 <__aeabi_dsub>
 8000bbc:	f7ff ff98 	bl	8000af0 <__aeabi_d2uiz>
 8000bc0:	4621      	mov	r1, r4
 8000bc2:	bdd0      	pop	{r4, r6, r7, pc}
 8000bc4:	3df00000 	.word	0x3df00000
 8000bc8:	41f00000 	.word	0x41f00000

08000bcc <__udivmoddi4>:
 8000bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd0:	9e08      	ldr	r6, [sp, #32]
 8000bd2:	460d      	mov	r5, r1
 8000bd4:	4604      	mov	r4, r0
 8000bd6:	460f      	mov	r7, r1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d14a      	bne.n	8000c72 <__udivmoddi4+0xa6>
 8000bdc:	428a      	cmp	r2, r1
 8000bde:	4694      	mov	ip, r2
 8000be0:	d965      	bls.n	8000cae <__udivmoddi4+0xe2>
 8000be2:	fab2 f382 	clz	r3, r2
 8000be6:	b143      	cbz	r3, 8000bfa <__udivmoddi4+0x2e>
 8000be8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bec:	f1c3 0220 	rsb	r2, r3, #32
 8000bf0:	409f      	lsls	r7, r3
 8000bf2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bf6:	4317      	orrs	r7, r2
 8000bf8:	409c      	lsls	r4, r3
 8000bfa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bfe:	fa1f f58c 	uxth.w	r5, ip
 8000c02:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c06:	0c22      	lsrs	r2, r4, #16
 8000c08:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c0c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c10:	fb01 f005 	mul.w	r0, r1, r5
 8000c14:	4290      	cmp	r0, r2
 8000c16:	d90a      	bls.n	8000c2e <__udivmoddi4+0x62>
 8000c18:	eb1c 0202 	adds.w	r2, ip, r2
 8000c1c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c20:	f080 811c 	bcs.w	8000e5c <__udivmoddi4+0x290>
 8000c24:	4290      	cmp	r0, r2
 8000c26:	f240 8119 	bls.w	8000e5c <__udivmoddi4+0x290>
 8000c2a:	3902      	subs	r1, #2
 8000c2c:	4462      	add	r2, ip
 8000c2e:	1a12      	subs	r2, r2, r0
 8000c30:	b2a4      	uxth	r4, r4
 8000c32:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c36:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c3a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c3e:	fb00 f505 	mul.w	r5, r0, r5
 8000c42:	42a5      	cmp	r5, r4
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x90>
 8000c46:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c4e:	f080 8107 	bcs.w	8000e60 <__udivmoddi4+0x294>
 8000c52:	42a5      	cmp	r5, r4
 8000c54:	f240 8104 	bls.w	8000e60 <__udivmoddi4+0x294>
 8000c58:	4464      	add	r4, ip
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c60:	1b64      	subs	r4, r4, r5
 8000c62:	2100      	movs	r1, #0
 8000c64:	b11e      	cbz	r6, 8000c6e <__udivmoddi4+0xa2>
 8000c66:	40dc      	lsrs	r4, r3
 8000c68:	2300      	movs	r3, #0
 8000c6a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0xbc>
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	f000 80ed 	beq.w	8000e56 <__udivmoddi4+0x28a>
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c82:	4608      	mov	r0, r1
 8000c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c88:	fab3 f183 	clz	r1, r3
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	d149      	bne.n	8000d24 <__udivmoddi4+0x158>
 8000c90:	42ab      	cmp	r3, r5
 8000c92:	d302      	bcc.n	8000c9a <__udivmoddi4+0xce>
 8000c94:	4282      	cmp	r2, r0
 8000c96:	f200 80f8 	bhi.w	8000e8a <__udivmoddi4+0x2be>
 8000c9a:	1a84      	subs	r4, r0, r2
 8000c9c:	eb65 0203 	sbc.w	r2, r5, r3
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	4617      	mov	r7, r2
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	d0e2      	beq.n	8000c6e <__udivmoddi4+0xa2>
 8000ca8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cac:	e7df      	b.n	8000c6e <__udivmoddi4+0xa2>
 8000cae:	b902      	cbnz	r2, 8000cb2 <__udivmoddi4+0xe6>
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	fab2 f382 	clz	r3, r2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x210>
 8000cbc:	1a8a      	subs	r2, r1, r2
 8000cbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc2:	fa1f fe8c 	uxth.w	lr, ip
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ccc:	fb07 2015 	mls	r0, r7, r5, r2
 8000cd0:	0c22      	lsrs	r2, r4, #16
 8000cd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cd6:	fb0e f005 	mul.w	r0, lr, r5
 8000cda:	4290      	cmp	r0, r2
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x124>
 8000cde:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x122>
 8000ce8:	4290      	cmp	r0, r2
 8000cea:	f200 80cb 	bhi.w	8000e84 <__udivmoddi4+0x2b8>
 8000cee:	4645      	mov	r5, r8
 8000cf0:	1a12      	subs	r2, r2, r0
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cf8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d00:	fb0e fe00 	mul.w	lr, lr, r0
 8000d04:	45a6      	cmp	lr, r4
 8000d06:	d908      	bls.n	8000d1a <__udivmoddi4+0x14e>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d10:	d202      	bcs.n	8000d18 <__udivmoddi4+0x14c>
 8000d12:	45a6      	cmp	lr, r4
 8000d14:	f200 80bb 	bhi.w	8000e8e <__udivmoddi4+0x2c2>
 8000d18:	4610      	mov	r0, r2
 8000d1a:	eba4 040e 	sub.w	r4, r4, lr
 8000d1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d22:	e79f      	b.n	8000c64 <__udivmoddi4+0x98>
 8000d24:	f1c1 0720 	rsb	r7, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d32:	fa05 f401 	lsl.w	r4, r5, r1
 8000d36:	fa20 f307 	lsr.w	r3, r0, r7
 8000d3a:	40fd      	lsrs	r5, r7
 8000d3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d54:	fb08 f50e 	mul.w	r5, r8, lr
 8000d58:	42a5      	cmp	r5, r4
 8000d5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d62:	d90b      	bls.n	8000d7c <__udivmoddi4+0x1b0>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d6c:	f080 8088 	bcs.w	8000e80 <__udivmoddi4+0x2b4>
 8000d70:	42a5      	cmp	r5, r4
 8000d72:	f240 8085 	bls.w	8000e80 <__udivmoddi4+0x2b4>
 8000d76:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7a:	4464      	add	r4, ip
 8000d7c:	1b64      	subs	r4, r4, r5
 8000d7e:	b29d      	uxth	r5, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1da>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d9c:	d26c      	bcs.n	8000e78 <__udivmoddi4+0x2ac>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	d96a      	bls.n	8000e78 <__udivmoddi4+0x2ac>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	4464      	add	r4, ip
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fba3 9502 	umull	r9, r5, r3, r2
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	42ac      	cmp	r4, r5
 8000db4:	46c8      	mov	r8, r9
 8000db6:	46ae      	mov	lr, r5
 8000db8:	d356      	bcc.n	8000e68 <__udivmoddi4+0x29c>
 8000dba:	d053      	beq.n	8000e64 <__udivmoddi4+0x298>
 8000dbc:	b156      	cbz	r6, 8000dd4 <__udivmoddi4+0x208>
 8000dbe:	ebb0 0208 	subs.w	r2, r0, r8
 8000dc2:	eb64 040e 	sbc.w	r4, r4, lr
 8000dc6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dca:	40ca      	lsrs	r2, r1
 8000dcc:	40cc      	lsrs	r4, r1
 8000dce:	4317      	orrs	r7, r2
 8000dd0:	e9c6 7400 	strd	r7, r4, [r6]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ddc:	f1c3 0120 	rsb	r1, r3, #32
 8000de0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000de4:	fa20 f201 	lsr.w	r2, r0, r1
 8000de8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dec:	409d      	lsls	r5, r3
 8000dee:	432a      	orrs	r2, r5
 8000df0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df4:	fa1f fe8c 	uxth.w	lr, ip
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1510 	mls	r5, r7, r0, r1
 8000e00:	0c11      	lsrs	r1, r2, #16
 8000e02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e06:	fb00 f50e 	mul.w	r5, r0, lr
 8000e0a:	428d      	cmp	r5, r1
 8000e0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x258>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e1a:	d22f      	bcs.n	8000e7c <__udivmoddi4+0x2b0>
 8000e1c:	428d      	cmp	r5, r1
 8000e1e:	d92d      	bls.n	8000e7c <__udivmoddi4+0x2b0>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4461      	add	r1, ip
 8000e24:	1b49      	subs	r1, r1, r5
 8000e26:	b292      	uxth	r2, r2
 8000e28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e34:	fb05 f10e 	mul.w	r1, r5, lr
 8000e38:	4291      	cmp	r1, r2
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x282>
 8000e3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e40:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e44:	d216      	bcs.n	8000e74 <__udivmoddi4+0x2a8>
 8000e46:	4291      	cmp	r1, r2
 8000e48:	d914      	bls.n	8000e74 <__udivmoddi4+0x2a8>
 8000e4a:	3d02      	subs	r5, #2
 8000e4c:	4462      	add	r2, ip
 8000e4e:	1a52      	subs	r2, r2, r1
 8000e50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e54:	e738      	b.n	8000cc8 <__udivmoddi4+0xfc>
 8000e56:	4631      	mov	r1, r6
 8000e58:	4630      	mov	r0, r6
 8000e5a:	e708      	b.n	8000c6e <__udivmoddi4+0xa2>
 8000e5c:	4639      	mov	r1, r7
 8000e5e:	e6e6      	b.n	8000c2e <__udivmoddi4+0x62>
 8000e60:	4610      	mov	r0, r2
 8000e62:	e6fb      	b.n	8000c5c <__udivmoddi4+0x90>
 8000e64:	4548      	cmp	r0, r9
 8000e66:	d2a9      	bcs.n	8000dbc <__udivmoddi4+0x1f0>
 8000e68:	ebb9 0802 	subs.w	r8, r9, r2
 8000e6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e70:	3b01      	subs	r3, #1
 8000e72:	e7a3      	b.n	8000dbc <__udivmoddi4+0x1f0>
 8000e74:	4645      	mov	r5, r8
 8000e76:	e7ea      	b.n	8000e4e <__udivmoddi4+0x282>
 8000e78:	462b      	mov	r3, r5
 8000e7a:	e794      	b.n	8000da6 <__udivmoddi4+0x1da>
 8000e7c:	4640      	mov	r0, r8
 8000e7e:	e7d1      	b.n	8000e24 <__udivmoddi4+0x258>
 8000e80:	46d0      	mov	r8, sl
 8000e82:	e77b      	b.n	8000d7c <__udivmoddi4+0x1b0>
 8000e84:	3d02      	subs	r5, #2
 8000e86:	4462      	add	r2, ip
 8000e88:	e732      	b.n	8000cf0 <__udivmoddi4+0x124>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e70a      	b.n	8000ca4 <__udivmoddi4+0xd8>
 8000e8e:	4464      	add	r4, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e742      	b.n	8000d1a <__udivmoddi4+0x14e>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <adc_init>:


#include "adc.h"

void adc_init(adc_t* self)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	self->vtable->init(self);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	4798      	blx	r3
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <adc_update>:

void adc_update(adc_t* self, void* option)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	6039      	str	r1, [r7, #0]
	self->vtable->update(self, option);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	6839      	ldr	r1, [r7, #0]
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	4798      	blx	r3
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <adc_get_cnt>:

uint32_t adc_get_cnt(adc_t* self)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	return self->vtable->get_cnt(self);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	4798      	blx	r3
 8000ee2:	4603      	mov	r3, r0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <adc_get_vout>:

double adc_get_vout(adc_t* self)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	return self->vtable->get_vout(self);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	4798      	blx	r3
 8000efe:	eeb0 7a40 	vmov.f32	s14, s0
 8000f02:	eef0 7a60 	vmov.f32	s15, s1
}
 8000f06:	eeb0 0a47 	vmov.f32	s0, s14
 8000f0a:	eef0 0a67 	vmov.f32	s1, s15
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <init>:

	AD7791_state_t state;
};

static void init(adc_t* self)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <update>:

static void update(adc_t* self, void* option)
{
 8000f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f2c:	b087      	sub	sp, #28
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	6039      	str	r1, [r7, #0]
	switch(self->data->state)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f3c:	2b03      	cmp	r3, #3
 8000f3e:	f200 80e7 	bhi.w	8001110 <update+0x1e8>
 8000f42:	a201      	add	r2, pc, #4	; (adr r2, 8000f48 <update+0x20>)
 8000f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f48:	08000f59 	.word	0x08000f59
 8000f4c:	08000f81 	.word	0x08000f81
 8000f50:	08000fe3 	.word	0x08000fe3
 8000f54:	08001045 	.word	0x08001045
	{
	case AD7791_WAIT: // wait several cycles
		spi_deselect(self);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 f9a1 	bl	80012a0 <spi_deselect>
		self->data->waitCycles--;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f64:	3a01      	subs	r2, #1
 8000f66:	625a      	str	r2, [r3, #36]	; 0x24
		if(!self->data->waitCycles)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f040 80cd 	bne.w	800110e <update+0x1e6>
		{
			self->data->state = AD7791_SETUP_FR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		break;
 8000f7e:	e0c6      	b.n	800110e <update+0x1e6>
	case AD7791_SETUP_FR: // write to filter register
		if(self->data->setupWaitCycles == self->data->setupWaitCyclesMax)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d111      	bne.n	8000fb4 <update+0x8c>
		{
			spi_select(self);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 f973 	bl	800127c <spi_select>
			//delay_us(1); // delay
			spi_hw_command(self, 0x20);
 8000f96:	2120      	movs	r1, #32
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 f993 	bl	80012c4 <spi_hw_command>
			spi_hw_command(self, self->data->FR_word);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 f98b 	bl	80012c4 <spi_hw_command>
			//delay_us(1); // delay
			spi_deselect(self);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 f976 	bl	80012a0 <spi_deselect>
		}
		if(!self->data->setupWaitCycles)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d10b      	bne.n	8000fd6 <update+0xae>
		{
			self->data->setupWaitCycles = self->data->setupWaitCyclesMax; // RESET COUNTER
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000fc8:	629a      	str	r2, [r3, #40]	; 0x28
			self->data->state = AD7791_SETUP_MR; // NEXT STATE
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2202      	movs	r2, #2
 8000fd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		else
		{
			self->data->setupWaitCycles--;
		}
		break;
 8000fd4:	e09c      	b.n	8001110 <update+0x1e8>
			self->data->setupWaitCycles--;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fdc:	3a01      	subs	r2, #1
 8000fde:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8000fe0:	e096      	b.n	8001110 <update+0x1e8>
	case AD7791_SETUP_MR: // write to mode register
		if(self->data->setupWaitCycles == self->data->setupWaitCyclesMax)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d111      	bne.n	8001016 <update+0xee>
		{
			spi_select(self);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 f942 	bl	800127c <spi_select>
			//delay_us(1); // delay
			spi_hw_command(self, 0x10);
 8000ff8:	2110      	movs	r1, #16
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 f962 	bl	80012c4 <spi_hw_command>
			spi_hw_command(self, self->data->MR_word);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001008:	4619      	mov	r1, r3
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f95a 	bl	80012c4 <spi_hw_command>
			//delay_us(1); // delay
			spi_deselect(self);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 f945 	bl	80012a0 <spi_deselect>
		}
		if(!self->data->setupWaitCycles)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101c:	2b00      	cmp	r3, #0
 800101e:	d10b      	bne.n	8001038 <update+0x110>
		{
			self->data->setupWaitCycles = self->data->setupWaitCyclesMax; // RESET COUNTER
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800102a:	629a      	str	r2, [r3, #40]	; 0x28
			self->data->state = AD7791_MEASURE;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2203      	movs	r2, #3
 8001032:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		else
		{
			self->data->setupWaitCycles--;
		}
		break;
 8001036:	e06b      	b.n	8001110 <update+0x1e8>
			self->data->setupWaitCycles--;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800103e:	3a01      	subs	r2, #1
 8001040:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8001042:	e065      	b.n	8001110 <update+0x1e8>
	case AD7791_MEASURE:  // measure
		const uint8_t kDataSizeBytes = 3;
 8001044:	2303      	movs	r3, #3
 8001046:	74fb      	strb	r3, [r7, #19]
		const uint8_t kBufferSizeBytes = 4;
 8001048:	2304      	movs	r3, #4
 800104a:	74bb      	strb	r3, [r7, #18]
		uint8_t rxBytes [kBufferSizeBytes];
 800104c:	466b      	mov	r3, sp
 800104e:	461e      	mov	r6, r3
 8001050:	7cbb      	ldrb	r3, [r7, #18]
 8001052:	3b01      	subs	r3, #1
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	7cbb      	ldrb	r3, [r7, #18]
 8001058:	2200      	movs	r2, #0
 800105a:	4698      	mov	r8, r3
 800105c:	4691      	mov	r9, r2
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800106a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800106e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001072:	7cbb      	ldrb	r3, [r7, #18]
 8001074:	2200      	movs	r2, #0
 8001076:	461c      	mov	r4, r3
 8001078:	4615      	mov	r5, r2
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	f04f 0300 	mov.w	r3, #0
 8001082:	00eb      	lsls	r3, r5, #3
 8001084:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001088:	00e2      	lsls	r2, r4, #3
 800108a:	7cbb      	ldrb	r3, [r7, #18]
 800108c:	3307      	adds	r3, #7
 800108e:	08db      	lsrs	r3, r3, #3
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	ebad 0d03 	sub.w	sp, sp, r3
 8001096:	466b      	mov	r3, sp
 8001098:	3300      	adds	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
		memset(rxBytes, 0, kBufferSizeBytes);
 800109c:	7cbb      	ldrb	r3, [r7, #18]
 800109e:	461a      	mov	r2, r3
 80010a0:	2100      	movs	r1, #0
 80010a2:	68b8      	ldr	r0, [r7, #8]
 80010a4:	f006 ff0a 	bl	8007ebc <memset>
		spi_select(self);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 f8e7 	bl	800127c <spi_select>
		//delay_us(1); // delay
		spi_hw_command(self, 0x38); // read data register
 80010ae:	2138      	movs	r1, #56	; 0x38
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 f907 	bl	80012c4 <spi_hw_command>
		int i;
		for(i = 0; i < kDataSizeBytes; ++i)
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	e019      	b.n	80010f0 <update+0x1c8>
		{
			HAL_SPI_Receive(self->data->hspi, rxBytes + kDataSizeBytes - i - 1, 1, SPI_TIMEOUT);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	7cfa      	ldrb	r2, [r7, #19]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	3b01      	subs	r3, #1
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	18d1      	adds	r1, r2, r3
 80010ce:	230a      	movs	r3, #10
 80010d0:	2201      	movs	r2, #1
 80010d2:	f005 feb7 	bl	8006e44 <HAL_SPI_Receive>
			while(HAL_SPI_GetState(self->data->hspi) != HAL_SPI_STATE_READY)
 80010d6:	bf00      	nop
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f006 f978 	bl	80073d4 <HAL_SPI_GetState>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d1f6      	bne.n	80010d8 <update+0x1b0>
		for(i = 0; i < kDataSizeBytes; ++i)
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	3301      	adds	r3, #1
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	7cfb      	ldrb	r3, [r7, #19]
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	dbe1      	blt.n	80010bc <update+0x194>
				;
		}
		//delay_us(1); // delay
		spi_deselect(self);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f000 f8d1 	bl	80012a0 <spi_deselect>
		self->data->lastOutputValue = *(int32_t*)rxBytes;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	6812      	ldr	r2, [r2, #0]
 8001106:	619a      	str	r2, [r3, #24]

		//self->data->state = AD7791_SETUP_FR;
		break;
 8001108:	bf00      	nop
 800110a:	46b5      	mov	sp, r6
	}
}
 800110c:	e000      	b.n	8001110 <update+0x1e8>
		break;
 800110e:	bf00      	nop
}
 8001110:	bf00      	nop
 8001112:	371c      	adds	r7, #28
 8001114:	46bd      	mov	sp, r7
 8001116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800111a:	bf00      	nop

0800111c <get_cnt>:

static uint32_t get_cnt(adc_t* self)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	return self->data->lastOutputValue;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	699b      	ldr	r3, [r3, #24]
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <get_vout>:

static double get_vout(adc_t* self)
{
 8001136:	b5b0      	push	{r4, r5, r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
	return self->data->Vref * get_cnt(self) / self->data->maxOutputValue;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffe8 	bl	800111c <get_cnt>
 800114c:	4603      	mov	r3, r0
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f97c 	bl	800044c <__aeabi_ui2d>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4620      	mov	r0, r4
 800115a:	4629      	mov	r1, r5
 800115c:	f7ff f9f0 	bl	8000540 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4614      	mov	r4, r2
 8001166:	461d      	mov	r5, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f97c 	bl	800046c <__aeabi_i2d>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4620      	mov	r0, r4
 800117a:	4629      	mov	r1, r5
 800117c:	f7ff fb0a 	bl	8000794 <__aeabi_ddiv>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	ec43 2b17 	vmov	d7, r2, r3
}
 8001188:	eeb0 0a47 	vmov.f32	s0, s14
 800118c:	eef0 0a67 	vmov.f32	s1, s15
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001198 <adc_AD7791_create>:
		double Vref,
		uint8_t FR_word,
		uint8_t MR_word,
		uint32_t waitCycles
		)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6178      	str	r0, [r7, #20]
 80011a0:	6139      	str	r1, [r7, #16]
 80011a2:	60fa      	str	r2, [r7, #12]
 80011a4:	ed87 0b00 	vstr	d0, [r7]
 80011a8:	817b      	strh	r3, [r7, #10]
	adc_t adc;
	adc.vtable = &methods;
 80011aa:	4b33      	ldr	r3, [pc, #204]	; (8001278 <adc_AD7791_create+0xe0>)
 80011ac:	61fb      	str	r3, [r7, #28]
	struct adc_data_t* pdata =
			(struct adc_data_t*)malloc(sizeof(struct adc_data_t));
 80011ae:	2038      	movs	r0, #56	; 0x38
 80011b0:	f006 fd8e 	bl	8007cd0 <malloc>
 80011b4:	4603      	mov	r3, r0
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
	if(pdata)
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d049      	beq.n	8001252 <adc_AD7791_create+0xba>
	{
		memset(pdata, 0, sizeof(*pdata));
 80011be:	2238      	movs	r2, #56	; 0x38
 80011c0:	2100      	movs	r1, #0
 80011c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011c4:	f006 fe7a 	bl	8007ebc <memset>
		pdata->hspi = hspi;
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	601a      	str	r2, [r3, #0]
		pdata->portCS = portCS;
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	605a      	str	r2, [r3, #4]
		pdata->pinCS = pinCS;
 80011d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d6:	897a      	ldrh	r2, [r7, #10]
 80011d8:	811a      	strh	r2, [r3, #8]
		pdata->Vref = Vref;
 80011da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011e0:	e9c1 2304 	strd	r2, r3, [r1, #16]
		pdata->lastOutputValue = 0;
 80011e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
		pdata->bitResolution = 24;
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	2218      	movs	r2, #24
 80011ee:	729a      	strb	r2, [r3, #10]
		pdata->maxOutputValue = (uint32_t)pow(2, pdata->bitResolution);
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	7a9b      	ldrb	r3, [r3, #10]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f929 	bl	800044c <__aeabi_ui2d>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	ec43 2b11 	vmov	d1, r2, r3
 8001202:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8001270 <adc_AD7791_create+0xd8>
 8001206:	f006 feab 	bl	8007f60 <pow>
 800120a:	ec53 2b10 	vmov	r2, r3, d0
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f7ff fc6d 	bl	8000af0 <__aeabi_d2uiz>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121c:	61da      	str	r2, [r3, #28]
		pdata->FR_word = FR_word;
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001224:	f883 2020 	strb.w	r2, [r3, #32]
		pdata->MR_word = MR_word;
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800122e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		pdata->waitCycles = waitCycles;
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001236:	625a      	str	r2, [r3, #36]	; 0x24
		pdata->setupWaitCyclesMax = 5;
 8001238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123a:	2205      	movs	r2, #5
 800123c:	62da      	str	r2, [r3, #44]	; 0x2c
		pdata->setupWaitCycles = pdata->setupWaitCycles;
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	629a      	str	r2, [r3, #40]	; 0x28
		pdata->state = AD7791_WAIT;
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		adc.data = pdata;
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	623b      	str	r3, [r7, #32]
	}
	// init
	return adc;
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	461a      	mov	r2, r3
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800125e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	3728      	adds	r7, #40	; 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	f3af 8000 	nop.w
 8001270:	00000000 	.word	0x00000000
 8001274:	40000000 	.word	0x40000000
 8001278:	20000000 	.word	0x20000000

0800127c <spi_select>:

static void spi_select(adc_t* self)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
			self->data->portCS,
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 8001288:	6858      	ldr	r0, [r3, #4]
			self->data->pinCS,
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 800128e:	891b      	ldrh	r3, [r3, #8]
 8001290:	2200      	movs	r2, #0
 8001292:	4619      	mov	r1, r3
 8001294:	f004 fafe 	bl	8005894 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET
			);
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <spi_deselect>:
static void spi_deselect(adc_t* self)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
			self->data->portCS,
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 80012ac:	6858      	ldr	r0, [r3, #4]
			self->data->pinCS,
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 80012b2:	891b      	ldrh	r3, [r3, #8]
 80012b4:	2201      	movs	r2, #1
 80012b6:	4619      	mov	r1, r3
 80012b8:	f004 faec 	bl	8005894 <HAL_GPIO_WritePin>
			GPIO_PIN_SET
			);
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <spi_hw_command>:

static void spi_hw_command(adc_t *self, uint8_t cmd)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(self->data->hspi, &cmd, 1, SPI_TIMEOUT);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	6818      	ldr	r0, [r3, #0]
 80012d6:	1cf9      	adds	r1, r7, #3
 80012d8:	230a      	movs	r3, #10
 80012da:	2201      	movs	r2, #1
 80012dc:	f005 fc6f 	bl	8006bbe <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(self->data->hspi) != HAL_SPI_STATE_READY)
 80012e0:	bf00      	nop
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f006 f873 	bl	80073d4 <HAL_SPI_GetState>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d1f6      	bne.n	80012e2 <spi_hw_command+0x1e>
		;
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <adc_monitor_init>:
#include <string.h>
#include <math.h>


void adc_monitor_init(adc_monitor_t* self, adc_t* adc, IRQn_Type IRQn)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b084      	sub	sp, #16
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	4613      	mov	r3, r2
 800130a:	71fb      	strb	r3, [r7, #7]
	memset(self, 0, sizeof(*self));
 800130c:	2228      	movs	r2, #40	; 0x28
 800130e:	2100      	movs	r1, #0
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	f006 fdd3 	bl	8007ebc <memset>
	self->adc = adc;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	68ba      	ldr	r2, [r7, #8]
 800131a:	601a      	str	r2, [r3, #0]
	self->IRQn = IRQn;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	79fa      	ldrb	r2, [r7, #7]
 8001320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	self->state = ADC_STANDBY;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2200      	movs	r2, #0
 8001328:	761a      	strb	r2, [r3, #24]
}
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <adc_monitor_update>:

void adc_monitor_update(adc_monitor_t* self)
{
 8001334:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
	self->currValue = adc_get_vout(self->adc);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fdd2 	bl	8000eec <adc_get_vout>
 8001348:	eeb0 7a40 	vmov.f32	s14, s0
 800134c:	eef0 7a60 	vmov.f32	s15, s1
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	ed83 7b02 	vstr	d7, [r3, #8]
	switch(self->state)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	7e1b      	ldrb	r3, [r3, #24]
 800135a:	2b02      	cmp	r3, #2
 800135c:	d062      	beq.n	8001424 <adc_monitor_update+0xf0>
 800135e:	2b02      	cmp	r3, #2
 8001360:	dc63      	bgt.n	800142a <adc_monitor_update+0xf6>
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <adc_monitor_update+0x38>
 8001366:	2b01      	cmp	r3, #1
 8001368:	d00e      	beq.n	8001388 <adc_monitor_update+0x54>
		}
		break;
	case ADC_COMPLETED:
		break;
	}
}
 800136a:	e05e      	b.n	800142a <adc_monitor_update+0xf6>
		self->averageValue 			= 0;
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	f04f 0300 	mov.w	r3, #0
 8001376:	e9c1 2304 	strd	r2, r3, [r1, #16]
		self->measurementCycles 	= 0;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	61da      	str	r2, [r3, #28]
		self->measurementCyclesMax	= 0;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	621a      	str	r2, [r3, #32]
		break;
 8001386:	e050      	b.n	800142a <adc_monitor_update+0xf6>
		self->measurementCycles++;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	1c5a      	adds	r2, r3, #1
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	61da      	str	r2, [r3, #28]
				((double)self->measurementCycles - 1) / self->measurementCycles * self->averageValue +
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f858 	bl	800044c <__aeabi_ui2d>
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	4b24      	ldr	r3, [pc, #144]	; (8001434 <adc_monitor_update+0x100>)
 80013a2:	f7fe ff15 	bl	80001d0 <__aeabi_dsub>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4614      	mov	r4, r2
 80013ac:	461d      	mov	r5, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f84a 	bl	800044c <__aeabi_ui2d>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4620      	mov	r0, r4
 80013be:	4629      	mov	r1, r5
 80013c0:	f7ff f9e8 	bl	8000794 <__aeabi_ddiv>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4610      	mov	r0, r2
 80013ca:	4619      	mov	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80013d2:	f7ff f8b5 	bl	8000540 <__aeabi_dmul>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4690      	mov	r8, r2
 80013dc:	4699      	mov	r9, r3
				self->currValue / self->measurementCycles;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f82f 	bl	800044c <__aeabi_ui2d>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4620      	mov	r0, r4
 80013f4:	4629      	mov	r1, r5
 80013f6:	f7ff f9cd 	bl	8000794 <__aeabi_ddiv>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
				((double)self->measurementCycles - 1) / self->measurementCycles * self->averageValue +
 80013fe:	4640      	mov	r0, r8
 8001400:	4649      	mov	r1, r9
 8001402:	f7fe fee7 	bl	80001d4 <__adddf3>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
		self->averageValue =
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		if(self->measurementCycles >= self->measurementCyclesMax)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69da      	ldr	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	429a      	cmp	r2, r3
 800141a:	d305      	bcc.n	8001428 <adc_monitor_update+0xf4>
			self->state = ADC_COMPLETED;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2202      	movs	r2, #2
 8001420:	761a      	strb	r2, [r3, #24]
		break;
 8001422:	e001      	b.n	8001428 <adc_monitor_update+0xf4>
		break;
 8001424:	bf00      	nop
 8001426:	e000      	b.n	800142a <adc_monitor_update+0xf6>
		break;
 8001428:	bf00      	nop
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001434:	3ff00000 	.word	0x3ff00000

08001438 <adc_monitor_start_measurement>:

void adc_monitor_start_measurement(adc_monitor_t* self, uint32_t cycles)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
	HAL_NVIC_DisableIRQ(self->IRQn);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8001448:	4618      	mov	r0, r3
 800144a:	f004 f854 	bl	80054f6 <HAL_NVIC_DisableIRQ>
	if(self->state == ADC_STANDBY)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	7e1b      	ldrb	r3, [r3, #24]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d108      	bne.n	8001468 <adc_monitor_start_measurement+0x30>
	{
		self->measurementCycles = 0;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	61da      	str	r2, [r3, #28]
		self->measurementCyclesMax = cycles;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	621a      	str	r2, [r3, #32]
		self->state = ADC_PROCESS;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	761a      	strb	r2, [r3, #24]
	}
	HAL_NVIC_EnableIRQ(self->IRQn);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800146e:	4618      	mov	r0, r3
 8001470:	f004 f833 	bl	80054da <HAL_NVIC_EnableIRQ>
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <adc_monitor_reset_measurement>:

void adc_monitor_reset_measurement(adc_monitor_t* self)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(self->IRQn);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800148a:	4618      	mov	r0, r3
 800148c:	f004 f833 	bl	80054f6 <HAL_NVIC_DisableIRQ>
	self->state = ADC_STANDBY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	761a      	strb	r2, [r3, #24]
	HAL_NVIC_EnableIRQ(self->IRQn);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800149c:	4618      	mov	r0, r3
 800149e:	f004 f81c 	bl	80054da <HAL_NVIC_EnableIRQ>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <adc_monitor_get_average_signal_value>:

double adc_monitor_get_average_signal_value(adc_monitor_t* self)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
	return self->averageValue;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80014b8:	ec43 2b17 	vmov	d7, r2, r3
}
 80014bc:	eeb0 0a47 	vmov.f32	s0, s14
 80014c0:	eef0 0a67 	vmov.f32	s1, s15
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <adc_monitor_get_measurement_cycle_no>:

uint32_t adc_monitor_get_measurement_cycle_no(adc_monitor_t* self)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
	return self->measurementCycles;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69db      	ldr	r3, [r3, #28]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <adc_monitor_get_measurement_state>:

int8_t adc_monitor_get_measurement_state(adc_monitor_t* self)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
	return self->state;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	7e1b      	ldrb	r3, [r3, #24]
 80014f2:	b25b      	sxtb	r3, r3
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <set_adc_dose_range_select_pin>:

static const int BROAD_RANGE_PIN_STATE = 0;
static const int NARROW_RANGE_PIN_STATE = 1;

void set_adc_dose_range_select_pin(GPIO_TypeDef* port, uint16_t pin)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	807b      	strh	r3, [r7, #2]
	rangeSelectPort = port;
 800150c:	4a05      	ldr	r2, [pc, #20]	; (8001524 <set_adc_dose_range_select_pin+0x24>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
	rangeSelectPin = pin;
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <set_adc_dose_range_select_pin+0x28>)
 8001514:	887b      	ldrh	r3, [r7, #2]
 8001516:	8013      	strh	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	200000f4 	.word	0x200000f4
 8001528:	200000f8 	.word	0x200000f8

0800152c <select_broad_adc_dose_range>:

void select_broad_adc_dose_range()
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
	if(rangeSelectPort)
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <select_broad_adc_dose_range+0x24>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d008      	beq.n	800154a <select_broad_adc_dose_range+0x1e>
	{
		HAL_GPIO_WritePin(rangeSelectPort, rangeSelectPin, BROAD_RANGE_PIN_STATE);
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <select_broad_adc_dose_range+0x24>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a05      	ldr	r2, [pc, #20]	; (8001554 <select_broad_adc_dose_range+0x28>)
 800153e:	8811      	ldrh	r1, [r2, #0]
 8001540:	2200      	movs	r2, #0
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f004 f9a5 	bl	8005894 <HAL_GPIO_WritePin>
	}
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200000f4 	.word	0x200000f4
 8001554:	200000f8 	.word	0x200000f8

08001558 <select_narrow_adc_dose_range>:

void select_narrow_adc_dose_range()
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	if(rangeSelectPort)
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <select_narrow_adc_dose_range+0x24>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d008      	beq.n	8001576 <select_narrow_adc_dose_range+0x1e>
	{
		HAL_GPIO_WritePin(rangeSelectPort, rangeSelectPin, NARROW_RANGE_PIN_STATE);
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <select_narrow_adc_dose_range+0x24>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a05      	ldr	r2, [pc, #20]	; (8001580 <select_narrow_adc_dose_range+0x28>)
 800156a:	8811      	ldrh	r1, [r2, #0]
 800156c:	2201      	movs	r2, #1
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f004 f98f 	bl	8005894 <HAL_GPIO_WritePin>
	}
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200000f4 	.word	0x200000f4
 8001580:	200000f8 	.word	0x200000f8

08001584 <dac_init>:
 */

#include "dac.h"

void dac_init(dac_t* self)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	self->vtable->init(self);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	4798      	blx	r3
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <dac_set_input_value>:

void dac_set_input_value(dac_t* self, uint32_t digital_value)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	6039      	str	r1, [r7, #0]
	self->vtable->set_input_value(self, digital_value);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	6839      	ldr	r1, [r7, #0]
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	4798      	blx	r3
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	0000      	movs	r0, r0
	...

080015c0 <init>:
	double Vref;
	uint32_t maxInputValue;
};

static void init(dac_t* self)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	spi_deselect(self);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 f8f5 	bl	80017b8 <spi_deselect>
	HAL_Delay(10);
 80015ce:	200a      	movs	r0, #10
 80015d0:	f003 fe44 	bl	800525c <HAL_Delay>

	if(self->data->portLDAC)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d009      	beq.n	80015f2 <init+0x32>
	{
		HAL_GPIO_WritePin(self->data->portLDAC, self->data->pinLDAC, 0);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	68d8      	ldr	r0, [r3, #12]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	8a1b      	ldrh	r3, [r3, #16]
 80015ea:	2200      	movs	r2, #0
 80015ec:	4619      	mov	r1, r3
 80015ee:	f004 f951 	bl	8005894 <HAL_GPIO_WritePin>
	}

	if(self->data->portSHDW)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d009      	beq.n	8001610 <init+0x50>
	{
		HAL_GPIO_WritePin(self->data->portSHDW, self->data->pinSHDW, 1);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	6958      	ldr	r0, [r3, #20]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	8b1b      	ldrh	r3, [r3, #24]
 8001608:	2201      	movs	r2, #1
 800160a:	4619      	mov	r1, r3
 800160c:	f004 f942 	bl	8005894 <HAL_GPIO_WritePin>
	// SPI config begin
	//spi_select(self);
	//spi_deselect(self);

	// SPI config end
	self->data->Vref = 2.048;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6859      	ldr	r1, [r3, #4]
 8001614:	a306      	add	r3, pc, #24	; (adr r3, 8001630 <init+0x70>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	e9c1 2308 	strd	r2, r3, [r1, #32]

	// always send zero after init
	set_digital_value(self, 0);
 800161e:	2100      	movs	r1, #0
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 f809 	bl	8001638 <set_digital_value>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	d2f1a9fc 	.word	0xd2f1a9fc
 8001634:	4000624d 	.word	0x4000624d

08001638 <set_digital_value>:

static void set_digital_value(dac_t* self, uint32_t digital_value)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
	if(digital_value < self->data->maxInputValue)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d230      	bcs.n	80016b0 <set_digital_value+0x78>
	{
	    uint16_t shdw = 1;
 800164e:	2301      	movs	r3, #1
 8001650:	81fb      	strh	r3, [r7, #14]
	    uint16_t gain = 1;
 8001652:	2301      	movs	r3, #1
 8001654:	81bb      	strh	r3, [r7, #12]
	    uint16_t x = digital_value;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	817b      	strh	r3, [r7, #10]
	    uint16_t val = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	813b      	strh	r3, [r7, #8]
	    val += (shdw <<= 12);
 800165e:	89fb      	ldrh	r3, [r7, #14]
 8001660:	031b      	lsls	r3, r3, #12
 8001662:	81fb      	strh	r3, [r7, #14]
 8001664:	89fa      	ldrh	r2, [r7, #14]
 8001666:	893b      	ldrh	r3, [r7, #8]
 8001668:	4413      	add	r3, r2
 800166a:	813b      	strh	r3, [r7, #8]
	    val += (gain <<= 13);
 800166c:	89bb      	ldrh	r3, [r7, #12]
 800166e:	035b      	lsls	r3, r3, #13
 8001670:	81bb      	strh	r3, [r7, #12]
 8001672:	89ba      	ldrh	r2, [r7, #12]
 8001674:	893b      	ldrh	r3, [r7, #8]
 8001676:	4413      	add	r3, r2
 8001678:	813b      	strh	r3, [r7, #8]
	    val += (x <<= 2);
 800167a:	897b      	ldrh	r3, [r7, #10]
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	817b      	strh	r3, [r7, #10]
 8001680:	897a      	ldrh	r2, [r7, #10]
 8001682:	893b      	ldrh	r3, [r7, #8]
 8001684:	4413      	add	r3, r2
 8001686:	813b      	strh	r3, [r7, #8]

		// SPI Transmit digital value begin
		spi_select(self);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f883 	bl	8001794 <spi_select>
		//spi_hw_command(self, (uint8_t)val);
		spi_hw_command(self, (uint8_t)(val >> 8));
 800168e:	893b      	ldrh	r3, [r7, #8]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	b29b      	uxth	r3, r3
 8001694:	b2db      	uxtb	r3, r3
 8001696:	4619      	mov	r1, r3
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 f89f 	bl	80017dc <spi_hw_command>
		spi_hw_command(self, (uint8_t)val);
 800169e:	893b      	ldrh	r3, [r7, #8]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	4619      	mov	r1, r3
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f899 	bl	80017dc <spi_hw_command>
		spi_deselect(self);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f884 	bl	80017b8 <spi_deselect>
		// SPI Transmit digital value end

	}
}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <get_reference_voltage>:

static double get_reference_voltage(dac_t* self)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	return self->data->Vref;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80016c8:	ec43 2b17 	vmov	d7, r2, r3
}
 80016cc:	eeb0 0a47 	vmov.f32	s0, s14
 80016d0:	eef0 0a67 	vmov.f32	s1, s15
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <dac_MCP4811EP_create>:
		GPIO_TypeDef* portLDAC,
		uint16_t pinLDAC,
		GPIO_TypeDef* portSHDW,
		uint16_t pinSHDW
		)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
 80016ec:	807b      	strh	r3, [r7, #2]
	dac_t dac;
	dac.vtable = &methods;
 80016ee:	4b28      	ldr	r3, [pc, #160]	; (8001790 <dac_MCP4811EP_create+0xb0>)
 80016f0:	617b      	str	r3, [r7, #20]
	struct dac_data_t* pdata =
			(struct dac_data_t*)malloc(sizeof(struct dac_data_t));
 80016f2:	2030      	movs	r0, #48	; 0x30
 80016f4:	f006 faec 	bl	8007cd0 <malloc>
 80016f8:	4603      	mov	r3, r0
 80016fa:	61fb      	str	r3, [r7, #28]
	if(pdata)
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d034      	beq.n	800176c <dac_MCP4811EP_create+0x8c>
	{
		memset(pdata, 0, sizeof(*pdata));
 8001702:	2230      	movs	r2, #48	; 0x30
 8001704:	2100      	movs	r1, #0
 8001706:	69f8      	ldr	r0, [r7, #28]
 8001708:	f006 fbd8 	bl	8007ebc <memset>
		// fill data structure
		pdata->hspi = hspi;
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	601a      	str	r2, [r3, #0]
		pdata->portCS = portCS;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	605a      	str	r2, [r3, #4]
		pdata->pinCS = pinCS;
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	887a      	ldrh	r2, [r7, #2]
 800171c:	811a      	strh	r2, [r3, #8]
		pdata->portLDAC = portLDAC;
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001722:	60da      	str	r2, [r3, #12]
		pdata->pinLDAC = pinLDAC;
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001728:	821a      	strh	r2, [r3, #16]
		pdata->portSHDW = portSHDW;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800172e:	615a      	str	r2, [r3, #20]
		pdata->pinSHDW = pinSHDW;
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001734:	831a      	strh	r2, [r3, #24]
		pdata->bitResolution = 10;
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	220a      	movs	r2, #10
 800173a:	769a      	strb	r2, [r3, #26]
		pdata->maxInputValue = (uint32_t)pow(2, pdata->bitResolution);
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	7e9b      	ldrb	r3, [r3, #26]
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe fe83 	bl	800044c <__aeabi_ui2d>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	ec43 2b11 	vmov	d1, r2, r3
 800174e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8001788 <dac_MCP4811EP_create+0xa8>
 8001752:	f006 fc05 	bl	8007f60 <pow>
 8001756:	ec53 2b10 	vmov	r2, r3, d0
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	f7ff f9c7 	bl	8000af0 <__aeabi_d2uiz>
 8001762:	4602      	mov	r2, r0
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	629a      	str	r2, [r3, #40]	; 0x28
		dac.data = pdata;
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	61bb      	str	r3, [r7, #24]
	}
	return dac;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	461a      	mov	r2, r3
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001778:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	3720      	adds	r7, #32
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	f3af 8000 	nop.w
 8001788:	00000000 	.word	0x00000000
 800178c:	40000000 	.word	0x40000000
 8001790:	20000010 	.word	0x20000010

08001794 <spi_select>:

static void spi_select(dac_t* self)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
			self->data->portCS,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 80017a0:	6858      	ldr	r0, [r3, #4]
			self->data->pinCS,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 80017a6:	891b      	ldrh	r3, [r3, #8]
 80017a8:	2200      	movs	r2, #0
 80017aa:	4619      	mov	r1, r3
 80017ac:	f004 f872 	bl	8005894 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET
			);
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <spi_deselect>:

static void spi_deselect(dac_t* self)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
			self->data->portCS,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 80017c4:	6858      	ldr	r0, [r3, #4]
			self->data->pinCS,
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 80017ca:	891b      	ldrh	r3, [r3, #8]
 80017cc:	2201      	movs	r2, #1
 80017ce:	4619      	mov	r1, r3
 80017d0:	f004 f860 	bl	8005894 <HAL_GPIO_WritePin>
			GPIO_PIN_SET
			);
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <spi_hw_command>:

static void spi_hw_command(dac_t *self, uint8_t cmd)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(self->data->hspi, &cmd, 1, SPI_TIMEOUT);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	6818      	ldr	r0, [r3, #0]
 80017ee:	1cf9      	adds	r1, r7, #3
 80017f0:	230a      	movs	r3, #10
 80017f2:	2201      	movs	r2, #1
 80017f4:	f005 f9e3 	bl	8006bbe <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(self->data->hspi) != HAL_SPI_STATE_READY)
 80017f8:	bf00      	nop
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f005 fde7 	bl	80073d4 <HAL_SPI_GetState>
 8001806:	4603      	mov	r3, r0
 8001808:	2b01      	cmp	r3, #1
 800180a:	d1f6      	bne.n	80017fa <spi_hw_command+0x1e>
		;
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <screen_init>:
 */

#include "screen.h"

void screen_init(screen_t* self)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
	self->vtable_->init(self);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	4798      	blx	r3
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <screen_draw>:

void screen_draw(screen_t* self)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	self->vtable_->draw(self);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	4798      	blx	r3
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <screen_update>:

void screen_update(screen_t* self)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
	self->vtable_->update(self);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	4798      	blx	r3
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <init_>:
};

static struct screen_data_t data;

static void init_(screen_t* self)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	memset(&data, 0, sizeof(data));
 800186c:	2250      	movs	r2, #80	; 0x50
 800186e:	2100      	movs	r1, #0
 8001870:	4813      	ldr	r0, [pc, #76]	; (80018c0 <init_+0x5c>)
 8001872:	f006 fb23 	bl	8007ebc <memset>

	self->data->adcDRValueCurr = 0;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6859      	ldr	r1, [r3, #4]
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	e9c1 2302 	strd	r2, r3, [r1, #8]
	self->data->adcDRValuePrev = 0;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6859      	ldr	r1, [r3, #4]
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	e9c1 2304 	strd	r2, r3, [r1, #16]
	self->data->adcHVValueCurr = 0;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6859      	ldr	r1, [r3, #4]
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	self->data->adcHVValuePrev = 0;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6859      	ldr	r1, [r3, #4]
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000100 	.word	0x20000100
 80018c4:	00000000 	.word	0x00000000

080018c8 <update_>:

static void update_(screen_t* self)
{
 80018c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af02      	add	r7, sp, #8
 80018d0:	6078      	str	r0, [r7, #4]

	self->data->adcDRValueCurr = adc_get_cnt(&task.adcDoseRate);
 80018d2:	488d      	ldr	r0, [pc, #564]	; (8001b08 <update_+0x240>)
 80018d4:	f7ff fafc 	bl	8000ed0 <adc_get_cnt>
 80018d8:	4602      	mov	r2, r0
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2100      	movs	r1, #0
 80018e0:	4692      	mov	sl, r2
 80018e2:	468b      	mov	fp, r1
 80018e4:	e9c3 ab02 	strd	sl, fp, [r3, #8]
	self->data->adcHVValueCurr = adc_get_cnt(&task.adcHV);
 80018e8:	4888      	ldr	r0, [pc, #544]	; (8001b0c <update_+0x244>)
 80018ea:	f7ff faf1 	bl	8000ed0 <adc_get_cnt>
 80018ee:	4602      	mov	r2, r0
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2100      	movs	r1, #0
 80018f6:	4690      	mov	r8, r2
 80018f8:	4689      	mov	r9, r1
 80018fa:	e9c3 8906 	strd	r8, r9, [r3, #24]
	self->data->adcPRValueCurr = adc_get_cnt(&task.adcPressure);
 80018fe:	4884      	ldr	r0, [pc, #528]	; (8001b10 <update_+0x248>)
 8001900:	f7ff fae6 	bl	8000ed0 <adc_get_cnt>
 8001904:	4602      	mov	r2, r0
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2100      	movs	r1, #0
 800190c:	4614      	mov	r4, r2
 800190e:	460d      	mov	r5, r1
 8001910:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28

	self->data->adcDRAverValueCurr = adc_monitor_get_average_signal_value(&task.adcDRMonitor) * 1e+6;
 8001914:	487f      	ldr	r0, [pc, #508]	; (8001b14 <update_+0x24c>)
 8001916:	f7ff fdc8 	bl	80014aa <adc_monitor_get_average_signal_value>
 800191a:	ec51 0b10 	vmov	r0, r1, d0
 800191e:	a378      	add	r3, pc, #480	; (adr r3, 8001b00 <update_+0x238>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	f7fe fe0c 	bl	8000540 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685c      	ldr	r4, [r3, #4]
 8001934:	f7ff f914 	bl	8000b60 <__aeabi_d2lz>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38

	if(self->data->adcPRValuePrev != self->data->adcPRValueCurr)
	{
	}*/

	ssd1306_Fill(Black);
 8001940:	2000      	movs	r0, #0
 8001942:	f001 fc33 	bl	80031ac <ssd1306_Fill>

	// HEAD
	ssd1306_SetCursor(HEAD_X, HEAD_Y);
 8001946:	2303      	movs	r3, #3
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2203      	movs	r2, #3
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f001 fd77 	bl	8003444 <ssd1306_SetCursor>
	ssd1306_WriteInt(self->data->counter++,*TEXT_FONT, White);//("________________", *TEXT_FONT, White);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	1c42      	adds	r2, r0, #1
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	4b6d      	ldr	r3, [pc, #436]	; (8001b18 <update_+0x250>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2201      	movs	r2, #1
 8001966:	9200      	str	r2, [sp, #0]
 8001968:	cb0e      	ldmia	r3, {r1, r2, r3}
 800196a:	f001 fdb5 	bl	80034d8 <ssd1306_WriteInt>

	// DR
	ssd1306_SetCursor(DR_DESC_X, DR_DESC_Y);
 800196e:	2303      	movs	r3, #3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	221a      	movs	r2, #26
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	4611      	mov	r1, r2
 8001978:	4618      	mov	r0, r3
 800197a:	f001 fd63 	bl	8003444 <ssd1306_SetCursor>
	ssd1306_WriteString("DR:", *TEXT_FONT, White);
 800197e:	4b66      	ldr	r3, [pc, #408]	; (8001b18 <update_+0x250>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2201      	movs	r2, #1
 8001984:	9200      	str	r2, [sp, #0]
 8001986:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001988:	4864      	ldr	r0, [pc, #400]	; (8001b1c <update_+0x254>)
 800198a:	f001 fd35 	bl	80033f8 <ssd1306_WriteString>
	ssd1306_SetCursor(DR_VAL_X, DR_VAL_Y);
 800198e:	231e      	movs	r3, #30
 8001990:	b2db      	uxtb	r3, r3
 8001992:	221a      	movs	r2, #26
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f001 fd53 	bl	8003444 <ssd1306_SetCursor>
	//ssd1306_WriteInt((int)adc_get_vout(&task.adcDoseRate) * 1e+6, *TEXT_FONT, White);
	ssd1306_WriteInt(adc_get_cnt(&task.adcDoseRate), *TEXT_FONT, White);
 800199e:	485a      	ldr	r0, [pc, #360]	; (8001b08 <update_+0x240>)
 80019a0:	f7ff fa96 	bl	8000ed0 <adc_get_cnt>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4618      	mov	r0, r3
 80019a8:	4b5b      	ldr	r3, [pc, #364]	; (8001b18 <update_+0x250>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2201      	movs	r2, #1
 80019ae:	9200      	str	r2, [sp, #0]
 80019b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019b2:	f001 fd91 	bl	80034d8 <ssd1306_WriteInt>
	ssd1306_SetCursor(DR_UNIT_X, DR_UNIT_Y);
 80019b6:	235a      	movs	r3, #90	; 0x5a
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	221a      	movs	r2, #26
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f001 fd3f 	bl	8003444 <ssd1306_SetCursor>
	ssd1306_WriteString("uV", *TEXT_FONT, White);
 80019c6:	4b54      	ldr	r3, [pc, #336]	; (8001b18 <update_+0x250>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2201      	movs	r2, #1
 80019cc:	9200      	str	r2, [sp, #0]
 80019ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019d0:	4853      	ldr	r0, [pc, #332]	; (8001b20 <update_+0x258>)
 80019d2:	f001 fd11 	bl	80033f8 <ssd1306_WriteString>

	// HV
	ssd1306_SetCursor(HV_DESC_X, HV_DESC_Y);
 80019d6:	2303      	movs	r3, #3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2228      	movs	r2, #40	; 0x28
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	4611      	mov	r1, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f001 fd2f 	bl	8003444 <ssd1306_SetCursor>
	ssd1306_WriteString("HV:", *TEXT_FONT, White);
 80019e6:	4b4c      	ldr	r3, [pc, #304]	; (8001b18 <update_+0x250>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2201      	movs	r2, #1
 80019ec:	9200      	str	r2, [sp, #0]
 80019ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019f0:	484c      	ldr	r0, [pc, #304]	; (8001b24 <update_+0x25c>)
 80019f2:	f001 fd01 	bl	80033f8 <ssd1306_WriteString>
	ssd1306_SetCursor(HV_VAL_X, HV_VAL_Y);
 80019f6:	231e      	movs	r3, #30
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2228      	movs	r2, #40	; 0x28
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f001 fd1f 	bl	8003444 <ssd1306_SetCursor>
	ssd1306_WriteInt((int)(hv_get_output_voltage_V(&task.hv_system)), *TEXT_FONT, White);
 8001a06:	4848      	ldr	r0, [pc, #288]	; (8001b28 <update_+0x260>)
 8001a08:	f000 fd5c 	bl	80024c4 <hv_get_output_voltage_V>
 8001a0c:	ec53 2b10 	vmov	r2, r3, d0
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	f7ff f844 	bl	8000aa0 <__aeabi_d2iz>
 8001a18:	4b3f      	ldr	r3, [pc, #252]	; (8001b18 <update_+0x250>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	9200      	str	r2, [sp, #0]
 8001a20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a22:	f001 fd59 	bl	80034d8 <ssd1306_WriteInt>
	//ssd1306_WriteInt(adc_get_cnt(&task.adcHV), *TEXT_FONT, White);
	ssd1306_SetCursor(HV_UNIT_X, HV_UNIT_Y);
 8001a26:	235a      	movs	r3, #90	; 0x5a
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2228      	movs	r2, #40	; 0x28
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f001 fd07 	bl	8003444 <ssd1306_SetCursor>
	ssd1306_WriteString("V", *TEXT_FONT, White);
 8001a36:	4b38      	ldr	r3, [pc, #224]	; (8001b18 <update_+0x250>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	9200      	str	r2, [sp, #0]
 8001a3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a40:	483a      	ldr	r0, [pc, #232]	; (8001b2c <update_+0x264>)
 8001a42:	f001 fcd9 	bl	80033f8 <ssd1306_WriteString>

	// Pressure
	ssd1306_SetCursor(PRESS_DESC_X, PRESS_DESC_Y);
 8001a46:	2303      	movs	r3, #3
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2236      	movs	r2, #54	; 0x36
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f001 fcf7 	bl	8003444 <ssd1306_SetCursor>
	ssd1306_WriteString("PR:", *TEXT_FONT, White);
 8001a56:	4b30      	ldr	r3, [pc, #192]	; (8001b18 <update_+0x250>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	9200      	str	r2, [sp, #0]
 8001a5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a60:	4833      	ldr	r0, [pc, #204]	; (8001b30 <update_+0x268>)
 8001a62:	f001 fcc9 	bl	80033f8 <ssd1306_WriteString>
	ssd1306_SetCursor(PRESS_VAL_X, PRESS_VAL_Y);
 8001a66:	231e      	movs	r3, #30
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2236      	movs	r2, #54	; 0x36
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f001 fce7 	bl	8003444 <ssd1306_SetCursor>
	//ssd1306_WriteInt(adc_get_vout(&task.adcPressure) * task.pressureCoeff, *TEXT_FONT, White);
	ssd1306_WriteInt(adc_get_cnt(&task.adcPressure), *TEXT_FONT, White);
 8001a76:	4826      	ldr	r0, [pc, #152]	; (8001b10 <update_+0x248>)
 8001a78:	f7ff fa2a 	bl	8000ed0 <adc_get_cnt>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	4b25      	ldr	r3, [pc, #148]	; (8001b18 <update_+0x250>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2201      	movs	r2, #1
 8001a86:	9200      	str	r2, [sp, #0]
 8001a88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a8a:	f001 fd25 	bl	80034d8 <ssd1306_WriteInt>
	ssd1306_SetCursor(PRESS_UNIT_X, PRESS_UNIT_Y);
 8001a8e:	235a      	movs	r3, #90	; 0x5a
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2236      	movs	r2, #54	; 0x36
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	4611      	mov	r1, r2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f001 fcd3 	bl	8003444 <ssd1306_SetCursor>
	ssd1306_WriteString("Pa", *TEXT_FONT, White);
 8001a9e:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <update_+0x250>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	9200      	str	r2, [sp, #0]
 8001aa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aa8:	4822      	ldr	r0, [pc, #136]	; (8001b34 <update_+0x26c>)
 8001aaa:	f001 fca5 	bl	80033f8 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8001aae:	f001 fb95 	bl	80031dc <ssd1306_UpdateScreen>
	/*if(self->data->adcDRAverValuePrev != self->data->adcDRAverValueCurr)
	{
	} */


	self->data->adcDRValuePrev = self->data->adcDRValueCurr;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6851      	ldr	r1, [r2, #4]
 8001aba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001abe:	e9c1 2304 	strd	r2, r3, [r1, #16]
	self->data->adcHVValuePrev = self->data->adcHVValueCurr;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6851      	ldr	r1, [r2, #4]
 8001aca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001ace:	e9c1 2308 	strd	r2, r3, [r1, #32]
	self->data->adcPRValuePrev = self->data->adcPRValueCurr;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6851      	ldr	r1, [r2, #4]
 8001ada:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001ade:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	self->data->adcDRAverValuePrev = self->data->adcDRAverValueCurr;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6851      	ldr	r1, [r2, #4]
 8001aea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001aee:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001afc:	f3af 8000 	nop.w
 8001b00:	00000000 	.word	0x00000000
 8001b04:	412e8480 	.word	0x412e8480
 8001b08:	200004b4 	.word	0x200004b4
 8001b0c:	200004bc 	.word	0x200004bc
 8001b10:	200004c4 	.word	0x200004c4
 8001b14:	200004d0 	.word	0x200004d0
 8001b18:	2000001c 	.word	0x2000001c
 8001b1c:	08008f18 	.word	0x08008f18
 8001b20:	08008f1c 	.word	0x08008f1c
 8001b24:	08008f20 	.word	0x08008f20
 8001b28:	20000550 	.word	0x20000550
 8001b2c:	08008f24 	.word	0x08008f24
 8001b30:	08008f28 	.word	0x08008f28
 8001b34:	08008f2c 	.word	0x08008f2c

08001b38 <draw_>:

static void draw_(screen_t* self)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af02      	add	r7, sp, #8
 8001b3e:	6078      	str	r0, [r7, #4]
	ssd1306_Fill(Black);
 8001b40:	2000      	movs	r0, #0
 8001b42:	f001 fb33 	bl	80031ac <ssd1306_Fill>
	ssd1306_SetCursor(3, 3);
 8001b46:	2103      	movs	r1, #3
 8001b48:	2003      	movs	r0, #3
 8001b4a:	f001 fc7b 	bl	8003444 <ssd1306_SetCursor>
	ssd1306_WriteString("Loading...", *TEXT_FONT, White);
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <draw_+0x34>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2201      	movs	r2, #1
 8001b54:	9200      	str	r2, [sp, #0]
 8001b56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b58:	4805      	ldr	r0, [pc, #20]	; (8001b70 <draw_+0x38>)
 8001b5a:	f001 fc4d 	bl	80033f8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001b5e:	f001 fb3d 	bl	80031dc <ssd1306_UpdateScreen>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	2000001c 	.word	0x2000001c
 8001b70:	08008f30 	.word	0x08008f30

08001b74 <reg_keyboard_cbs_>:

static void reg_keyboard_cbs_(screen_t* self, keyboard_t* keyboard)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
	if(keyboard)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <reg_keyboard_cbs_+0x16>
	{
		keyboard_reset_cbs(keyboard);
 8001b84:	6838      	ldr	r0, [r7, #0]
 8001b86:	f000 fdba 	bl	80026fe <keyboard_reset_cbs>
	}
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <screen_1_instance>:
	&methods,
	&data
};

screen_t* screen_1_instance()
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	if(!initialized)
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <screen_1_instance+0x20>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d105      	bne.n	8001bac <screen_1_instance+0x18>
	{
		screen_init(&single_screen);
 8001ba0:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <screen_1_instance+0x24>)
 8001ba2:	f7ff fe38 	bl	8001816 <screen_init>
		initialized = 1;
 8001ba6:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <screen_1_instance+0x20>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	701a      	strb	r2, [r3, #0]
	}
	return &single_screen;
 8001bac:	4b02      	ldr	r3, [pc, #8]	; (8001bb8 <screen_1_instance+0x24>)
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200000fa 	.word	0x200000fa
 8001bb8:	20000030 	.word	0x20000030
 8001bbc:	00000000 	.word	0x00000000

08001bc0 <general_task_init>:
#define TIMER_FREQUENCY (uint32_t)84000000

//extern TIM_HandleTypeDef htim7;

void general_task_init(general_task_t* self)
{
 8001bc0:	b5b0      	push	{r4, r5, r7, lr}
 8001bc2:	b0a0      	sub	sp, #128	; 0x80
 8001bc4:	af04      	add	r7, sp, #16
 8001bc6:	60f8      	str	r0, [r7, #12]
	HAL_Delay(100);
 8001bc8:	2064      	movs	r0, #100	; 0x64
 8001bca:	f003 fb47 	bl	800525c <HAL_Delay>
	memset(self, 0, sizeof(*self));
 8001bce:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f006 f971 	bl	8007ebc <memset>

	self->loopPeriod_ms = 50;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2232      	movs	r2, #50	; 0x32
 8001bde:	801a      	strh	r2, [r3, #0]
	self->freqIT = TIMER_FREQUENCY / (adctim->Init.Period + 1) / (adctim->Init.Prescaler + 1);
 8001be0:	4bd7      	ldr	r3, [pc, #860]	; (8001f40 <general_task_init+0x380>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	3301      	adds	r3, #1
 8001be8:	4ad6      	ldr	r2, [pc, #856]	; (8001f44 <general_task_init+0x384>)
 8001bea:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bee:	4bd4      	ldr	r3, [pc, #848]	; (8001f40 <general_task_init+0x380>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	805a      	strh	r2, [r3, #2]
	self->adcNoCnt = 0;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8

	self->pressureCoeff = 1e+6; // Pa per volt
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4acf      	ldr	r2, [pc, #828]	; (8001f48 <general_task_init+0x388>)
 8001c0c:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

	/* ADC */
	uint32_t adcWaitCycles = 20;
 8001c10:	2314      	movs	r3, #20
 8001c12:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint8_t MR_word, BUF, UnB, BO, MD; // mode register options
	uint8_t FR_word, FS, CDIV; // filter register options
	double Vref_dose = 0;
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	f04f 0300 	mov.w	r3, #0
 8001c1c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double Vref_hv = 0;
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	f04f 0300 	mov.w	r3, #0
 8001c28:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double Vref_press = 0;
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	/* ADC Dose Rate - bipolar */
	// Filter register mode
	FR_word = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FS = 0b011;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	CDIV = 0b00;
 8001c44:	2300      	movs	r3, #0
 8001c46:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	FR_word = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FR_word += (FS << 0);
 8001c50:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001c54:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001c58:	4413      	add	r3, r2
 8001c5a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FR_word += (CDIV << 4);
 8001c5e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c62:	011b      	lsls	r3, r3, #4
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	// Mode register word
	BUF 	= 0b1;
 8001c70:	2301      	movs	r3, #1
 8001c72:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	UnB 	= 0b0; // 0 - bipolar, 1 - unipolar
 8001c76:	2300      	movs	r3, #0
 8001c78:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	BO 		= 0b0; // 0 - disable / 1 - enable burnout current
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	MD 		= 0b00; // single - 0b10, cont - 0b00
 8001c82:	2300      	movs	r3, #0
 8001c84:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	MR_word = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (BUF << 1);
 8001c8e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (UnB << 2);
 8001ca0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001cac:	4413      	add	r3, r2
 8001cae:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (BO << 3);
 8001cb2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (MD << 6);
 8001cc4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001cc8:	019b      	lsls	r3, r3, #6
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

	Vref_dose = 2.5;
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	4b9c      	ldr	r3, [pc, #624]	; (8001f4c <general_task_init+0x38c>)
 8001cdc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	self->adcDoseRate = adc_AD7791_create(&hspi3, ADC_DOSE_SPI_CS_GPIO_Port, ADC_DOSE_SPI_CS_Pin, Vref_dose, FR_word, MR_word, adcWaitCycles);
 8001ce0:	68fc      	ldr	r4, [r7, #12]
 8001ce2:	4638      	mov	r0, r7
 8001ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ce6:	9302      	str	r3, [sp, #8]
 8001ce8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001cec:	9301      	str	r3, [sp, #4]
 8001cee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001cf8:	2304      	movs	r3, #4
 8001cfa:	4a95      	ldr	r2, [pc, #596]	; (8001f50 <general_task_init+0x390>)
 8001cfc:	4995      	ldr	r1, [pc, #596]	; (8001f54 <general_task_init+0x394>)
 8001cfe:	f7ff fa4b 	bl	8001198 <adc_AD7791_create>
 8001d02:	f504 73de 	add.w	r3, r4, #444	; 0x1bc
 8001d06:	463a      	mov	r2, r7
 8001d08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d0c:	e883 0003 	stmia.w	r3, {r0, r1}
	adc_init(&self->adcDoseRate);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff f8be 	bl	8000e98 <adc_init>
	HAL_Delay(5);
 8001d1c:	2005      	movs	r0, #5
 8001d1e:	f003 fa9d 	bl	800525c <HAL_Delay>

	/* ADC HV - bipolar */
	// Filter register mode
	FR_word = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FS = 0b011;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	CDIV = 0b00;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	FR_word = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FR_word += (FS << 0);
 8001d3a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001d3e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001d42:	4413      	add	r3, r2
 8001d44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FR_word += (CDIV << 4);
 8001d48:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d4c:	011b      	lsls	r3, r3, #4
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001d54:	4413      	add	r3, r2
 8001d56:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	// Mode register word
	BUF 	= 0b1;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	UnB 	= 0b0; // 0 - bipolar, 1 - unipolar
 8001d60:	2300      	movs	r3, #0
 8001d62:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	BO 		= 0b0; // 0 - disable / 1 - enable burnout current
 8001d66:	2300      	movs	r3, #0
 8001d68:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	MD 		= 0b00; // single - 0b10, cont - 0b00
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	MR_word = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (BUF << 1);
 8001d78:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001d84:	4413      	add	r3, r2
 8001d86:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (UnB << 2);
 8001d8a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001d96:	4413      	add	r3, r2
 8001d98:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (BO << 3);
 8001d9c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001da8:	4413      	add	r3, r2
 8001daa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (MD << 6);
 8001dae:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001db2:	019b      	lsls	r3, r3, #6
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001dba:	4413      	add	r3, r2
 8001dbc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

	Vref_hv = 2.5;
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	4b61      	ldr	r3, [pc, #388]	; (8001f4c <general_task_init+0x38c>)
 8001dc6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	self->adcHV = adc_AD7791_create(&hspi1, ADC_HV_SPI_CS_GPIO_Port, ADC_HV_SPI_CS_Pin, Vref_hv, FR_word, MR_word, adcWaitCycles + 10);
 8001dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dcc:	330a      	adds	r3, #10
 8001dce:	68fc      	ldr	r4, [r7, #12]
 8001dd0:	4638      	mov	r0, r7
 8001dd2:	9302      	str	r3, [sp, #8]
 8001dd4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 8001de4:	2308      	movs	r3, #8
 8001de6:	4a5a      	ldr	r2, [pc, #360]	; (8001f50 <general_task_init+0x390>)
 8001de8:	495b      	ldr	r1, [pc, #364]	; (8001f58 <general_task_init+0x398>)
 8001dea:	f7ff f9d5 	bl	8001198 <adc_AD7791_create>
 8001dee:	f504 73e2 	add.w	r3, r4, #452	; 0x1c4
 8001df2:	463a      	mov	r2, r7
 8001df4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001df8:	e883 0003 	stmia.w	r3, {r0, r1}
	adc_init(&self->adcHV);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff f848 	bl	8000e98 <adc_init>
	HAL_Delay(5);
 8001e08:	2005      	movs	r0, #5
 8001e0a:	f003 fa27 	bl	800525c <HAL_Delay>

	/* ADC Pressure - unipolar */
	// Filter register mode
	FR_word = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FS = 0b011;
 8001e14:	2303      	movs	r3, #3
 8001e16:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	CDIV = 0b00;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	FR_word = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FR_word += (FS << 0);
 8001e26:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001e2a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001e2e:	4413      	add	r3, r2
 8001e30:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FR_word += (CDIV << 4);
 8001e34:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e40:	4413      	add	r3, r2
 8001e42:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	// Mode register word
	BUF 	= 0b1;
 8001e46:	2301      	movs	r3, #1
 8001e48:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	UnB 	= 0b1; // 0 - bipolar, 1 - unipolar
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	BO 		= 0b0; // 0 - disable / 1 - enable burnout current
 8001e52:	2300      	movs	r3, #0
 8001e54:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	MD 		= 0b00; // single - 0b10, cont - 0b00
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	MR_word = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (BUF << 1);
 8001e64:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001e70:	4413      	add	r3, r2
 8001e72:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (UnB << 2);
 8001e76:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001e82:	4413      	add	r3, r2
 8001e84:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (BO << 3);
 8001e88:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001e94:	4413      	add	r3, r2
 8001e96:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (MD << 6);
 8001e9a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001e9e:	019b      	lsls	r3, r3, #6
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

	Vref_press = 2.5;
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	4b26      	ldr	r3, [pc, #152]	; (8001f4c <general_task_init+0x38c>)
 8001eb2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	self->adcPressure = adc_AD7791_create(&hspi1, ADC_PRESS_SPI_CS_GPIO_Port, ADC_PRESS_SPI_CS_Pin, Vref_press, FR_word, MR_word, adcWaitCycles + 20);
 8001eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eb8:	3314      	adds	r3, #20
 8001eba:	68fc      	ldr	r4, [r7, #12]
 8001ebc:	4638      	mov	r0, r7
 8001ebe:	9302      	str	r3, [sp, #8]
 8001ec0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001ec4:	9301      	str	r3, [sp, #4]
 8001ec6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	4a1f      	ldr	r2, [pc, #124]	; (8001f50 <general_task_init+0x390>)
 8001ed4:	4920      	ldr	r1, [pc, #128]	; (8001f58 <general_task_init+0x398>)
 8001ed6:	f7ff f95f 	bl	8001198 <adc_AD7791_create>
 8001eda:	f504 73e6 	add.w	r3, r4, #460	; 0x1cc
 8001ede:	463a      	mov	r2, r7
 8001ee0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ee4:	e883 0003 	stmia.w	r3, {r0, r1}
	adc_init(&self->adcPressure);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe ffd2 	bl	8000e98 <adc_init>
	HAL_Delay(5);
 8001ef4:	2005      	movs	r0, #5
 8001ef6:	f003 f9b1 	bl	800525c <HAL_Delay>

	/* ADC Dose Rate monitor */
	adc_monitor_init(&self->adcDRMonitor, &self->adcDoseRate, USR_ADC_TIM_IRQn);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f06:	2236      	movs	r2, #54	; 0x36
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f7ff f9f8 	bl	80012fe <adc_monitor_init>

	/* ADC HV monitor */
	adc_monitor_init(&self->adcHVMonitor, &self->adcHV, USR_ADC_TIM_IRQn);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f503 7000 	add.w	r0, r3, #512	; 0x200
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8001f1a:	2236      	movs	r2, #54	; 0x36
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f7ff f9ee 	bl	80012fe <adc_monitor_init>

	/* ADC Pressure monitor */
	adc_monitor_init(&self->adcPRMonitor, &self->adcPressure, USR_ADC_TIM_IRQn);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f503 700a 	add.w	r0, r3, #552	; 0x228
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8001f2e:	2236      	movs	r2, #54	; 0x36
 8001f30:	4619      	mov	r1, r3
 8001f32:	f7ff f9e4 	bl	80012fe <adc_monitor_init>

	/* DAC HV Input */
	//self->dacInputHV = dac_emulator_create(); // emulator
	self->dacInputHV = dac_MCP4811EP_create(&hspi2,
 8001f36:	68fc      	ldr	r4, [r7, #12]
 8001f38:	4638      	mov	r0, r7
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e00e      	b.n	8001f5c <general_task_init+0x39c>
 8001f3e:	bf00      	nop
 8001f40:	20000038 	.word	0x20000038
 8001f44:	0501bd00 	.word	0x0501bd00
 8001f48:	49742400 	.word	0x49742400
 8001f4c:	40040000 	.word	0x40040000
 8001f50:	40020000 	.word	0x40020000
 8001f54:	20000254 	.word	0x20000254
 8001f58:	200001a4 	.word	0x200001a4
 8001f5c:	9303      	str	r3, [sp, #12]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	9302      	str	r3, [sp, #8]
 8001f62:	2300      	movs	r3, #0
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	2300      	movs	r3, #0
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	4a52      	ldr	r2, [pc, #328]	; (80020b8 <general_task_init+0x4f8>)
 8001f6e:	4953      	ldr	r1, [pc, #332]	; (80020bc <general_task_init+0x4fc>)
 8001f70:	f7ff fbb6 	bl	80016e0 <dac_MCP4811EP_create>
 8001f74:	f504 7314 	add.w	r3, r4, #592	; 0x250
 8001f78:	463a      	mov	r2, r7
 8001f7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f7e:	e883 0003 	stmia.w	r3, {r0, r1}
			DAC_SPI_CS_GPIO_Port, DAC_SPI_CS_Pin,
			NULL, 0,
			NULL, 0
			); // real

	dac_init(&self->dacInputHV);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fafb 	bl	8001584 <dac_init>

	/* HV System */
	hv_init(&self->hv_system,
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f503 7016 	add.w	r0, r3, #600	; 0x258
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f503 7114 	add.w	r1, r3, #592	; 0x250
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f503 72e2 	add.w	r2, r3, #452	; 0x1c4
 8001fa0:	2308      	movs	r3, #8
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	ed9f 2b3e 	vldr	d2, [pc, #248]	; 80020a0 <general_task_init+0x4e0>
 8001fa8:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 80020a8 <general_task_init+0x4e8>
 8001fac:	ed9f 0b40 	vldr	d0, [pc, #256]	; 80020b0 <general_task_init+0x4f0>
 8001fb0:	4b43      	ldr	r3, [pc, #268]	; (80020c0 <general_task_init+0x500>)
 8001fb2:	f000 f9f1 	bl	8002398 <hv_init>
			500. / 1024, // Vmax = 500, 922  = 1024 * 0.9 // 922
 			0.535 / 500, //1. / 233.645, // 43k/10M //0.002,
			500
			);

	hv_set_output_voltage_adc_offset(&self->hv_system, Vref_hv / 2);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f503 7416 	add.w	r4, r3, #600	; 0x258
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fc4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001fc8:	f7fe fbe4 	bl	8000794 <__aeabi_ddiv>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	ec43 2b17 	vmov	d7, r2, r3
 8001fd4:	eeb0 0a47 	vmov.f32	s0, s14
 8001fd8:	eef0 0a67 	vmov.f32	s1, s15
 8001fdc:	4620      	mov	r0, r4
 8001fde:	f000 fa95 	bl	800250c <hv_set_output_voltage_adc_offset>

	/* Select range pin */
	set_adc_dose_range_select_pin(SENSOR_RANGE_SELECT_GPIO_Port, SENSOR_RANGE_SELECT_Pin);
 8001fe2:	2104      	movs	r1, #4
 8001fe4:	4836      	ldr	r0, [pc, #216]	; (80020c0 <general_task_init+0x500>)
 8001fe6:	f7ff fa8b 	bl	8001500 <set_adc_dose_range_select_pin>
	select_broad_adc_dose_range();
 8001fea:	f7ff fa9f 	bl	800152c <select_broad_adc_dose_range>


	/* SD Card*/

	HAL_Delay(5);
 8001fee:	2005      	movs	r0, #5
 8001ff0:	f003 f934 	bl	800525c <HAL_Delay>
	/* Ethernet */
	wiz_NetInfo gWIZNETINFO = {
 8001ff4:	4b33      	ldr	r3, [pc, #204]	; (80020c4 <general_task_init+0x504>)
 8001ff6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001ffa:	461d      	mov	r5, r3
 8001ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002000:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002004:	6020      	str	r0, [r4, #0]
 8002006:	3404      	adds	r4, #4
 8002008:	8021      	strh	r1, [r4, #0]
 800200a:	3402      	adds	r4, #2
 800200c:	0c0b      	lsrs	r3, r1, #16
 800200e:	7023      	strb	r3, [r4, #0]
			.gw		= {169, 254, 206, 240},
			.dns 	= {0, 0, 0, 0},
			.dhcp 	= NETINFO_STATIC
	};

	W5500_SetAddress(gWIZNETINFO);
 8002010:	466b      	mov	r3, sp
 8002012:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002016:	e892 0003 	ldmia.w	r2, {r0, r1}
 800201a:	6018      	str	r0, [r3, #0]
 800201c:	3304      	adds	r3, #4
 800201e:	8019      	strh	r1, [r3, #0]
 8002020:	3302      	adds	r3, #2
 8002022:	0c0a      	lsrs	r2, r1, #16
 8002024:	701a      	strb	r2, [r3, #0]
 8002026:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800202a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800202c:	f003 f816 	bl	800505c <W5500_SetAddress>
	W5500_Reboot();
 8002030:	f003 f830 	bl	8005094 <W5500_Reboot>

	/* TCP server sockets */
	tcp_output_stream_init_data_t tcpOutputInit;
	tcpOutputInit.sn = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	f887 3020 	strb.w	r3, [r7, #32]
	tcpOutputInit.port = 11151;
 800203a:	f642 338f 	movw	r3, #11151	; 0x2b8f
 800203e:	847b      	strh	r3, [r7, #34]	; 0x22
	tcpOutputInit.flag = SF_IO_NONBLOCK;
 8002040:	2301      	movs	r3, #1
 8002042:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	tcpOutputInit.hinput = &self->tcpInput;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	33a0      	adds	r3, #160	; 0xa0
 800204a:	62bb      	str	r3, [r7, #40]	; 0x28
	tcpOutputInit.closeSocketCounterMax = 50;
 800204c:	2332      	movs	r3, #50	; 0x32
 800204e:	62fb      	str	r3, [r7, #44]	; 0x2c

	tcp_output_stream_init(&self->tcpOutput, tcpOutputInit);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	1d18      	adds	r0, r3, #4
 8002054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	f107 0320 	add.w	r3, r7, #32
 800205c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800205e:	f001 fc6b 	bl	8003938 <tcp_output_stream_init>

	tcp_input_stream_init_data_t tcpInputInit;
	tcpInputInit.sn = 1;
 8002062:	2301      	movs	r3, #1
 8002064:	753b      	strb	r3, [r7, #20]
	tcpInputInit.port = 11152;
 8002066:	f642 3390 	movw	r3, #11152	; 0x2b90
 800206a:	82fb      	strh	r3, [r7, #22]
	tcpInputInit.flag = SF_IO_NONBLOCK;
 800206c:	2301      	movs	r3, #1
 800206e:	763b      	strb	r3, [r7, #24]
	tcpInputInit.w5500RebootCounterMax = 50;
 8002070:	2332      	movs	r3, #50	; 0x32
 8002072:	61fb      	str	r3, [r7, #28]
	tcp_input_stream_init(&self->tcpInput, tcpInputInit);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002080:	f001 fb12 	bl	80036a8 <tcp_input_stream_init>

	self->cycleCounter = 0;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	self->cycleCounterMax = self->loopPeriod_ms;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
}
 8002098:	bf00      	nop
 800209a:	3770      	adds	r7, #112	; 0x70
 800209c:	46bd      	mov	sp, r7
 800209e:	bdb0      	pop	{r4, r5, r7, pc}
 80020a0:	00000000 	.word	0x00000000
 80020a4:	407f4000 	.word	0x407f4000
 80020a8:	c06e19b9 	.word	0xc06e19b9
 80020ac:	3f5187e7 	.word	0x3f5187e7
 80020b0:	00000000 	.word	0x00000000
 80020b4:	3fdf4000 	.word	0x3fdf4000
 80020b8:	40020c00 	.word	0x40020c00
 80020bc:	200001fc 	.word	0x200001fc
 80020c0:	40020800 	.word	0x40020800
 80020c4:	08008f3c 	.word	0x08008f3c

080020c8 <general_task_setup>:

void general_task_setup(general_task_t* self)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
	//ILI9341_Init();

	// init display
	ssd1306_Init();
 80020d0:	f001 f802 	bl	80030d8 <ssd1306_Init>
	general_task_switch_screen(self, screen_1_instance());
 80020d4:	f7ff fd5e 	bl	8001b94 <screen_1_instance>
 80020d8:	4603      	mov	r3, r0
 80020da:	4619      	mov	r1, r3
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f94a 	bl	8002376 <general_task_switch_screen>
	tcp_input_stream_enable_handler(&self->tcpInput);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	33a0      	adds	r3, #160	; 0xa0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f001 fb67 	bl	80037ba <tcp_input_stream_enable_handler>
	/* HV ADC Start Calibration (offset measurement) */
	//adc_monitor_start_measurement(&self->adcHVMonitor, self->freqIT * 2 / 3);
}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	0000      	movs	r0, r0
	...

080020f8 <general_task_loop>:

void general_task_loop(general_task_t* self)
{
 80020f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
	keyboard_routine(&self->keyboard);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	33f4      	adds	r3, #244	; 0xf4
 8002106:	4618      	mov	r0, r3
 8002108:	f000 fad4 	bl	80026b4 <keyboard_routine>
	if(!self->cycleCounter)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 8002112:	2b00      	cmp	r3, #0
 8002114:	f040 80c5 	bne.w	80022a2 <general_task_loop+0x1aa>
	{
		self->cycleCounter = self->cycleCounterMax;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f8d3 22ac 	ldr.w	r2, [r3, #684]	; 0x2ac
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8

		// Output message
		HAL_NVIC_DisableIRQ(USR_ADC_TIM_IRQn);
 8002124:	2036      	movs	r0, #54	; 0x36
 8002126:	f003 f9e6 	bl	80054f6 <HAL_NVIC_DisableIRQ>
		tx_message_set_adc_dr_uV(&self->txMessage, (int32_t)(adc_get_vout(&self->adcDoseRate) * 1e+6));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fed8 	bl	8000eec <adc_get_vout>
 800213c:	ec51 0b10 	vmov	r0, r1, d0
 8002140:	a360      	add	r3, pc, #384	; (adr r3, 80022c4 <general_task_loop+0x1cc>)
 8002142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002146:	f7fe f9fb 	bl	8000540 <__aeabi_dmul>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4610      	mov	r0, r2
 8002150:	4619      	mov	r1, r3
 8002152:	f7fe fca5 	bl	8000aa0 <__aeabi_d2iz>
 8002156:	4603      	mov	r3, r0
 8002158:	4619      	mov	r1, r3
 800215a:	4620      	mov	r0, r4
 800215c:	f001 fd23 	bl	8003ba6 <tx_message_set_adc_dr_uV>
		tx_message_set_adc_dr_average_uV(&self->txMessage, (int32_t)(adc_monitor_get_average_signal_value(&self->adcDRMonitor) * 1e+6));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff f99c 	bl	80014aa <adc_monitor_get_average_signal_value>
 8002172:	ec51 0b10 	vmov	r0, r1, d0
 8002176:	a353      	add	r3, pc, #332	; (adr r3, 80022c4 <general_task_loop+0x1cc>)
 8002178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217c:	f7fe f9e0 	bl	8000540 <__aeabi_dmul>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4610      	mov	r0, r2
 8002186:	4619      	mov	r1, r3
 8002188:	f7fe fc8a 	bl	8000aa0 <__aeabi_d2iz>
 800218c:	4603      	mov	r3, r0
 800218e:	4619      	mov	r1, r3
 8002190:	4620      	mov	r0, r4
 8002192:	f001 fd17 	bl	8003bc4 <tx_message_set_adc_dr_average_uV>
		tx_message_set_hv_out_mV(&self->txMessage, (int32_t)(hv_get_output_voltage_V(&self->hv_system) * 1e+3)); // hv offset!!!
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f98e 	bl	80024c4 <hv_get_output_voltage_V>
 80021a8:	ec51 0b10 	vmov	r0, r1, d0
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	4b43      	ldr	r3, [pc, #268]	; (80022c0 <general_task_loop+0x1c8>)
 80021b2:	f7fe f9c5 	bl	8000540 <__aeabi_dmul>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4610      	mov	r0, r2
 80021bc:	4619      	mov	r1, r3
 80021be:	f7fe fc6f 	bl	8000aa0 <__aeabi_d2iz>
 80021c2:	4603      	mov	r3, r0
 80021c4:	4619      	mov	r1, r3
 80021c6:	4620      	mov	r0, r4
 80021c8:	f001 fd0b 	bl	8003be2 <tx_message_set_hv_out_mV>
		tx_message_set_press_out_Pa(&self->txMessage, adc_get_vout(&self->adcPressure) * self->pressureCoeff);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe fe87 	bl	8000eec <adc_get_vout>
 80021de:	ec59 8b10 	vmov	r8, r9, d0
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe f951 	bl	8000490 <__aeabi_f2d>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4640      	mov	r0, r8
 80021f4:	4649      	mov	r1, r9
 80021f6:	f7fe f9a3 	bl	8000540 <__aeabi_dmul>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4610      	mov	r0, r2
 8002200:	4619      	mov	r1, r3
 8002202:	f7fe fc4d 	bl	8000aa0 <__aeabi_d2iz>
 8002206:	4603      	mov	r3, r0
 8002208:	4619      	mov	r1, r3
 800220a:	4620      	mov	r0, r4
 800220c:	f001 fcf8 	bl	8003c00 <tx_message_set_press_out_Pa>
		tx_message_set_adc_dr_measure_state(&self->txMessage, adc_monitor_get_measurement_state(&self->adcDRMonitor));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff f962 	bl	80014e6 <adc_monitor_get_measurement_state>
 8002222:	4603      	mov	r3, r0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	4619      	mov	r1, r3
 8002228:	4620      	mov	r0, r4
 800222a:	f001 fcf8 	bl	8003c1e <tx_message_set_adc_dr_measure_state>
		tx_message_set_adc_dr_measure_time(&self->txMessage, adc_monitor_get_measurement_cycle_no(&self->adcDRMonitor) * 3 / self->freqIT );
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff f947 	bl	80014ce <adc_monitor_get_measurement_cycle_no>
 8002240:	4602      	mov	r2, r0
 8002242:	4613      	mov	r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4413      	add	r3, r2
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	8852      	ldrh	r2, [r2, #2]
 800224c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002250:	b29b      	uxth	r3, r3
 8002252:	4619      	mov	r1, r3
 8002254:	4620      	mov	r0, r4
 8002256:	f001 fcf2 	bl	8003c3e <tx_message_set_adc_dr_measure_time>
		HAL_NVIC_EnableIRQ(USR_ADC_TIM_IRQn);
 800225a:	2036      	movs	r0, #54	; 0x36
 800225c:	f003 f93d 	bl	80054da <HAL_NVIC_EnableIRQ>

		tcp_output_stream_set_message(&self->tcpOutput, tx_message_get(&self->txMessage), tx_message_size());
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	1d1c      	adds	r4, r3, #4
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	33dc      	adds	r3, #220	; 0xdc
 8002268:	4618      	mov	r0, r3
 800226a:	f001 fcf8 	bl	8003c5e <tx_message_get>
 800226e:	4605      	mov	r5, r0
 8002270:	f001 fd00 	bl	8003c74 <tx_message_size>
 8002274:	4603      	mov	r3, r0
 8002276:	b29b      	uxth	r3, r3
 8002278:	461a      	mov	r2, r3
 800227a:	4629      	mov	r1, r5
 800227c:	4620      	mov	r0, r4
 800227e:	f001 fb91 	bl	80039a4 <tcp_output_stream_set_message>
		tcp_output_stream_routine(&self->tcpOutput);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3304      	adds	r3, #4
 8002286:	4618      	mov	r0, r3
 8002288:	f001 fbb9 	bl	80039fe <tcp_output_stream_routine>

		// Input message
		tcp_input_stream_routine(&self->tcpInput);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	33a0      	adds	r3, #160	; 0xa0
 8002290:	4618      	mov	r0, r3
 8002292:	f001 fa4d 	bl	8003730 <tcp_input_stream_routine>

		// Update screen
		screen_update(self->currentScreen);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fad4 	bl	800184a <screen_update>

		// debug!!!
		//general_task_timer_interrupt(self);
	}

	self->cycleCounter--;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 80022a8:	1e5a      	subs	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	HAL_Delay(1);
 80022b0:	2001      	movs	r0, #1
 80022b2:	f002 ffd3 	bl	800525c <HAL_Delay>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022c0:	408f4000 	.word	0x408f4000
 80022c4:	00000000 	.word	0x00000000
 80022c8:	412e8480 	.word	0x412e8480

080022cc <general_task_timer_interrupt>:

void general_task_timer_interrupt(general_task_t* self)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
	switch(self->adcNoCnt)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d035      	beq.n	800234a <general_task_timer_interrupt+0x7e>
 80022de:	2b02      	cmp	r3, #2
 80022e0:	dc45      	bgt.n	800236e <general_task_timer_interrupt+0xa2>
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <general_task_timer_interrupt+0x20>
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d01a      	beq.n	8002320 <general_task_timer_interrupt+0x54>
		adc_update(&self->adcPressure, NULL);
		adc_monitor_update(&self->adcPRMonitor);
		self->adcNoCnt = 0;
		break;
	}
}
 80022ea:	e040      	b.n	800236e <general_task_timer_interrupt+0xa2>
		tx_message_increase_id(&self->txMessage);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	33dc      	adds	r3, #220	; 0xdc
 80022f0:	4618      	mov	r0, r3
 80022f2:	f001 fc45 	bl	8003b80 <tx_message_increase_id>
		adc_update(&self->adcDoseRate, NULL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80022fc:	2100      	movs	r1, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe fdd7 	bl	8000eb2 <adc_update>
		adc_monitor_update(&self->adcDRMonitor);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff f812 	bl	8001334 <adc_monitor_update>
		self->adcNoCnt++;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		break;
 800231e:	e026      	b.n	800236e <general_task_timer_interrupt+0xa2>
		adc_update(&self->adcHV, NULL);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8002326:	2100      	movs	r1, #0
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe fdc2 	bl	8000eb2 <adc_update>
		adc_monitor_update(&self->adcHVMonitor);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe fffd 	bl	8001334 <adc_monitor_update>
		self->adcNoCnt++;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		break;
 8002348:	e011      	b.n	800236e <general_task_timer_interrupt+0xa2>
		adc_update(&self->adcPressure, NULL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fdad 	bl	8000eb2 <adc_update>
		adc_monitor_update(&self->adcPRMonitor);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe ffe8 	bl	8001334 <adc_monitor_update>
		self->adcNoCnt = 0;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		break;
 800236c:	bf00      	nop
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <general_task_switch_screen>:


void general_task_switch_screen(general_task_t* self, screen_t* screen)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
	//screen_register_keyboard(screen, &self->keyboard);
	screen_draw(screen);
 8002380:	6838      	ldr	r0, [r7, #0]
 8002382:	f7ff fa55 	bl	8001830 <screen_draw>
	self->currentScreen = screen;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <hv_init>:
		uint16_t pinSelectHV,
		double VoutStep_V,
		double VoutGainADC,
		double VoutMax
		)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	; 0x28
 800239c:	af00      	add	r7, sp, #0
 800239e:	6278      	str	r0, [r7, #36]	; 0x24
 80023a0:	6239      	str	r1, [r7, #32]
 80023a2:	61fa      	str	r2, [r7, #28]
 80023a4:	61bb      	str	r3, [r7, #24]
 80023a6:	ed87 0b04 	vstr	d0, [r7, #16]
 80023aa:	ed87 1b02 	vstr	d1, [r7, #8]
 80023ae:	ed87 2b00 	vstr	d2, [r7]
	memset(self, 0, sizeof(*self));
 80023b2:	2230      	movs	r2, #48	; 0x30
 80023b4:	2100      	movs	r1, #0
 80023b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023b8:	f005 fd80 	bl	8007ebc <memset>
	self->inputDAC 		= inputDAC;
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	6a3a      	ldr	r2, [r7, #32]
 80023c0:	601a      	str	r2, [r3, #0]
	self->outputADC 	= outputADC;
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	69fa      	ldr	r2, [r7, #28]
 80023c6:	605a      	str	r2, [r3, #4]
	self->portSelectHV 	= portSelectHV;
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	609a      	str	r2, [r3, #8]
	self->pinSelectHV 	= pinSelectHV;
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80023d2:	819a      	strh	r2, [r3, #12]
	self->VoutStep_V 	= VoutStep_V;
 80023d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80023da:	e9c1 2304 	strd	r2, r3, [r1, #16]
	self->VoutGainADC 	= VoutGainADC;
 80023de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023e4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	self->VoutMax		= VoutMax;
 80023e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023ee:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	hv_select_positive_source(self);
 80023f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023f4:	f000 f821 	bl	800243a <hv_select_positive_source>
	hv_set_output_voltage_adc_offset(self, 0);
 80023f8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8002410 <hv_init+0x78>
 80023fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023fe:	f000 f885 	bl	800250c <hv_set_output_voltage_adc_offset>
}
 8002402:	bf00      	nop
 8002404:	3728      	adds	r7, #40	; 0x28
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	f3af 8000 	nop.w
	...

08002418 <hv_select_negative_source>:

void hv_select_negative_source(high_voltage_system_t* self)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(self->portSelectHV, self->pinSelectHV, HV_NEGATIVE_SOURCE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6898      	ldr	r0, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	899b      	ldrh	r3, [r3, #12]
 8002428:	2201      	movs	r2, #1
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	4619      	mov	r1, r3
 800242e:	f003 fa31 	bl	8005894 <HAL_GPIO_WritePin>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <hv_select_positive_source>:

void hv_select_positive_source(high_voltage_system_t* self)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(self->portSelectHV, self->pinSelectHV, HV_POSITIVE_SOURCE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6898      	ldr	r0, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	899b      	ldrh	r3, [r3, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	4619      	mov	r1, r3
 8002450:	f003 fa20 	bl	8005894 <HAL_GPIO_WritePin>
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <hv_set_abs_output_voltage_V>:

void hv_set_abs_output_voltage_V(high_voltage_system_t* self, double Vout)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	ed87 0b00 	vstr	d0, [r7]
	uint32_t digital = (uint32_t)round(fmin(Vout, self->VoutMax) / self->VoutStep_V);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800246e:	eeb0 1a47 	vmov.f32	s2, s14
 8002472:	eef0 1a67 	vmov.f32	s3, s15
 8002476:	ed97 0b00 	vldr	d0, [r7]
 800247a:	f005 fdec 	bl	8008056 <fmin>
 800247e:	ec51 0b10 	vmov	r0, r1, d0
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002488:	f7fe f984 	bl	8000794 <__aeabi_ddiv>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	ec43 2b17 	vmov	d7, r2, r3
 8002494:	eeb0 0a47 	vmov.f32	s0, s14
 8002498:	eef0 0a67 	vmov.f32	s1, s15
 800249c:	f005 fe2c 	bl	80080f8 <round>
 80024a0:	ec53 2b10 	vmov	r2, r3, d0
 80024a4:	4610      	mov	r0, r2
 80024a6:	4619      	mov	r1, r3
 80024a8:	f7fe fb22 	bl	8000af0 <__aeabi_d2uiz>
 80024ac:	4603      	mov	r3, r0
 80024ae:	617b      	str	r3, [r7, #20]
	dac_set_input_value(self->inputDAC, digital);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6979      	ldr	r1, [r7, #20]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff f871 	bl	800159e <dac_set_input_value>
}
 80024bc:	bf00      	nop
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <hv_get_output_voltage_V>:

double hv_get_output_voltage_V(high_voltage_system_t* self)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
	return (adc_get_vout(self->outputADC) - self->VoutOffsetADC_V) / self->VoutGainADC;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe fd0b 	bl	8000eec <adc_get_vout>
 80024d6:	ec51 0b10 	vmov	r0, r1, d0
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80024e0:	f7fd fe76 	bl	80001d0 <__aeabi_dsub>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4610      	mov	r0, r2
 80024ea:	4619      	mov	r1, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80024f2:	f7fe f94f 	bl	8000794 <__aeabi_ddiv>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	ec43 2b17 	vmov	d7, r2, r3
}
 80024fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002502:	eef0 0a67 	vmov.f32	s1, s15
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <hv_set_output_voltage_adc_offset>:

void hv_set_output_voltage_adc_offset(high_voltage_system_t* self, double offset_V)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	ed87 0b00 	vstr	d0, [r7]
	self->VoutOffsetADC_V = offset_V;
 8002518:	68f9      	ldr	r1, [r7, #12]
 800251a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800251e:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8002522:	bf00      	nop
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <empty_cb_>:
#include "button.h"
#include <string.h>
//#include "button_callbacks.h"

static uint8_t button_is_pressed(button_t* self);
static void empty_cb_(void) {};
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0
 8002532:	bf00      	nop
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <button_reset_cbs>:
{
	self->release_cb = callback;
}

void button_reset_cbs(button_t* self)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
	self->short_press_cb 	= empty_cb_;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a07      	ldr	r2, [pc, #28]	; (8002564 <button_reset_cbs+0x28>)
 8002548:	615a      	str	r2, [r3, #20]
	self->long_press_cb 	= empty_cb_;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a05      	ldr	r2, [pc, #20]	; (8002564 <button_reset_cbs+0x28>)
 800254e:	619a      	str	r2, [r3, #24]
	self->release_cb		= empty_cb_;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a04      	ldr	r2, [pc, #16]	; (8002564 <button_reset_cbs+0x28>)
 8002554:	61da      	str	r2, [r3, #28]
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	0800252f 	.word	0x0800252f

08002568 <button_routine>:

void button_routine(button_t* self)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	self->currentButtonState = button_is_pressed(self);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f887 	bl	8002684 <button_is_pressed>
 8002576:	4603      	mov	r3, r0
 8002578:	461a      	mov	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	749a      	strb	r2, [r3, #18]
	switch(self->state)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	7b1b      	ldrb	r3, [r3, #12]
 8002582:	2b06      	cmp	r3, #6
 8002584:	d876      	bhi.n	8002674 <button_routine+0x10c>
 8002586:	a201      	add	r2, pc, #4	; (adr r2, 800258c <button_routine+0x24>)
 8002588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258c:	080025a9 	.word	0x080025a9
 8002590:	080025cd 	.word	0x080025cd
 8002594:	080025fd 	.word	0x080025fd
 8002598:	0800260b 	.word	0x0800260b
 800259c:	0800263b 	.word	0x0800263b
 80025a0:	08002649 	.word	0x08002649
 80025a4:	08002659 	.word	0x08002659
	{
	case BUTTON_NOT_ACTIVE:
		self->filteringCounter = 0;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	81da      	strh	r2, [r3, #14]
		self->longDelayCounter = 0;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	821a      	strh	r2, [r3, #16]
		if(self->currentButtonState && !self->previousButtonState)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	7c9b      	ldrb	r3, [r3, #18]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d054      	beq.n	8002666 <button_routine+0xfe>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	7cdb      	ldrb	r3, [r3, #19]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d150      	bne.n	8002666 <button_routine+0xfe>
		{
			self->state = BUTTON_FILTERING;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	731a      	strb	r2, [r3, #12]
		}
		break;
 80025ca:	e04c      	b.n	8002666 <button_routine+0xfe>
	case BUTTON_FILTERING:
		if(self->currentButtonState)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	7c9b      	ldrb	r3, [r3, #18]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d006      	beq.n	80025e2 <button_routine+0x7a>
		{
			self->filteringCounter++;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	89db      	ldrh	r3, [r3, #14]
 80025d8:	3301      	adds	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	81da      	strh	r2, [r3, #14]
 80025e0:	e002      	b.n	80025e8 <button_routine+0x80>
		}
		else
		{
			self->state = BUTTON_NOT_ACTIVE;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	731a      	strb	r2, [r3, #12]
		}
		if(self->filteringCounter >= self->initData.cyclesFiltering)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	89da      	ldrh	r2, [r3, #14]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	891b      	ldrh	r3, [r3, #8]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d33a      	bcc.n	800266a <button_routine+0x102>
		{
			self->state = BUTTON_SHORT_PRESS;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	731a      	strb	r2, [r3, #12]
		}
		break;
 80025fa:	e036      	b.n	800266a <button_routine+0x102>
	case BUTTON_SHORT_PRESS:
		self->short_press_cb();
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	4798      	blx	r3
		self->state = BUTTON_SHORT_HOLD;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2203      	movs	r2, #3
 8002606:	731a      	strb	r2, [r3, #12]
		break;
 8002608:	e034      	b.n	8002674 <button_routine+0x10c>
	case BUTTON_SHORT_HOLD:
		if(self->currentButtonState)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	7c9b      	ldrb	r3, [r3, #18]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d006      	beq.n	8002620 <button_routine+0xb8>
		{
			self->longDelayCounter++;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	8a1b      	ldrh	r3, [r3, #16]
 8002616:	3301      	adds	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	821a      	strh	r2, [r3, #16]
 800261e:	e002      	b.n	8002626 <button_routine+0xbe>
		}
		else
		{
			self->state = BUTTON_RELEASE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2206      	movs	r2, #6
 8002624:	731a      	strb	r2, [r3, #12]
		}

		if(self->longDelayCounter >= self->initData.cyclesLongDelay)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	8a1a      	ldrh	r2, [r3, #16]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	895b      	ldrh	r3, [r3, #10]
 800262e:	429a      	cmp	r2, r3
 8002630:	d31d      	bcc.n	800266e <button_routine+0x106>
		{
			self->state = BUTTON_LONG_PRESS;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2204      	movs	r2, #4
 8002636:	731a      	strb	r2, [r3, #12]
		}
		break;
 8002638:	e019      	b.n	800266e <button_routine+0x106>
	case BUTTON_LONG_PRESS:
		self->long_press_cb();
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	4798      	blx	r3
		self->state = BUTTON_LONG_HOLD;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2205      	movs	r2, #5
 8002644:	731a      	strb	r2, [r3, #12]
		break;
 8002646:	e015      	b.n	8002674 <button_routine+0x10c>
	case BUTTON_LONG_HOLD:
		if(!self->currentButtonState)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	7c9b      	ldrb	r3, [r3, #18]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d110      	bne.n	8002672 <button_routine+0x10a>
		{
			self->state = BUTTON_RELEASE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2206      	movs	r2, #6
 8002654:	731a      	strb	r2, [r3, #12]
		}
		break;
 8002656:	e00c      	b.n	8002672 <button_routine+0x10a>
	case BUTTON_RELEASE:
		self->release_cb();
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	4798      	blx	r3
		self->state = BUTTON_NOT_ACTIVE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	731a      	strb	r2, [r3, #12]
		break;
 8002664:	e006      	b.n	8002674 <button_routine+0x10c>
		break;
 8002666:	bf00      	nop
 8002668:	e004      	b.n	8002674 <button_routine+0x10c>
		break;
 800266a:	bf00      	nop
 800266c:	e002      	b.n	8002674 <button_routine+0x10c>
		break;
 800266e:	bf00      	nop
 8002670:	e000      	b.n	8002674 <button_routine+0x10c>
		break;
 8002672:	bf00      	nop
	}
	self->previousButtonState = self->currentButtonState;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	7c9a      	ldrb	r2, [r3, #18]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	74da      	strb	r2, [r3, #19]
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <button_is_pressed>:

static uint8_t button_is_pressed(button_t* self)
{
 8002684:	b590      	push	{r4, r7, lr}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	return self->initData.unpressedState != HAL_GPIO_ReadPin(self->initData.port, self->initData.pin);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	799c      	ldrb	r4, [r3, #6]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	889b      	ldrh	r3, [r3, #4]
 8002698:	4619      	mov	r1, r3
 800269a:	4610      	mov	r0, r2
 800269c:	f003 f8e2 	bl	8005864 <HAL_GPIO_ReadPin>
 80026a0:	4603      	mov	r3, r0
 80026a2:	429c      	cmp	r4, r3
 80026a4:	bf14      	ite	ne
 80026a6:	2301      	movne	r3, #1
 80026a8:	2300      	moveq	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd90      	pop	{r4, r7, pc}

080026b4 <keyboard_routine>:

#include "keyboard.h"
#include <string.h>

void keyboard_routine(keyboard_t* self)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
	button_routine(&self->up);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff ff52 	bl	8002568 <button_routine>
	button_routine(&self->down);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3320      	adds	r3, #32
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ff4d 	bl	8002568 <button_routine>
	button_routine(&self->ok);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3340      	adds	r3, #64	; 0x40
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff ff48 	bl	8002568 <button_routine>
	button_routine(&self->axisReset);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3360      	adds	r3, #96	; 0x60
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ff43 	bl	8002568 <button_routine>
	button_routine(&self->step);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3380      	adds	r3, #128	; 0x80
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff ff3e 	bl	8002568 <button_routine>
	button_routine(&self->motion);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	33a0      	adds	r3, #160	; 0xa0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ff39 	bl	8002568 <button_routine>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <keyboard_reset_cbs>:

void keyboard_reset_cbs(keyboard_t* self)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]

	button_reset_cbs(&self->up);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff ff17 	bl	800253c <button_reset_cbs>
	button_reset_cbs(&self->down);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3320      	adds	r3, #32
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff ff12 	bl	800253c <button_reset_cbs>
	button_reset_cbs(&self->ok);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3340      	adds	r3, #64	; 0x40
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff0d 	bl	800253c <button_reset_cbs>
	button_reset_cbs(&self->axisReset);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3360      	adds	r3, #96	; 0x60
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff ff08 	bl	800253c <button_reset_cbs>
	button_reset_cbs(&self->step);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3380      	adds	r3, #128	; 0x80
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff03 	bl	800253c <button_reset_cbs>
	button_reset_cbs(&self->motion);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	33a0      	adds	r3, #160	; 0xa0
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff fefe 	bl	800253c <button_reset_cbs>
}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800274c:	f002 fd14 	bl	8005178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002750:	f000 f826 	bl	80027a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002754:	f000 f994 	bl	8002a80 <MX_GPIO_Init>
  MX_TIM6_Init();
 8002758:	f000 f95c 	bl	8002a14 <MX_TIM6_Init>
  MX_SPI3_Init();
 800275c:	f000 f924 	bl	80029a8 <MX_SPI3_Init>
  MX_SPI2_Init();
 8002760:	f000 f8ec 	bl	800293c <MX_SPI2_Init>
  MX_SPI1_Init();
 8002764:	f000 f8b4 	bl	80028d0 <MX_SPI1_Init>
  MX_I2C3_Init();
 8002768:	f000 f884 	bl	8002874 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_DisableIRQ(USR_ADC_TIM_IRQn);
 800276c:	2036      	movs	r0, #54	; 0x36
 800276e:	f002 fec2 	bl	80054f6 <HAL_NVIC_DisableIRQ>

  // general task init
  general_task_init(&task);
 8002772:	4809      	ldr	r0, [pc, #36]	; (8002798 <main+0x50>)
 8002774:	f7ff fa24 	bl	8001bc0 <general_task_init>
  general_task_setup(&task);
 8002778:	4807      	ldr	r0, [pc, #28]	; (8002798 <main+0x50>)
 800277a:	f7ff fca5 	bl	80020c8 <general_task_setup>

  HAL_NVIC_EnableIRQ(USR_ADC_TIM_IRQn);
 800277e:	2036      	movs	r0, #54	; 0x36
 8002780:	f002 feab 	bl	80054da <HAL_NVIC_EnableIRQ>

  HAL_TIM_Base_Start_IT(adctim);
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <main+0x54>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f004 ffc3 	bl	8007714 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 general_task_loop(&task);
 800278e:	4802      	ldr	r0, [pc, #8]	; (8002798 <main+0x50>)
 8002790:	f7ff fcb2 	bl	80020f8 <general_task_loop>
 8002794:	e7fb      	b.n	800278e <main+0x46>
 8002796:	bf00      	nop
 8002798:	200002f8 	.word	0x200002f8
 800279c:	20000038 	.word	0x20000038

080027a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b094      	sub	sp, #80	; 0x50
 80027a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027a6:	f107 0320 	add.w	r3, r7, #32
 80027aa:	2230      	movs	r2, #48	; 0x30
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f005 fb84 	bl	8007ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027b4:	f107 030c 	add.w	r3, r7, #12
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027c4:	2300      	movs	r3, #0
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	4b28      	ldr	r3, [pc, #160]	; (800286c <SystemClock_Config+0xcc>)
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	4a27      	ldr	r2, [pc, #156]	; (800286c <SystemClock_Config+0xcc>)
 80027ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d2:	6413      	str	r3, [r2, #64]	; 0x40
 80027d4:	4b25      	ldr	r3, [pc, #148]	; (800286c <SystemClock_Config+0xcc>)
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027e0:	2300      	movs	r3, #0
 80027e2:	607b      	str	r3, [r7, #4]
 80027e4:	4b22      	ldr	r3, [pc, #136]	; (8002870 <SystemClock_Config+0xd0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a21      	ldr	r2, [pc, #132]	; (8002870 <SystemClock_Config+0xd0>)
 80027ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	4b1f      	ldr	r3, [pc, #124]	; (8002870 <SystemClock_Config+0xd0>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f8:	607b      	str	r3, [r7, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027fc:	2302      	movs	r3, #2
 80027fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002800:	2301      	movs	r3, #1
 8002802:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002804:	2310      	movs	r3, #16
 8002806:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002808:	2302      	movs	r3, #2
 800280a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800280c:	2300      	movs	r3, #0
 800280e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002810:	2308      	movs	r3, #8
 8002812:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002814:	23a8      	movs	r3, #168	; 0xa8
 8002816:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002818:	2302      	movs	r3, #2
 800281a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800281c:	2304      	movs	r3, #4
 800281e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002820:	f107 0320 	add.w	r3, r7, #32
 8002824:	4618      	mov	r0, r3
 8002826:	f003 fcfd 	bl	8006224 <HAL_RCC_OscConfig>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002830:	f000 fa26 	bl	8002c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002834:	230f      	movs	r3, #15
 8002836:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002838:	2302      	movs	r3, #2
 800283a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002840:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002844:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800284a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800284c:	f107 030c 	add.w	r3, r7, #12
 8002850:	2105      	movs	r1, #5
 8002852:	4618      	mov	r0, r3
 8002854:	f003 ff5e 	bl	8006714 <HAL_RCC_ClockConfig>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800285e:	f000 fa0f 	bl	8002c80 <Error_Handler>
  }
}
 8002862:	bf00      	nop
 8002864:	3750      	adds	r7, #80	; 0x50
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40023800 	.word	0x40023800
 8002870:	40007000 	.word	0x40007000

08002874 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002878:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <MX_I2C3_Init+0x50>)
 800287a:	4a13      	ldr	r2, [pc, #76]	; (80028c8 <MX_I2C3_Init+0x54>)
 800287c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800287e:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <MX_I2C3_Init+0x50>)
 8002880:	4a12      	ldr	r2, [pc, #72]	; (80028cc <MX_I2C3_Init+0x58>)
 8002882:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002884:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <MX_I2C3_Init+0x50>)
 8002886:	2200      	movs	r2, #0
 8002888:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800288a:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <MX_I2C3_Init+0x50>)
 800288c:	2200      	movs	r2, #0
 800288e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <MX_I2C3_Init+0x50>)
 8002892:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002896:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002898:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <MX_I2C3_Init+0x50>)
 800289a:	2200      	movs	r2, #0
 800289c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800289e:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <MX_I2C3_Init+0x50>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028a4:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <MX_I2C3_Init+0x50>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <MX_I2C3_Init+0x50>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80028b0:	4804      	ldr	r0, [pc, #16]	; (80028c4 <MX_I2C3_Init+0x50>)
 80028b2:	f003 f809 	bl	80058c8 <HAL_I2C_Init>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80028bc:	f000 f9e0 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20000150 	.word	0x20000150
 80028c8:	40005c00 	.word	0x40005c00
 80028cc:	00061a80 	.word	0x00061a80

080028d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80028d4:	4b17      	ldr	r3, [pc, #92]	; (8002934 <MX_SPI1_Init+0x64>)
 80028d6:	4a18      	ldr	r2, [pc, #96]	; (8002938 <MX_SPI1_Init+0x68>)
 80028d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028da:	4b16      	ldr	r3, [pc, #88]	; (8002934 <MX_SPI1_Init+0x64>)
 80028dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028e2:	4b14      	ldr	r3, [pc, #80]	; (8002934 <MX_SPI1_Init+0x64>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028e8:	4b12      	ldr	r3, [pc, #72]	; (8002934 <MX_SPI1_Init+0x64>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80028ee:	4b11      	ldr	r3, [pc, #68]	; (8002934 <MX_SPI1_Init+0x64>)
 80028f0:	2202      	movs	r2, #2
 80028f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028f4:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <MX_SPI1_Init+0x64>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80028fa:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <MX_SPI1_Init+0x64>)
 80028fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002900:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002902:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <MX_SPI1_Init+0x64>)
 8002904:	2238      	movs	r2, #56	; 0x38
 8002906:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002908:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <MX_SPI1_Init+0x64>)
 800290a:	2200      	movs	r2, #0
 800290c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <MX_SPI1_Init+0x64>)
 8002910:	2200      	movs	r2, #0
 8002912:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002914:	4b07      	ldr	r3, [pc, #28]	; (8002934 <MX_SPI1_Init+0x64>)
 8002916:	2200      	movs	r2, #0
 8002918:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <MX_SPI1_Init+0x64>)
 800291c:	220a      	movs	r2, #10
 800291e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002920:	4804      	ldr	r0, [pc, #16]	; (8002934 <MX_SPI1_Init+0x64>)
 8002922:	f004 f8c3 	bl	8006aac <HAL_SPI_Init>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800292c:	f000 f9a8 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002930:	bf00      	nop
 8002932:	bd80      	pop	{r7, pc}
 8002934:	200001a4 	.word	0x200001a4
 8002938:	40013000 	.word	0x40013000

0800293c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002940:	4b17      	ldr	r3, [pc, #92]	; (80029a0 <MX_SPI2_Init+0x64>)
 8002942:	4a18      	ldr	r2, [pc, #96]	; (80029a4 <MX_SPI2_Init+0x68>)
 8002944:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002946:	4b16      	ldr	r3, [pc, #88]	; (80029a0 <MX_SPI2_Init+0x64>)
 8002948:	f44f 7282 	mov.w	r2, #260	; 0x104
 800294c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800294e:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <MX_SPI2_Init+0x64>)
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002954:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <MX_SPI2_Init+0x64>)
 8002956:	2200      	movs	r2, #0
 8002958:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800295a:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <MX_SPI2_Init+0x64>)
 800295c:	2200      	movs	r2, #0
 800295e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002960:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <MX_SPI2_Init+0x64>)
 8002962:	2200      	movs	r2, #0
 8002964:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002966:	4b0e      	ldr	r3, [pc, #56]	; (80029a0 <MX_SPI2_Init+0x64>)
 8002968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800296c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800296e:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <MX_SPI2_Init+0x64>)
 8002970:	2208      	movs	r2, #8
 8002972:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002974:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <MX_SPI2_Init+0x64>)
 8002976:	2200      	movs	r2, #0
 8002978:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800297a:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <MX_SPI2_Init+0x64>)
 800297c:	2200      	movs	r2, #0
 800297e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002980:	4b07      	ldr	r3, [pc, #28]	; (80029a0 <MX_SPI2_Init+0x64>)
 8002982:	2200      	movs	r2, #0
 8002984:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002986:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <MX_SPI2_Init+0x64>)
 8002988:	220a      	movs	r2, #10
 800298a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800298c:	4804      	ldr	r0, [pc, #16]	; (80029a0 <MX_SPI2_Init+0x64>)
 800298e:	f004 f88d 	bl	8006aac <HAL_SPI_Init>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002998:	f000 f972 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800299c:	bf00      	nop
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	200001fc 	.word	0x200001fc
 80029a4:	40003800 	.word	0x40003800

080029a8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80029ac:	4b17      	ldr	r3, [pc, #92]	; (8002a0c <MX_SPI3_Init+0x64>)
 80029ae:	4a18      	ldr	r2, [pc, #96]	; (8002a10 <MX_SPI3_Init+0x68>)
 80029b0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80029b2:	4b16      	ldr	r3, [pc, #88]	; (8002a0c <MX_SPI3_Init+0x64>)
 80029b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029b8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80029ba:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <MX_SPI3_Init+0x64>)
 80029bc:	2200      	movs	r2, #0
 80029be:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80029c0:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <MX_SPI3_Init+0x64>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80029c6:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <MX_SPI3_Init+0x64>)
 80029c8:	2202      	movs	r2, #2
 80029ca:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029cc:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <MX_SPI3_Init+0x64>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80029d2:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <MX_SPI3_Init+0x64>)
 80029d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029d8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80029da:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <MX_SPI3_Init+0x64>)
 80029dc:	2230      	movs	r2, #48	; 0x30
 80029de:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029e0:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <MX_SPI3_Init+0x64>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80029e6:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <MX_SPI3_Init+0x64>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029ec:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <MX_SPI3_Init+0x64>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <MX_SPI3_Init+0x64>)
 80029f4:	220a      	movs	r2, #10
 80029f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80029f8:	4804      	ldr	r0, [pc, #16]	; (8002a0c <MX_SPI3_Init+0x64>)
 80029fa:	f004 f857 	bl	8006aac <HAL_SPI_Init>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002a04:	f000 f93c 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20000254 	.word	0x20000254
 8002a10:	40003c00 	.word	0x40003c00

08002a14 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a1a:	463b      	mov	r3, r7
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002a22:	4b15      	ldr	r3, [pc, #84]	; (8002a78 <MX_TIM6_Init+0x64>)
 8002a24:	4a15      	ldr	r2, [pc, #84]	; (8002a7c <MX_TIM6_Init+0x68>)
 8002a26:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000 - 1;
 8002a28:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <MX_TIM6_Init+0x64>)
 8002a2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a2e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a30:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <MX_TIM6_Init+0x64>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4200 / 3 - 1;
 8002a36:	4b10      	ldr	r3, [pc, #64]	; (8002a78 <MX_TIM6_Init+0x64>)
 8002a38:	f240 5277 	movw	r2, #1399	; 0x577
 8002a3c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a3e:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <MX_TIM6_Init+0x64>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002a44:	480c      	ldr	r0, [pc, #48]	; (8002a78 <MX_TIM6_Init+0x64>)
 8002a46:	f004 fe15 	bl	8007674 <HAL_TIM_Base_Init>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002a50:	f000 f916 	bl	8002c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a54:	2300      	movs	r3, #0
 8002a56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002a5c:	463b      	mov	r3, r7
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4805      	ldr	r0, [pc, #20]	; (8002a78 <MX_TIM6_Init+0x64>)
 8002a62:	f005 f88b 	bl	8007b7c <HAL_TIMEx_MasterConfigSynchronization>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002a6c:	f000 f908 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002a70:	bf00      	nop
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	200002ac 	.word	0x200002ac
 8002a7c:	40001000 	.word	0x40001000

08002a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08a      	sub	sp, #40	; 0x28
 8002a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a86:	f107 0314 	add.w	r3, r7, #20
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	609a      	str	r2, [r3, #8]
 8002a92:	60da      	str	r2, [r3, #12]
 8002a94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	4b64      	ldr	r3, [pc, #400]	; (8002c2c <MX_GPIO_Init+0x1ac>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	4a63      	ldr	r2, [pc, #396]	; (8002c2c <MX_GPIO_Init+0x1ac>)
 8002aa0:	f043 0304 	orr.w	r3, r3, #4
 8002aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa6:	4b61      	ldr	r3, [pc, #388]	; (8002c2c <MX_GPIO_Init+0x1ac>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	4b5d      	ldr	r3, [pc, #372]	; (8002c2c <MX_GPIO_Init+0x1ac>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	4a5c      	ldr	r2, [pc, #368]	; (8002c2c <MX_GPIO_Init+0x1ac>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac2:	4b5a      	ldr	r3, [pc, #360]	; (8002c2c <MX_GPIO_Init+0x1ac>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	4b56      	ldr	r3, [pc, #344]	; (8002c2c <MX_GPIO_Init+0x1ac>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	4a55      	ldr	r2, [pc, #340]	; (8002c2c <MX_GPIO_Init+0x1ac>)
 8002ad8:	f043 0310 	orr.w	r3, r3, #16
 8002adc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ade:	4b53      	ldr	r3, [pc, #332]	; (8002c2c <MX_GPIO_Init+0x1ac>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	4b4f      	ldr	r3, [pc, #316]	; (8002c2c <MX_GPIO_Init+0x1ac>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	4a4e      	ldr	r2, [pc, #312]	; (8002c2c <MX_GPIO_Init+0x1ac>)
 8002af4:	f043 0302 	orr.w	r3, r3, #2
 8002af8:	6313      	str	r3, [r2, #48]	; 0x30
 8002afa:	4b4c      	ldr	r3, [pc, #304]	; (8002c2c <MX_GPIO_Init+0x1ac>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	607b      	str	r3, [r7, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	603b      	str	r3, [r7, #0]
 8002b0a:	4b48      	ldr	r3, [pc, #288]	; (8002c2c <MX_GPIO_Init+0x1ac>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	4a47      	ldr	r2, [pc, #284]	; (8002c2c <MX_GPIO_Init+0x1ac>)
 8002b10:	f043 0308 	orr.w	r3, r3, #8
 8002b14:	6313      	str	r3, [r2, #48]	; 0x30
 8002b16:	4b45      	ldr	r3, [pc, #276]	; (8002c2c <MX_GPIO_Init+0x1ac>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSOR_RANGE_SELECT_Pin|HV_INPUT_SELECT_Pin, GPIO_PIN_RESET);
 8002b22:	2200      	movs	r2, #0
 8002b24:	210c      	movs	r1, #12
 8002b26:	4842      	ldr	r0, [pc, #264]	; (8002c30 <MX_GPIO_Init+0x1b0>)
 8002b28:	f002 feb4 	bl	8005894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADC_PRESS_SPI_CS_Pin|ADC_DOSE_SPI_CS_Pin|ADC_HV_SPI_CS_Pin, GPIO_PIN_RESET);
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	210e      	movs	r1, #14
 8002b30:	4840      	ldr	r0, [pc, #256]	; (8002c34 <MX_GPIO_Init+0x1b4>)
 8002b32:	f002 feaf 	bl	8005894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_RESET);
 8002b36:	2200      	movs	r2, #0
 8002b38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b3c:	483e      	ldr	r0, [pc, #248]	; (8002c38 <MX_GPIO_Init+0x1b8>)
 8002b3e:	f002 fea9 	bl	8005894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ETH_SPI_CS_Pin|ETH_RESET_Pin|SD_SPI_CSB12_Pin, GPIO_PIN_RESET);
 8002b42:	2200      	movs	r2, #0
 8002b44:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002b48:	483c      	ldr	r0, [pc, #240]	; (8002c3c <MX_GPIO_Init+0x1bc>)
 8002b4a:	f002 fea3 	bl	8005894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|DAC_SPI_CS_Pin, GPIO_PIN_RESET);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2103      	movs	r1, #3
 8002b52:	483b      	ldr	r0, [pc, #236]	; (8002c40 <MX_GPIO_Init+0x1c0>)
 8002b54:	f002 fe9e 	bl	8005894 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSOR_RANGE_SELECT_Pin HV_INPUT_SELECT_Pin */
  GPIO_InitStruct.Pin = SENSOR_RANGE_SELECT_Pin|HV_INPUT_SELECT_Pin;
 8002b58:	230c      	movs	r3, #12
 8002b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b64:	2302      	movs	r3, #2
 8002b66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b68:	f107 0314 	add.w	r3, r7, #20
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4830      	ldr	r0, [pc, #192]	; (8002c30 <MX_GPIO_Init+0x1b0>)
 8002b70:	f002 fcdc 	bl	800552c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_PRESS_SPI_CS_Pin ADC_DOSE_SPI_CS_Pin ADC_HV_SPI_CS_Pin */
  GPIO_InitStruct.Pin = ADC_PRESS_SPI_CS_Pin|ADC_DOSE_SPI_CS_Pin|ADC_HV_SPI_CS_Pin;
 8002b74:	230e      	movs	r3, #14
 8002b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b80:	2302      	movs	r3, #2
 8002b82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b84:	f107 0314 	add.w	r3, r7, #20
 8002b88:	4619      	mov	r1, r3
 8002b8a:	482a      	ldr	r0, [pc, #168]	; (8002c34 <MX_GPIO_Init+0x1b4>)
 8002b8c:	f002 fcce 	bl	800552c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_SPI_CS_Pin */
  GPIO_InitStruct.Pin = SD_SPI_CS_Pin;
 8002b90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b96:	2301      	movs	r3, #1
 8002b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002ba2:	f107 0314 	add.w	r3, r7, #20
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4823      	ldr	r0, [pc, #140]	; (8002c38 <MX_GPIO_Init+0x1b8>)
 8002baa:	f002 fcbf 	bl	800552c <HAL_GPIO_Init>

  /*Configure GPIO pins : ETH_SPI_CS_Pin SD_SPI_CSB12_Pin */
  GPIO_InitStruct.Pin = ETH_SPI_CS_Pin|SD_SPI_CSB12_Pin;
 8002bae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc0:	f107 0314 	add.w	r3, r7, #20
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	481d      	ldr	r0, [pc, #116]	; (8002c3c <MX_GPIO_Init+0x1bc>)
 8002bc8:	f002 fcb0 	bl	800552c <HAL_GPIO_Init>

  /*Configure GPIO pin : ETH_RESET_Pin */
  GPIO_InitStruct.Pin = ETH_RESET_Pin;
 8002bcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ETH_RESET_GPIO_Port, &GPIO_InitStruct);
 8002bde:	f107 0314 	add.w	r3, r7, #20
 8002be2:	4619      	mov	r1, r3
 8002be4:	4815      	ldr	r0, [pc, #84]	; (8002c3c <MX_GPIO_Init+0x1bc>)
 8002be6:	f002 fca1 	bl	800552c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002bea:	2301      	movs	r3, #1
 8002bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bfa:	f107 0314 	add.w	r3, r7, #20
 8002bfe:	4619      	mov	r1, r3
 8002c00:	480f      	ldr	r0, [pc, #60]	; (8002c40 <MX_GPIO_Init+0x1c0>)
 8002c02:	f002 fc93 	bl	800552c <HAL_GPIO_Init>

  /*Configure GPIO pin : DAC_SPI_CS_Pin */
  GPIO_InitStruct.Pin = DAC_SPI_CS_Pin;
 8002c06:	2302      	movs	r3, #2
 8002c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c12:	2302      	movs	r3, #2
 8002c14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DAC_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002c16:	f107 0314 	add.w	r3, r7, #20
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4808      	ldr	r0, [pc, #32]	; (8002c40 <MX_GPIO_Init+0x1c0>)
 8002c1e:	f002 fc85 	bl	800552c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c22:	bf00      	nop
 8002c24:	3728      	adds	r7, #40	; 0x28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40020800 	.word	0x40020800
 8002c34:	40020000 	.word	0x40020000
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	40020400 	.word	0x40020400
 8002c40:	40020c00 	.word	0x40020c00

08002c44 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim == adctim)
 8002c4c:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d102      	bne.n	8002c5c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		general_task_timer_interrupt(&task);
 8002c56:	4808      	ldr	r0, [pc, #32]	; (8002c78 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002c58:	f7ff fb38 	bl	80022cc <general_task_timer_interrupt>
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a06      	ldr	r2, [pc, #24]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d101      	bne.n	8002c6a <HAL_TIM_PeriodElapsedCallback+0x26>
    HAL_IncTick();
 8002c66:	f002 fad9 	bl	800521c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000038 	.word	0x20000038
 8002c78:	200002f8 	.word	0x200002f8
 8002c7c:	40010000 	.word	0x40010000

08002c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c84:	b672      	cpsid	i
}
 8002c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c88:	e7fe      	b.n	8002c88 <Error_Handler+0x8>
	...

08002c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <HAL_MspInit+0x4c>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	4a0f      	ldr	r2, [pc, #60]	; (8002cd8 <HAL_MspInit+0x4c>)
 8002c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <HAL_MspInit+0x4c>)
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002caa:	607b      	str	r3, [r7, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <HAL_MspInit+0x4c>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	4a08      	ldr	r2, [pc, #32]	; (8002cd8 <HAL_MspInit+0x4c>)
 8002cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_MspInit+0x4c>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800

08002cdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08a      	sub	sp, #40	; 0x28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce4:	f107 0314 	add.w	r3, r7, #20
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	60da      	str	r2, [r3, #12]
 8002cf2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a29      	ldr	r2, [pc, #164]	; (8002da0 <HAL_I2C_MspInit+0xc4>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d14b      	bne.n	8002d96 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	4b28      	ldr	r3, [pc, #160]	; (8002da4 <HAL_I2C_MspInit+0xc8>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	4a27      	ldr	r2, [pc, #156]	; (8002da4 <HAL_I2C_MspInit+0xc8>)
 8002d08:	f043 0304 	orr.w	r3, r3, #4
 8002d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0e:	4b25      	ldr	r3, [pc, #148]	; (8002da4 <HAL_I2C_MspInit+0xc8>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	4b21      	ldr	r3, [pc, #132]	; (8002da4 <HAL_I2C_MspInit+0xc8>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	4a20      	ldr	r2, [pc, #128]	; (8002da4 <HAL_I2C_MspInit+0xc8>)
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2a:	4b1e      	ldr	r3, [pc, #120]	; (8002da4 <HAL_I2C_MspInit+0xc8>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d3c:	2312      	movs	r3, #18
 8002d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d44:	2303      	movs	r3, #3
 8002d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d48:	2304      	movs	r3, #4
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d4c:	f107 0314 	add.w	r3, r7, #20
 8002d50:	4619      	mov	r1, r3
 8002d52:	4815      	ldr	r0, [pc, #84]	; (8002da8 <HAL_I2C_MspInit+0xcc>)
 8002d54:	f002 fbea 	bl	800552c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d5e:	2312      	movs	r3, #18
 8002d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d66:	2303      	movs	r3, #3
 8002d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d6a:	2304      	movs	r3, #4
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6e:	f107 0314 	add.w	r3, r7, #20
 8002d72:	4619      	mov	r1, r3
 8002d74:	480d      	ldr	r0, [pc, #52]	; (8002dac <HAL_I2C_MspInit+0xd0>)
 8002d76:	f002 fbd9 	bl	800552c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <HAL_I2C_MspInit+0xc8>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	4a08      	ldr	r2, [pc, #32]	; (8002da4 <HAL_I2C_MspInit+0xc8>)
 8002d84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d88:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8a:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <HAL_I2C_MspInit+0xc8>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002d96:	bf00      	nop
 8002d98:	3728      	adds	r7, #40	; 0x28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40005c00 	.word	0x40005c00
 8002da4:	40023800 	.word	0x40023800
 8002da8:	40020800 	.word	0x40020800
 8002dac:	40020000 	.word	0x40020000

08002db0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08e      	sub	sp, #56	; 0x38
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a4c      	ldr	r2, [pc, #304]	; (8002f00 <HAL_SPI_MspInit+0x150>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d12c      	bne.n	8002e2c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	623b      	str	r3, [r7, #32]
 8002dd6:	4b4b      	ldr	r3, [pc, #300]	; (8002f04 <HAL_SPI_MspInit+0x154>)
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dda:	4a4a      	ldr	r2, [pc, #296]	; (8002f04 <HAL_SPI_MspInit+0x154>)
 8002ddc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002de0:	6453      	str	r3, [r2, #68]	; 0x44
 8002de2:	4b48      	ldr	r3, [pc, #288]	; (8002f04 <HAL_SPI_MspInit+0x154>)
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dea:	623b      	str	r3, [r7, #32]
 8002dec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	61fb      	str	r3, [r7, #28]
 8002df2:	4b44      	ldr	r3, [pc, #272]	; (8002f04 <HAL_SPI_MspInit+0x154>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	4a43      	ldr	r2, [pc, #268]	; (8002f04 <HAL_SPI_MspInit+0x154>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfe:	4b41      	ldr	r3, [pc, #260]	; (8002f04 <HAL_SPI_MspInit+0x154>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	61fb      	str	r3, [r7, #28]
 8002e08:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002e0a:	23e0      	movs	r3, #224	; 0xe0
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e16:	2303      	movs	r3, #3
 8002e18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e1a:	2305      	movs	r3, #5
 8002e1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e22:	4619      	mov	r1, r3
 8002e24:	4838      	ldr	r0, [pc, #224]	; (8002f08 <HAL_SPI_MspInit+0x158>)
 8002e26:	f002 fb81 	bl	800552c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002e2a:	e064      	b.n	8002ef6 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a36      	ldr	r2, [pc, #216]	; (8002f0c <HAL_SPI_MspInit+0x15c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d12d      	bne.n	8002e92 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	4b32      	ldr	r3, [pc, #200]	; (8002f04 <HAL_SPI_MspInit+0x154>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	4a31      	ldr	r2, [pc, #196]	; (8002f04 <HAL_SPI_MspInit+0x154>)
 8002e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e44:	6413      	str	r3, [r2, #64]	; 0x40
 8002e46:	4b2f      	ldr	r3, [pc, #188]	; (8002f04 <HAL_SPI_MspInit+0x154>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e4e:	61bb      	str	r3, [r7, #24]
 8002e50:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	4b2b      	ldr	r3, [pc, #172]	; (8002f04 <HAL_SPI_MspInit+0x154>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	4a2a      	ldr	r2, [pc, #168]	; (8002f04 <HAL_SPI_MspInit+0x154>)
 8002e5c:	f043 0302 	orr.w	r3, r3, #2
 8002e60:	6313      	str	r3, [r2, #48]	; 0x30
 8002e62:	4b28      	ldr	r3, [pc, #160]	; (8002f04 <HAL_SPI_MspInit+0x154>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002e6e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e74:	2302      	movs	r3, #2
 8002e76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e80:	2305      	movs	r3, #5
 8002e82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4821      	ldr	r0, [pc, #132]	; (8002f10 <HAL_SPI_MspInit+0x160>)
 8002e8c:	f002 fb4e 	bl	800552c <HAL_GPIO_Init>
}
 8002e90:	e031      	b.n	8002ef6 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a1f      	ldr	r2, [pc, #124]	; (8002f14 <HAL_SPI_MspInit+0x164>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d12c      	bne.n	8002ef6 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	613b      	str	r3, [r7, #16]
 8002ea0:	4b18      	ldr	r3, [pc, #96]	; (8002f04 <HAL_SPI_MspInit+0x154>)
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	4a17      	ldr	r2, [pc, #92]	; (8002f04 <HAL_SPI_MspInit+0x154>)
 8002ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eaa:	6413      	str	r3, [r2, #64]	; 0x40
 8002eac:	4b15      	ldr	r3, [pc, #84]	; (8002f04 <HAL_SPI_MspInit+0x154>)
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <HAL_SPI_MspInit+0x154>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	4a10      	ldr	r2, [pc, #64]	; (8002f04 <HAL_SPI_MspInit+0x154>)
 8002ec2:	f043 0304 	orr.w	r3, r3, #4
 8002ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec8:	4b0e      	ldr	r3, [pc, #56]	; (8002f04 <HAL_SPI_MspInit+0x154>)
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002ed4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eda:	2302      	movs	r3, #2
 8002edc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002ee6:	2306      	movs	r3, #6
 8002ee8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4809      	ldr	r0, [pc, #36]	; (8002f18 <HAL_SPI_MspInit+0x168>)
 8002ef2:	f002 fb1b 	bl	800552c <HAL_GPIO_Init>
}
 8002ef6:	bf00      	nop
 8002ef8:	3738      	adds	r7, #56	; 0x38
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40013000 	.word	0x40013000
 8002f04:	40023800 	.word	0x40023800
 8002f08:	40020000 	.word	0x40020000
 8002f0c:	40003800 	.word	0x40003800
 8002f10:	40020400 	.word	0x40020400
 8002f14:	40003c00 	.word	0x40003c00
 8002f18:	40020800 	.word	0x40020800

08002f1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0e      	ldr	r2, [pc, #56]	; (8002f64 <HAL_TIM_Base_MspInit+0x48>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d115      	bne.n	8002f5a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <HAL_TIM_Base_MspInit+0x4c>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	4a0c      	ldr	r2, [pc, #48]	; (8002f68 <HAL_TIM_Base_MspInit+0x4c>)
 8002f38:	f043 0310 	orr.w	r3, r3, #16
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3e:	4b0a      	ldr	r3, [pc, #40]	; (8002f68 <HAL_TIM_Base_MspInit+0x4c>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	2036      	movs	r0, #54	; 0x36
 8002f50:	f002 faa7 	bl	80054a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f54:	2036      	movs	r0, #54	; 0x36
 8002f56:	f002 fac0 	bl	80054da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002f5a:	bf00      	nop
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40001000 	.word	0x40001000
 8002f68:	40023800 	.word	0x40023800

08002f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f70:	e7fe      	b.n	8002f70 <NMI_Handler+0x4>

08002f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f72:	b480      	push	{r7}
 8002f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f76:	e7fe      	b.n	8002f76 <HardFault_Handler+0x4>

08002f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f7c:	e7fe      	b.n	8002f7c <MemManage_Handler+0x4>

08002f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f82:	e7fe      	b.n	8002f82 <BusFault_Handler+0x4>

08002f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f88:	e7fe      	b.n	8002f88 <UsageFault_Handler+0x4>

08002f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb8:	f002 f930 	bl	800521c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fbc:	bf00      	nop
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002fc4:	4802      	ldr	r0, [pc, #8]	; (8002fd0 <TIM6_DAC_IRQHandler+0x10>)
 8002fc6:	f004 fc15 	bl	80077f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	200002ac 	.word	0x200002ac

08002fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fdc:	4a14      	ldr	r2, [pc, #80]	; (8003030 <_sbrk+0x5c>)
 8002fde:	4b15      	ldr	r3, [pc, #84]	; (8003034 <_sbrk+0x60>)
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <_sbrk+0x64>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <_sbrk+0x64>)
 8002ff2:	4a12      	ldr	r2, [pc, #72]	; (800303c <_sbrk+0x68>)
 8002ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ff6:	4b10      	ldr	r3, [pc, #64]	; (8003038 <_sbrk+0x64>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	429a      	cmp	r2, r3
 8003002:	d207      	bcs.n	8003014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003004:	f004 ff72 	bl	8007eec <__errno>
 8003008:	4603      	mov	r3, r0
 800300a:	220c      	movs	r2, #12
 800300c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800300e:	f04f 33ff 	mov.w	r3, #4294967295
 8003012:	e009      	b.n	8003028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003014:	4b08      	ldr	r3, [pc, #32]	; (8003038 <_sbrk+0x64>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800301a:	4b07      	ldr	r3, [pc, #28]	; (8003038 <_sbrk+0x64>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4413      	add	r3, r2
 8003022:	4a05      	ldr	r2, [pc, #20]	; (8003038 <_sbrk+0x64>)
 8003024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003026:	68fb      	ldr	r3, [r7, #12]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	20020000 	.word	0x20020000
 8003034:	00000400 	.word	0x00000400
 8003038:	200005a8 	.word	0x200005a8
 800303c:	20000b40 	.word	0x20000b40

08003040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003044:	4b06      	ldr	r3, [pc, #24]	; (8003060 <SystemInit+0x20>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	4a05      	ldr	r2, [pc, #20]	; (8003060 <SystemInit+0x20>)
 800304c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
	...

08003074 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af04      	add	r7, sp, #16
 800307a:	4603      	mov	r3, r0
 800307c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800307e:	f04f 33ff 	mov.w	r3, #4294967295
 8003082:	9302      	str	r3, [sp, #8]
 8003084:	2301      	movs	r3, #1
 8003086:	9301      	str	r3, [sp, #4]
 8003088:	1dfb      	adds	r3, r7, #7
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	2301      	movs	r3, #1
 800308e:	2200      	movs	r2, #0
 8003090:	2178      	movs	r1, #120	; 0x78
 8003092:	4803      	ldr	r0, [pc, #12]	; (80030a0 <ssd1306_WriteCommand+0x2c>)
 8003094:	f002 fd5c 	bl	8005b50 <HAL_I2C_Mem_Write>
}
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20000150 	.word	0x20000150

080030a4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af04      	add	r7, sp, #16
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	f04f 32ff 	mov.w	r2, #4294967295
 80030b6:	9202      	str	r2, [sp, #8]
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	2301      	movs	r3, #1
 80030c0:	2240      	movs	r2, #64	; 0x40
 80030c2:	2178      	movs	r1, #120	; 0x78
 80030c4:	4803      	ldr	r0, [pc, #12]	; (80030d4 <ssd1306_WriteData+0x30>)
 80030c6:	f002 fd43 	bl	8005b50 <HAL_I2C_Mem_Write>
}
 80030ca:	bf00      	nop
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	20000150 	.word	0x20000150

080030d8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80030dc:	f7ff ffc2 	bl	8003064 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80030e0:	2064      	movs	r0, #100	; 0x64
 80030e2:	f002 f8bb 	bl	800525c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80030e6:	2000      	movs	r0, #0
 80030e8:	f000 f9d8 	bl	800349c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80030ec:	2020      	movs	r0, #32
 80030ee:	f7ff ffc1 	bl	8003074 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80030f2:	2000      	movs	r0, #0
 80030f4:	f7ff ffbe 	bl	8003074 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80030f8:	20b0      	movs	r0, #176	; 0xb0
 80030fa:	f7ff ffbb 	bl	8003074 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80030fe:	20c8      	movs	r0, #200	; 0xc8
 8003100:	f7ff ffb8 	bl	8003074 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003104:	2000      	movs	r0, #0
 8003106:	f7ff ffb5 	bl	8003074 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800310a:	2010      	movs	r0, #16
 800310c:	f7ff ffb2 	bl	8003074 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003110:	2040      	movs	r0, #64	; 0x40
 8003112:	f7ff ffaf 	bl	8003074 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003116:	20ff      	movs	r0, #255	; 0xff
 8003118:	f000 f9ac 	bl	8003474 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800311c:	20a1      	movs	r0, #161	; 0xa1
 800311e:	f7ff ffa9 	bl	8003074 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003122:	20a6      	movs	r0, #166	; 0xa6
 8003124:	f7ff ffa6 	bl	8003074 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003128:	20a8      	movs	r0, #168	; 0xa8
 800312a:	f7ff ffa3 	bl	8003074 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800312e:	203f      	movs	r0, #63	; 0x3f
 8003130:	f7ff ffa0 	bl	8003074 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003134:	20a4      	movs	r0, #164	; 0xa4
 8003136:	f7ff ff9d 	bl	8003074 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800313a:	20d3      	movs	r0, #211	; 0xd3
 800313c:	f7ff ff9a 	bl	8003074 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003140:	2000      	movs	r0, #0
 8003142:	f7ff ff97 	bl	8003074 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003146:	20d5      	movs	r0, #213	; 0xd5
 8003148:	f7ff ff94 	bl	8003074 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800314c:	20f0      	movs	r0, #240	; 0xf0
 800314e:	f7ff ff91 	bl	8003074 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003152:	20d9      	movs	r0, #217	; 0xd9
 8003154:	f7ff ff8e 	bl	8003074 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003158:	2022      	movs	r0, #34	; 0x22
 800315a:	f7ff ff8b 	bl	8003074 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800315e:	20da      	movs	r0, #218	; 0xda
 8003160:	f7ff ff88 	bl	8003074 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003164:	2012      	movs	r0, #18
 8003166:	f7ff ff85 	bl	8003074 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800316a:	20db      	movs	r0, #219	; 0xdb
 800316c:	f7ff ff82 	bl	8003074 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003170:	2020      	movs	r0, #32
 8003172:	f7ff ff7f 	bl	8003074 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003176:	208d      	movs	r0, #141	; 0x8d
 8003178:	f7ff ff7c 	bl	8003074 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800317c:	2014      	movs	r0, #20
 800317e:	f7ff ff79 	bl	8003074 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003182:	2001      	movs	r0, #1
 8003184:	f000 f98a 	bl	800349c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003188:	2000      	movs	r0, #0
 800318a:	f000 f80f 	bl	80031ac <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800318e:	f000 f825 	bl	80031dc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003192:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <ssd1306_Init+0xd0>)
 8003194:	2200      	movs	r2, #0
 8003196:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003198:	4b03      	ldr	r3, [pc, #12]	; (80031a8 <ssd1306_Init+0xd0>)
 800319a:	2200      	movs	r2, #0
 800319c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800319e:	4b02      	ldr	r3, [pc, #8]	; (80031a8 <ssd1306_Init+0xd0>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	711a      	strb	r2, [r3, #4]
}
 80031a4:	bf00      	nop
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	200009ac 	.word	0x200009ac

080031ac <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <ssd1306_Fill+0x14>
 80031bc:	2300      	movs	r3, #0
 80031be:	e000      	b.n	80031c2 <ssd1306_Fill+0x16>
 80031c0:	23ff      	movs	r3, #255	; 0xff
 80031c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031c6:	4619      	mov	r1, r3
 80031c8:	4803      	ldr	r0, [pc, #12]	; (80031d8 <ssd1306_Fill+0x2c>)
 80031ca:	f004 fe77 	bl	8007ebc <memset>
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	200005ac 	.word	0x200005ac

080031dc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80031e2:	2300      	movs	r3, #0
 80031e4:	71fb      	strb	r3, [r7, #7]
 80031e6:	e016      	b.n	8003216 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	3b50      	subs	r3, #80	; 0x50
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff ff40 	bl	8003074 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80031f4:	2000      	movs	r0, #0
 80031f6:	f7ff ff3d 	bl	8003074 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80031fa:	2010      	movs	r0, #16
 80031fc:	f7ff ff3a 	bl	8003074 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	01db      	lsls	r3, r3, #7
 8003204:	4a08      	ldr	r2, [pc, #32]	; (8003228 <ssd1306_UpdateScreen+0x4c>)
 8003206:	4413      	add	r3, r2
 8003208:	2180      	movs	r1, #128	; 0x80
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff ff4a 	bl	80030a4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	3301      	adds	r3, #1
 8003214:	71fb      	strb	r3, [r7, #7]
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	2b07      	cmp	r3, #7
 800321a:	d9e5      	bls.n	80031e8 <ssd1306_UpdateScreen+0xc>
    }
}
 800321c:	bf00      	nop
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	200005ac 	.word	0x200005ac

0800322c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	71fb      	strb	r3, [r7, #7]
 8003236:	460b      	mov	r3, r1
 8003238:	71bb      	strb	r3, [r7, #6]
 800323a:	4613      	mov	r3, r2
 800323c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800323e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003242:	2b00      	cmp	r3, #0
 8003244:	db3d      	blt.n	80032c2 <ssd1306_DrawPixel+0x96>
 8003246:	79bb      	ldrb	r3, [r7, #6]
 8003248:	2b3f      	cmp	r3, #63	; 0x3f
 800324a:	d83a      	bhi.n	80032c2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800324c:	797b      	ldrb	r3, [r7, #5]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d11a      	bne.n	8003288 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003252:	79fa      	ldrb	r2, [r7, #7]
 8003254:	79bb      	ldrb	r3, [r7, #6]
 8003256:	08db      	lsrs	r3, r3, #3
 8003258:	b2d8      	uxtb	r0, r3
 800325a:	4603      	mov	r3, r0
 800325c:	01db      	lsls	r3, r3, #7
 800325e:	4413      	add	r3, r2
 8003260:	4a1b      	ldr	r2, [pc, #108]	; (80032d0 <ssd1306_DrawPixel+0xa4>)
 8003262:	5cd3      	ldrb	r3, [r2, r3]
 8003264:	b25a      	sxtb	r2, r3
 8003266:	79bb      	ldrb	r3, [r7, #6]
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	2101      	movs	r1, #1
 800326e:	fa01 f303 	lsl.w	r3, r1, r3
 8003272:	b25b      	sxtb	r3, r3
 8003274:	4313      	orrs	r3, r2
 8003276:	b259      	sxtb	r1, r3
 8003278:	79fa      	ldrb	r2, [r7, #7]
 800327a:	4603      	mov	r3, r0
 800327c:	01db      	lsls	r3, r3, #7
 800327e:	4413      	add	r3, r2
 8003280:	b2c9      	uxtb	r1, r1
 8003282:	4a13      	ldr	r2, [pc, #76]	; (80032d0 <ssd1306_DrawPixel+0xa4>)
 8003284:	54d1      	strb	r1, [r2, r3]
 8003286:	e01d      	b.n	80032c4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003288:	79fa      	ldrb	r2, [r7, #7]
 800328a:	79bb      	ldrb	r3, [r7, #6]
 800328c:	08db      	lsrs	r3, r3, #3
 800328e:	b2d8      	uxtb	r0, r3
 8003290:	4603      	mov	r3, r0
 8003292:	01db      	lsls	r3, r3, #7
 8003294:	4413      	add	r3, r2
 8003296:	4a0e      	ldr	r2, [pc, #56]	; (80032d0 <ssd1306_DrawPixel+0xa4>)
 8003298:	5cd3      	ldrb	r3, [r2, r3]
 800329a:	b25a      	sxtb	r2, r3
 800329c:	79bb      	ldrb	r3, [r7, #6]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	2101      	movs	r1, #1
 80032a4:	fa01 f303 	lsl.w	r3, r1, r3
 80032a8:	b25b      	sxtb	r3, r3
 80032aa:	43db      	mvns	r3, r3
 80032ac:	b25b      	sxtb	r3, r3
 80032ae:	4013      	ands	r3, r2
 80032b0:	b259      	sxtb	r1, r3
 80032b2:	79fa      	ldrb	r2, [r7, #7]
 80032b4:	4603      	mov	r3, r0
 80032b6:	01db      	lsls	r3, r3, #7
 80032b8:	4413      	add	r3, r2
 80032ba:	b2c9      	uxtb	r1, r1
 80032bc:	4a04      	ldr	r2, [pc, #16]	; (80032d0 <ssd1306_DrawPixel+0xa4>)
 80032be:	54d1      	strb	r1, [r2, r3]
 80032c0:	e000      	b.n	80032c4 <ssd1306_DrawPixel+0x98>
        return;
 80032c2:	bf00      	nop
    }
}
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	200005ac 	.word	0x200005ac

080032d4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	b089      	sub	sp, #36	; 0x24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4604      	mov	r4, r0
 80032dc:	4638      	mov	r0, r7
 80032de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80032e2:	4623      	mov	r3, r4
 80032e4:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	2b1f      	cmp	r3, #31
 80032ea:	d902      	bls.n	80032f2 <ssd1306_WriteChar+0x1e>
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	2b7e      	cmp	r3, #126	; 0x7e
 80032f0:	d901      	bls.n	80032f6 <ssd1306_WriteChar+0x22>
        return 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e079      	b.n	80033ea <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80032f6:	4b3f      	ldr	r3, [pc, #252]	; (80033f4 <ssd1306_WriteChar+0x120>)
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	783b      	ldrb	r3, [r7, #0]
 80032fe:	4413      	add	r3, r2
 8003300:	2b80      	cmp	r3, #128	; 0x80
 8003302:	dc06      	bgt.n	8003312 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8003304:	4b3b      	ldr	r3, [pc, #236]	; (80033f4 <ssd1306_WriteChar+0x120>)
 8003306:	885b      	ldrh	r3, [r3, #2]
 8003308:	461a      	mov	r2, r3
 800330a:	787b      	ldrb	r3, [r7, #1]
 800330c:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800330e:	2b40      	cmp	r3, #64	; 0x40
 8003310:	dd01      	ble.n	8003316 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8003312:	2300      	movs	r3, #0
 8003314:	e069      	b.n	80033ea <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8003316:	2300      	movs	r3, #0
 8003318:	61fb      	str	r3, [r7, #28]
 800331a:	e04e      	b.n	80033ba <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	7bfb      	ldrb	r3, [r7, #15]
 8003320:	3b20      	subs	r3, #32
 8003322:	7879      	ldrb	r1, [r7, #1]
 8003324:	fb01 f303 	mul.w	r3, r1, r3
 8003328:	4619      	mov	r1, r3
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	440b      	add	r3, r1
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	4413      	add	r3, r2
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8003336:	2300      	movs	r3, #0
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	e036      	b.n	80033aa <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d013      	beq.n	8003374 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800334c:	4b29      	ldr	r3, [pc, #164]	; (80033f4 <ssd1306_WriteChar+0x120>)
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	b2da      	uxtb	r2, r3
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	b2db      	uxtb	r3, r3
 8003356:	4413      	add	r3, r2
 8003358:	b2d8      	uxtb	r0, r3
 800335a:	4b26      	ldr	r3, [pc, #152]	; (80033f4 <ssd1306_WriteChar+0x120>)
 800335c:	885b      	ldrh	r3, [r3, #2]
 800335e:	b2da      	uxtb	r2, r3
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	4413      	add	r3, r2
 8003366:	b2db      	uxtb	r3, r3
 8003368:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800336c:	4619      	mov	r1, r3
 800336e:	f7ff ff5d 	bl	800322c <ssd1306_DrawPixel>
 8003372:	e017      	b.n	80033a4 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003374:	4b1f      	ldr	r3, [pc, #124]	; (80033f4 <ssd1306_WriteChar+0x120>)
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	b2da      	uxtb	r2, r3
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	4413      	add	r3, r2
 8003380:	b2d8      	uxtb	r0, r3
 8003382:	4b1c      	ldr	r3, [pc, #112]	; (80033f4 <ssd1306_WriteChar+0x120>)
 8003384:	885b      	ldrh	r3, [r3, #2]
 8003386:	b2da      	uxtb	r2, r3
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	b2db      	uxtb	r3, r3
 800338c:	4413      	add	r3, r2
 800338e:	b2d9      	uxtb	r1, r3
 8003390:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003394:	2b00      	cmp	r3, #0
 8003396:	bf0c      	ite	eq
 8003398:	2301      	moveq	r3, #1
 800339a:	2300      	movne	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	461a      	mov	r2, r3
 80033a0:	f7ff ff44 	bl	800322c <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	3301      	adds	r3, #1
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	783b      	ldrb	r3, [r7, #0]
 80033ac:	461a      	mov	r2, r3
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d3c3      	bcc.n	800333c <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	3301      	adds	r3, #1
 80033b8:	61fb      	str	r3, [r7, #28]
 80033ba:	787b      	ldrb	r3, [r7, #1]
 80033bc:	461a      	mov	r2, r3
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d3ab      	bcc.n	800331c <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <ssd1306_WriteChar+0x120>)
 80033c6:	881a      	ldrh	r2, [r3, #0]
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d006      	beq.n	80033dc <ssd1306_WriteChar+0x108>
 80033ce:	68b9      	ldr	r1, [r7, #8]
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	3b20      	subs	r3, #32
 80033d4:	440b      	add	r3, r1
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	e001      	b.n	80033e0 <ssd1306_WriteChar+0x10c>
 80033dc:	783b      	ldrb	r3, [r7, #0]
 80033de:	b29b      	uxth	r3, r3
 80033e0:	4413      	add	r3, r2
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	4b03      	ldr	r3, [pc, #12]	; (80033f4 <ssd1306_WriteChar+0x120>)
 80033e6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3724      	adds	r7, #36	; 0x24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd90      	pop	{r4, r7, pc}
 80033f2:	bf00      	nop
 80033f4:	200009ac 	.word	0x200009ac

080033f8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	4638      	mov	r0, r7
 8003402:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8003406:	e013      	b.n	8003430 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	7818      	ldrb	r0, [r3, #0]
 800340c:	7e3b      	ldrb	r3, [r7, #24]
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	463b      	mov	r3, r7
 8003412:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003414:	f7ff ff5e 	bl	80032d4 <ssd1306_WriteChar>
 8003418:	4603      	mov	r3, r0
 800341a:	461a      	mov	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d002      	beq.n	800342a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	e008      	b.n	800343c <ssd1306_WriteString+0x44>
        }
        str++;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	3301      	adds	r3, #1
 800342e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1e7      	bne.n	8003408 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	781b      	ldrb	r3, [r3, #0]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	460a      	mov	r2, r1
 800344e:	71fb      	strb	r3, [r7, #7]
 8003450:	4613      	mov	r3, r2
 8003452:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	b29a      	uxth	r2, r3
 8003458:	4b05      	ldr	r3, [pc, #20]	; (8003470 <ssd1306_SetCursor+0x2c>)
 800345a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800345c:	79bb      	ldrb	r3, [r7, #6]
 800345e:	b29a      	uxth	r2, r3
 8003460:	4b03      	ldr	r3, [pc, #12]	; (8003470 <ssd1306_SetCursor+0x2c>)
 8003462:	805a      	strh	r2, [r3, #2]
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	200009ac 	.word	0x200009ac

08003474 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800347e:	2381      	movs	r3, #129	; 0x81
 8003480:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff fdf5 	bl	8003074 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff fdf1 	bl	8003074 <ssd1306_WriteCommand>
}
 8003492:	bf00      	nop
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80034ac:	23af      	movs	r3, #175	; 0xaf
 80034ae:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80034b0:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <ssd1306_SetDisplayOn+0x38>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	715a      	strb	r2, [r3, #5]
 80034b6:	e004      	b.n	80034c2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80034b8:	23ae      	movs	r3, #174	; 0xae
 80034ba:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <ssd1306_SetDisplayOn+0x38>)
 80034be:	2200      	movs	r2, #0
 80034c0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff fdd5 	bl	8003074 <ssd1306_WriteCommand>
}
 80034ca:	bf00      	nop
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	200009ac 	.word	0x200009ac

080034d8 <ssd1306_WriteInt>:
    return SSD1306.DisplayOn;
}

// Upd by AKG
void ssd1306_WriteInt(int num, SSD1306_Font_t Font, SSD1306_COLOR color)
{
 80034d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034dc:	b08b      	sub	sp, #44	; 0x2c
 80034de:	af02      	add	r7, sp, #8
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	4638      	mov	r0, r7
 80034e4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80034e8:	466b      	mov	r3, sp
 80034ea:	461e      	mov	r6, r3
	static const int MAX_NUMBER_LENGTH = 10;

	int num_length = 1;
 80034ec:	2301      	movs	r3, #1
 80034ee:	61fb      	str	r3, [r7, #28]
	int num_divided = num;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	61bb      	str	r3, [r7, #24]
	while(num_divided / 10) {
 80034f4:	e00a      	b.n	800350c <ssd1306_WriteInt+0x34>
		num_length++;
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	3301      	adds	r3, #1
 80034fa:	61fb      	str	r3, [r7, #28]
		num_divided = num_divided / 10;
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	4a32      	ldr	r2, [pc, #200]	; (80035c8 <ssd1306_WriteInt+0xf0>)
 8003500:	fb82 1203 	smull	r1, r2, r2, r3
 8003504:	1092      	asrs	r2, r2, #2
 8003506:	17db      	asrs	r3, r3, #31
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	61bb      	str	r3, [r7, #24]
	while(num_divided / 10) {
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	3309      	adds	r3, #9
 8003510:	2b12      	cmp	r3, #18
 8003512:	d8f0      	bhi.n	80034f6 <ssd1306_WriteInt+0x1e>
	}

	char str[MAX_NUMBER_LENGTH];
 8003514:	4b2d      	ldr	r3, [pc, #180]	; (80035cc <ssd1306_WriteInt+0xf4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3b01      	subs	r3, #1
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	4b2b      	ldr	r3, [pc, #172]	; (80035cc <ssd1306_WriteInt+0xf4>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	2300      	movs	r3, #0
 8003524:	4690      	mov	r8, r2
 8003526:	4699      	mov	r9, r3
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003534:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003538:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800353c:	4b23      	ldr	r3, [pc, #140]	; (80035cc <ssd1306_WriteInt+0xf4>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	461a      	mov	r2, r3
 8003542:	2300      	movs	r3, #0
 8003544:	4614      	mov	r4, r2
 8003546:	461d      	mov	r5, r3
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	00eb      	lsls	r3, r5, #3
 8003552:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003556:	00e2      	lsls	r2, r4, #3
 8003558:	4b1c      	ldr	r3, [pc, #112]	; (80035cc <ssd1306_WriteInt+0xf4>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	3307      	adds	r3, #7
 800355e:	08db      	lsrs	r3, r3, #3
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	ebad 0d03 	sub.w	sp, sp, r3
 8003566:	ab02      	add	r3, sp, #8
 8003568:	3300      	adds	r3, #0
 800356a:	613b      	str	r3, [r7, #16]
	memset(str, 0, MAX_NUMBER_LENGTH*sizeof(char));
 800356c:	4b17      	ldr	r3, [pc, #92]	; (80035cc <ssd1306_WriteInt+0xf4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	461a      	mov	r2, r3
 8003572:	2100      	movs	r1, #0
 8003574:	6938      	ldr	r0, [r7, #16]
 8003576:	f004 fca1 	bl	8007ebc <memset>

	if(num_length <= MAX_NUMBER_LENGTH)
 800357a:	4b14      	ldr	r3, [pc, #80]	; (80035cc <ssd1306_WriteInt+0xf4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	69fa      	ldr	r2, [r7, #28]
 8003580:	429a      	cmp	r2, r3
 8003582:	dc0d      	bgt.n	80035a0 <ssd1306_WriteInt+0xc8>
	{
		itoa(num, str, 10);
 8003584:	220a      	movs	r2, #10
 8003586:	6939      	ldr	r1, [r7, #16]
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f004 fb9f 	bl	8007ccc <itoa>
		ssd1306_WriteString(str, Font, color);
 800358e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	463b      	mov	r3, r7
 8003596:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003598:	6938      	ldr	r0, [r7, #16]
 800359a:	f7ff ff2d 	bl	80033f8 <ssd1306_WriteString>
 800359e:	e00c      	b.n	80035ba <ssd1306_WriteInt+0xe2>
	}
	else
	{
		itoa(0, str, 10);
 80035a0:	220a      	movs	r2, #10
 80035a2:	6939      	ldr	r1, [r7, #16]
 80035a4:	2000      	movs	r0, #0
 80035a6:	f004 fb91 	bl	8007ccc <itoa>
		ssd1306_WriteString(str, Font, color);
 80035aa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	463b      	mov	r3, r7
 80035b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035b4:	6938      	ldr	r0, [r7, #16]
 80035b6:	f7ff ff1f 	bl	80033f8 <ssd1306_WriteString>
 80035ba:	46b5      	mov	sp, r6
	}
}
 80035bc:	bf00      	nop
 80035be:	3724      	adds	r7, #36	; 0x24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035c6:	bf00      	nop
 80035c8:	66666667 	.word	0x66666667
 80035cc:	08008f74 	.word	0x08008f74

080035d0 <rx_message_run_command>:
#include <stdlib.h>

extern general_task_t task;

void rx_message_run_command(char* msg)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
	int32_t code = 0, param = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	2300      	movs	r3, #0
 80035de:	60bb      	str	r3, [r7, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
	memcpy(&code, msg, sizeof(code));
 80035e4:	60fb      	str	r3, [r7, #12]
	memcpy(&param, msg + 4, sizeof(param));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3304      	adds	r3, #4
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	60bb      	str	r3, [r7, #8]

	switch(code)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2b05      	cmp	r3, #5
 80035f2:	d84c      	bhi.n	800368e <rx_message_run_command+0xbe>
 80035f4:	a201      	add	r2, pc, #4	; (adr r2, 80035fc <rx_message_run_command+0x2c>)
 80035f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fa:	bf00      	nop
 80035fc:	08003689 	.word	0x08003689
 8003600:	08003615 	.word	0x08003615
 8003604:	08003633 	.word	0x08003633
 8003608:	08003659 	.word	0x08003659
 800360c:	08003661 	.word	0x08003661
 8003610:	08003673 	.word	0x08003673
	{
	case COMM_EMPTY:
		break;
	case COMM_SET_HV:
		// [param] = HV in Volts
		hv_set_abs_output_voltage_V(&task.hv_system, (double)abs(param));
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	bfb8      	it	lt
 800361a:	425b      	neglt	r3, r3
 800361c:	4618      	mov	r0, r3
 800361e:	f7fc ff25 	bl	800046c <__aeabi_i2d>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	ec43 2b10 	vmov	d0, r2, r3
 800362a:	481b      	ldr	r0, [pc, #108]	; (8003698 <rx_message_run_command+0xc8>)
 800362c:	f7fe ff16 	bl	800245c <hv_set_abs_output_voltage_V>
		break;
 8003630:	e02d      	b.n	800368e <rx_message_run_command+0xbe>
	case COMM_START_MEAS:
		if(param >= 0) // [param] = seconds
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	db29      	blt.n	800368c <rx_message_run_command+0xbc>
		{
			adc_monitor_start_measurement(&task.adcDRMonitor, task.freqIT / 3 * param);
 8003638:	4b18      	ldr	r3, [pc, #96]	; (800369c <rx_message_run_command+0xcc>)
 800363a:	885b      	ldrh	r3, [r3, #2]
 800363c:	4a18      	ldr	r2, [pc, #96]	; (80036a0 <rx_message_run_command+0xd0>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	085b      	lsrs	r3, r3, #1
 8003644:	b29b      	uxth	r3, r3
 8003646:	461a      	mov	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	fb02 f303 	mul.w	r3, r2, r3
 800364e:	4619      	mov	r1, r3
 8003650:	4814      	ldr	r0, [pc, #80]	; (80036a4 <rx_message_run_command+0xd4>)
 8003652:	f7fd fef1 	bl	8001438 <adc_monitor_start_measurement>
		}
		break;
 8003656:	e019      	b.n	800368c <rx_message_run_command+0xbc>
	case COMM_RESET_MEAS:
		adc_monitor_reset_measurement(&task.adcDRMonitor);
 8003658:	4812      	ldr	r0, [pc, #72]	; (80036a4 <rx_message_run_command+0xd4>)
 800365a:	f7fd ff0f 	bl	800147c <adc_monitor_reset_measurement>
		break;
 800365e:	e016      	b.n	800368e <rx_message_run_command+0xbe>
	case COMM_SET_MEAS_RANGE:
		if(!param) // [param] = 0 - broad range, 1 - narrow range
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d102      	bne.n	800366c <rx_message_run_command+0x9c>
		{
			select_broad_adc_dose_range();
 8003666:	f7fd ff61 	bl	800152c <select_broad_adc_dose_range>
		}
		else
		{
			select_narrow_adc_dose_range();
		}
		break;
 800366a:	e010      	b.n	800368e <rx_message_run_command+0xbe>
			select_narrow_adc_dose_range();
 800366c:	f7fd ff74 	bl	8001558 <select_narrow_adc_dose_range>
		break;
 8003670:	e00d      	b.n	800368e <rx_message_run_command+0xbe>
	case COMM_SWITCH_HV:
		if(!param) // [param] = 0 - positive HV source, 1 - negative HV source
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d103      	bne.n	8003680 <rx_message_run_command+0xb0>
		{
			hv_select_positive_source(&task.hv_system);
 8003678:	4807      	ldr	r0, [pc, #28]	; (8003698 <rx_message_run_command+0xc8>)
 800367a:	f7fe fede 	bl	800243a <hv_select_positive_source>
		else
		{
			hv_select_negative_source(&task.hv_system);
		}
		// gpio toggle
		break;
 800367e:	e006      	b.n	800368e <rx_message_run_command+0xbe>
			hv_select_negative_source(&task.hv_system);
 8003680:	4805      	ldr	r0, [pc, #20]	; (8003698 <rx_message_run_command+0xc8>)
 8003682:	f7fe fec9 	bl	8002418 <hv_select_negative_source>
		break;
 8003686:	e002      	b.n	800368e <rx_message_run_command+0xbe>
		break;
 8003688:	bf00      	nop
 800368a:	e000      	b.n	800368e <rx_message_run_command+0xbe>
		break;
 800368c:	bf00      	nop
	}
}
 800368e:	bf00      	nop
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000550 	.word	0x20000550
 800369c:	200002f8 	.word	0x200002f8
 80036a0:	aaaaaaab 	.word	0xaaaaaaab
 80036a4:	200004d0 	.word	0x200004d0

080036a8 <tcp_input_stream_init>:
static int tcp_input_stream_listen_socket(tcp_input_stream_t *self);
static int tcp_input_stream_receive(tcp_input_stream_t *self);
static int tcp_input_stream_reboot_ethernet(tcp_input_stream_t *self, int sockOpen);

int tcp_input_stream_init(tcp_input_stream_t *self, tcp_input_stream_init_data_t tcpInit)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	4638      	mov	r0, r7
 80036b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	memset(self, 0, sizeof(*self));
 80036b6:	223c      	movs	r2, #60	; 0x3c
 80036b8:	2100      	movs	r1, #0
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f004 fbfe 	bl	8007ebc <memset>
	memset(self->msg, 0, INPUT_MESSAGE_SIZE);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	3301      	adds	r3, #1
 80036c4:	2208      	movs	r2, #8
 80036c6:	2100      	movs	r1, #0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f004 fbf7 	bl	8007ebc <memset>
	memset(self->msgTemp, 0, INPUT_MESSAGE_SIZE);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	3309      	adds	r3, #9
 80036d2:	2208      	movs	r2, #8
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f004 fbf0 	bl	8007ebc <memset>
	memset(self->buff, 0, INPUT_MESSAGE_BUFFER_SIZE);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	3311      	adds	r3, #17
 80036e0:	2208      	movs	r2, #8
 80036e2:	2100      	movs	r1, #0
 80036e4:	4618      	mov	r0, r3
 80036e6:	f004 fbe9 	bl	8007ebc <memset>
	self->stat = 0;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	701a      	strb	r2, [r3, #0]
	self->initData = tcpInit;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3328      	adds	r3, #40	; 0x28
 80036f4:	463a      	mov	r2, r7
 80036f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80036f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	self->currentBuffIndex = 0;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	61da      	str	r2, [r3, #28]
	self->bytesReceived = 0;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	621a      	str	r2, [r3, #32]
	self->msgSize = 0;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	849a      	strh	r2, [r3, #36]	; 0x24
	self->handlerEnabled = 0;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	self->isConnected = 0;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	self->w5500RebootCounter = self->initData.w5500RebootCounterMax;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	639a      	str	r2, [r3, #56]	; 0x38

	//self->state = INPUT_SOCK_INIT;
	return 0;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <tcp_input_stream_routine>:
{
	return INPUT_MESSAGE_SIZE; //size
}

int tcp_input_stream_routine(tcp_input_stream_t *self)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
	// new state mashine
	int received = -1;
 8003738:	f04f 33ff 	mov.w	r3, #4294967295
 800373c:	60fb      	str	r3, [r7, #12]
	self->isConnected = 0;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	switch(getSn_SR(self->initData.sn))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	3301      	adds	r3, #1
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003756:	4618      	mov	r0, r3
 8003758:	f000 fe96 	bl	8004488 <WIZCHIP_READ>
 800375c:	4603      	mov	r3, r0
 800375e:	2b17      	cmp	r3, #23
 8003760:	d013      	beq.n	800378a <tcp_input_stream_routine+0x5a>
 8003762:	2b17      	cmp	r3, #23
 8003764:	dc24      	bgt.n	80037b0 <tcp_input_stream_routine+0x80>
 8003766:	2b00      	cmp	r3, #0
 8003768:	d002      	beq.n	8003770 <tcp_input_stream_routine+0x40>
 800376a:	2b13      	cmp	r3, #19
 800376c:	d009      	beq.n	8003782 <tcp_input_stream_routine+0x52>
 800376e:	e01f      	b.n	80037b0 <tcp_input_stream_routine+0x80>
	{
	case SOCK_CLOSED:
		int open = tcp_input_stream_open_socket(self);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f830 	bl	80037d6 <tcp_input_stream_open_socket>
 8003776:	60b8      	str	r0, [r7, #8]
		tcp_input_stream_reboot_ethernet(self, open);
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f8ba 	bl	80038f4 <tcp_input_stream_reboot_ethernet>
		break;
 8003780:	e016      	b.n	80037b0 <tcp_input_stream_routine+0x80>
	case SOCK_INIT:
		tcp_input_stream_listen_socket(self);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f83f 	bl	8003806 <tcp_input_stream_listen_socket>
		break;
 8003788:	e012      	b.n	80037b0 <tcp_input_stream_routine+0x80>
	case SOCK_ESTABLISHED:
		received = tcp_input_stream_receive(self);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f84e 	bl	800382c <tcp_input_stream_receive>
 8003790:	60f8      	str	r0, [r7, #12]
		if(received < 0)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	da06      	bge.n	80037a6 <tcp_input_stream_routine+0x76>
		{
			disconnect(self->initData.sn);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 fc4c 	bl	800403c <disconnect>
		}
		else
		{
			self->isConnected = 1;
		}
		break;
 80037a4:	e003      	b.n	80037ae <tcp_input_stream_routine+0x7e>
			self->isConnected = 1;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		break;
 80037ae:	bf00      	nop
	}
	return 0;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <tcp_input_stream_enable_handler>:


void tcp_input_stream_enable_handler(tcp_input_stream_t *self)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
	self->handlerEnabled = 1;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <tcp_input_stream_open_socket>:
{
	return self->isConnected;
}

static int tcp_input_stream_open_socket(tcp_input_stream_t *self)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
	self->stat = socket(self->initData.sn, Sn_MR_TCP, self->initData.port, self->initData.flag);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80037ee:	2101      	movs	r1, #1
 80037f0:	f000 fa48 	bl	8003c84 <socket>
 80037f4:	4603      	mov	r3, r0
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	701a      	strb	r2, [r3, #0]
	return 0;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <tcp_input_stream_listen_socket>:

static int tcp_input_stream_listen_socket(tcp_input_stream_t *self)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b082      	sub	sp, #8
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
	self->stat = listen(self->initData.sn);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003814:	4618      	mov	r0, r3
 8003816:	f000 fbb7 	bl	8003f88 <listen>
 800381a:	4603      	mov	r3, r0
 800381c:	b2da      	uxtb	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	701a      	strb	r2, [r3, #0]
	return 0;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <tcp_input_stream_receive>:

static int tcp_input_stream_receive(tcp_input_stream_t *self)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
	while (self->bytesReceived != INPUT_MESSAGE_SIZE)
 8003834:	e033      	b.n	800389e <tcp_input_stream_receive+0x72>
	{
		int recv_size = recv(self->initData.sn, (uint8_t*)self->buff, INPUT_MESSAGE_BUFFER_SIZE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3311      	adds	r3, #17
 8003840:	2208      	movs	r2, #8
 8003842:	4619      	mov	r1, r3
 8003844:	f000 fd6a 	bl	800431c <recv>
 8003848:	60f8      	str	r0, [r7, #12]
		if (recv_size == 0)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <tcp_input_stream_receive+0x28>
		{
			return 0;
 8003850:	2300      	movs	r3, #0
 8003852:	e04b      	b.n	80038ec <tcp_input_stream_receive+0xc0>
		}
		if (recv_size < 0)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	da01      	bge.n	800385e <tcp_input_stream_receive+0x32>
		{
			return recv_size;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	e046      	b.n	80038ec <tcp_input_stream_receive+0xc0>
		}

		self->bytesReceived += recv_size;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1a      	ldr	r2, [r3, #32]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	441a      	add	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	621a      	str	r2, [r3, #32]

		int i;
		for(i = 0; i < recv_size; ++i)
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]
 800386e:	e012      	b.n	8003896 <tcp_input_stream_receive+0x6a>
		{
			self->msgTemp[self->currentBuffIndex] = self->buff[i];
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	440a      	add	r2, r1
 800387a:	3211      	adds	r2, #17
 800387c:	7811      	ldrb	r1, [r2, #0]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	4413      	add	r3, r2
 8003882:	460a      	mov	r2, r1
 8003884:	725a      	strb	r2, [r3, #9]
			self->currentBuffIndex++;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	1c5a      	adds	r2, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	61da      	str	r2, [r3, #28]
		for(i = 0; i < recv_size; ++i)
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	3301      	adds	r3, #1
 8003894:	617b      	str	r3, [r7, #20]
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	429a      	cmp	r2, r3
 800389c:	dbe8      	blt.n	8003870 <tcp_input_stream_receive+0x44>
	while (self->bytesReceived != INPUT_MESSAGE_SIZE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d1c7      	bne.n	8003836 <tcp_input_stream_receive+0xa>
		}

	}

	memcpy(self->msg, self->msgTemp, INPUT_MESSAGE_SIZE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	1c58      	adds	r0, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3309      	adds	r3, #9
 80038ae:	2208      	movs	r2, #8
 80038b0:	4619      	mov	r1, r3
 80038b2:	f004 fb47 	bl	8007f44 <memcpy>

	if(self->handlerEnabled)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d004      	beq.n	80038ca <tcp_input_stream_receive+0x9e>
	{
		rx_message_run_command(self->msg); // reaction
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3301      	adds	r3, #1
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff fe83 	bl	80035d0 <rx_message_run_command>
	}

	int tempBytesReceived = self->bytesReceived;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	613b      	str	r3, [r7, #16]
	memset(self->msgTemp, 0, INPUT_MESSAGE_SIZE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3309      	adds	r3, #9
 80038d4:	2208      	movs	r2, #8
 80038d6:	2100      	movs	r1, #0
 80038d8:	4618      	mov	r0, r3
 80038da:	f004 faef 	bl	8007ebc <memset>
	self->bytesReceived = 0;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	621a      	str	r2, [r3, #32]
	self->currentBuffIndex = 0;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	61da      	str	r2, [r3, #28]

	return tempBytesReceived;
 80038ea:	693b      	ldr	r3, [r7, #16]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <tcp_input_stream_reboot_ethernet>:
	close(self->initData.sn);
	return 0;
}

static int tcp_input_stream_reboot_ethernet(tcp_input_stream_t *self, int sockOpen)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
	if(sockOpen != SOCK_OK)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d010      	beq.n	8003926 <tcp_input_stream_reboot_ethernet+0x32>
	{
		if(self->w5500RebootCounter == 0)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003908:	2b00      	cmp	r3, #0
 800390a:	d106      	bne.n	800391a <tcp_input_stream_reboot_ethernet+0x26>
		{
			W5500_Reboot();
 800390c:	f001 fbc2 	bl	8005094 <W5500_Reboot>
			// reset delay counter after reboot
			self->w5500RebootCounter = self->initData.w5500RebootCounterMax;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	639a      	str	r2, [r3, #56]	; 0x38
 8003918:	e009      	b.n	800392e <tcp_input_stream_reboot_ethernet+0x3a>
		}
		else
		{
			// count delay
			self->w5500RebootCounter--;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391e:	1e5a      	subs	r2, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	639a      	str	r2, [r3, #56]	; 0x38
 8003924:	e003      	b.n	800392e <tcp_input_stream_reboot_ethernet+0x3a>
		}
	}
	else
	{
		// reset delay counter after ok open socket
		self->w5500RebootCounter = self->initData.w5500RebootCounterMax;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	639a      	str	r2, [r3, #56]	; 0x38
	}
	return 0;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <tcp_output_stream_init>:
static int tcp_output_stream_listen_socket(tcp_output_stream_t *self);
static int tcp_output_stream_send(tcp_output_stream_t *self);
static int tcp_output_stream_reboot_socket(tcp_output_stream_t *self, int sent);

int tcp_output_stream_init(tcp_output_stream_t *self, tcp_output_stream_init_data_t tcpInit)
{
 8003938:	b084      	sub	sp, #16
 800393a:	b590      	push	{r4, r7, lr}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	f107 001c 	add.w	r0, r7, #28
 8003946:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	memset(self, 0, sizeof(*self));
 800394a:	229c      	movs	r2, #156	; 0x9c
 800394c:	2100      	movs	r1, #0
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f004 fab4 	bl	8007ebc <memset>
	self->stat = 0;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	701a      	strb	r2, [r3, #0]
	self->initData = tcpInit;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f103 0484 	add.w	r4, r3, #132	; 0x84
 8003960:	f107 031c 	add.w	r3, r7, #28
 8003964:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003966:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->msgSize = 0;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	self->isConnected = 0;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	self->closeSocketCounter = self->initData.closeSocketCounterMax;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	memset(self->msg, 0, MAX_OUTPUT_MESSAGE_SIZE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3301      	adds	r3, #1
 800398a:	2280      	movs	r2, #128	; 0x80
 800398c:	2100      	movs	r1, #0
 800398e:	4618      	mov	r0, r3
 8003990:	f004 fa94 	bl	8007ebc <memset>
	return 0;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80039a0:	b004      	add	sp, #16
 80039a2:	4770      	bx	lr

080039a4 <tcp_output_stream_set_message>:
{
	return 0;
}

int tcp_output_stream_set_message(tcp_output_stream_t *self, char* message, uint16_t size)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	4613      	mov	r3, r2
 80039b0:	80fb      	strh	r3, [r7, #6]
	memset(self->msg, 0, MAX_OUTPUT_MESSAGE_SIZE);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	3301      	adds	r3, #1
 80039b6:	2280      	movs	r2, #128	; 0x80
 80039b8:	2100      	movs	r1, #0
 80039ba:	4618      	mov	r0, r3
 80039bc:	f004 fa7e 	bl	8007ebc <memset>
	if(size < MAX_OUTPUT_MESSAGE_SIZE)
 80039c0:	88fb      	ldrh	r3, [r7, #6]
 80039c2:	2b7f      	cmp	r3, #127	; 0x7f
 80039c4:	d80b      	bhi.n	80039de <tcp_output_stream_set_message+0x3a>
	{
		self->msgSize = size;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	88fa      	ldrh	r2, [r7, #6]
 80039ca:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		memcpy(self->msg, message, size);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	3301      	adds	r3, #1
 80039d2:	88fa      	ldrh	r2, [r7, #6]
 80039d4:	68b9      	ldr	r1, [r7, #8]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f004 fab4 	bl	8007f44 <memcpy>
 80039dc:	e00a      	b.n	80039f4 <tcp_output_stream_set_message+0x50>
	}
	else
	{
		self->msgSize = MAX_OUTPUT_MESSAGE_SIZE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2280      	movs	r2, #128	; 0x80
 80039e2:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		memcpy(self->msg, message, MAX_OUTPUT_MESSAGE_SIZE);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	3301      	adds	r3, #1
 80039ea:	2280      	movs	r2, #128	; 0x80
 80039ec:	68b9      	ldr	r1, [r7, #8]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f004 faa8 	bl	8007f44 <memcpy>
	}
	return 0;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <tcp_output_stream_routine>:

int tcp_output_stream_routine(tcp_output_stream_t *self)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
	// new state machine
	int sent = -1;
 8003a06:	f04f 33ff 	mov.w	r3, #4294967295
 8003a0a:	60fb      	str	r3, [r7, #12]
	self->isConnected = 0;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	switch(getSn_SR(self->initData.sn))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 fd2f 	bl	8004488 <WIZCHIP_READ>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b17      	cmp	r3, #23
 8003a2e:	d00e      	beq.n	8003a4e <tcp_output_stream_routine+0x50>
 8003a30:	2b17      	cmp	r3, #23
 8003a32:	dc27      	bgt.n	8003a84 <tcp_output_stream_routine+0x86>
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <tcp_output_stream_routine+0x40>
 8003a38:	2b13      	cmp	r3, #19
 8003a3a:	d004      	beq.n	8003a46 <tcp_output_stream_routine+0x48>
 8003a3c:	e022      	b.n	8003a84 <tcp_output_stream_routine+0x86>
	{
	case SOCK_CLOSED:
		//int open = tcp_output_stream_open_socket(self);
		tcp_output_stream_open_socket(self);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f825 	bl	8003a8e <tcp_output_stream_open_socket>
		break;
 8003a44:	e01e      	b.n	8003a84 <tcp_output_stream_routine+0x86>
	case SOCK_INIT:
		tcp_output_stream_listen_socket(self);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f83a 	bl	8003ac0 <tcp_output_stream_listen_socket>
		break;
 8003a4c:	e01a      	b.n	8003a84 <tcp_output_stream_routine+0x86>
	case SOCK_ESTABLISHED:
		sent = tcp_output_stream_send(self);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f849 	bl	8003ae6 <tcp_output_stream_send>
 8003a54:	60f8      	str	r0, [r7, #12]
		if(sent < 0)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	da06      	bge.n	8003a6a <tcp_output_stream_routine+0x6c>
		{
			disconnect(self->initData.sn);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 faea 	bl	800403c <disconnect>
		}
		else
		{
			self->isConnected = 1;
		}
		break;
 8003a68:	e00b      	b.n	8003a82 <tcp_output_stream_routine+0x84>
		else if (self == 0)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d104      	bne.n	8003a7a <tcp_output_stream_routine+0x7c>
			tcp_output_stream_reboot_socket(self, sent);
 8003a70:	68f9      	ldr	r1, [r7, #12]
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f85a 	bl	8003b2c <tcp_output_stream_reboot_socket>
		break;
 8003a78:	e003      	b.n	8003a82 <tcp_output_stream_routine+0x84>
			self->isConnected = 1;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		break;
 8003a82:	bf00      	nop
	}
	return 0;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <tcp_output_stream_open_socket>:
{
	return self->isConnected;
}

static int tcp_output_stream_open_socket(tcp_output_stream_t *self)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
	self->stat = socket(self->initData.sn, Sn_MR_TCP, self->initData.port, self->initData.flag);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 0084 	ldrb.w	r0, [r3, #132]	; 0x84
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	f000 f8eb 	bl	8003c84 <socket>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	701a      	strb	r2, [r3, #0]
	return 0;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <tcp_output_stream_listen_socket>:

static int tcp_output_stream_listen_socket(tcp_output_stream_t *self)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
	self->stat = listen(self->initData.sn);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fa5a 	bl	8003f88 <listen>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	701a      	strb	r2, [r3, #0]
	return 0;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <tcp_output_stream_send>:

static int tcp_output_stream_send(tcp_output_stream_t *self)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b082      	sub	sp, #8
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
	return send(self->initData.sn, (uint8_t*)self->msg, self->msgSize);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 0084 	ldrb.w	r0, [r3, #132]	; 0x84
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	1c59      	adds	r1, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003afe:	461a      	mov	r2, r3
 8003b00:	f000 fb12 	bl	8004128 <send>
 8003b04:	4603      	mov	r3, r0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <tcp_output_stream_close_socket>:

int tcp_output_stream_close_socket(tcp_output_stream_t *self)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
	close(self->initData.sn);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 f9c5 	bl	8003eac <close>
	return 0;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <tcp_output_stream_reboot_socket>:

static int tcp_output_stream_reboot_socket(tcp_output_stream_t *self, int sent)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
	if (!sent) // sent == 0
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d116      	bne.n	8003b6a <tcp_output_stream_reboot_socket+0x3e>
	{
		if(self->closeSocketCounter == 0)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d109      	bne.n	8003b5a <tcp_output_stream_reboot_socket+0x2e>
		{
			tcp_output_stream_close_socket(self);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff ffe1 	bl	8003b0e <tcp_output_stream_close_socket>

			// reset delay counter after reboot
			self->closeSocketCounter = self->initData.closeSocketCounterMax;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003b58:	e00d      	b.n	8003b76 <tcp_output_stream_reboot_socket+0x4a>
		}
		else
		{
			// count delay
			self->closeSocketCounter--;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b60:	1e5a      	subs	r2, r3, #1
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003b68:	e005      	b.n	8003b76 <tcp_output_stream_reboot_socket+0x4a>
		}
	}
	else
	{
		// reset delay counter after reboot
		self->closeSocketCounter = self->initData.closeSocketCounterMax;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}

	return 0;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <tx_message_increase_id>:
{
	return 0;
}

void tx_message_increase_id(tx_message_t *self)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
	uint32_t id;
	memcpy(&id, self->message + BYTE_POS_ID, sizeof(id)); // get current id
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	60fb      	str	r3, [r7, #12]
	id++; // increase id
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	3301      	adds	r3, #1
 8003b92:	60fb      	str	r3, [r7, #12]
	memcpy(self->message + BYTE_POS_ID, (char*)&id, sizeof(id)); // copy increased id
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	601a      	str	r2, [r3, #0]
}
 8003b9a:	bf00      	nop
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <tx_message_set_adc_dr_uV>:

void tx_message_set_adc_dr_uV(tx_message_t *self, int32_t val)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	6039      	str	r1, [r7, #0]
	memcpy(self->message + BYTE_POS_ADC_DR, (char*)&val, sizeof(val));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	601a      	str	r2, [r3, #0]
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <tx_message_set_adc_dr_average_uV>:

void tx_message_set_adc_dr_average_uV(tx_message_t *self, int32_t val)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
	memcpy(self->message + BYTE_POS_ADC_DR_AV, (char*)&val, sizeof(val));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3308      	adds	r3, #8
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	601a      	str	r2, [r3, #0]
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <tx_message_set_hv_out_mV>:

void tx_message_set_hv_out_mV(tx_message_t *self, int32_t val)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	6039      	str	r1, [r7, #0]
	memcpy(self->message + BYTE_POS_HV_OUT, (char*)&val, sizeof(val));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	330c      	adds	r3, #12
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	601a      	str	r2, [r3, #0]
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <tx_message_set_press_out_Pa>:

void tx_message_set_press_out_Pa(tx_message_t *self, int32_t val)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
	memcpy(self->message + BYTE_POS_PRESS_OUT, (char*)&val, sizeof(val));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3310      	adds	r3, #16
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	601a      	str	r2, [r3, #0]
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <tx_message_set_adc_dr_measure_state>:

void tx_message_set_adc_dr_measure_state(tx_message_t *self, uint8_t val)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	460b      	mov	r3, r1
 8003c28:	70fb      	strb	r3, [r7, #3]
	memcpy(self->message + BYTE_POS_DR_MEASURE_STATE, (char*)&val, sizeof(val));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3314      	adds	r3, #20
 8003c2e:	78fa      	ldrb	r2, [r7, #3]
 8003c30:	701a      	strb	r2, [r3, #0]
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <tx_message_set_adc_dr_measure_time>:

void tx_message_set_adc_dr_measure_time(tx_message_t *self, uint16_t val)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	460b      	mov	r3, r1
 8003c48:	807b      	strh	r3, [r7, #2]
	memcpy(self->message + BYTE_POS_DR_MEASURE_TIME, (char*)&val, sizeof(val));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3315      	adds	r3, #21
 8003c4e:	887a      	ldrh	r2, [r7, #2]
 8003c50:	801a      	strh	r2, [r3, #0]
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <tx_message_get>:


char* tx_message_get(tx_message_t *self)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
	return self->message;
 8003c66:	687b      	ldr	r3, [r7, #4]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <tx_message_size>:

size_t tx_message_size(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
	return TX_MESSAGE_SIZE;
 8003c78:	2317      	movs	r3, #23
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8003c84:	b590      	push	{r4, r7, lr}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4604      	mov	r4, r0
 8003c8c:	4608      	mov	r0, r1
 8003c8e:	4611      	mov	r1, r2
 8003c90:	461a      	mov	r2, r3
 8003c92:	4623      	mov	r3, r4
 8003c94:	71fb      	strb	r3, [r7, #7]
 8003c96:	4603      	mov	r3, r0
 8003c98:	71bb      	strb	r3, [r7, #6]
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	80bb      	strh	r3, [r7, #4]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d902      	bls.n	8003cae <socket+0x2a>
 8003ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cac:	e0f0      	b.n	8003e90 <socket+0x20c>
	switch(protocol)
 8003cae:	79bb      	ldrb	r3, [r7, #6]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d005      	beq.n	8003cc0 <socket+0x3c>
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	dd11      	ble.n	8003cdc <socket+0x58>
 8003cb8:	3b02      	subs	r3, #2
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d80e      	bhi.n	8003cdc <socket+0x58>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8003cbe:	e010      	b.n	8003ce2 <socket+0x5e>
            getSIPR((uint8_t*)&taddr);
 8003cc0:	f107 030c 	add.w	r3, r7, #12
 8003cc4:	2204      	movs	r2, #4
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003ccc:	f000 fc76 	bl	80045bc <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d105      	bne.n	8003ce2 <socket+0x5e>
 8003cd6:	f06f 0302 	mvn.w	r3, #2
 8003cda:	e0d9      	b.n	8003e90 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8003cdc:	f06f 0304 	mvn.w	r3, #4
 8003ce0:	e0d6      	b.n	8003e90 <socket+0x20c>
         break;
 8003ce2:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8003ce4:	78fb      	ldrb	r3, [r7, #3]
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <socket+0x70>
 8003cee:	f06f 0305 	mvn.w	r3, #5
 8003cf2:	e0cd      	b.n	8003e90 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8003cf4:	78fb      	ldrb	r3, [r7, #3]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d028      	beq.n	8003d4c <socket+0xc8>
	{
   	switch(protocol)
 8003cfa:	79bb      	ldrb	r3, [r7, #6]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d002      	beq.n	8003d06 <socket+0x82>
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d008      	beq.n	8003d16 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8003d04:	e022      	b.n	8003d4c <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8003d06:	78fb      	ldrb	r3, [r7, #3]
 8003d08:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d11a      	bne.n	8003d46 <socket+0xc2>
 8003d10:	f06f 0305 	mvn.w	r3, #5
 8003d14:	e0bc      	b.n	8003e90 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	f003 0320 	and.w	r3, r3, #32
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d006      	beq.n	8003d2e <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8003d20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	db02      	blt.n	8003d2e <socket+0xaa>
 8003d28:	f06f 0305 	mvn.w	r3, #5
 8003d2c:	e0b0      	b.n	8003e90 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8003d2e:	78fb      	ldrb	r3, [r7, #3]
 8003d30:	f003 0310 	and.w	r3, r3, #16
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8003d38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	db04      	blt.n	8003d4a <socket+0xc6>
 8003d40:	f06f 0305 	mvn.w	r3, #5
 8003d44:	e0a4      	b.n	8003e90 <socket+0x20c>
   	      break;
 8003d46:	bf00      	nop
 8003d48:	e000      	b.n	8003d4c <socket+0xc8>
   	      break;
 8003d4a:	bf00      	nop
   	}
   }
	close(sn);
 8003d4c:	79fb      	ldrb	r3, [r7, #7]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 f8ac 	bl	8003eac <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8003d54:	79fb      	ldrb	r3, [r7, #7]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	3301      	adds	r3, #1
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d62:	f023 030f 	bic.w	r3, r3, #15
 8003d66:	b25a      	sxtb	r2, r3
 8003d68:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	b25b      	sxtb	r3, r3
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	4619      	mov	r1, r3
 8003d74:	f000 fbd4 	bl	8004520 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8003d78:	88bb      	ldrh	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d110      	bne.n	8003da0 <socket+0x11c>
	{
	   port = sock_any_port++;
 8003d7e:	4b46      	ldr	r3, [pc, #280]	; (8003e98 <socket+0x214>)
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	b291      	uxth	r1, r2
 8003d86:	4a44      	ldr	r2, [pc, #272]	; (8003e98 <socket+0x214>)
 8003d88:	8011      	strh	r1, [r2, #0]
 8003d8a:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8003d8c:	4b42      	ldr	r3, [pc, #264]	; (8003e98 <socket+0x214>)
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d103      	bne.n	8003da0 <socket+0x11c>
 8003d98:	4b3f      	ldr	r3, [pc, #252]	; (8003e98 <socket+0x214>)
 8003d9a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8003d9e:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	3301      	adds	r3, #1
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dac:	461a      	mov	r2, r3
 8003dae:	88bb      	ldrh	r3, [r7, #4]
 8003db0:	0a1b      	lsrs	r3, r3, #8
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	4619      	mov	r1, r3
 8003db8:	4610      	mov	r0, r2
 8003dba:	f000 fbb1 	bl	8004520 <WIZCHIP_WRITE>
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dca:	461a      	mov	r2, r3
 8003dcc:	88bb      	ldrh	r3, [r7, #4]
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	f000 fba4 	bl	8004520 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	3301      	adds	r3, #1
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003de4:	2101      	movs	r1, #1
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fb9a 	bl	8004520 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003dec:	bf00      	nop
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	3301      	adds	r3, #1
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fb44 	bl	8004488 <WIZCHIP_READ>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f3      	bne.n	8003dee <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	b21b      	sxth	r3, r3
 8003e10:	43db      	mvns	r3, r3
 8003e12:	b21a      	sxth	r2, r3
 8003e14:	4b21      	ldr	r3, [pc, #132]	; (8003e9c <socket+0x218>)
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	b21b      	sxth	r3, r3
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	b21b      	sxth	r3, r3
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	4b1e      	ldr	r3, [pc, #120]	; (8003e9c <socket+0x218>)
 8003e22:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8003e24:	78fb      	ldrb	r3, [r7, #3]
 8003e26:	f003 0201 	and.w	r2, r3, #1
 8003e2a:	79fb      	ldrb	r3, [r7, #7]
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	b21a      	sxth	r2, r3
 8003e32:	4b1a      	ldr	r3, [pc, #104]	; (8003e9c <socket+0x218>)
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	b21b      	sxth	r3, r3
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	b21b      	sxth	r3, r3
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	4b17      	ldr	r3, [pc, #92]	; (8003e9c <socket+0x218>)
 8003e40:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8003e42:	79fb      	ldrb	r3, [r7, #7]
 8003e44:	2201      	movs	r2, #1
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	b21b      	sxth	r3, r3
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	b21a      	sxth	r2, r3
 8003e50:	4b13      	ldr	r3, [pc, #76]	; (8003ea0 <socket+0x21c>)
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	b21b      	sxth	r3, r3
 8003e56:	4013      	ands	r3, r2
 8003e58:	b21b      	sxth	r3, r3
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	4b10      	ldr	r3, [pc, #64]	; (8003ea0 <socket+0x21c>)
 8003e5e:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	4a10      	ldr	r2, [pc, #64]	; (8003ea4 <socket+0x220>)
 8003e64:	2100      	movs	r1, #0
 8003e66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	4a0e      	ldr	r2, [pc, #56]	; (8003ea8 <socket+0x224>)
 8003e6e:	2100      	movs	r1, #0
 8003e70:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8003e72:	bf00      	nop
 8003e74:	79fb      	ldrb	r3, [r7, #7]
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	3301      	adds	r3, #1
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 fb01 	bl	8004488 <WIZCHIP_READ>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f3      	beq.n	8003e74 <socket+0x1f0>
   return (int8_t)sn;
 8003e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8003e90:	4618      	mov	r0, r3
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd90      	pop	{r4, r7, pc}
 8003e98:	20000040 	.word	0x20000040
 8003e9c:	200009b2 	.word	0x200009b2
 8003ea0:	200009b4 	.word	0x200009b4
 8003ea4:	200009b8 	.word	0x200009b8
 8003ea8:	200009c8 	.word	0x200009c8

08003eac <close>:

int8_t close(uint8_t sn)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d902      	bls.n	8003ec2 <close+0x16>
 8003ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec0:	e055      	b.n	8003f6e <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003ece:	2110      	movs	r1, #16
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fb25 	bl	8004520 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8003ed6:	bf00      	nop
 8003ed8:	79fb      	ldrb	r3, [r7, #7]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	3301      	adds	r3, #1
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 facf 	bl	8004488 <WIZCHIP_READ>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f3      	bne.n	8003ed8 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003efc:	211f      	movs	r1, #31
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fb0e 	bl	8004520 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8003f04:	79fb      	ldrb	r3, [r7, #7]
 8003f06:	2201      	movs	r2, #1
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	b21b      	sxth	r3, r3
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	b21a      	sxth	r2, r3
 8003f12:	4b19      	ldr	r3, [pc, #100]	; (8003f78 <close+0xcc>)
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	b21b      	sxth	r3, r3
 8003f18:	4013      	ands	r3, r2
 8003f1a:	b21b      	sxth	r3, r3
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	4b16      	ldr	r3, [pc, #88]	; (8003f78 <close+0xcc>)
 8003f20:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8003f22:	79fb      	ldrb	r3, [r7, #7]
 8003f24:	2201      	movs	r2, #1
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	b21b      	sxth	r3, r3
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	b21a      	sxth	r2, r3
 8003f30:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <close+0xd0>)
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	b21b      	sxth	r3, r3
 8003f36:	4013      	ands	r3, r2
 8003f38:	b21b      	sxth	r3, r3
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <close+0xd0>)
 8003f3e:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8003f40:	79fb      	ldrb	r3, [r7, #7]
 8003f42:	4a0f      	ldr	r2, [pc, #60]	; (8003f80 <close+0xd4>)
 8003f44:	2100      	movs	r1, #0
 8003f46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8003f4a:	79fb      	ldrb	r3, [r7, #7]
 8003f4c:	4a0d      	ldr	r2, [pc, #52]	; (8003f84 <close+0xd8>)
 8003f4e:	2100      	movs	r1, #0
 8003f50:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8003f52:	bf00      	nop
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	3301      	adds	r3, #1
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fa91 	bl	8004488 <WIZCHIP_READ>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1f3      	bne.n	8003f54 <close+0xa8>
	return SOCK_OK;
 8003f6c:	2301      	movs	r3, #1
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	200009b2 	.word	0x200009b2
 8003f7c:	200009b4 	.word	0x200009b4
 8003f80:	200009b8 	.word	0x200009b8
 8003f84:	200009c8 	.word	0x200009c8

08003f88 <listen>:

int8_t listen(uint8_t sn)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d902      	bls.n	8003f9e <listen+0x16>
 8003f98:	f04f 33ff 	mov.w	r3, #4294967295
 8003f9c:	e049      	b.n	8004032 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003f9e:	79fb      	ldrb	r3, [r7, #7]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fa6e 	bl	8004488 <WIZCHIP_READ>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d002      	beq.n	8003fbc <listen+0x34>
 8003fb6:	f06f 0304 	mvn.w	r3, #4
 8003fba:	e03a      	b.n	8004032 <listen+0xaa>
	CHECK_SOCKINIT();
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fa5d 	bl	8004488 <WIZCHIP_READ>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b13      	cmp	r3, #19
 8003fd2:	d002      	beq.n	8003fda <listen+0x52>
 8003fd4:	f06f 0302 	mvn.w	r3, #2
 8003fd8:	e02b      	b.n	8004032 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8003fda:	79fb      	ldrb	r3, [r7, #7]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	3301      	adds	r3, #1
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003fe6:	2102      	movs	r1, #2
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 fa99 	bl	8004520 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8003fee:	bf00      	nop
 8003ff0:	79fb      	ldrb	r3, [r7, #7]
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 fa43 	bl	8004488 <WIZCHIP_READ>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1f3      	bne.n	8003ff0 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8004008:	e006      	b.n	8004018 <listen+0x90>
   {
         close(sn);
 800400a:	79fb      	ldrb	r3, [r7, #7]
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff ff4d 	bl	8003eac <close>
         return SOCKERR_SOCKCLOSED;
 8004012:	f06f 0303 	mvn.w	r3, #3
 8004016:	e00c      	b.n	8004032 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	3301      	adds	r3, #1
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004024:	4618      	mov	r0, r3
 8004026:	f000 fa2f 	bl	8004488 <WIZCHIP_READ>
 800402a:	4603      	mov	r3, r0
 800402c:	2b14      	cmp	r3, #20
 800402e:	d1ec      	bne.n	800400a <listen+0x82>
   }
   return SOCK_OK;
 8004030:	2301      	movs	r3, #1
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	4603      	mov	r3, r0
 8004044:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8004046:	79fb      	ldrb	r3, [r7, #7]
 8004048:	2b08      	cmp	r3, #8
 800404a:	d902      	bls.n	8004052 <disconnect+0x16>
 800404c:	f04f 33ff 	mov.w	r3, #4294967295
 8004050:	e062      	b.n	8004118 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	3301      	adds	r3, #1
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fa14 	bl	8004488 <WIZCHIP_READ>
 8004060:	4603      	mov	r3, r0
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	2b01      	cmp	r3, #1
 8004068:	d002      	beq.n	8004070 <disconnect+0x34>
 800406a:	f06f 0304 	mvn.w	r3, #4
 800406e:	e053      	b.n	8004118 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8004070:	79fb      	ldrb	r3, [r7, #7]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	3301      	adds	r3, #1
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800407c:	2108      	movs	r1, #8
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fa4e 	bl	8004520 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8004084:	bf00      	nop
 8004086:	79fb      	ldrb	r3, [r7, #7]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	3301      	adds	r3, #1
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004092:	4618      	mov	r0, r3
 8004094:	f000 f9f8 	bl	8004488 <WIZCHIP_READ>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f3      	bne.n	8004086 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800409e:	79fb      	ldrb	r3, [r7, #7]
 80040a0:	2201      	movs	r2, #1
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	b21b      	sxth	r3, r3
 80040a8:	43db      	mvns	r3, r3
 80040aa:	b21a      	sxth	r2, r3
 80040ac:	4b1c      	ldr	r3, [pc, #112]	; (8004120 <disconnect+0xe4>)
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	b21b      	sxth	r3, r3
 80040b2:	4013      	ands	r3, r2
 80040b4:	b21b      	sxth	r3, r3
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	4b19      	ldr	r3, [pc, #100]	; (8004120 <disconnect+0xe4>)
 80040ba:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80040bc:	4b19      	ldr	r3, [pc, #100]	; (8004124 <disconnect+0xe8>)
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	fa42 f303 	asr.w	r3, r2, r3
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d016      	beq.n	80040fe <disconnect+0xc2>
 80040d0:	2300      	movs	r3, #0
 80040d2:	e021      	b.n	8004118 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80040d4:	79fb      	ldrb	r3, [r7, #7]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	3301      	adds	r3, #1
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 f9d1 	bl	8004488 <WIZCHIP_READ>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d006      	beq.n	80040fe <disconnect+0xc2>
	   {
	      close(sn);
 80040f0:	79fb      	ldrb	r3, [r7, #7]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff feda 	bl	8003eac <close>
	      return SOCKERR_TIMEOUT;
 80040f8:	f06f 030c 	mvn.w	r3, #12
 80040fc:	e00c      	b.n	8004118 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	3301      	adds	r3, #1
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800410a:	4618      	mov	r0, r3
 800410c:	f000 f9bc 	bl	8004488 <WIZCHIP_READ>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1de      	bne.n	80040d4 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8004116:	2301      	movs	r3, #1
}
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	200009b4 	.word	0x200009b4
 8004124:	200009b2 	.word	0x200009b2

08004128 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	6039      	str	r1, [r7, #0]
 8004132:	71fb      	strb	r3, [r7, #7]
 8004134:	4613      	mov	r3, r2
 8004136:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8004138:	2300      	movs	r3, #0
 800413a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 800413c:	2300      	movs	r3, #0
 800413e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8004140:	79fb      	ldrb	r3, [r7, #7]
 8004142:	2b08      	cmp	r3, #8
 8004144:	d902      	bls.n	800414c <send+0x24>
 8004146:	f04f 33ff 	mov.w	r3, #4294967295
 800414a:	e0de      	b.n	800430a <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800414c:	79fb      	ldrb	r3, [r7, #7]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	3301      	adds	r3, #1
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	4618      	mov	r0, r3
 8004156:	f000 f997 	bl	8004488 <WIZCHIP_READ>
 800415a:	4603      	mov	r3, r0
 800415c:	f003 030f 	and.w	r3, r3, #15
 8004160:	2b01      	cmp	r3, #1
 8004162:	d002      	beq.n	800416a <send+0x42>
 8004164:	f06f 0304 	mvn.w	r3, #4
 8004168:	e0cf      	b.n	800430a <send+0x1e2>
   CHECK_SOCKDATA();
 800416a:	88bb      	ldrh	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d102      	bne.n	8004176 <send+0x4e>
 8004170:	f06f 030d 	mvn.w	r3, #13
 8004174:	e0c9      	b.n	800430a <send+0x1e2>
   tmp = getSn_SR(sn);
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	3301      	adds	r3, #1
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004182:	4618      	mov	r0, r3
 8004184:	f000 f980 	bl	8004488 <WIZCHIP_READ>
 8004188:	4603      	mov	r3, r0
 800418a:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	2b17      	cmp	r3, #23
 8004190:	d005      	beq.n	800419e <send+0x76>
 8004192:	7bfb      	ldrb	r3, [r7, #15]
 8004194:	2b1c      	cmp	r3, #28
 8004196:	d002      	beq.n	800419e <send+0x76>
 8004198:	f06f 0306 	mvn.w	r3, #6
 800419c:	e0b5      	b.n	800430a <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 800419e:	4b5d      	ldr	r3, [pc, #372]	; (8004314 <send+0x1ec>)
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	79fb      	ldrb	r3, [r7, #7]
 80041a6:	fa42 f303 	asr.w	r3, r2, r3
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d039      	beq.n	8004226 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	3301      	adds	r3, #1
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 f962 	bl	8004488 <WIZCHIP_READ>
 80041c4:	4603      	mov	r3, r0
 80041c6:	f003 031f 	and.w	r3, r3, #31
 80041ca:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
 80041ce:	f003 0310 	and.w	r3, r3, #16
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d019      	beq.n	800420a <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80041d6:	79fb      	ldrb	r3, [r7, #7]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	3301      	adds	r3, #1
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80041e2:	2110      	movs	r1, #16
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 f99b 	bl	8004520 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	2201      	movs	r2, #1
 80041ee:	fa02 f303 	lsl.w	r3, r2, r3
 80041f2:	b21b      	sxth	r3, r3
 80041f4:	43db      	mvns	r3, r3
 80041f6:	b21a      	sxth	r2, r3
 80041f8:	4b46      	ldr	r3, [pc, #280]	; (8004314 <send+0x1ec>)
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	b21b      	sxth	r3, r3
 80041fe:	4013      	ands	r3, r2
 8004200:	b21b      	sxth	r3, r3
 8004202:	b29a      	uxth	r2, r3
 8004204:	4b43      	ldr	r3, [pc, #268]	; (8004314 <send+0x1ec>)
 8004206:	801a      	strh	r2, [r3, #0]
 8004208:	e00d      	b.n	8004226 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800420a:	7bfb      	ldrb	r3, [r7, #15]
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b00      	cmp	r3, #0
 8004212:	d006      	beq.n	8004222 <send+0xfa>
      {
         close(sn);
 8004214:	79fb      	ldrb	r3, [r7, #7]
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff fe48 	bl	8003eac <close>
         return SOCKERR_TIMEOUT;
 800421c:	f06f 030c 	mvn.w	r3, #12
 8004220:	e073      	b.n	800430a <send+0x1e2>
      }
      else return SOCK_BUSY;
 8004222:	2300      	movs	r3, #0
 8004224:	e071      	b.n	800430a <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	3301      	adds	r3, #1
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004232:	4618      	mov	r0, r3
 8004234:	f000 f928 	bl	8004488 <WIZCHIP_READ>
 8004238:	4603      	mov	r3, r0
 800423a:	b29b      	uxth	r3, r3
 800423c:	029b      	lsls	r3, r3, #10
 800423e:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8004240:	88ba      	ldrh	r2, [r7, #4]
 8004242:	89bb      	ldrh	r3, [r7, #12]
 8004244:	429a      	cmp	r2, r3
 8004246:	d901      	bls.n	800424c <send+0x124>
 8004248:	89bb      	ldrh	r3, [r7, #12]
 800424a:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fa74 	bl	800473c <getSn_TX_FSR>
 8004254:	4603      	mov	r3, r0
 8004256:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8004258:	79fb      	ldrb	r3, [r7, #7]
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	3301      	adds	r3, #1
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004264:	4618      	mov	r0, r3
 8004266:	f000 f90f 	bl	8004488 <WIZCHIP_READ>
 800426a:	4603      	mov	r3, r0
 800426c:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	2b17      	cmp	r3, #23
 8004272:	d009      	beq.n	8004288 <send+0x160>
 8004274:	7bfb      	ldrb	r3, [r7, #15]
 8004276:	2b1c      	cmp	r3, #28
 8004278:	d006      	beq.n	8004288 <send+0x160>
      {
         close(sn);
 800427a:	79fb      	ldrb	r3, [r7, #7]
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff fe15 	bl	8003eac <close>
         return SOCKERR_SOCKSTATUS;
 8004282:	f06f 0306 	mvn.w	r3, #6
 8004286:	e040      	b.n	800430a <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8004288:	4b23      	ldr	r3, [pc, #140]	; (8004318 <send+0x1f0>)
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	461a      	mov	r2, r3
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	fa42 f303 	asr.w	r3, r2, r3
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <send+0x180>
 800429c:	88ba      	ldrh	r2, [r7, #4]
 800429e:	89bb      	ldrh	r3, [r7, #12]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d901      	bls.n	80042a8 <send+0x180>
 80042a4:	2300      	movs	r3, #0
 80042a6:	e030      	b.n	800430a <send+0x1e2>
      if(len <= freesize) break;
 80042a8:	88ba      	ldrh	r2, [r7, #4]
 80042aa:	89bb      	ldrh	r3, [r7, #12]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d900      	bls.n	80042b2 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 80042b0:	e7cc      	b.n	800424c <send+0x124>
      if(len <= freesize) break;
 80042b2:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80042b4:	88ba      	ldrh	r2, [r7, #4]
 80042b6:	79fb      	ldrb	r3, [r7, #7]
 80042b8:	6839      	ldr	r1, [r7, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fad4 	bl	8004868 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	3301      	adds	r3, #1
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80042cc:	2120      	movs	r1, #32
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 f926 	bl	8004520 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80042d4:	bf00      	nop
 80042d6:	79fb      	ldrb	r3, [r7, #7]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	3301      	adds	r3, #1
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 f8d0 	bl	8004488 <WIZCHIP_READ>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1f3      	bne.n	80042d6 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	2201      	movs	r2, #1
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	b21a      	sxth	r2, r3
 80042f8:	4b06      	ldr	r3, [pc, #24]	; (8004314 <send+0x1ec>)
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	b21b      	sxth	r3, r3
 80042fe:	4313      	orrs	r3, r2
 8004300:	b21b      	sxth	r3, r3
 8004302:	b29a      	uxth	r2, r3
 8004304:	4b03      	ldr	r3, [pc, #12]	; (8004314 <send+0x1ec>)
 8004306:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004308:	88bb      	ldrh	r3, [r7, #4]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	200009b4 	.word	0x200009b4
 8004318:	200009b2 	.word	0x200009b2

0800431c <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800431c:	b590      	push	{r4, r7, lr}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	4603      	mov	r3, r0
 8004324:	6039      	str	r1, [r7, #0]
 8004326:	71fb      	strb	r3, [r7, #7]
 8004328:	4613      	mov	r3, r2
 800432a:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 800432c:	2300      	movs	r3, #0
 800432e:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8004330:	2300      	movs	r3, #0
 8004332:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	2b08      	cmp	r3, #8
 8004338:	d902      	bls.n	8004340 <recv+0x24>
 800433a:	f04f 33ff 	mov.w	r3, #4294967295
 800433e:	e09c      	b.n	800447a <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004340:	79fb      	ldrb	r3, [r7, #7]
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	3301      	adds	r3, #1
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	4618      	mov	r0, r3
 800434a:	f000 f89d 	bl	8004488 <WIZCHIP_READ>
 800434e:	4603      	mov	r3, r0
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	2b01      	cmp	r3, #1
 8004356:	d002      	beq.n	800435e <recv+0x42>
 8004358:	f06f 0304 	mvn.w	r3, #4
 800435c:	e08d      	b.n	800447a <recv+0x15e>
   CHECK_SOCKDATA();
 800435e:	88bb      	ldrh	r3, [r7, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d102      	bne.n	800436a <recv+0x4e>
 8004364:	f06f 030d 	mvn.w	r3, #13
 8004368:	e087      	b.n	800447a <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 800436a:	79fb      	ldrb	r3, [r7, #7]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	3301      	adds	r3, #1
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8004376:	4618      	mov	r0, r3
 8004378:	f000 f886 	bl	8004488 <WIZCHIP_READ>
 800437c:	4603      	mov	r3, r0
 800437e:	b29b      	uxth	r3, r3
 8004380:	029b      	lsls	r3, r3, #10
 8004382:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8004384:	89ba      	ldrh	r2, [r7, #12]
 8004386:	88bb      	ldrh	r3, [r7, #4]
 8004388:	429a      	cmp	r2, r3
 800438a:	d201      	bcs.n	8004390 <recv+0x74>
 800438c:	89bb      	ldrh	r3, [r7, #12]
 800438e:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8004390:	79fb      	ldrb	r3, [r7, #7]
 8004392:	4618      	mov	r0, r3
 8004394:	f000 fa1d 	bl	80047d2 <getSn_RX_RSR>
 8004398:	4603      	mov	r3, r0
 800439a:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 800439c:	79fb      	ldrb	r3, [r7, #7]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	3301      	adds	r3, #1
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 f86d 	bl	8004488 <WIZCHIP_READ>
 80043ae:	4603      	mov	r3, r0
 80043b0:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
 80043b4:	2b17      	cmp	r3, #23
 80043b6:	d026      	beq.n	8004406 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
 80043ba:	2b1c      	cmp	r3, #28
 80043bc:	d11c      	bne.n	80043f8 <recv+0xdc>
            {
               if(recvsize != 0) break;
 80043be:	89bb      	ldrh	r3, [r7, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d133      	bne.n	800442c <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80043c4:	79fb      	ldrb	r3, [r7, #7]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 f9b8 	bl	800473c <getSn_TX_FSR>
 80043cc:	4603      	mov	r3, r0
 80043ce:	461c      	mov	r4, r3
 80043d0:	79fb      	ldrb	r3, [r7, #7]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	3301      	adds	r3, #1
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 f853 	bl	8004488 <WIZCHIP_READ>
 80043e2:	4603      	mov	r3, r0
 80043e4:	029b      	lsls	r3, r3, #10
 80043e6:	429c      	cmp	r4, r3
 80043e8:	d10d      	bne.n	8004406 <recv+0xea>
               {
                  close(sn);
 80043ea:	79fb      	ldrb	r3, [r7, #7]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff fd5d 	bl	8003eac <close>
                  return SOCKERR_SOCKSTATUS;
 80043f2:	f06f 0306 	mvn.w	r3, #6
 80043f6:	e040      	b.n	800447a <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 80043f8:	79fb      	ldrb	r3, [r7, #7]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff fd56 	bl	8003eac <close>
               return SOCKERR_SOCKSTATUS;
 8004400:	f06f 0306 	mvn.w	r3, #6
 8004404:	e039      	b.n	800447a <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8004406:	4b1f      	ldr	r3, [pc, #124]	; (8004484 <recv+0x168>)
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	fa42 f303 	asr.w	r3, r2, r3
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d004      	beq.n	8004424 <recv+0x108>
 800441a:	89bb      	ldrh	r3, [r7, #12]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <recv+0x108>
 8004420:	2300      	movs	r3, #0
 8004422:	e02a      	b.n	800447a <recv+0x15e>
         if(recvsize != 0) break;
 8004424:	89bb      	ldrh	r3, [r7, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d102      	bne.n	8004430 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 800442a:	e7b1      	b.n	8004390 <recv+0x74>
               if(recvsize != 0) break;
 800442c:	bf00      	nop
 800442e:	e000      	b.n	8004432 <recv+0x116>
         if(recvsize != 0) break;
 8004430:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8004432:	89ba      	ldrh	r2, [r7, #12]
 8004434:	88bb      	ldrh	r3, [r7, #4]
 8004436:	429a      	cmp	r2, r3
 8004438:	d201      	bcs.n	800443e <recv+0x122>
 800443a:	89bb      	ldrh	r3, [r7, #12]
 800443c:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 800443e:	88ba      	ldrh	r2, [r7, #4]
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	6839      	ldr	r1, [r7, #0]
 8004444:	4618      	mov	r0, r3
 8004446:	f000 fa6b 	bl	8004920 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	3301      	adds	r3, #1
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004456:	2140      	movs	r1, #64	; 0x40
 8004458:	4618      	mov	r0, r3
 800445a:	f000 f861 	bl	8004520 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800445e:	bf00      	nop
 8004460:	79fb      	ldrb	r3, [r7, #7]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	3301      	adds	r3, #1
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800446c:	4618      	mov	r0, r3
 800446e:	f000 f80b 	bl	8004488 <WIZCHIP_READ>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1f3      	bne.n	8004460 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004478:	88bb      	ldrh	r3, [r7, #4]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	bd90      	pop	{r4, r7, pc}
 8004482:	bf00      	nop
 8004484:	200009b2 	.word	0x200009b2

08004488 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8004490:	4b22      	ldr	r3, [pc, #136]	; (800451c <WIZCHIP_READ+0x94>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004496:	4b21      	ldr	r3, [pc, #132]	; (800451c <WIZCHIP_READ+0x94>)
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800449c:	4b1f      	ldr	r3, [pc, #124]	; (800451c <WIZCHIP_READ+0x94>)
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <WIZCHIP_READ+0x24>
 80044a4:	4b1d      	ldr	r3, [pc, #116]	; (800451c <WIZCHIP_READ+0x94>)
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d114      	bne.n	80044d6 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80044ac:	4b1b      	ldr	r3, [pc, #108]	; (800451c <WIZCHIP_READ+0x94>)
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	0c12      	lsrs	r2, r2, #16
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	4610      	mov	r0, r2
 80044b8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80044ba:	4b18      	ldr	r3, [pc, #96]	; (800451c <WIZCHIP_READ+0x94>)
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	0a12      	lsrs	r2, r2, #8
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	4610      	mov	r0, r2
 80044c6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80044c8:	4b14      	ldr	r3, [pc, #80]	; (800451c <WIZCHIP_READ+0x94>)
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	b2d2      	uxtb	r2, r2
 80044d0:	4610      	mov	r0, r2
 80044d2:	4798      	blx	r3
 80044d4:	e011      	b.n	80044fa <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	0c1b      	lsrs	r3, r3, #16
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	0a1b      	lsrs	r3, r3, #8
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80044ec:	4b0b      	ldr	r3, [pc, #44]	; (800451c <WIZCHIP_READ+0x94>)
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	f107 020c 	add.w	r2, r7, #12
 80044f4:	2103      	movs	r1, #3
 80044f6:	4610      	mov	r0, r2
 80044f8:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80044fa:	4b08      	ldr	r3, [pc, #32]	; (800451c <WIZCHIP_READ+0x94>)
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	4798      	blx	r3
 8004500:	4603      	mov	r3, r0
 8004502:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <WIZCHIP_READ+0x94>)
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800450a:	4b04      	ldr	r3, [pc, #16]	; (800451c <WIZCHIP_READ+0x94>)
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	4798      	blx	r3
   return ret;
 8004510:	7bfb      	ldrb	r3, [r7, #15]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20000044 	.word	0x20000044

08004520 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 800452c:	4b22      	ldr	r3, [pc, #136]	; (80045b8 <WIZCHIP_WRITE+0x98>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004532:	4b21      	ldr	r3, [pc, #132]	; (80045b8 <WIZCHIP_WRITE+0x98>)
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f043 0304 	orr.w	r3, r3, #4
 800453e:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004540:	4b1d      	ldr	r3, [pc, #116]	; (80045b8 <WIZCHIP_WRITE+0x98>)
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	2b00      	cmp	r3, #0
 8004546:	d119      	bne.n	800457c <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004548:	4b1b      	ldr	r3, [pc, #108]	; (80045b8 <WIZCHIP_WRITE+0x98>)
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	0c12      	lsrs	r2, r2, #16
 8004550:	b2d2      	uxtb	r2, r2
 8004552:	4610      	mov	r0, r2
 8004554:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004556:	4b18      	ldr	r3, [pc, #96]	; (80045b8 <WIZCHIP_WRITE+0x98>)
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	0a12      	lsrs	r2, r2, #8
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	4610      	mov	r0, r2
 8004562:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004564:	4b14      	ldr	r3, [pc, #80]	; (80045b8 <WIZCHIP_WRITE+0x98>)
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	4610      	mov	r0, r2
 800456e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8004570:	4b11      	ldr	r3, [pc, #68]	; (80045b8 <WIZCHIP_WRITE+0x98>)
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	78fa      	ldrb	r2, [r7, #3]
 8004576:	4610      	mov	r0, r2
 8004578:	4798      	blx	r3
 800457a:	e013      	b.n	80045a4 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	0c1b      	lsrs	r3, r3, #16
 8004580:	b2db      	uxtb	r3, r3
 8004582:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	0a1b      	lsrs	r3, r3, #8
 8004588:	b2db      	uxtb	r3, r3
 800458a:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	b2db      	uxtb	r3, r3
 8004590:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8004592:	78fb      	ldrb	r3, [r7, #3]
 8004594:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8004596:	4b08      	ldr	r3, [pc, #32]	; (80045b8 <WIZCHIP_WRITE+0x98>)
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	f107 020c 	add.w	r2, r7, #12
 800459e:	2104      	movs	r1, #4
 80045a0:	4610      	mov	r0, r2
 80045a2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80045a4:	4b04      	ldr	r3, [pc, #16]	; (80045b8 <WIZCHIP_WRITE+0x98>)
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80045aa:	4b03      	ldr	r3, [pc, #12]	; (80045b8 <WIZCHIP_WRITE+0x98>)
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	4798      	blx	r3
}
 80045b0:	bf00      	nop
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	20000044 	.word	0x20000044

080045bc <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80045bc:	b590      	push	{r4, r7, lr}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	4613      	mov	r3, r2
 80045c8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80045ca:	4b2b      	ldr	r3, [pc, #172]	; (8004678 <WIZCHIP_READ_BUF+0xbc>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	4798      	blx	r3
   WIZCHIP.CS._select();
 80045d0:	4b29      	ldr	r3, [pc, #164]	; (8004678 <WIZCHIP_READ_BUF+0xbc>)
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80045d6:	4b28      	ldr	r3, [pc, #160]	; (8004678 <WIZCHIP_READ_BUF+0xbc>)
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <WIZCHIP_READ_BUF+0x2a>
 80045de:	4b26      	ldr	r3, [pc, #152]	; (8004678 <WIZCHIP_READ_BUF+0xbc>)
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d126      	bne.n	8004634 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80045e6:	4b24      	ldr	r3, [pc, #144]	; (8004678 <WIZCHIP_READ_BUF+0xbc>)
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	0c12      	lsrs	r2, r2, #16
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	4610      	mov	r0, r2
 80045f2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80045f4:	4b20      	ldr	r3, [pc, #128]	; (8004678 <WIZCHIP_READ_BUF+0xbc>)
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	0a12      	lsrs	r2, r2, #8
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	4610      	mov	r0, r2
 8004600:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004602:	4b1d      	ldr	r3, [pc, #116]	; (8004678 <WIZCHIP_READ_BUF+0xbc>)
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	4610      	mov	r0, r2
 800460c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800460e:	2300      	movs	r3, #0
 8004610:	82fb      	strh	r3, [r7, #22]
 8004612:	e00a      	b.n	800462a <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8004614:	4b18      	ldr	r3, [pc, #96]	; (8004678 <WIZCHIP_READ_BUF+0xbc>)
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	8afa      	ldrh	r2, [r7, #22]
 800461a:	68b9      	ldr	r1, [r7, #8]
 800461c:	188c      	adds	r4, r1, r2
 800461e:	4798      	blx	r3
 8004620:	4603      	mov	r3, r0
 8004622:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8004624:	8afb      	ldrh	r3, [r7, #22]
 8004626:	3301      	adds	r3, #1
 8004628:	82fb      	strh	r3, [r7, #22]
 800462a:	8afa      	ldrh	r2, [r7, #22]
 800462c:	88fb      	ldrh	r3, [r7, #6]
 800462e:	429a      	cmp	r2, r3
 8004630:	d3f0      	bcc.n	8004614 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004632:	e017      	b.n	8004664 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	0c1b      	lsrs	r3, r3, #16
 8004638:	b2db      	uxtb	r3, r3
 800463a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	0a1b      	lsrs	r3, r3, #8
 8004640:	b2db      	uxtb	r3, r3
 8004642:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	b2db      	uxtb	r3, r3
 8004648:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800464a:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <WIZCHIP_READ_BUF+0xbc>)
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	f107 0210 	add.w	r2, r7, #16
 8004652:	2103      	movs	r1, #3
 8004654:	4610      	mov	r0, r2
 8004656:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8004658:	4b07      	ldr	r3, [pc, #28]	; (8004678 <WIZCHIP_READ_BUF+0xbc>)
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	88fa      	ldrh	r2, [r7, #6]
 800465e:	4611      	mov	r1, r2
 8004660:	68b8      	ldr	r0, [r7, #8]
 8004662:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004664:	4b04      	ldr	r3, [pc, #16]	; (8004678 <WIZCHIP_READ_BUF+0xbc>)
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800466a:	4b03      	ldr	r3, [pc, #12]	; (8004678 <WIZCHIP_READ_BUF+0xbc>)
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	4798      	blx	r3
}
 8004670:	bf00      	nop
 8004672:	371c      	adds	r7, #28
 8004674:	46bd      	mov	sp, r7
 8004676:	bd90      	pop	{r4, r7, pc}
 8004678:	20000044 	.word	0x20000044

0800467c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	4613      	mov	r3, r2
 8004688:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800468a:	4b2b      	ldr	r3, [pc, #172]	; (8004738 <WIZCHIP_WRITE_BUF+0xbc>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004690:	4b29      	ldr	r3, [pc, #164]	; (8004738 <WIZCHIP_WRITE_BUF+0xbc>)
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f043 0304 	orr.w	r3, r3, #4
 800469c:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800469e:	4b26      	ldr	r3, [pc, #152]	; (8004738 <WIZCHIP_WRITE_BUF+0xbc>)
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d126      	bne.n	80046f4 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80046a6:	4b24      	ldr	r3, [pc, #144]	; (8004738 <WIZCHIP_WRITE_BUF+0xbc>)
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	0c12      	lsrs	r2, r2, #16
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	4610      	mov	r0, r2
 80046b2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80046b4:	4b20      	ldr	r3, [pc, #128]	; (8004738 <WIZCHIP_WRITE_BUF+0xbc>)
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	0a12      	lsrs	r2, r2, #8
 80046bc:	b2d2      	uxtb	r2, r2
 80046be:	4610      	mov	r0, r2
 80046c0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80046c2:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <WIZCHIP_WRITE_BUF+0xbc>)
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	4610      	mov	r0, r2
 80046cc:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80046ce:	2300      	movs	r3, #0
 80046d0:	82fb      	strh	r3, [r7, #22]
 80046d2:	e00a      	b.n	80046ea <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80046d4:	4b18      	ldr	r3, [pc, #96]	; (8004738 <WIZCHIP_WRITE_BUF+0xbc>)
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	8afa      	ldrh	r2, [r7, #22]
 80046da:	68b9      	ldr	r1, [r7, #8]
 80046dc:	440a      	add	r2, r1
 80046de:	7812      	ldrb	r2, [r2, #0]
 80046e0:	4610      	mov	r0, r2
 80046e2:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80046e4:	8afb      	ldrh	r3, [r7, #22]
 80046e6:	3301      	adds	r3, #1
 80046e8:	82fb      	strh	r3, [r7, #22]
 80046ea:	8afa      	ldrh	r2, [r7, #22]
 80046ec:	88fb      	ldrh	r3, [r7, #6]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d3f0      	bcc.n	80046d4 <WIZCHIP_WRITE_BUF+0x58>
 80046f2:	e017      	b.n	8004724 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	0c1b      	lsrs	r3, r3, #16
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	0a1b      	lsrs	r3, r3, #8
 8004700:	b2db      	uxtb	r3, r3
 8004702:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	b2db      	uxtb	r3, r3
 8004708:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800470a:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <WIZCHIP_WRITE_BUF+0xbc>)
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	f107 0210 	add.w	r2, r7, #16
 8004712:	2103      	movs	r1, #3
 8004714:	4610      	mov	r0, r2
 8004716:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8004718:	4b07      	ldr	r3, [pc, #28]	; (8004738 <WIZCHIP_WRITE_BUF+0xbc>)
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	88fa      	ldrh	r2, [r7, #6]
 800471e:	4611      	mov	r1, r2
 8004720:	68b8      	ldr	r0, [r7, #8]
 8004722:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004724:	4b04      	ldr	r3, [pc, #16]	; (8004738 <WIZCHIP_WRITE_BUF+0xbc>)
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800472a:	4b03      	ldr	r3, [pc, #12]	; (8004738 <WIZCHIP_WRITE_BUF+0xbc>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	4798      	blx	r3
}
 8004730:	bf00      	nop
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	20000044 	.word	0x20000044

0800473c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 800473c:	b590      	push	{r4, r7, lr}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	4603      	mov	r3, r0
 8004744:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8004746:	2300      	movs	r3, #0
 8004748:	81fb      	strh	r3, [r7, #14]
 800474a:	2300      	movs	r3, #0
 800474c:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	3301      	adds	r3, #1
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff fe94 	bl	8004488 <WIZCHIP_READ>
 8004760:	4603      	mov	r3, r0
 8004762:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004764:	89bb      	ldrh	r3, [r7, #12]
 8004766:	021b      	lsls	r3, r3, #8
 8004768:	b29c      	uxth	r4, r3
 800476a:	79fb      	ldrb	r3, [r7, #7]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	3301      	adds	r3, #1
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff fe86 	bl	8004488 <WIZCHIP_READ>
 800477c:	4603      	mov	r3, r0
 800477e:	b29b      	uxth	r3, r3
 8004780:	4423      	add	r3, r4
 8004782:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8004784:	89bb      	ldrh	r3, [r7, #12]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d01a      	beq.n	80047c0 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800478a:	79fb      	ldrb	r3, [r7, #7]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	3301      	adds	r3, #1
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff fe76 	bl	8004488 <WIZCHIP_READ>
 800479c:	4603      	mov	r3, r0
 800479e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80047a0:	89fb      	ldrh	r3, [r7, #14]
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	b29c      	uxth	r4, r3
 80047a6:	79fb      	ldrb	r3, [r7, #7]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	3301      	adds	r3, #1
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff fe68 	bl	8004488 <WIZCHIP_READ>
 80047b8:	4603      	mov	r3, r0
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	4423      	add	r3, r4
 80047be:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80047c0:	89fa      	ldrh	r2, [r7, #14]
 80047c2:	89bb      	ldrh	r3, [r7, #12]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d1c2      	bne.n	800474e <getSn_TX_FSR+0x12>
   return val;
 80047c8:	89fb      	ldrh	r3, [r7, #14]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd90      	pop	{r4, r7, pc}

080047d2 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80047d2:	b590      	push	{r4, r7, lr}
 80047d4:	b085      	sub	sp, #20
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	4603      	mov	r3, r0
 80047da:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80047dc:	2300      	movs	r3, #0
 80047de:	81fb      	strh	r3, [r7, #14]
 80047e0:	2300      	movs	r3, #0
 80047e2:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80047e4:	79fb      	ldrb	r3, [r7, #7]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	3301      	adds	r3, #1
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff fe49 	bl	8004488 <WIZCHIP_READ>
 80047f6:	4603      	mov	r3, r0
 80047f8:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80047fa:	89bb      	ldrh	r3, [r7, #12]
 80047fc:	021b      	lsls	r3, r3, #8
 80047fe:	b29c      	uxth	r4, r3
 8004800:	79fb      	ldrb	r3, [r7, #7]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	3301      	adds	r3, #1
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff fe3b 	bl	8004488 <WIZCHIP_READ>
 8004812:	4603      	mov	r3, r0
 8004814:	b29b      	uxth	r3, r3
 8004816:	4423      	add	r3, r4
 8004818:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800481a:	89bb      	ldrh	r3, [r7, #12]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d01a      	beq.n	8004856 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8004820:	79fb      	ldrb	r3, [r7, #7]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	3301      	adds	r3, #1
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff fe2b 	bl	8004488 <WIZCHIP_READ>
 8004832:	4603      	mov	r3, r0
 8004834:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8004836:	89fb      	ldrh	r3, [r7, #14]
 8004838:	021b      	lsls	r3, r3, #8
 800483a:	b29c      	uxth	r4, r3
 800483c:	79fb      	ldrb	r3, [r7, #7]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	3301      	adds	r3, #1
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff fe1d 	bl	8004488 <WIZCHIP_READ>
 800484e:	4603      	mov	r3, r0
 8004850:	b29b      	uxth	r3, r3
 8004852:	4423      	add	r3, r4
 8004854:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8004856:	89fa      	ldrh	r2, [r7, #14]
 8004858:	89bb      	ldrh	r3, [r7, #12]
 800485a:	429a      	cmp	r2, r3
 800485c:	d1c2      	bne.n	80047e4 <getSn_RX_RSR+0x12>
   return val;
 800485e:	89fb      	ldrh	r3, [r7, #14]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	bd90      	pop	{r4, r7, pc}

08004868 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004868:	b590      	push	{r4, r7, lr}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	4603      	mov	r3, r0
 8004870:	6039      	str	r1, [r7, #0]
 8004872:	71fb      	strb	r3, [r7, #7]
 8004874:	4613      	mov	r3, r2
 8004876:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004878:	2300      	movs	r3, #0
 800487a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800487c:	2300      	movs	r3, #0
 800487e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8004880:	88bb      	ldrh	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d048      	beq.n	8004918 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8004886:	79fb      	ldrb	r3, [r7, #7]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	3301      	adds	r3, #1
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff fdf8 	bl	8004488 <WIZCHIP_READ>
 8004898:	4603      	mov	r3, r0
 800489a:	b29b      	uxth	r3, r3
 800489c:	021b      	lsls	r3, r3, #8
 800489e:	b29c      	uxth	r4, r3
 80048a0:	79fb      	ldrb	r3, [r7, #7]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	3301      	adds	r3, #1
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7ff fdeb 	bl	8004488 <WIZCHIP_READ>
 80048b2:	4603      	mov	r3, r0
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	4423      	add	r3, r4
 80048b8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80048ba:	89fb      	ldrh	r3, [r7, #14]
 80048bc:	021b      	lsls	r3, r3, #8
 80048be:	79fa      	ldrb	r2, [r7, #7]
 80048c0:	0092      	lsls	r2, r2, #2
 80048c2:	3202      	adds	r2, #2
 80048c4:	00d2      	lsls	r2, r2, #3
 80048c6:	4413      	add	r3, r2
 80048c8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80048ca:	88bb      	ldrh	r3, [r7, #4]
 80048cc:	461a      	mov	r2, r3
 80048ce:	6839      	ldr	r1, [r7, #0]
 80048d0:	68b8      	ldr	r0, [r7, #8]
 80048d2:	f7ff fed3 	bl	800467c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80048d6:	89fa      	ldrh	r2, [r7, #14]
 80048d8:	88bb      	ldrh	r3, [r7, #4]
 80048da:	4413      	add	r3, r2
 80048dc:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80048de:	79fb      	ldrb	r3, [r7, #7]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	3301      	adds	r3, #1
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80048ea:	461a      	mov	r2, r3
 80048ec:	89fb      	ldrh	r3, [r7, #14]
 80048ee:	0a1b      	lsrs	r3, r3, #8
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	4619      	mov	r1, r3
 80048f6:	4610      	mov	r0, r2
 80048f8:	f7ff fe12 	bl	8004520 <WIZCHIP_WRITE>
 80048fc:	79fb      	ldrb	r3, [r7, #7]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	3301      	adds	r3, #1
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8004908:	461a      	mov	r2, r3
 800490a:	89fb      	ldrh	r3, [r7, #14]
 800490c:	b2db      	uxtb	r3, r3
 800490e:	4619      	mov	r1, r3
 8004910:	4610      	mov	r0, r2
 8004912:	f7ff fe05 	bl	8004520 <WIZCHIP_WRITE>
 8004916:	e000      	b.n	800491a <wiz_send_data+0xb2>
   if(len == 0)  return;
 8004918:	bf00      	nop
}
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	bd90      	pop	{r4, r7, pc}

08004920 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004920:	b590      	push	{r4, r7, lr}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	4603      	mov	r3, r0
 8004928:	6039      	str	r1, [r7, #0]
 800492a:	71fb      	strb	r3, [r7, #7]
 800492c:	4613      	mov	r3, r2
 800492e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004930:	2300      	movs	r3, #0
 8004932:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8004938:	88bb      	ldrh	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d048      	beq.n	80049d0 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	3301      	adds	r3, #1
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff fd9c 	bl	8004488 <WIZCHIP_READ>
 8004950:	4603      	mov	r3, r0
 8004952:	b29b      	uxth	r3, r3
 8004954:	021b      	lsls	r3, r3, #8
 8004956:	b29c      	uxth	r4, r3
 8004958:	79fb      	ldrb	r3, [r7, #7]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	3301      	adds	r3, #1
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8004964:	4618      	mov	r0, r3
 8004966:	f7ff fd8f 	bl	8004488 <WIZCHIP_READ>
 800496a:	4603      	mov	r3, r0
 800496c:	b29b      	uxth	r3, r3
 800496e:	4423      	add	r3, r4
 8004970:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8004972:	89fb      	ldrh	r3, [r7, #14]
 8004974:	021b      	lsls	r3, r3, #8
 8004976:	79fa      	ldrb	r2, [r7, #7]
 8004978:	0092      	lsls	r2, r2, #2
 800497a:	3203      	adds	r2, #3
 800497c:	00d2      	lsls	r2, r2, #3
 800497e:	4413      	add	r3, r2
 8004980:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8004982:	88bb      	ldrh	r3, [r7, #4]
 8004984:	461a      	mov	r2, r3
 8004986:	6839      	ldr	r1, [r7, #0]
 8004988:	68b8      	ldr	r0, [r7, #8]
 800498a:	f7ff fe17 	bl	80045bc <WIZCHIP_READ_BUF>
   ptr += len;
 800498e:	89fa      	ldrh	r2, [r7, #14]
 8004990:	88bb      	ldrh	r3, [r7, #4]
 8004992:	4413      	add	r3, r2
 8004994:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8004996:	79fb      	ldrb	r3, [r7, #7]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	3301      	adds	r3, #1
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80049a2:	461a      	mov	r2, r3
 80049a4:	89fb      	ldrh	r3, [r7, #14]
 80049a6:	0a1b      	lsrs	r3, r3, #8
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	4619      	mov	r1, r3
 80049ae:	4610      	mov	r0, r2
 80049b0:	f7ff fdb6 	bl	8004520 <WIZCHIP_WRITE>
 80049b4:	79fb      	ldrb	r3, [r7, #7]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	3301      	adds	r3, #1
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80049c0:	461a      	mov	r2, r3
 80049c2:	89fb      	ldrh	r3, [r7, #14]
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	4619      	mov	r1, r3
 80049c8:	4610      	mov	r0, r2
 80049ca:	f7ff fda9 	bl	8004520 <WIZCHIP_WRITE>
 80049ce:	e000      	b.n	80049d2 <wiz_recv_data+0xb2>
   if(len == 0) return;
 80049d0:	bf00      	nop
}
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd90      	pop	{r4, r7, pc}

080049d8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_enter(void)           {};
void       wizchip_cris_enter(void)           {}
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
 80049dc:	bf00      	nop
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_exit(void)          {};
void       wizchip_cris_exit(void)          {}
 80049e6:	b480      	push	{r7}
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	bf00      	nop
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_select(void)            {};

void wizchip_cs_select(void) {}
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	bf00      	nop
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 8004a02:	b480      	push	{r7}
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	bf00      	nop
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	4618      	mov	r0, r3
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	460b      	mov	r3, r1
 8004a34:	70fb      	strb	r3, [r7, #3]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	78fa      	ldrb	r2, [r7, #3]
 8004a3a:	701a      	strb	r2, [r3, #0]
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	4618      	mov	r0, r3
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	71fb      	strb	r3, [r7, #7]
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}; 
void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	460b      	mov	r3, r1
 8004a78:	807b      	strh	r3, [r7, #2]
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	807b      	strh	r3, [r7, #2]
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
	...

08004aa0 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <reg_wizchip_cs_cbfunc+0x16>
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8004ab6:	4b0a      	ldr	r3, [pc, #40]	; (8004ae0 <reg_wizchip_cs_cbfunc+0x40>)
 8004ab8:	4a0a      	ldr	r2, [pc, #40]	; (8004ae4 <reg_wizchip_cs_cbfunc+0x44>)
 8004aba:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8004abc:	4b08      	ldr	r3, [pc, #32]	; (8004ae0 <reg_wizchip_cs_cbfunc+0x40>)
 8004abe:	4a0a      	ldr	r2, [pc, #40]	; (8004ae8 <reg_wizchip_cs_cbfunc+0x48>)
 8004ac0:	615a      	str	r2, [r3, #20]
 8004ac2:	e006      	b.n	8004ad2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8004ac4:	4a06      	ldr	r2, [pc, #24]	; (8004ae0 <reg_wizchip_cs_cbfunc+0x40>)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 8004aca:	4a05      	ldr	r2, [pc, #20]	; (8004ae0 <reg_wizchip_cs_cbfunc+0x40>)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	6153      	str	r3, [r2, #20]
   }
}
 8004ad0:	bf00      	nop
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	20000044 	.word	0x20000044
 8004ae4:	080049f5 	.word	0x080049f5
 8004ae8:	08004a03 	.word	0x08004a03

08004aec <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8004af6:	bf00      	nop
 8004af8:	4b0f      	ldr	r3, [pc, #60]	; (8004b38 <reg_wizchip_spi_cbfunc+0x4c>)
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0f9      	beq.n	8004af8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d002      	beq.n	8004b10 <reg_wizchip_spi_cbfunc+0x24>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d106      	bne.n	8004b1e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8004b10:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <reg_wizchip_spi_cbfunc+0x4c>)
 8004b12:	4a0a      	ldr	r2, [pc, #40]	; (8004b3c <reg_wizchip_spi_cbfunc+0x50>)
 8004b14:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8004b16:	4b08      	ldr	r3, [pc, #32]	; (8004b38 <reg_wizchip_spi_cbfunc+0x4c>)
 8004b18:	4a09      	ldr	r2, [pc, #36]	; (8004b40 <reg_wizchip_spi_cbfunc+0x54>)
 8004b1a:	61da      	str	r2, [r3, #28]
 8004b1c:	e006      	b.n	8004b2c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8004b1e:	4a06      	ldr	r2, [pc, #24]	; (8004b38 <reg_wizchip_spi_cbfunc+0x4c>)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8004b24:	4a04      	ldr	r2, [pc, #16]	; (8004b38 <reg_wizchip_spi_cbfunc+0x4c>)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	61d3      	str	r3, [r2, #28]
   }
}
 8004b2a:	bf00      	nop
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	20000044 	.word	0x20000044
 8004b3c:	08004a49 	.word	0x08004a49
 8004b40:	08004a59 	.word	0x08004a59

08004b44 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8004b4e:	bf00      	nop
 8004b50:	4b0f      	ldr	r3, [pc, #60]	; (8004b90 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0f9      	beq.n	8004b50 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d002      	beq.n	8004b68 <reg_wizchip_spiburst_cbfunc+0x24>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d106      	bne.n	8004b76 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8004b68:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004b6a:	4a0a      	ldr	r2, [pc, #40]	; (8004b94 <reg_wizchip_spiburst_cbfunc+0x50>)
 8004b6c:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8004b6e:	4b08      	ldr	r3, [pc, #32]	; (8004b90 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004b70:	4a09      	ldr	r2, [pc, #36]	; (8004b98 <reg_wizchip_spiburst_cbfunc+0x54>)
 8004b72:	625a      	str	r2, [r3, #36]	; 0x24
 8004b74:	e006      	b.n	8004b84 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8004b76:	4a06      	ldr	r2, [pc, #24]	; (8004b90 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6213      	str	r3, [r2, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8004b7c:	4a04      	ldr	r2, [pc, #16]	; (8004b90 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	6253      	str	r3, [r2, #36]	; 0x24
   }
}
 8004b82:	bf00      	nop
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	20000044 	.word	0x20000044
 8004b94:	08004a6f 	.word	0x08004a6f
 8004b98:	08004a87 	.word	0x08004a87

08004b9c <ctlnetwork>:
   return 0;
}


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	6039      	str	r1, [r7, #0]
 8004ba6:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8004ba8:	79fb      	ldrb	r3, [r7, #7]
 8004baa:	2b05      	cmp	r3, #5
 8004bac:	d82c      	bhi.n	8004c08 <ctlnetwork+0x6c>
 8004bae:	a201      	add	r2, pc, #4	; (adr r2, 8004bb4 <ctlnetwork+0x18>)
 8004bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb4:	08004bcd 	.word	0x08004bcd
 8004bb8:	08004bd5 	.word	0x08004bd5
 8004bbc:	08004bdd 	.word	0x08004bdd
 8004bc0:	08004beb 	.word	0x08004beb
 8004bc4:	08004bf9 	.word	0x08004bf9
 8004bc8:	08004c01 	.word	0x08004c01
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8004bcc:	6838      	ldr	r0, [r7, #0]
 8004bce:	f000 f8fb 	bl	8004dc8 <wizchip_setnetinfo>
         break;
 8004bd2:	e01c      	b.n	8004c0e <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8004bd4:	6838      	ldr	r0, [r7, #0]
 8004bd6:	f000 f937 	bl	8004e48 <wizchip_getnetinfo>
         break;
 8004bda:	e018      	b.n	8004c0e <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 f971 	bl	8004ec8 <wizchip_setnetmode>
 8004be6:	4603      	mov	r3, r0
 8004be8:	e012      	b.n	8004c10 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8004bea:	f000 f98f 	bl	8004f0c <wizchip_getnetmode>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	701a      	strb	r2, [r3, #0]
         break;
 8004bf6:	e00a      	b.n	8004c0e <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8004bf8:	6838      	ldr	r0, [r7, #0]
 8004bfa:	f000 f98f 	bl	8004f1c <wizchip_settimeout>
         break;
 8004bfe:	e006      	b.n	8004c0e <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8004c00:	6838      	ldr	r0, [r7, #0]
 8004c02:	f000 f9ac 	bl	8004f5e <wizchip_gettimeout>
         break;
 8004c06:	e002      	b.n	8004c0e <ctlnetwork+0x72>
      default:
         return -1;
 8004c08:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0c:	e000      	b.n	8004c10 <ctlnetwork+0x74>
   }
   return 0;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8004c1e:	1d3b      	adds	r3, r7, #4
 8004c20:	2206      	movs	r2, #6
 8004c22:	4619      	mov	r1, r3
 8004c24:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004c28:	f7ff fcc8 	bl	80045bc <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8004c2c:	f107 0314 	add.w	r3, r7, #20
 8004c30:	2204      	movs	r2, #4
 8004c32:	4619      	mov	r1, r3
 8004c34:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004c38:	f7ff fcc0 	bl	80045bc <WIZCHIP_READ_BUF>
 8004c3c:	f107 0310 	add.w	r3, r7, #16
 8004c40:	2204      	movs	r2, #4
 8004c42:	4619      	mov	r1, r3
 8004c44:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004c48:	f7ff fcb8 	bl	80045bc <WIZCHIP_READ_BUF>
 8004c4c:	f107 030c 	add.w	r3, r7, #12
 8004c50:	2204      	movs	r2, #4
 8004c52:	4619      	mov	r1, r3
 8004c54:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004c58:	f7ff fcb0 	bl	80045bc <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8004c5c:	2180      	movs	r1, #128	; 0x80
 8004c5e:	2000      	movs	r0, #0
 8004c60:	f7ff fc5e 	bl	8004520 <WIZCHIP_WRITE>
   getMR(); // for delay
 8004c64:	2000      	movs	r0, #0
 8004c66:	f7ff fc0f 	bl	8004488 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8004c6a:	1d3b      	adds	r3, r7, #4
 8004c6c:	2206      	movs	r2, #6
 8004c6e:	4619      	mov	r1, r3
 8004c70:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004c74:	f7ff fd02 	bl	800467c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8004c78:	f107 0314 	add.w	r3, r7, #20
 8004c7c:	2204      	movs	r2, #4
 8004c7e:	4619      	mov	r1, r3
 8004c80:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004c84:	f7ff fcfa 	bl	800467c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8004c88:	f107 0310 	add.w	r3, r7, #16
 8004c8c:	2204      	movs	r2, #4
 8004c8e:	4619      	mov	r1, r3
 8004c90:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004c94:	f7ff fcf2 	bl	800467c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8004c98:	f107 030c 	add.w	r3, r7, #12
 8004c9c:	2204      	movs	r2, #4
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004ca4:	f7ff fcea 	bl	800467c <WIZCHIP_WRITE_BUF>
}
 8004ca8:	bf00      	nop
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8004cbe:	f7ff ffab 	bl	8004c18 <wizchip_sw_reset>
   if(txsize)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d03b      	beq.n	8004d40 <wizchip_init+0x90>
   {
      tmp = 0;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	73bb      	strb	r3, [r7, #14]
            tmp += txsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004ccc:	2300      	movs	r3, #0
 8004cce:	73fb      	strb	r3, [r7, #15]
 8004cd0:	e015      	b.n	8004cfe <wizchip_init+0x4e>
        {
            tmp += txsize[i];
 8004cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	4413      	add	r3, r2
 8004cda:	781a      	ldrb	r2, [r3, #0]
 8004cdc:	7bbb      	ldrb	r3, [r7, #14]
 8004cde:	4413      	add	r3, r2
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	73bb      	strb	r3, [r7, #14]

        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8004ce4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ce8:	2b10      	cmp	r3, #16
 8004cea:	dd02      	ble.n	8004cf2 <wizchip_init+0x42>
 8004cec:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf0:	e066      	b.n	8004dc0 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	73fb      	strb	r3, [r7, #15]
 8004cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d02:	2b07      	cmp	r3, #7
 8004d04:	dde5      	ble.n	8004cd2 <wizchip_init+0x22>
        #endif
        }
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004d06:	2300      	movs	r3, #0
 8004d08:	73fb      	strb	r3, [r7, #15]
 8004d0a:	e015      	b.n	8004d38 <wizchip_init+0x88>
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100
            j = 0;
            while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_TXBUF_SIZE(i, j);
        #else
            setSn_TXBUF_SIZE(i, txsize[i]);
 8004d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	3301      	adds	r3, #1
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	4413      	add	r3, r2
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	4619      	mov	r1, r3
 8004d28:	f7ff fbfa 	bl	8004520 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	3301      	adds	r3, #1
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	73fb      	strb	r3, [r7, #15]
 8004d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d3c:	2b07      	cmp	r3, #7
 8004d3e:	dde5      	ble.n	8004d0c <wizchip_init+0x5c>
        }

    #endif
   }

   if(rxsize)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d03b      	beq.n	8004dbe <wizchip_init+0x10e>
   {
      tmp = 0;
 8004d46:	2300      	movs	r3, #0
 8004d48:	73bb      	strb	r3, [r7, #14]
            tmp += rxsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	73fb      	strb	r3, [r7, #15]
 8004d4e:	e015      	b.n	8004d7c <wizchip_init+0xcc>
        {
            tmp += rxsize[i];
 8004d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	4413      	add	r3, r2
 8004d58:	781a      	ldrb	r2, [r3, #0]
 8004d5a:	7bbb      	ldrb	r3, [r7, #14]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	73bb      	strb	r3, [r7, #14]
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8004d62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d66:	2b10      	cmp	r3, #16
 8004d68:	dd02      	ble.n	8004d70 <wizchip_init+0xc0>
 8004d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d6e:	e027      	b.n	8004dc0 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	3301      	adds	r3, #1
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	73fb      	strb	r3, [r7, #15]
 8004d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d80:	2b07      	cmp	r3, #7
 8004d82:	dde5      	ble.n	8004d50 <wizchip_init+0xa0>
        #endif
        }

        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004d84:	2300      	movs	r3, #0
 8004d86:	73fb      	strb	r3, [r7, #15]
 8004d88:	e015      	b.n	8004db6 <wizchip_init+0x106>
        #if _WIZCHIP_ < W5200    // add condition for w5100
            j = 0;
            while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_RXBUF_SIZE(i, j);
        #else
            setSn_RXBUF_SIZE(i, rxsize[i]);
 8004d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	3301      	adds	r3, #1
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	4413      	add	r3, r2
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	4619      	mov	r1, r3
 8004da6:	f7ff fbbb 	bl	8004520 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	3301      	adds	r3, #1
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	73fb      	strb	r3, [r7, #15]
 8004db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dba:	2b07      	cmp	r3, #7
 8004dbc:	dde5      	ble.n	8004d8a <wizchip_init+0xda>
        #endif
        }
    #endif
   }
   return 0;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2206      	movs	r2, #6
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004dda:	f7ff fc4f 	bl	800467c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	330e      	adds	r3, #14
 8004de2:	2204      	movs	r2, #4
 8004de4:	4619      	mov	r1, r3
 8004de6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004dea:	f7ff fc47 	bl	800467c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	330a      	adds	r3, #10
 8004df2:	2204      	movs	r2, #4
 8004df4:	4619      	mov	r1, r3
 8004df6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004dfa:	f7ff fc3f 	bl	800467c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3306      	adds	r3, #6
 8004e02:	2204      	movs	r2, #4
 8004e04:	4619      	mov	r1, r3
 8004e06:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004e0a:	f7ff fc37 	bl	800467c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	7c9a      	ldrb	r2, [r3, #18]
 8004e12:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <wizchip_setnetinfo+0x78>)
 8004e14:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	7cda      	ldrb	r2, [r3, #19]
 8004e1a:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <wizchip_setnetinfo+0x78>)
 8004e1c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	7d1a      	ldrb	r2, [r3, #20]
 8004e22:	4b07      	ldr	r3, [pc, #28]	; (8004e40 <wizchip_setnetinfo+0x78>)
 8004e24:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	7d5a      	ldrb	r2, [r3, #21]
 8004e2a:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <wizchip_setnetinfo+0x78>)
 8004e2c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	7d9a      	ldrb	r2, [r3, #22]
 8004e32:	4b04      	ldr	r3, [pc, #16]	; (8004e44 <wizchip_setnetinfo+0x7c>)
 8004e34:	701a      	strb	r2, [r3, #0]
}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	200009d0 	.word	0x200009d0
 8004e44:	200009d4 	.word	0x200009d4

08004e48 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2206      	movs	r2, #6
 8004e54:	4619      	mov	r1, r3
 8004e56:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004e5a:	f7ff fbaf 	bl	80045bc <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	330e      	adds	r3, #14
 8004e62:	2204      	movs	r2, #4
 8004e64:	4619      	mov	r1, r3
 8004e66:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004e6a:	f7ff fba7 	bl	80045bc <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	330a      	adds	r3, #10
 8004e72:	2204      	movs	r2, #4
 8004e74:	4619      	mov	r1, r3
 8004e76:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004e7a:	f7ff fb9f 	bl	80045bc <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	3306      	adds	r3, #6
 8004e82:	2204      	movs	r2, #4
 8004e84:	4619      	mov	r1, r3
 8004e86:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004e8a:	f7ff fb97 	bl	80045bc <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8004e8e:	4b0c      	ldr	r3, [pc, #48]	; (8004ec0 <wizchip_getnetinfo+0x78>)
 8004e90:	781a      	ldrb	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8004e96:	4b0a      	ldr	r3, [pc, #40]	; (8004ec0 <wizchip_getnetinfo+0x78>)
 8004e98:	785a      	ldrb	r2, [r3, #1]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8004e9e:	4b08      	ldr	r3, [pc, #32]	; (8004ec0 <wizchip_getnetinfo+0x78>)
 8004ea0:	789a      	ldrb	r2, [r3, #2]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8004ea6:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <wizchip_getnetinfo+0x78>)
 8004ea8:	78da      	ldrb	r2, [r3, #3]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8004eae:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <wizchip_getnetinfo+0x7c>)
 8004eb0:	781a      	ldrb	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	759a      	strb	r2, [r3, #22]
}
 8004eb6:	bf00      	nop
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	200009d0 	.word	0x200009d0
 8004ec4:	200009d4 	.word	0x200009d4

08004ec8 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	4603      	mov	r3, r0
 8004ed0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <wizchip_setnetmode+0x1e>
 8004ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee4:	e00e      	b.n	8004f04 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	f7ff face 	bl	8004488 <WIZCHIP_READ>
 8004eec:	4603      	mov	r3, r0
 8004eee:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8004ef0:	7bfa      	ldrb	r2, [r7, #15]
 8004ef2:	79fb      	ldrb	r3, [r7, #7]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
 8004efa:	4619      	mov	r1, r3
 8004efc:	2000      	movs	r0, #0
 8004efe:	f7ff fb0f 	bl	8004520 <WIZCHIP_WRITE>
   return 0;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8004f10:	2000      	movs	r0, #0
 8004f12:	f7ff fab9 	bl	8004488 <WIZCHIP_READ>
 8004f16:	4603      	mov	r3, r0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	4619      	mov	r1, r3
 8004f2a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8004f2e:	f7ff faf7 	bl	8004520 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	885b      	ldrh	r3, [r3, #2]
 8004f36:	0a1b      	lsrs	r3, r3, #8
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8004f42:	f7ff faed 	bl	8004520 <WIZCHIP_WRITE>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	885b      	ldrh	r3, [r3, #2]
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8004f52:	f7ff fae5 	bl	8004520 <WIZCHIP_WRITE>
}
 8004f56:	bf00      	nop
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8004f5e:	b590      	push	{r4, r7, lr}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8004f66:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8004f6a:	f7ff fa8d 	bl	8004488 <WIZCHIP_READ>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	461a      	mov	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8004f76:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8004f7a:	f7ff fa85 	bl	8004488 <WIZCHIP_READ>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	021b      	lsls	r3, r3, #8
 8004f84:	b29c      	uxth	r4, r3
 8004f86:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8004f8a:	f7ff fa7d 	bl	8004488 <WIZCHIP_READ>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	4423      	add	r3, r4
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	805a      	strh	r2, [r3, #2]
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd90      	pop	{r4, r7, pc}
	...

08004fa4 <W5500_Select>:
#include "wiznet_api.h"

static wiz_NetInfo gWIZNETINFO;

void W5500_Select(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIZNET_CS_PORT, WIZNET_CS_PIN, GPIO_PIN_RESET);
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004fae:	4802      	ldr	r0, [pc, #8]	; (8004fb8 <W5500_Select+0x14>)
 8004fb0:	f000 fc70 	bl	8005894 <HAL_GPIO_WritePin>
}
 8004fb4:	bf00      	nop
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	40020400 	.word	0x40020400

08004fbc <W5500_Deselect>:

void W5500_Deselect(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIZNET_CS_PORT, WIZNET_CS_PIN, GPIO_PIN_SET);
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004fc6:	4802      	ldr	r0, [pc, #8]	; (8004fd0 <W5500_Deselect+0x14>)
 8004fc8:	f000 fc64 	bl	8005894 <HAL_GPIO_WritePin>
}
 8004fcc:	bf00      	nop
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40020400 	.word	0x40020400

08004fd4 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	460b      	mov	r3, r1
 8004fde:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(WIZNET_SPI_INSTANCE, buff, len, HAL_MAX_DELAY);
 8004fe0:	887a      	ldrh	r2, [r7, #2]
 8004fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe6:	6879      	ldr	r1, [r7, #4]
 8004fe8:	4803      	ldr	r0, [pc, #12]	; (8004ff8 <W5500_ReadBuff+0x24>)
 8004fea:	f001 ff2b 	bl	8006e44 <HAL_SPI_Receive>
}
 8004fee:	bf00      	nop
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	200001fc 	.word	0x200001fc

08004ffc <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(WIZNET_SPI_INSTANCE, buff, len, HAL_MAX_DELAY);
 8005008:	887a      	ldrh	r2, [r7, #2]
 800500a:	f04f 33ff 	mov.w	r3, #4294967295
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	4803      	ldr	r0, [pc, #12]	; (8005020 <W5500_WriteBuff+0x24>)
 8005012:	f001 fdd4 	bl	8006bbe <HAL_SPI_Transmit>
}
 8005016:	bf00      	nop
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	200001fc 	.word	0x200001fc

08005024 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
	uint8_t byte;
	W5500_ReadBuff(&byte, sizeof(byte));
 800502a:	1dfb      	adds	r3, r7, #7
 800502c:	2101      	movs	r1, #1
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff ffd0 	bl	8004fd4 <W5500_ReadBuff>
	return byte;
 8005034:	79fb      	ldrb	r3, [r7, #7]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b082      	sub	sp, #8
 8005042:	af00      	add	r7, sp, #0
 8005044:	4603      	mov	r3, r0
 8005046:	71fb      	strb	r3, [r7, #7]
	W5500_WriteBuff(&byte, sizeof(byte));
 8005048:	1dfb      	adds	r3, r7, #7
 800504a:	2101      	movs	r1, #1
 800504c:	4618      	mov	r0, r3
 800504e:	f7ff ffd5 	bl	8004ffc <W5500_WriteBuff>
}
 8005052:	bf00      	nop
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
	...

0800505c <W5500_SetAddress>:

void W5500_SetAddress(wiz_NetInfo info)
{
 800505c:	b084      	sub	sp, #16
 800505e:	b4b0      	push	{r4, r5, r7}
 8005060:	af00      	add	r7, sp, #0
 8005062:	f107 040c 	add.w	r4, r7, #12
 8005066:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	gWIZNETINFO = info;
 800506a:	4b09      	ldr	r3, [pc, #36]	; (8005090 <W5500_SetAddress+0x34>)
 800506c:	461c      	mov	r4, r3
 800506e:	f107 050c 	add.w	r5, r7, #12
 8005072:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005076:	e895 0003 	ldmia.w	r5, {r0, r1}
 800507a:	6020      	str	r0, [r4, #0]
 800507c:	3404      	adds	r4, #4
 800507e:	8021      	strh	r1, [r4, #0]
 8005080:	3402      	adds	r4, #2
 8005082:	0c0b      	lsrs	r3, r1, #16
 8005084:	7023      	strb	r3, [r4, #0]
}
 8005086:	bf00      	nop
 8005088:	46bd      	mov	sp, r7
 800508a:	bcb0      	pop	{r4, r5, r7}
 800508c:	b004      	add	sp, #16
 800508e:	4770      	bx	lr
 8005090:	200009d8 	.word	0x200009d8

08005094 <W5500_Reboot>:
void W5500_Reboot()
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIZNET_RST_PORT, WIZNET_RST_PIN, GPIO_PIN_RESET);
 800509a:	2200      	movs	r2, #0
 800509c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80050a0:	4817      	ldr	r0, [pc, #92]	; (8005100 <W5500_Reboot+0x6c>)
 80050a2:	f000 fbf7 	bl	8005894 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80050a6:	2005      	movs	r0, #5
 80050a8:	f000 f8d8 	bl	800525c <HAL_Delay>
	HAL_GPIO_WritePin(WIZNET_RST_PORT, WIZNET_RST_PIN, GPIO_PIN_SET);
 80050ac:	2201      	movs	r2, #1
 80050ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80050b2:	4813      	ldr	r0, [pc, #76]	; (8005100 <W5500_Reboot+0x6c>)
 80050b4:	f000 fbee 	bl	8005894 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80050b8:	2005      	movs	r0, #5
 80050ba:	f000 f8cf 	bl	800525c <HAL_Delay>
	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Deselect);
 80050be:	4911      	ldr	r1, [pc, #68]	; (8005104 <W5500_Reboot+0x70>)
 80050c0:	4811      	ldr	r0, [pc, #68]	; (8005108 <W5500_Reboot+0x74>)
 80050c2:	f7ff fced 	bl	8004aa0 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 80050c6:	4911      	ldr	r1, [pc, #68]	; (800510c <W5500_Reboot+0x78>)
 80050c8:	4811      	ldr	r0, [pc, #68]	; (8005110 <W5500_Reboot+0x7c>)
 80050ca:	f7ff fd0f 	bl	8004aec <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 80050ce:	4911      	ldr	r1, [pc, #68]	; (8005114 <W5500_Reboot+0x80>)
 80050d0:	4811      	ldr	r0, [pc, #68]	; (8005118 <W5500_Reboot+0x84>)
 80050d2:	f7ff fd37 	bl	8004b44 <reg_wizchip_spiburst_cbfunc>
	uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 80050d6:	4a11      	ldr	r2, [pc, #68]	; (800511c <W5500_Reboot+0x88>)
 80050d8:	463b      	mov	r3, r7
 80050da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80050de:	e883 0003 	stmia.w	r3, {r0, r1}
	wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 80050e2:	463a      	mov	r2, r7
 80050e4:	463b      	mov	r3, r7
 80050e6:	4611      	mov	r1, r2
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7ff fde1 	bl	8004cb0 <wizchip_init>
	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 80050ee:	490c      	ldr	r1, [pc, #48]	; (8005120 <W5500_Reboot+0x8c>)
 80050f0:	2000      	movs	r0, #0
 80050f2:	f7ff fd53 	bl	8004b9c <ctlnetwork>
}
 80050f6:	bf00      	nop
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	40020400 	.word	0x40020400
 8005104:	08004fbd 	.word	0x08004fbd
 8005108:	08004fa5 	.word	0x08004fa5
 800510c:	0800503f 	.word	0x0800503f
 8005110:	08005025 	.word	0x08005025
 8005114:	08004ffd 	.word	0x08004ffd
 8005118:	08004fd5 	.word	0x08004fd5
 800511c:	08008f54 	.word	0x08008f54
 8005120:	200009d8 	.word	0x200009d8

08005124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800515c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005128:	f7fd ff8a 	bl	8003040 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800512c:	480c      	ldr	r0, [pc, #48]	; (8005160 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800512e:	490d      	ldr	r1, [pc, #52]	; (8005164 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005130:	4a0d      	ldr	r2, [pc, #52]	; (8005168 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005134:	e002      	b.n	800513c <LoopCopyDataInit>

08005136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800513a:	3304      	adds	r3, #4

0800513c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800513c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800513e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005140:	d3f9      	bcc.n	8005136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005142:	4a0a      	ldr	r2, [pc, #40]	; (800516c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005144:	4c0a      	ldr	r4, [pc, #40]	; (8005170 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005148:	e001      	b.n	800514e <LoopFillZerobss>

0800514a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800514a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800514c:	3204      	adds	r2, #4

0800514e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800514e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005150:	d3fb      	bcc.n	800514a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005152:	f002 fed1 	bl	8007ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005156:	f7fd faf7 	bl	8002748 <main>
  bx  lr    
 800515a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800515c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005164:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8005168:	08009758 	.word	0x08009758
  ldr r2, =_sbss
 800516c:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8005170:	20000b3c 	.word	0x20000b3c

08005174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005174:	e7fe      	b.n	8005174 <ADC_IRQHandler>
	...

08005178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800517c:	4b0e      	ldr	r3, [pc, #56]	; (80051b8 <HAL_Init+0x40>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a0d      	ldr	r2, [pc, #52]	; (80051b8 <HAL_Init+0x40>)
 8005182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005186:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005188:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <HAL_Init+0x40>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a0a      	ldr	r2, [pc, #40]	; (80051b8 <HAL_Init+0x40>)
 800518e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005192:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005194:	4b08      	ldr	r3, [pc, #32]	; (80051b8 <HAL_Init+0x40>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a07      	ldr	r2, [pc, #28]	; (80051b8 <HAL_Init+0x40>)
 800519a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800519e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051a0:	2003      	movs	r0, #3
 80051a2:	f000 f973 	bl	800548c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80051a6:	200f      	movs	r0, #15
 80051a8:	f000 f808 	bl	80051bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80051ac:	f7fd fd6e 	bl	8002c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	40023c00 	.word	0x40023c00

080051bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80051c4:	4b12      	ldr	r3, [pc, #72]	; (8005210 <HAL_InitTick+0x54>)
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	4b12      	ldr	r3, [pc, #72]	; (8005214 <HAL_InitTick+0x58>)
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	4619      	mov	r1, r3
 80051ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80051d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 f999 	bl	8005512 <HAL_SYSTICK_Config>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e00e      	b.n	8005208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b0f      	cmp	r3, #15
 80051ee:	d80a      	bhi.n	8005206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051f0:	2200      	movs	r2, #0
 80051f2:	6879      	ldr	r1, [r7, #4]
 80051f4:	f04f 30ff 	mov.w	r0, #4294967295
 80051f8:	f000 f953 	bl	80054a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80051fc:	4a06      	ldr	r2, [pc, #24]	; (8005218 <HAL_InitTick+0x5c>)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005202:	2300      	movs	r3, #0
 8005204:	e000      	b.n	8005208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
}
 8005208:	4618      	mov	r0, r3
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	2000003c 	.word	0x2000003c
 8005214:	20000070 	.word	0x20000070
 8005218:	2000006c 	.word	0x2000006c

0800521c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005220:	4b06      	ldr	r3, [pc, #24]	; (800523c <HAL_IncTick+0x20>)
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	461a      	mov	r2, r3
 8005226:	4b06      	ldr	r3, [pc, #24]	; (8005240 <HAL_IncTick+0x24>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4413      	add	r3, r2
 800522c:	4a04      	ldr	r2, [pc, #16]	; (8005240 <HAL_IncTick+0x24>)
 800522e:	6013      	str	r3, [r2, #0]
}
 8005230:	bf00      	nop
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	20000070 	.word	0x20000070
 8005240:	200009f0 	.word	0x200009f0

08005244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0
  return uwTick;
 8005248:	4b03      	ldr	r3, [pc, #12]	; (8005258 <HAL_GetTick+0x14>)
 800524a:	681b      	ldr	r3, [r3, #0]
}
 800524c:	4618      	mov	r0, r3
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	200009f0 	.word	0x200009f0

0800525c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005264:	f7ff ffee 	bl	8005244 <HAL_GetTick>
 8005268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005274:	d005      	beq.n	8005282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005276:	4b0a      	ldr	r3, [pc, #40]	; (80052a0 <HAL_Delay+0x44>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4413      	add	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005282:	bf00      	nop
 8005284:	f7ff ffde 	bl	8005244 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	429a      	cmp	r2, r3
 8005292:	d8f7      	bhi.n	8005284 <HAL_Delay+0x28>
  {
  }
}
 8005294:	bf00      	nop
 8005296:	bf00      	nop
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	20000070 	.word	0x20000070

080052a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f003 0307 	and.w	r3, r3, #7
 80052b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052b4:	4b0c      	ldr	r3, [pc, #48]	; (80052e8 <__NVIC_SetPriorityGrouping+0x44>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80052c0:	4013      	ands	r3, r2
 80052c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80052d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052d6:	4a04      	ldr	r2, [pc, #16]	; (80052e8 <__NVIC_SetPriorityGrouping+0x44>)
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	60d3      	str	r3, [r2, #12]
}
 80052dc:	bf00      	nop
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	e000ed00 	.word	0xe000ed00

080052ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052f0:	4b04      	ldr	r3, [pc, #16]	; (8005304 <__NVIC_GetPriorityGrouping+0x18>)
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	0a1b      	lsrs	r3, r3, #8
 80052f6:	f003 0307 	and.w	r3, r3, #7
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	e000ed00 	.word	0xe000ed00

08005308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	4603      	mov	r3, r0
 8005310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005316:	2b00      	cmp	r3, #0
 8005318:	db0b      	blt.n	8005332 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800531a:	79fb      	ldrb	r3, [r7, #7]
 800531c:	f003 021f 	and.w	r2, r3, #31
 8005320:	4907      	ldr	r1, [pc, #28]	; (8005340 <__NVIC_EnableIRQ+0x38>)
 8005322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005326:	095b      	lsrs	r3, r3, #5
 8005328:	2001      	movs	r0, #1
 800532a:	fa00 f202 	lsl.w	r2, r0, r2
 800532e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005332:	bf00      	nop
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	e000e100 	.word	0xe000e100

08005344 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800534e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005352:	2b00      	cmp	r3, #0
 8005354:	db12      	blt.n	800537c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005356:	79fb      	ldrb	r3, [r7, #7]
 8005358:	f003 021f 	and.w	r2, r3, #31
 800535c:	490a      	ldr	r1, [pc, #40]	; (8005388 <__NVIC_DisableIRQ+0x44>)
 800535e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	2001      	movs	r0, #1
 8005366:	fa00 f202 	lsl.w	r2, r0, r2
 800536a:	3320      	adds	r3, #32
 800536c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005370:	f3bf 8f4f 	dsb	sy
}
 8005374:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005376:	f3bf 8f6f 	isb	sy
}
 800537a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	e000e100 	.word	0xe000e100

0800538c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	4603      	mov	r3, r0
 8005394:	6039      	str	r1, [r7, #0]
 8005396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800539c:	2b00      	cmp	r3, #0
 800539e:	db0a      	blt.n	80053b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	490c      	ldr	r1, [pc, #48]	; (80053d8 <__NVIC_SetPriority+0x4c>)
 80053a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053aa:	0112      	lsls	r2, r2, #4
 80053ac:	b2d2      	uxtb	r2, r2
 80053ae:	440b      	add	r3, r1
 80053b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053b4:	e00a      	b.n	80053cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	4908      	ldr	r1, [pc, #32]	; (80053dc <__NVIC_SetPriority+0x50>)
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	3b04      	subs	r3, #4
 80053c4:	0112      	lsls	r2, r2, #4
 80053c6:	b2d2      	uxtb	r2, r2
 80053c8:	440b      	add	r3, r1
 80053ca:	761a      	strb	r2, [r3, #24]
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	e000e100 	.word	0xe000e100
 80053dc:	e000ed00 	.word	0xe000ed00

080053e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b089      	sub	sp, #36	; 0x24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	f1c3 0307 	rsb	r3, r3, #7
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	bf28      	it	cs
 80053fe:	2304      	movcs	r3, #4
 8005400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	3304      	adds	r3, #4
 8005406:	2b06      	cmp	r3, #6
 8005408:	d902      	bls.n	8005410 <NVIC_EncodePriority+0x30>
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	3b03      	subs	r3, #3
 800540e:	e000      	b.n	8005412 <NVIC_EncodePriority+0x32>
 8005410:	2300      	movs	r3, #0
 8005412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005414:	f04f 32ff 	mov.w	r2, #4294967295
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	fa02 f303 	lsl.w	r3, r2, r3
 800541e:	43da      	mvns	r2, r3
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	401a      	ands	r2, r3
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005428:	f04f 31ff 	mov.w	r1, #4294967295
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	fa01 f303 	lsl.w	r3, r1, r3
 8005432:	43d9      	mvns	r1, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005438:	4313      	orrs	r3, r2
         );
}
 800543a:	4618      	mov	r0, r3
 800543c:	3724      	adds	r7, #36	; 0x24
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
	...

08005448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3b01      	subs	r3, #1
 8005454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005458:	d301      	bcc.n	800545e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800545a:	2301      	movs	r3, #1
 800545c:	e00f      	b.n	800547e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800545e:	4a0a      	ldr	r2, [pc, #40]	; (8005488 <SysTick_Config+0x40>)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3b01      	subs	r3, #1
 8005464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005466:	210f      	movs	r1, #15
 8005468:	f04f 30ff 	mov.w	r0, #4294967295
 800546c:	f7ff ff8e 	bl	800538c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005470:	4b05      	ldr	r3, [pc, #20]	; (8005488 <SysTick_Config+0x40>)
 8005472:	2200      	movs	r2, #0
 8005474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005476:	4b04      	ldr	r3, [pc, #16]	; (8005488 <SysTick_Config+0x40>)
 8005478:	2207      	movs	r2, #7
 800547a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	e000e010 	.word	0xe000e010

0800548c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7ff ff05 	bl	80052a4 <__NVIC_SetPriorityGrouping>
}
 800549a:	bf00      	nop
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b086      	sub	sp, #24
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	4603      	mov	r3, r0
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	607a      	str	r2, [r7, #4]
 80054ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80054b4:	f7ff ff1a 	bl	80052ec <__NVIC_GetPriorityGrouping>
 80054b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	68b9      	ldr	r1, [r7, #8]
 80054be:	6978      	ldr	r0, [r7, #20]
 80054c0:	f7ff ff8e 	bl	80053e0 <NVIC_EncodePriority>
 80054c4:	4602      	mov	r2, r0
 80054c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054ca:	4611      	mov	r1, r2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff ff5d 	bl	800538c <__NVIC_SetPriority>
}
 80054d2:	bf00      	nop
 80054d4:	3718      	adds	r7, #24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b082      	sub	sp, #8
 80054de:	af00      	add	r7, sp, #0
 80054e0:	4603      	mov	r3, r0
 80054e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7ff ff0d 	bl	8005308 <__NVIC_EnableIRQ>
}
 80054ee:	bf00      	nop
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b082      	sub	sp, #8
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	4603      	mov	r3, r0
 80054fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005504:	4618      	mov	r0, r3
 8005506:	f7ff ff1d 	bl	8005344 <__NVIC_DisableIRQ>
}
 800550a:	bf00      	nop
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b082      	sub	sp, #8
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7ff ff94 	bl	8005448 <SysTick_Config>
 8005520:	4603      	mov	r3, r0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
	...

0800552c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800552c:	b480      	push	{r7}
 800552e:	b089      	sub	sp, #36	; 0x24
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005536:	2300      	movs	r3, #0
 8005538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800553a:	2300      	movs	r3, #0
 800553c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800553e:	2300      	movs	r3, #0
 8005540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005542:	2300      	movs	r3, #0
 8005544:	61fb      	str	r3, [r7, #28]
 8005546:	e16b      	b.n	8005820 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005548:	2201      	movs	r2, #1
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	fa02 f303 	lsl.w	r3, r2, r3
 8005550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	4013      	ands	r3, r2
 800555a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	429a      	cmp	r2, r3
 8005562:	f040 815a 	bne.w	800581a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	2b01      	cmp	r3, #1
 8005570:	d005      	beq.n	800557e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800557a:	2b02      	cmp	r3, #2
 800557c:	d130      	bne.n	80055e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	2203      	movs	r2, #3
 800558a:	fa02 f303 	lsl.w	r3, r2, r3
 800558e:	43db      	mvns	r3, r3
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	4013      	ands	r3, r2
 8005594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	fa02 f303 	lsl.w	r3, r2, r3
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055b4:	2201      	movs	r2, #1
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	43db      	mvns	r3, r3
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	4013      	ands	r3, r2
 80055c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	091b      	lsrs	r3, r3, #4
 80055ca:	f003 0201 	and.w	r2, r3, #1
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	fa02 f303 	lsl.w	r3, r2, r3
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f003 0303 	and.w	r3, r3, #3
 80055e8:	2b03      	cmp	r3, #3
 80055ea:	d017      	beq.n	800561c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	2203      	movs	r2, #3
 80055f8:	fa02 f303 	lsl.w	r3, r2, r3
 80055fc:	43db      	mvns	r3, r3
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	4013      	ands	r3, r2
 8005602:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	fa02 f303 	lsl.w	r3, r2, r3
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	4313      	orrs	r3, r2
 8005614:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f003 0303 	and.w	r3, r3, #3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d123      	bne.n	8005670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	08da      	lsrs	r2, r3, #3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3208      	adds	r2, #8
 8005630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	220f      	movs	r2, #15
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	43db      	mvns	r3, r3
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	4013      	ands	r3, r2
 800564a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f003 0307 	and.w	r3, r3, #7
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	fa02 f303 	lsl.w	r3, r2, r3
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	4313      	orrs	r3, r2
 8005660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	08da      	lsrs	r2, r3, #3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	3208      	adds	r2, #8
 800566a:	69b9      	ldr	r1, [r7, #24]
 800566c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	2203      	movs	r2, #3
 800567c:	fa02 f303 	lsl.w	r3, r2, r3
 8005680:	43db      	mvns	r3, r3
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	4013      	ands	r3, r2
 8005686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f003 0203 	and.w	r2, r3, #3
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	fa02 f303 	lsl.w	r3, r2, r3
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	4313      	orrs	r3, r2
 800569c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 80b4 	beq.w	800581a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056b2:	2300      	movs	r3, #0
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	4b60      	ldr	r3, [pc, #384]	; (8005838 <HAL_GPIO_Init+0x30c>)
 80056b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ba:	4a5f      	ldr	r2, [pc, #380]	; (8005838 <HAL_GPIO_Init+0x30c>)
 80056bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056c0:	6453      	str	r3, [r2, #68]	; 0x44
 80056c2:	4b5d      	ldr	r3, [pc, #372]	; (8005838 <HAL_GPIO_Init+0x30c>)
 80056c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056ce:	4a5b      	ldr	r2, [pc, #364]	; (800583c <HAL_GPIO_Init+0x310>)
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	089b      	lsrs	r3, r3, #2
 80056d4:	3302      	adds	r3, #2
 80056d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	220f      	movs	r2, #15
 80056e6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ea:	43db      	mvns	r3, r3
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	4013      	ands	r3, r2
 80056f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a52      	ldr	r2, [pc, #328]	; (8005840 <HAL_GPIO_Init+0x314>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d02b      	beq.n	8005752 <HAL_GPIO_Init+0x226>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a51      	ldr	r2, [pc, #324]	; (8005844 <HAL_GPIO_Init+0x318>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d025      	beq.n	800574e <HAL_GPIO_Init+0x222>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a50      	ldr	r2, [pc, #320]	; (8005848 <HAL_GPIO_Init+0x31c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d01f      	beq.n	800574a <HAL_GPIO_Init+0x21e>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a4f      	ldr	r2, [pc, #316]	; (800584c <HAL_GPIO_Init+0x320>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d019      	beq.n	8005746 <HAL_GPIO_Init+0x21a>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a4e      	ldr	r2, [pc, #312]	; (8005850 <HAL_GPIO_Init+0x324>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d013      	beq.n	8005742 <HAL_GPIO_Init+0x216>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a4d      	ldr	r2, [pc, #308]	; (8005854 <HAL_GPIO_Init+0x328>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00d      	beq.n	800573e <HAL_GPIO_Init+0x212>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a4c      	ldr	r2, [pc, #304]	; (8005858 <HAL_GPIO_Init+0x32c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d007      	beq.n	800573a <HAL_GPIO_Init+0x20e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a4b      	ldr	r2, [pc, #300]	; (800585c <HAL_GPIO_Init+0x330>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d101      	bne.n	8005736 <HAL_GPIO_Init+0x20a>
 8005732:	2307      	movs	r3, #7
 8005734:	e00e      	b.n	8005754 <HAL_GPIO_Init+0x228>
 8005736:	2308      	movs	r3, #8
 8005738:	e00c      	b.n	8005754 <HAL_GPIO_Init+0x228>
 800573a:	2306      	movs	r3, #6
 800573c:	e00a      	b.n	8005754 <HAL_GPIO_Init+0x228>
 800573e:	2305      	movs	r3, #5
 8005740:	e008      	b.n	8005754 <HAL_GPIO_Init+0x228>
 8005742:	2304      	movs	r3, #4
 8005744:	e006      	b.n	8005754 <HAL_GPIO_Init+0x228>
 8005746:	2303      	movs	r3, #3
 8005748:	e004      	b.n	8005754 <HAL_GPIO_Init+0x228>
 800574a:	2302      	movs	r3, #2
 800574c:	e002      	b.n	8005754 <HAL_GPIO_Init+0x228>
 800574e:	2301      	movs	r3, #1
 8005750:	e000      	b.n	8005754 <HAL_GPIO_Init+0x228>
 8005752:	2300      	movs	r3, #0
 8005754:	69fa      	ldr	r2, [r7, #28]
 8005756:	f002 0203 	and.w	r2, r2, #3
 800575a:	0092      	lsls	r2, r2, #2
 800575c:	4093      	lsls	r3, r2
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	4313      	orrs	r3, r2
 8005762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005764:	4935      	ldr	r1, [pc, #212]	; (800583c <HAL_GPIO_Init+0x310>)
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	089b      	lsrs	r3, r3, #2
 800576a:	3302      	adds	r3, #2
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005772:	4b3b      	ldr	r3, [pc, #236]	; (8005860 <HAL_GPIO_Init+0x334>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	43db      	mvns	r3, r3
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	4013      	ands	r3, r2
 8005780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005796:	4a32      	ldr	r2, [pc, #200]	; (8005860 <HAL_GPIO_Init+0x334>)
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800579c:	4b30      	ldr	r3, [pc, #192]	; (8005860 <HAL_GPIO_Init+0x334>)
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	43db      	mvns	r3, r3
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	4013      	ands	r3, r2
 80057aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80057c0:	4a27      	ldr	r2, [pc, #156]	; (8005860 <HAL_GPIO_Init+0x334>)
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80057c6:	4b26      	ldr	r3, [pc, #152]	; (8005860 <HAL_GPIO_Init+0x334>)
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	43db      	mvns	r3, r3
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	4013      	ands	r3, r2
 80057d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80057ea:	4a1d      	ldr	r2, [pc, #116]	; (8005860 <HAL_GPIO_Init+0x334>)
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057f0:	4b1b      	ldr	r3, [pc, #108]	; (8005860 <HAL_GPIO_Init+0x334>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	43db      	mvns	r3, r3
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	4013      	ands	r3, r2
 80057fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005814:	4a12      	ldr	r2, [pc, #72]	; (8005860 <HAL_GPIO_Init+0x334>)
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	3301      	adds	r3, #1
 800581e:	61fb      	str	r3, [r7, #28]
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	2b0f      	cmp	r3, #15
 8005824:	f67f ae90 	bls.w	8005548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005828:	bf00      	nop
 800582a:	bf00      	nop
 800582c:	3724      	adds	r7, #36	; 0x24
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40023800 	.word	0x40023800
 800583c:	40013800 	.word	0x40013800
 8005840:	40020000 	.word	0x40020000
 8005844:	40020400 	.word	0x40020400
 8005848:	40020800 	.word	0x40020800
 800584c:	40020c00 	.word	0x40020c00
 8005850:	40021000 	.word	0x40021000
 8005854:	40021400 	.word	0x40021400
 8005858:	40021800 	.word	0x40021800
 800585c:	40021c00 	.word	0x40021c00
 8005860:	40013c00 	.word	0x40013c00

08005864 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	691a      	ldr	r2, [r3, #16]
 8005874:	887b      	ldrh	r3, [r7, #2]
 8005876:	4013      	ands	r3, r2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d002      	beq.n	8005882 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800587c:	2301      	movs	r3, #1
 800587e:	73fb      	strb	r3, [r7, #15]
 8005880:	e001      	b.n	8005886 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005882:	2300      	movs	r3, #0
 8005884:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005886:	7bfb      	ldrb	r3, [r7, #15]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	460b      	mov	r3, r1
 800589e:	807b      	strh	r3, [r7, #2]
 80058a0:	4613      	mov	r3, r2
 80058a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058a4:	787b      	ldrb	r3, [r7, #1]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058aa:	887a      	ldrh	r2, [r7, #2]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80058b0:	e003      	b.n	80058ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80058b2:	887b      	ldrh	r3, [r7, #2]
 80058b4:	041a      	lsls	r2, r3, #16
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	619a      	str	r2, [r3, #24]
}
 80058ba:	bf00      	nop
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
	...

080058c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e12b      	b.n	8005b32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d106      	bne.n	80058f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7fd f9f4 	bl	8002cdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2224      	movs	r2, #36	; 0x24
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0201 	bic.w	r2, r2, #1
 800590a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800591a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800592a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800592c:	f001 f8aa 	bl	8006a84 <HAL_RCC_GetPCLK1Freq>
 8005930:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	4a81      	ldr	r2, [pc, #516]	; (8005b3c <HAL_I2C_Init+0x274>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d807      	bhi.n	800594c <HAL_I2C_Init+0x84>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4a80      	ldr	r2, [pc, #512]	; (8005b40 <HAL_I2C_Init+0x278>)
 8005940:	4293      	cmp	r3, r2
 8005942:	bf94      	ite	ls
 8005944:	2301      	movls	r3, #1
 8005946:	2300      	movhi	r3, #0
 8005948:	b2db      	uxtb	r3, r3
 800594a:	e006      	b.n	800595a <HAL_I2C_Init+0x92>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4a7d      	ldr	r2, [pc, #500]	; (8005b44 <HAL_I2C_Init+0x27c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	bf94      	ite	ls
 8005954:	2301      	movls	r3, #1
 8005956:	2300      	movhi	r3, #0
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e0e7      	b.n	8005b32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4a78      	ldr	r2, [pc, #480]	; (8005b48 <HAL_I2C_Init+0x280>)
 8005966:	fba2 2303 	umull	r2, r3, r2, r3
 800596a:	0c9b      	lsrs	r3, r3, #18
 800596c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	430a      	orrs	r2, r1
 8005980:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	4a6a      	ldr	r2, [pc, #424]	; (8005b3c <HAL_I2C_Init+0x274>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d802      	bhi.n	800599c <HAL_I2C_Init+0xd4>
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	3301      	adds	r3, #1
 800599a:	e009      	b.n	80059b0 <HAL_I2C_Init+0xe8>
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80059a2:	fb02 f303 	mul.w	r3, r2, r3
 80059a6:	4a69      	ldr	r2, [pc, #420]	; (8005b4c <HAL_I2C_Init+0x284>)
 80059a8:	fba2 2303 	umull	r2, r3, r2, r3
 80059ac:	099b      	lsrs	r3, r3, #6
 80059ae:	3301      	adds	r3, #1
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	6812      	ldr	r2, [r2, #0]
 80059b4:	430b      	orrs	r3, r1
 80059b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80059c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	495c      	ldr	r1, [pc, #368]	; (8005b3c <HAL_I2C_Init+0x274>)
 80059cc:	428b      	cmp	r3, r1
 80059ce:	d819      	bhi.n	8005a04 <HAL_I2C_Init+0x13c>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	1e59      	subs	r1, r3, #1
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	fbb1 f3f3 	udiv	r3, r1, r3
 80059de:	1c59      	adds	r1, r3, #1
 80059e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80059e4:	400b      	ands	r3, r1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00a      	beq.n	8005a00 <HAL_I2C_Init+0x138>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	1e59      	subs	r1, r3, #1
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80059f8:	3301      	adds	r3, #1
 80059fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059fe:	e051      	b.n	8005aa4 <HAL_I2C_Init+0x1dc>
 8005a00:	2304      	movs	r3, #4
 8005a02:	e04f      	b.n	8005aa4 <HAL_I2C_Init+0x1dc>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d111      	bne.n	8005a30 <HAL_I2C_Init+0x168>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	1e58      	subs	r0, r3, #1
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6859      	ldr	r1, [r3, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	005b      	lsls	r3, r3, #1
 8005a18:	440b      	add	r3, r1
 8005a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a1e:	3301      	adds	r3, #1
 8005a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	bf0c      	ite	eq
 8005a28:	2301      	moveq	r3, #1
 8005a2a:	2300      	movne	r3, #0
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	e012      	b.n	8005a56 <HAL_I2C_Init+0x18e>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	1e58      	subs	r0, r3, #1
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6859      	ldr	r1, [r3, #4]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	440b      	add	r3, r1
 8005a3e:	0099      	lsls	r1, r3, #2
 8005a40:	440b      	add	r3, r1
 8005a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a46:	3301      	adds	r3, #1
 8005a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	bf0c      	ite	eq
 8005a50:	2301      	moveq	r3, #1
 8005a52:	2300      	movne	r3, #0
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <HAL_I2C_Init+0x196>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e022      	b.n	8005aa4 <HAL_I2C_Init+0x1dc>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10e      	bne.n	8005a84 <HAL_I2C_Init+0x1bc>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	1e58      	subs	r0, r3, #1
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6859      	ldr	r1, [r3, #4]
 8005a6e:	460b      	mov	r3, r1
 8005a70:	005b      	lsls	r3, r3, #1
 8005a72:	440b      	add	r3, r1
 8005a74:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a78:	3301      	adds	r3, #1
 8005a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a82:	e00f      	b.n	8005aa4 <HAL_I2C_Init+0x1dc>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	1e58      	subs	r0, r3, #1
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6859      	ldr	r1, [r3, #4]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	440b      	add	r3, r1
 8005a92:	0099      	lsls	r1, r3, #2
 8005a94:	440b      	add	r3, r1
 8005a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005aa4:	6879      	ldr	r1, [r7, #4]
 8005aa6:	6809      	ldr	r1, [r1, #0]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	69da      	ldr	r2, [r3, #28]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005ad2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6911      	ldr	r1, [r2, #16]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	68d2      	ldr	r2, [r2, #12]
 8005ade:	4311      	orrs	r1, r2
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6812      	ldr	r2, [r2, #0]
 8005ae4:	430b      	orrs	r3, r1
 8005ae6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	695a      	ldr	r2, [r3, #20]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	431a      	orrs	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 0201 	orr.w	r2, r2, #1
 8005b12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	000186a0 	.word	0x000186a0
 8005b40:	001e847f 	.word	0x001e847f
 8005b44:	003d08ff 	.word	0x003d08ff
 8005b48:	431bde83 	.word	0x431bde83
 8005b4c:	10624dd3 	.word	0x10624dd3

08005b50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b088      	sub	sp, #32
 8005b54:	af02      	add	r7, sp, #8
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	4608      	mov	r0, r1
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	4603      	mov	r3, r0
 8005b60:	817b      	strh	r3, [r7, #10]
 8005b62:	460b      	mov	r3, r1
 8005b64:	813b      	strh	r3, [r7, #8]
 8005b66:	4613      	mov	r3, r2
 8005b68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b6a:	f7ff fb6b 	bl	8005244 <HAL_GetTick>
 8005b6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b20      	cmp	r3, #32
 8005b7a:	f040 80d9 	bne.w	8005d30 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	9300      	str	r3, [sp, #0]
 8005b82:	2319      	movs	r3, #25
 8005b84:	2201      	movs	r2, #1
 8005b86:	496d      	ldr	r1, [pc, #436]	; (8005d3c <HAL_I2C_Mem_Write+0x1ec>)
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f000 f971 	bl	8005e70 <I2C_WaitOnFlagUntilTimeout>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005b94:	2302      	movs	r3, #2
 8005b96:	e0cc      	b.n	8005d32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d101      	bne.n	8005ba6 <HAL_I2C_Mem_Write+0x56>
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	e0c5      	b.n	8005d32 <HAL_I2C_Mem_Write+0x1e2>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d007      	beq.n	8005bcc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f042 0201 	orr.w	r2, r2, #1
 8005bca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2221      	movs	r2, #33	; 0x21
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2240      	movs	r2, #64	; 0x40
 8005be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6a3a      	ldr	r2, [r7, #32]
 8005bf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4a4d      	ldr	r2, [pc, #308]	; (8005d40 <HAL_I2C_Mem_Write+0x1f0>)
 8005c0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c0e:	88f8      	ldrh	r0, [r7, #6]
 8005c10:	893a      	ldrh	r2, [r7, #8]
 8005c12:	8979      	ldrh	r1, [r7, #10]
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	9301      	str	r3, [sp, #4]
 8005c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 f890 	bl	8005d44 <I2C_RequestMemoryWrite>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d052      	beq.n	8005cd0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e081      	b.n	8005d32 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 fa36 	bl	80060a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00d      	beq.n	8005c5a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d107      	bne.n	8005c56 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e06b      	b.n	8005d32 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	781a      	ldrb	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	1c5a      	adds	r2, r3, #1
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c74:	3b01      	subs	r3, #1
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	3b01      	subs	r3, #1
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	f003 0304 	and.w	r3, r3, #4
 8005c94:	2b04      	cmp	r3, #4
 8005c96:	d11b      	bne.n	8005cd0 <HAL_I2C_Mem_Write+0x180>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d017      	beq.n	8005cd0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	781a      	ldrb	r2, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1aa      	bne.n	8005c2e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 fa29 	bl	8006134 <I2C_WaitOnBTFFlagUntilTimeout>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00d      	beq.n	8005d04 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	d107      	bne.n	8005d00 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cfe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e016      	b.n	8005d32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	e000      	b.n	8005d32 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005d30:	2302      	movs	r3, #2
  }
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3718      	adds	r7, #24
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	00100002 	.word	0x00100002
 8005d40:	ffff0000 	.word	0xffff0000

08005d44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af02      	add	r7, sp, #8
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	4608      	mov	r0, r1
 8005d4e:	4611      	mov	r1, r2
 8005d50:	461a      	mov	r2, r3
 8005d52:	4603      	mov	r3, r0
 8005d54:	817b      	strh	r3, [r7, #10]
 8005d56:	460b      	mov	r3, r1
 8005d58:	813b      	strh	r3, [r7, #8]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 f878 	bl	8005e70 <I2C_WaitOnFlagUntilTimeout>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00d      	beq.n	8005da2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d94:	d103      	bne.n	8005d9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e05f      	b.n	8005e62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005da2:	897b      	ldrh	r3, [r7, #10]
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	461a      	mov	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005db0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	6a3a      	ldr	r2, [r7, #32]
 8005db6:	492d      	ldr	r1, [pc, #180]	; (8005e6c <I2C_RequestMemoryWrite+0x128>)
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 f8d3 	bl	8005f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d001      	beq.n	8005dc8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e04c      	b.n	8005e62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dc8:	2300      	movs	r3, #0
 8005dca:	617b      	str	r3, [r7, #20]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	617b      	str	r3, [r7, #20]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	617b      	str	r3, [r7, #20]
 8005ddc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de0:	6a39      	ldr	r1, [r7, #32]
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 f95e 	bl	80060a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00d      	beq.n	8005e0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d107      	bne.n	8005e06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e02b      	b.n	8005e62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e0a:	88fb      	ldrh	r3, [r7, #6]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d105      	bne.n	8005e1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e10:	893b      	ldrh	r3, [r7, #8]
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	611a      	str	r2, [r3, #16]
 8005e1a:	e021      	b.n	8005e60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e1c:	893b      	ldrh	r3, [r7, #8]
 8005e1e:	0a1b      	lsrs	r3, r3, #8
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e2c:	6a39      	ldr	r1, [r7, #32]
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 f938 	bl	80060a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00d      	beq.n	8005e56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d107      	bne.n	8005e52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e005      	b.n	8005e62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e56:	893b      	ldrh	r3, [r7, #8]
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3718      	adds	r7, #24
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	00010002 	.word	0x00010002

08005e70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	603b      	str	r3, [r7, #0]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e80:	e048      	b.n	8005f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e88:	d044      	beq.n	8005f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e8a:	f7ff f9db 	bl	8005244 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d302      	bcc.n	8005ea0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d139      	bne.n	8005f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	0c1b      	lsrs	r3, r3, #16
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d10d      	bne.n	8005ec6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	43da      	mvns	r2, r3
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	bf0c      	ite	eq
 8005ebc:	2301      	moveq	r3, #1
 8005ebe:	2300      	movne	r3, #0
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	e00c      	b.n	8005ee0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	43da      	mvns	r2, r3
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	bf0c      	ite	eq
 8005ed8:	2301      	moveq	r3, #1
 8005eda:	2300      	movne	r3, #0
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	461a      	mov	r2, r3
 8005ee0:	79fb      	ldrb	r3, [r7, #7]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d116      	bne.n	8005f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f00:	f043 0220 	orr.w	r2, r3, #32
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e023      	b.n	8005f5c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	0c1b      	lsrs	r3, r3, #16
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d10d      	bne.n	8005f3a <I2C_WaitOnFlagUntilTimeout+0xca>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	43da      	mvns	r2, r3
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	bf0c      	ite	eq
 8005f30:	2301      	moveq	r3, #1
 8005f32:	2300      	movne	r3, #0
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	461a      	mov	r2, r3
 8005f38:	e00c      	b.n	8005f54 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	43da      	mvns	r2, r3
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	4013      	ands	r3, r2
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	bf0c      	ite	eq
 8005f4c:	2301      	moveq	r3, #1
 8005f4e:	2300      	movne	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	461a      	mov	r2, r3
 8005f54:	79fb      	ldrb	r3, [r7, #7]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d093      	beq.n	8005e82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
 8005f70:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f72:	e071      	b.n	8006058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f82:	d123      	bne.n	8005fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f92:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb8:	f043 0204 	orr.w	r2, r3, #4
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e067      	b.n	800609c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd2:	d041      	beq.n	8006058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fd4:	f7ff f936 	bl	8005244 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d302      	bcc.n	8005fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d136      	bne.n	8006058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	0c1b      	lsrs	r3, r3, #16
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d10c      	bne.n	800600e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	43da      	mvns	r2, r3
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	4013      	ands	r3, r2
 8006000:	b29b      	uxth	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	bf14      	ite	ne
 8006006:	2301      	movne	r3, #1
 8006008:	2300      	moveq	r3, #0
 800600a:	b2db      	uxtb	r3, r3
 800600c:	e00b      	b.n	8006026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	43da      	mvns	r2, r3
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	4013      	ands	r3, r2
 800601a:	b29b      	uxth	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	bf14      	ite	ne
 8006020:	2301      	movne	r3, #1
 8006022:	2300      	moveq	r3, #0
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d016      	beq.n	8006058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2220      	movs	r2, #32
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006044:	f043 0220 	orr.w	r2, r3, #32
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e021      	b.n	800609c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	0c1b      	lsrs	r3, r3, #16
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b01      	cmp	r3, #1
 8006060:	d10c      	bne.n	800607c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	43da      	mvns	r2, r3
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	4013      	ands	r3, r2
 800606e:	b29b      	uxth	r3, r3
 8006070:	2b00      	cmp	r3, #0
 8006072:	bf14      	ite	ne
 8006074:	2301      	movne	r3, #1
 8006076:	2300      	moveq	r3, #0
 8006078:	b2db      	uxtb	r3, r3
 800607a:	e00b      	b.n	8006094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	43da      	mvns	r2, r3
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	4013      	ands	r3, r2
 8006088:	b29b      	uxth	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	bf14      	ite	ne
 800608e:	2301      	movne	r3, #1
 8006090:	2300      	moveq	r3, #0
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	f47f af6d 	bne.w	8005f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060b0:	e034      	b.n	800611c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 f886 	bl	80061c4 <I2C_IsAcknowledgeFailed>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e034      	b.n	800612c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c8:	d028      	beq.n	800611c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ca:	f7ff f8bb 	bl	8005244 <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d302      	bcc.n	80060e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d11d      	bne.n	800611c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ea:	2b80      	cmp	r3, #128	; 0x80
 80060ec:	d016      	beq.n	800611c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006108:	f043 0220 	orr.w	r2, r3, #32
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e007      	b.n	800612c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006126:	2b80      	cmp	r3, #128	; 0x80
 8006128:	d1c3      	bne.n	80060b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006140:	e034      	b.n	80061ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 f83e 	bl	80061c4 <I2C_IsAcknowledgeFailed>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e034      	b.n	80061bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006158:	d028      	beq.n	80061ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800615a:	f7ff f873 	bl	8005244 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	429a      	cmp	r2, r3
 8006168:	d302      	bcc.n	8006170 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d11d      	bne.n	80061ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	f003 0304 	and.w	r3, r3, #4
 800617a:	2b04      	cmp	r3, #4
 800617c:	d016      	beq.n	80061ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2220      	movs	r2, #32
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006198:	f043 0220 	orr.w	r2, r3, #32
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e007      	b.n	80061bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	f003 0304 	and.w	r3, r3, #4
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d1c3      	bne.n	8006142 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061da:	d11b      	bne.n	8006214 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006200:	f043 0204 	orr.w	r2, r3, #4
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e000      	b.n	8006216 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
	...

08006224 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e267      	b.n	8006706 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	d075      	beq.n	800632e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006242:	4b88      	ldr	r3, [pc, #544]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f003 030c 	and.w	r3, r3, #12
 800624a:	2b04      	cmp	r3, #4
 800624c:	d00c      	beq.n	8006268 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800624e:	4b85      	ldr	r3, [pc, #532]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006256:	2b08      	cmp	r3, #8
 8006258:	d112      	bne.n	8006280 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800625a:	4b82      	ldr	r3, [pc, #520]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006266:	d10b      	bne.n	8006280 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006268:	4b7e      	ldr	r3, [pc, #504]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d05b      	beq.n	800632c <HAL_RCC_OscConfig+0x108>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d157      	bne.n	800632c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e242      	b.n	8006706 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006288:	d106      	bne.n	8006298 <HAL_RCC_OscConfig+0x74>
 800628a:	4b76      	ldr	r3, [pc, #472]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a75      	ldr	r2, [pc, #468]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 8006290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006294:	6013      	str	r3, [r2, #0]
 8006296:	e01d      	b.n	80062d4 <HAL_RCC_OscConfig+0xb0>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062a0:	d10c      	bne.n	80062bc <HAL_RCC_OscConfig+0x98>
 80062a2:	4b70      	ldr	r3, [pc, #448]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a6f      	ldr	r2, [pc, #444]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 80062a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	4b6d      	ldr	r3, [pc, #436]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a6c      	ldr	r2, [pc, #432]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 80062b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062b8:	6013      	str	r3, [r2, #0]
 80062ba:	e00b      	b.n	80062d4 <HAL_RCC_OscConfig+0xb0>
 80062bc:	4b69      	ldr	r3, [pc, #420]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a68      	ldr	r2, [pc, #416]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 80062c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062c6:	6013      	str	r3, [r2, #0]
 80062c8:	4b66      	ldr	r3, [pc, #408]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a65      	ldr	r2, [pc, #404]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 80062ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d013      	beq.n	8006304 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062dc:	f7fe ffb2 	bl	8005244 <HAL_GetTick>
 80062e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062e2:	e008      	b.n	80062f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062e4:	f7fe ffae 	bl	8005244 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b64      	cmp	r3, #100	; 0x64
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e207      	b.n	8006706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062f6:	4b5b      	ldr	r3, [pc, #364]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d0f0      	beq.n	80062e4 <HAL_RCC_OscConfig+0xc0>
 8006302:	e014      	b.n	800632e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006304:	f7fe ff9e 	bl	8005244 <HAL_GetTick>
 8006308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800630a:	e008      	b.n	800631e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800630c:	f7fe ff9a 	bl	8005244 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	2b64      	cmp	r3, #100	; 0x64
 8006318:	d901      	bls.n	800631e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e1f3      	b.n	8006706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800631e:	4b51      	ldr	r3, [pc, #324]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1f0      	bne.n	800630c <HAL_RCC_OscConfig+0xe8>
 800632a:	e000      	b.n	800632e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800632c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0302 	and.w	r3, r3, #2
 8006336:	2b00      	cmp	r3, #0
 8006338:	d063      	beq.n	8006402 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800633a:	4b4a      	ldr	r3, [pc, #296]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f003 030c 	and.w	r3, r3, #12
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00b      	beq.n	800635e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006346:	4b47      	ldr	r3, [pc, #284]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800634e:	2b08      	cmp	r3, #8
 8006350:	d11c      	bne.n	800638c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006352:	4b44      	ldr	r3, [pc, #272]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d116      	bne.n	800638c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800635e:	4b41      	ldr	r3, [pc, #260]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b00      	cmp	r3, #0
 8006368:	d005      	beq.n	8006376 <HAL_RCC_OscConfig+0x152>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d001      	beq.n	8006376 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e1c7      	b.n	8006706 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006376:	4b3b      	ldr	r3, [pc, #236]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	00db      	lsls	r3, r3, #3
 8006384:	4937      	ldr	r1, [pc, #220]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 8006386:	4313      	orrs	r3, r2
 8006388:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800638a:	e03a      	b.n	8006402 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d020      	beq.n	80063d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006394:	4b34      	ldr	r3, [pc, #208]	; (8006468 <HAL_RCC_OscConfig+0x244>)
 8006396:	2201      	movs	r2, #1
 8006398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800639a:	f7fe ff53 	bl	8005244 <HAL_GetTick>
 800639e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063a0:	e008      	b.n	80063b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063a2:	f7fe ff4f 	bl	8005244 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d901      	bls.n	80063b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e1a8      	b.n	8006706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063b4:	4b2b      	ldr	r3, [pc, #172]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0f0      	beq.n	80063a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063c0:	4b28      	ldr	r3, [pc, #160]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	4925      	ldr	r1, [pc, #148]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	600b      	str	r3, [r1, #0]
 80063d4:	e015      	b.n	8006402 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063d6:	4b24      	ldr	r3, [pc, #144]	; (8006468 <HAL_RCC_OscConfig+0x244>)
 80063d8:	2200      	movs	r2, #0
 80063da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063dc:	f7fe ff32 	bl	8005244 <HAL_GetTick>
 80063e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063e2:	e008      	b.n	80063f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063e4:	f7fe ff2e 	bl	8005244 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d901      	bls.n	80063f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e187      	b.n	8006706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063f6:	4b1b      	ldr	r3, [pc, #108]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1f0      	bne.n	80063e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0308 	and.w	r3, r3, #8
 800640a:	2b00      	cmp	r3, #0
 800640c:	d036      	beq.n	800647c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d016      	beq.n	8006444 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006416:	4b15      	ldr	r3, [pc, #84]	; (800646c <HAL_RCC_OscConfig+0x248>)
 8006418:	2201      	movs	r2, #1
 800641a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800641c:	f7fe ff12 	bl	8005244 <HAL_GetTick>
 8006420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006422:	e008      	b.n	8006436 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006424:	f7fe ff0e 	bl	8005244 <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	2b02      	cmp	r3, #2
 8006430:	d901      	bls.n	8006436 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e167      	b.n	8006706 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006436:	4b0b      	ldr	r3, [pc, #44]	; (8006464 <HAL_RCC_OscConfig+0x240>)
 8006438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800643a:	f003 0302 	and.w	r3, r3, #2
 800643e:	2b00      	cmp	r3, #0
 8006440:	d0f0      	beq.n	8006424 <HAL_RCC_OscConfig+0x200>
 8006442:	e01b      	b.n	800647c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006444:	4b09      	ldr	r3, [pc, #36]	; (800646c <HAL_RCC_OscConfig+0x248>)
 8006446:	2200      	movs	r2, #0
 8006448:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800644a:	f7fe fefb 	bl	8005244 <HAL_GetTick>
 800644e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006450:	e00e      	b.n	8006470 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006452:	f7fe fef7 	bl	8005244 <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	2b02      	cmp	r3, #2
 800645e:	d907      	bls.n	8006470 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e150      	b.n	8006706 <HAL_RCC_OscConfig+0x4e2>
 8006464:	40023800 	.word	0x40023800
 8006468:	42470000 	.word	0x42470000
 800646c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006470:	4b88      	ldr	r3, [pc, #544]	; (8006694 <HAL_RCC_OscConfig+0x470>)
 8006472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1ea      	bne.n	8006452 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 8097 	beq.w	80065b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800648a:	2300      	movs	r3, #0
 800648c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800648e:	4b81      	ldr	r3, [pc, #516]	; (8006694 <HAL_RCC_OscConfig+0x470>)
 8006490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10f      	bne.n	80064ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800649a:	2300      	movs	r3, #0
 800649c:	60bb      	str	r3, [r7, #8]
 800649e:	4b7d      	ldr	r3, [pc, #500]	; (8006694 <HAL_RCC_OscConfig+0x470>)
 80064a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a2:	4a7c      	ldr	r2, [pc, #496]	; (8006694 <HAL_RCC_OscConfig+0x470>)
 80064a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064a8:	6413      	str	r3, [r2, #64]	; 0x40
 80064aa:	4b7a      	ldr	r3, [pc, #488]	; (8006694 <HAL_RCC_OscConfig+0x470>)
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064b2:	60bb      	str	r3, [r7, #8]
 80064b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064b6:	2301      	movs	r3, #1
 80064b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ba:	4b77      	ldr	r3, [pc, #476]	; (8006698 <HAL_RCC_OscConfig+0x474>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d118      	bne.n	80064f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064c6:	4b74      	ldr	r3, [pc, #464]	; (8006698 <HAL_RCC_OscConfig+0x474>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a73      	ldr	r2, [pc, #460]	; (8006698 <HAL_RCC_OscConfig+0x474>)
 80064cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064d2:	f7fe feb7 	bl	8005244 <HAL_GetTick>
 80064d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064d8:	e008      	b.n	80064ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064da:	f7fe feb3 	bl	8005244 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d901      	bls.n	80064ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e10c      	b.n	8006706 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ec:	4b6a      	ldr	r3, [pc, #424]	; (8006698 <HAL_RCC_OscConfig+0x474>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d0f0      	beq.n	80064da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d106      	bne.n	800650e <HAL_RCC_OscConfig+0x2ea>
 8006500:	4b64      	ldr	r3, [pc, #400]	; (8006694 <HAL_RCC_OscConfig+0x470>)
 8006502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006504:	4a63      	ldr	r2, [pc, #396]	; (8006694 <HAL_RCC_OscConfig+0x470>)
 8006506:	f043 0301 	orr.w	r3, r3, #1
 800650a:	6713      	str	r3, [r2, #112]	; 0x70
 800650c:	e01c      	b.n	8006548 <HAL_RCC_OscConfig+0x324>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	2b05      	cmp	r3, #5
 8006514:	d10c      	bne.n	8006530 <HAL_RCC_OscConfig+0x30c>
 8006516:	4b5f      	ldr	r3, [pc, #380]	; (8006694 <HAL_RCC_OscConfig+0x470>)
 8006518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651a:	4a5e      	ldr	r2, [pc, #376]	; (8006694 <HAL_RCC_OscConfig+0x470>)
 800651c:	f043 0304 	orr.w	r3, r3, #4
 8006520:	6713      	str	r3, [r2, #112]	; 0x70
 8006522:	4b5c      	ldr	r3, [pc, #368]	; (8006694 <HAL_RCC_OscConfig+0x470>)
 8006524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006526:	4a5b      	ldr	r2, [pc, #364]	; (8006694 <HAL_RCC_OscConfig+0x470>)
 8006528:	f043 0301 	orr.w	r3, r3, #1
 800652c:	6713      	str	r3, [r2, #112]	; 0x70
 800652e:	e00b      	b.n	8006548 <HAL_RCC_OscConfig+0x324>
 8006530:	4b58      	ldr	r3, [pc, #352]	; (8006694 <HAL_RCC_OscConfig+0x470>)
 8006532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006534:	4a57      	ldr	r2, [pc, #348]	; (8006694 <HAL_RCC_OscConfig+0x470>)
 8006536:	f023 0301 	bic.w	r3, r3, #1
 800653a:	6713      	str	r3, [r2, #112]	; 0x70
 800653c:	4b55      	ldr	r3, [pc, #340]	; (8006694 <HAL_RCC_OscConfig+0x470>)
 800653e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006540:	4a54      	ldr	r2, [pc, #336]	; (8006694 <HAL_RCC_OscConfig+0x470>)
 8006542:	f023 0304 	bic.w	r3, r3, #4
 8006546:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d015      	beq.n	800657c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006550:	f7fe fe78 	bl	8005244 <HAL_GetTick>
 8006554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006556:	e00a      	b.n	800656e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006558:	f7fe fe74 	bl	8005244 <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	f241 3288 	movw	r2, #5000	; 0x1388
 8006566:	4293      	cmp	r3, r2
 8006568:	d901      	bls.n	800656e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e0cb      	b.n	8006706 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800656e:	4b49      	ldr	r3, [pc, #292]	; (8006694 <HAL_RCC_OscConfig+0x470>)
 8006570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0ee      	beq.n	8006558 <HAL_RCC_OscConfig+0x334>
 800657a:	e014      	b.n	80065a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800657c:	f7fe fe62 	bl	8005244 <HAL_GetTick>
 8006580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006582:	e00a      	b.n	800659a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006584:	f7fe fe5e 	bl	8005244 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006592:	4293      	cmp	r3, r2
 8006594:	d901      	bls.n	800659a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e0b5      	b.n	8006706 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800659a:	4b3e      	ldr	r3, [pc, #248]	; (8006694 <HAL_RCC_OscConfig+0x470>)
 800659c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1ee      	bne.n	8006584 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065a6:	7dfb      	ldrb	r3, [r7, #23]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d105      	bne.n	80065b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065ac:	4b39      	ldr	r3, [pc, #228]	; (8006694 <HAL_RCC_OscConfig+0x470>)
 80065ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b0:	4a38      	ldr	r2, [pc, #224]	; (8006694 <HAL_RCC_OscConfig+0x470>)
 80065b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f000 80a1 	beq.w	8006704 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065c2:	4b34      	ldr	r3, [pc, #208]	; (8006694 <HAL_RCC_OscConfig+0x470>)
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f003 030c 	and.w	r3, r3, #12
 80065ca:	2b08      	cmp	r3, #8
 80065cc:	d05c      	beq.n	8006688 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d141      	bne.n	800665a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065d6:	4b31      	ldr	r3, [pc, #196]	; (800669c <HAL_RCC_OscConfig+0x478>)
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065dc:	f7fe fe32 	bl	8005244 <HAL_GetTick>
 80065e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065e2:	e008      	b.n	80065f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065e4:	f7fe fe2e 	bl	8005244 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e087      	b.n	8006706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065f6:	4b27      	ldr	r3, [pc, #156]	; (8006694 <HAL_RCC_OscConfig+0x470>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1f0      	bne.n	80065e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	69da      	ldr	r2, [r3, #28]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	431a      	orrs	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006610:	019b      	lsls	r3, r3, #6
 8006612:	431a      	orrs	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006618:	085b      	lsrs	r3, r3, #1
 800661a:	3b01      	subs	r3, #1
 800661c:	041b      	lsls	r3, r3, #16
 800661e:	431a      	orrs	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006624:	061b      	lsls	r3, r3, #24
 8006626:	491b      	ldr	r1, [pc, #108]	; (8006694 <HAL_RCC_OscConfig+0x470>)
 8006628:	4313      	orrs	r3, r2
 800662a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800662c:	4b1b      	ldr	r3, [pc, #108]	; (800669c <HAL_RCC_OscConfig+0x478>)
 800662e:	2201      	movs	r2, #1
 8006630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006632:	f7fe fe07 	bl	8005244 <HAL_GetTick>
 8006636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006638:	e008      	b.n	800664c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800663a:	f7fe fe03 	bl	8005244 <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b02      	cmp	r3, #2
 8006646:	d901      	bls.n	800664c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e05c      	b.n	8006706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800664c:	4b11      	ldr	r3, [pc, #68]	; (8006694 <HAL_RCC_OscConfig+0x470>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d0f0      	beq.n	800663a <HAL_RCC_OscConfig+0x416>
 8006658:	e054      	b.n	8006704 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800665a:	4b10      	ldr	r3, [pc, #64]	; (800669c <HAL_RCC_OscConfig+0x478>)
 800665c:	2200      	movs	r2, #0
 800665e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006660:	f7fe fdf0 	bl	8005244 <HAL_GetTick>
 8006664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006666:	e008      	b.n	800667a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006668:	f7fe fdec 	bl	8005244 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b02      	cmp	r3, #2
 8006674:	d901      	bls.n	800667a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e045      	b.n	8006706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800667a:	4b06      	ldr	r3, [pc, #24]	; (8006694 <HAL_RCC_OscConfig+0x470>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1f0      	bne.n	8006668 <HAL_RCC_OscConfig+0x444>
 8006686:	e03d      	b.n	8006704 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d107      	bne.n	80066a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e038      	b.n	8006706 <HAL_RCC_OscConfig+0x4e2>
 8006694:	40023800 	.word	0x40023800
 8006698:	40007000 	.word	0x40007000
 800669c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066a0:	4b1b      	ldr	r3, [pc, #108]	; (8006710 <HAL_RCC_OscConfig+0x4ec>)
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d028      	beq.n	8006700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d121      	bne.n	8006700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d11a      	bne.n	8006700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80066d0:	4013      	ands	r3, r2
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066d8:	4293      	cmp	r3, r2
 80066da:	d111      	bne.n	8006700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e6:	085b      	lsrs	r3, r3, #1
 80066e8:	3b01      	subs	r3, #1
 80066ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d107      	bne.n	8006700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d001      	beq.n	8006704 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e000      	b.n	8006706 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3718      	adds	r7, #24
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	40023800 	.word	0x40023800

08006714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e0cc      	b.n	80068c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006728:	4b68      	ldr	r3, [pc, #416]	; (80068cc <HAL_RCC_ClockConfig+0x1b8>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0307 	and.w	r3, r3, #7
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	429a      	cmp	r2, r3
 8006734:	d90c      	bls.n	8006750 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006736:	4b65      	ldr	r3, [pc, #404]	; (80068cc <HAL_RCC_ClockConfig+0x1b8>)
 8006738:	683a      	ldr	r2, [r7, #0]
 800673a:	b2d2      	uxtb	r2, r2
 800673c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800673e:	4b63      	ldr	r3, [pc, #396]	; (80068cc <HAL_RCC_ClockConfig+0x1b8>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0307 	and.w	r3, r3, #7
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	429a      	cmp	r2, r3
 800674a:	d001      	beq.n	8006750 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e0b8      	b.n	80068c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d020      	beq.n	800679e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0304 	and.w	r3, r3, #4
 8006764:	2b00      	cmp	r3, #0
 8006766:	d005      	beq.n	8006774 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006768:	4b59      	ldr	r3, [pc, #356]	; (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	4a58      	ldr	r2, [pc, #352]	; (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 800676e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006772:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0308 	and.w	r3, r3, #8
 800677c:	2b00      	cmp	r3, #0
 800677e:	d005      	beq.n	800678c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006780:	4b53      	ldr	r3, [pc, #332]	; (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	4a52      	ldr	r2, [pc, #328]	; (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006786:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800678a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800678c:	4b50      	ldr	r3, [pc, #320]	; (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	494d      	ldr	r1, [pc, #308]	; (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 800679a:	4313      	orrs	r3, r2
 800679c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d044      	beq.n	8006834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d107      	bne.n	80067c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067b2:	4b47      	ldr	r3, [pc, #284]	; (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d119      	bne.n	80067f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e07f      	b.n	80068c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d003      	beq.n	80067d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d107      	bne.n	80067e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067d2:	4b3f      	ldr	r3, [pc, #252]	; (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d109      	bne.n	80067f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e06f      	b.n	80068c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067e2:	4b3b      	ldr	r3, [pc, #236]	; (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e067      	b.n	80068c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067f2:	4b37      	ldr	r3, [pc, #220]	; (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f023 0203 	bic.w	r2, r3, #3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	4934      	ldr	r1, [pc, #208]	; (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006800:	4313      	orrs	r3, r2
 8006802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006804:	f7fe fd1e 	bl	8005244 <HAL_GetTick>
 8006808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800680a:	e00a      	b.n	8006822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800680c:	f7fe fd1a 	bl	8005244 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	f241 3288 	movw	r2, #5000	; 0x1388
 800681a:	4293      	cmp	r3, r2
 800681c:	d901      	bls.n	8006822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e04f      	b.n	80068c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006822:	4b2b      	ldr	r3, [pc, #172]	; (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f003 020c 	and.w	r2, r3, #12
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	429a      	cmp	r2, r3
 8006832:	d1eb      	bne.n	800680c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006834:	4b25      	ldr	r3, [pc, #148]	; (80068cc <HAL_RCC_ClockConfig+0x1b8>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0307 	and.w	r3, r3, #7
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	429a      	cmp	r2, r3
 8006840:	d20c      	bcs.n	800685c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006842:	4b22      	ldr	r3, [pc, #136]	; (80068cc <HAL_RCC_ClockConfig+0x1b8>)
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800684a:	4b20      	ldr	r3, [pc, #128]	; (80068cc <HAL_RCC_ClockConfig+0x1b8>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0307 	and.w	r3, r3, #7
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	429a      	cmp	r2, r3
 8006856:	d001      	beq.n	800685c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e032      	b.n	80068c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0304 	and.w	r3, r3, #4
 8006864:	2b00      	cmp	r3, #0
 8006866:	d008      	beq.n	800687a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006868:	4b19      	ldr	r3, [pc, #100]	; (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	4916      	ldr	r1, [pc, #88]	; (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006876:	4313      	orrs	r3, r2
 8006878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0308 	and.w	r3, r3, #8
 8006882:	2b00      	cmp	r3, #0
 8006884:	d009      	beq.n	800689a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006886:	4b12      	ldr	r3, [pc, #72]	; (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	490e      	ldr	r1, [pc, #56]	; (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006896:	4313      	orrs	r3, r2
 8006898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800689a:	f000 f821 	bl	80068e0 <HAL_RCC_GetSysClockFreq>
 800689e:	4602      	mov	r2, r0
 80068a0:	4b0b      	ldr	r3, [pc, #44]	; (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	091b      	lsrs	r3, r3, #4
 80068a6:	f003 030f 	and.w	r3, r3, #15
 80068aa:	490a      	ldr	r1, [pc, #40]	; (80068d4 <HAL_RCC_ClockConfig+0x1c0>)
 80068ac:	5ccb      	ldrb	r3, [r1, r3]
 80068ae:	fa22 f303 	lsr.w	r3, r2, r3
 80068b2:	4a09      	ldr	r2, [pc, #36]	; (80068d8 <HAL_RCC_ClockConfig+0x1c4>)
 80068b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80068b6:	4b09      	ldr	r3, [pc, #36]	; (80068dc <HAL_RCC_ClockConfig+0x1c8>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fe fc7e 	bl	80051bc <HAL_InitTick>

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	40023c00 	.word	0x40023c00
 80068d0:	40023800 	.word	0x40023800
 80068d4:	08008f5c 	.word	0x08008f5c
 80068d8:	2000003c 	.word	0x2000003c
 80068dc:	2000006c 	.word	0x2000006c

080068e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068e4:	b090      	sub	sp, #64	; 0x40
 80068e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	637b      	str	r3, [r7, #52]	; 0x34
 80068ec:	2300      	movs	r3, #0
 80068ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068f0:	2300      	movs	r3, #0
 80068f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068f8:	4b59      	ldr	r3, [pc, #356]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x180>)
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f003 030c 	and.w	r3, r3, #12
 8006900:	2b08      	cmp	r3, #8
 8006902:	d00d      	beq.n	8006920 <HAL_RCC_GetSysClockFreq+0x40>
 8006904:	2b08      	cmp	r3, #8
 8006906:	f200 80a1 	bhi.w	8006a4c <HAL_RCC_GetSysClockFreq+0x16c>
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <HAL_RCC_GetSysClockFreq+0x34>
 800690e:	2b04      	cmp	r3, #4
 8006910:	d003      	beq.n	800691a <HAL_RCC_GetSysClockFreq+0x3a>
 8006912:	e09b      	b.n	8006a4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006914:	4b53      	ldr	r3, [pc, #332]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x184>)
 8006916:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006918:	e09b      	b.n	8006a52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800691a:	4b53      	ldr	r3, [pc, #332]	; (8006a68 <HAL_RCC_GetSysClockFreq+0x188>)
 800691c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800691e:	e098      	b.n	8006a52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006920:	4b4f      	ldr	r3, [pc, #316]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x180>)
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006928:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800692a:	4b4d      	ldr	r3, [pc, #308]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x180>)
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d028      	beq.n	8006988 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006936:	4b4a      	ldr	r3, [pc, #296]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x180>)
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	099b      	lsrs	r3, r3, #6
 800693c:	2200      	movs	r2, #0
 800693e:	623b      	str	r3, [r7, #32]
 8006940:	627a      	str	r2, [r7, #36]	; 0x24
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006948:	2100      	movs	r1, #0
 800694a:	4b47      	ldr	r3, [pc, #284]	; (8006a68 <HAL_RCC_GetSysClockFreq+0x188>)
 800694c:	fb03 f201 	mul.w	r2, r3, r1
 8006950:	2300      	movs	r3, #0
 8006952:	fb00 f303 	mul.w	r3, r0, r3
 8006956:	4413      	add	r3, r2
 8006958:	4a43      	ldr	r2, [pc, #268]	; (8006a68 <HAL_RCC_GetSysClockFreq+0x188>)
 800695a:	fba0 1202 	umull	r1, r2, r0, r2
 800695e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006960:	460a      	mov	r2, r1
 8006962:	62ba      	str	r2, [r7, #40]	; 0x28
 8006964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006966:	4413      	add	r3, r2
 8006968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800696a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696c:	2200      	movs	r2, #0
 800696e:	61bb      	str	r3, [r7, #24]
 8006970:	61fa      	str	r2, [r7, #28]
 8006972:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006976:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800697a:	f7fa f8d9 	bl	8000b30 <__aeabi_uldivmod>
 800697e:	4602      	mov	r2, r0
 8006980:	460b      	mov	r3, r1
 8006982:	4613      	mov	r3, r2
 8006984:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006986:	e053      	b.n	8006a30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006988:	4b35      	ldr	r3, [pc, #212]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x180>)
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	099b      	lsrs	r3, r3, #6
 800698e:	2200      	movs	r2, #0
 8006990:	613b      	str	r3, [r7, #16]
 8006992:	617a      	str	r2, [r7, #20]
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800699a:	f04f 0b00 	mov.w	fp, #0
 800699e:	4652      	mov	r2, sl
 80069a0:	465b      	mov	r3, fp
 80069a2:	f04f 0000 	mov.w	r0, #0
 80069a6:	f04f 0100 	mov.w	r1, #0
 80069aa:	0159      	lsls	r1, r3, #5
 80069ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069b0:	0150      	lsls	r0, r2, #5
 80069b2:	4602      	mov	r2, r0
 80069b4:	460b      	mov	r3, r1
 80069b6:	ebb2 080a 	subs.w	r8, r2, sl
 80069ba:	eb63 090b 	sbc.w	r9, r3, fp
 80069be:	f04f 0200 	mov.w	r2, #0
 80069c2:	f04f 0300 	mov.w	r3, #0
 80069c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80069ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80069ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80069d2:	ebb2 0408 	subs.w	r4, r2, r8
 80069d6:	eb63 0509 	sbc.w	r5, r3, r9
 80069da:	f04f 0200 	mov.w	r2, #0
 80069de:	f04f 0300 	mov.w	r3, #0
 80069e2:	00eb      	lsls	r3, r5, #3
 80069e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069e8:	00e2      	lsls	r2, r4, #3
 80069ea:	4614      	mov	r4, r2
 80069ec:	461d      	mov	r5, r3
 80069ee:	eb14 030a 	adds.w	r3, r4, sl
 80069f2:	603b      	str	r3, [r7, #0]
 80069f4:	eb45 030b 	adc.w	r3, r5, fp
 80069f8:	607b      	str	r3, [r7, #4]
 80069fa:	f04f 0200 	mov.w	r2, #0
 80069fe:	f04f 0300 	mov.w	r3, #0
 8006a02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a06:	4629      	mov	r1, r5
 8006a08:	028b      	lsls	r3, r1, #10
 8006a0a:	4621      	mov	r1, r4
 8006a0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a10:	4621      	mov	r1, r4
 8006a12:	028a      	lsls	r2, r1, #10
 8006a14:	4610      	mov	r0, r2
 8006a16:	4619      	mov	r1, r3
 8006a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	60bb      	str	r3, [r7, #8]
 8006a1e:	60fa      	str	r2, [r7, #12]
 8006a20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a24:	f7fa f884 	bl	8000b30 <__aeabi_uldivmod>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a30:	4b0b      	ldr	r3, [pc, #44]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	0c1b      	lsrs	r3, r3, #16
 8006a36:	f003 0303 	and.w	r3, r3, #3
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006a40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006a4a:	e002      	b.n	8006a52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a4c:	4b05      	ldr	r3, [pc, #20]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x184>)
 8006a4e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006a50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3740      	adds	r7, #64	; 0x40
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a5e:	bf00      	nop
 8006a60:	40023800 	.word	0x40023800
 8006a64:	00f42400 	.word	0x00f42400
 8006a68:	017d7840 	.word	0x017d7840

08006a6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a70:	4b03      	ldr	r3, [pc, #12]	; (8006a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a72:	681b      	ldr	r3, [r3, #0]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	2000003c 	.word	0x2000003c

08006a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a88:	f7ff fff0 	bl	8006a6c <HAL_RCC_GetHCLKFreq>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	4b05      	ldr	r3, [pc, #20]	; (8006aa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	0a9b      	lsrs	r3, r3, #10
 8006a94:	f003 0307 	and.w	r3, r3, #7
 8006a98:	4903      	ldr	r1, [pc, #12]	; (8006aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a9a:	5ccb      	ldrb	r3, [r1, r3]
 8006a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	40023800 	.word	0x40023800
 8006aa8:	08008f6c 	.word	0x08008f6c

08006aac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d101      	bne.n	8006abe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e07b      	b.n	8006bb6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d108      	bne.n	8006ad8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ace:	d009      	beq.n	8006ae4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	61da      	str	r2, [r3, #28]
 8006ad6:	e005      	b.n	8006ae4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d106      	bne.n	8006b04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7fc f956 	bl	8002db0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2202      	movs	r2, #2
 8006b08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b36:	431a      	orrs	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	f003 0302 	and.w	r3, r3, #2
 8006b40:	431a      	orrs	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b54:	431a      	orrs	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b5e:	431a      	orrs	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b68:	ea42 0103 	orr.w	r1, r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	0c1b      	lsrs	r3, r3, #16
 8006b82:	f003 0104 	and.w	r1, r3, #4
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	f003 0210 	and.w	r2, r3, #16
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	430a      	orrs	r2, r1
 8006b94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	69da      	ldr	r2, [r3, #28]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ba4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b088      	sub	sp, #32
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	60f8      	str	r0, [r7, #12]
 8006bc6:	60b9      	str	r1, [r7, #8]
 8006bc8:	603b      	str	r3, [r7, #0]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d101      	bne.n	8006be0 <HAL_SPI_Transmit+0x22>
 8006bdc:	2302      	movs	r3, #2
 8006bde:	e12d      	b.n	8006e3c <HAL_SPI_Transmit+0x27e>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006be8:	f7fe fb2c 	bl	8005244 <HAL_GetTick>
 8006bec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006bee:	88fb      	ldrh	r3, [r7, #6]
 8006bf0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d002      	beq.n	8006c04 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006bfe:	2302      	movs	r3, #2
 8006c00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c02:	e116      	b.n	8006e32 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d002      	beq.n	8006c10 <HAL_SPI_Transmit+0x52>
 8006c0a:	88fb      	ldrh	r3, [r7, #6]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d102      	bne.n	8006c16 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c14:	e10d      	b.n	8006e32 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2203      	movs	r2, #3
 8006c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	88fa      	ldrh	r2, [r7, #6]
 8006c2e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	88fa      	ldrh	r2, [r7, #6]
 8006c34:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c5c:	d10f      	bne.n	8006c7e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c88:	2b40      	cmp	r3, #64	; 0x40
 8006c8a:	d007      	beq.n	8006c9c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ca4:	d14f      	bne.n	8006d46 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d002      	beq.n	8006cb4 <HAL_SPI_Transmit+0xf6>
 8006cae:	8afb      	ldrh	r3, [r7, #22]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d142      	bne.n	8006d3a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb8:	881a      	ldrh	r2, [r3, #0]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc4:	1c9a      	adds	r2, r3, #2
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006cd8:	e02f      	b.n	8006d3a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f003 0302 	and.w	r3, r3, #2
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d112      	bne.n	8006d0e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cec:	881a      	ldrh	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf8:	1c9a      	adds	r2, r3, #2
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	3b01      	subs	r3, #1
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d0c:	e015      	b.n	8006d3a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d0e:	f7fe fa99 	bl	8005244 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d803      	bhi.n	8006d26 <HAL_SPI_Transmit+0x168>
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d24:	d102      	bne.n	8006d2c <HAL_SPI_Transmit+0x16e>
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d106      	bne.n	8006d3a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006d38:	e07b      	b.n	8006e32 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1ca      	bne.n	8006cda <HAL_SPI_Transmit+0x11c>
 8006d44:	e050      	b.n	8006de8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d002      	beq.n	8006d54 <HAL_SPI_Transmit+0x196>
 8006d4e:	8afb      	ldrh	r3, [r7, #22]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d144      	bne.n	8006dde <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	330c      	adds	r3, #12
 8006d5e:	7812      	ldrb	r2, [r2, #0]
 8006d60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d66:	1c5a      	adds	r2, r3, #1
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	3b01      	subs	r3, #1
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006d7a:	e030      	b.n	8006dde <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d113      	bne.n	8006db2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	330c      	adds	r3, #12
 8006d94:	7812      	ldrb	r2, [r2, #0]
 8006d96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9c:	1c5a      	adds	r2, r3, #1
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	3b01      	subs	r3, #1
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	86da      	strh	r2, [r3, #54]	; 0x36
 8006db0:	e015      	b.n	8006dde <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006db2:	f7fe fa47 	bl	8005244 <HAL_GetTick>
 8006db6:	4602      	mov	r2, r0
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d803      	bhi.n	8006dca <HAL_SPI_Transmit+0x20c>
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc8:	d102      	bne.n	8006dd0 <HAL_SPI_Transmit+0x212>
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d106      	bne.n	8006dde <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006ddc:	e029      	b.n	8006e32 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1c9      	bne.n	8006d7c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006de8:	69ba      	ldr	r2, [r7, #24]
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 fbed 	bl	80075cc <SPI_EndRxTxTransaction>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10a      	bne.n	8006e1c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e06:	2300      	movs	r3, #0
 8006e08:	613b      	str	r3, [r7, #16]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	613b      	str	r3, [r7, #16]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	613b      	str	r3, [r7, #16]
 8006e1a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d002      	beq.n	8006e2a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	77fb      	strb	r3, [r7, #31]
 8006e28:	e003      	b.n	8006e32 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3720      	adds	r7, #32
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b088      	sub	sp, #32
 8006e48:	af02      	add	r7, sp, #8
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	603b      	str	r3, [r7, #0]
 8006e50:	4613      	mov	r3, r2
 8006e52:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e54:	2300      	movs	r3, #0
 8006e56:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d002      	beq.n	8006e6a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006e64:	2302      	movs	r3, #2
 8006e66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e68:	e0fb      	b.n	8007062 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e72:	d112      	bne.n	8006e9a <HAL_SPI_Receive+0x56>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10e      	bne.n	8006e9a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2204      	movs	r2, #4
 8006e80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006e84:	88fa      	ldrh	r2, [r7, #6]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	68b9      	ldr	r1, [r7, #8]
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f000 f8ef 	bl	8007074 <HAL_SPI_TransmitReceive>
 8006e96:	4603      	mov	r3, r0
 8006e98:	e0e8      	b.n	800706c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d101      	bne.n	8006ea8 <HAL_SPI_Receive+0x64>
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	e0e1      	b.n	800706c <HAL_SPI_Receive+0x228>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006eb0:	f7fe f9c8 	bl	8005244 <HAL_GetTick>
 8006eb4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <HAL_SPI_Receive+0x7e>
 8006ebc:	88fb      	ldrh	r3, [r7, #6]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d102      	bne.n	8006ec8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ec6:	e0cc      	b.n	8007062 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2204      	movs	r2, #4
 8006ecc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	88fa      	ldrh	r2, [r7, #6]
 8006ee0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	88fa      	ldrh	r2, [r7, #6]
 8006ee6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f0e:	d10f      	bne.n	8006f30 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f2e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3a:	2b40      	cmp	r3, #64	; 0x40
 8006f3c:	d007      	beq.n	8006f4e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f4c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d16a      	bne.n	800702c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006f56:	e032      	b.n	8006fbe <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d115      	bne.n	8006f92 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f103 020c 	add.w	r2, r3, #12
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f72:	7812      	ldrb	r2, [r2, #0]
 8006f74:	b2d2      	uxtb	r2, r2
 8006f76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7c:	1c5a      	adds	r2, r3, #1
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f90:	e015      	b.n	8006fbe <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f92:	f7fe f957 	bl	8005244 <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	683a      	ldr	r2, [r7, #0]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d803      	bhi.n	8006faa <HAL_SPI_Receive+0x166>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa8:	d102      	bne.n	8006fb0 <HAL_SPI_Receive+0x16c>
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d106      	bne.n	8006fbe <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006fbc:	e051      	b.n	8007062 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1c7      	bne.n	8006f58 <HAL_SPI_Receive+0x114>
 8006fc8:	e035      	b.n	8007036 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d113      	bne.n	8007000 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68da      	ldr	r2, [r3, #12]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe2:	b292      	uxth	r2, r2
 8006fe4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fea:	1c9a      	adds	r2, r3, #2
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ffe:	e015      	b.n	800702c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007000:	f7fe f920 	bl	8005244 <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	429a      	cmp	r2, r3
 800700e:	d803      	bhi.n	8007018 <HAL_SPI_Receive+0x1d4>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007016:	d102      	bne.n	800701e <HAL_SPI_Receive+0x1da>
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d106      	bne.n	800702c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800702a:	e01a      	b.n	8007062 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007030:	b29b      	uxth	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1c9      	bne.n	8006fca <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 fa60 	bl	8007500 <SPI_EndRxTransaction>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d002      	beq.n	800704c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2220      	movs	r2, #32
 800704a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007050:	2b00      	cmp	r3, #0
 8007052:	d002      	beq.n	800705a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	75fb      	strb	r3, [r7, #23]
 8007058:	e003      	b.n	8007062 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800706a:	7dfb      	ldrb	r3, [r7, #23]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3718      	adds	r7, #24
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b08c      	sub	sp, #48	; 0x30
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
 8007080:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007082:	2301      	movs	r3, #1
 8007084:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007092:	2b01      	cmp	r3, #1
 8007094:	d101      	bne.n	800709a <HAL_SPI_TransmitReceive+0x26>
 8007096:	2302      	movs	r3, #2
 8007098:	e198      	b.n	80073cc <HAL_SPI_TransmitReceive+0x358>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070a2:	f7fe f8cf 	bl	8005244 <HAL_GetTick>
 80070a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80070b8:	887b      	ldrh	r3, [r7, #2]
 80070ba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80070bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d00f      	beq.n	80070e4 <HAL_SPI_TransmitReceive+0x70>
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070ca:	d107      	bne.n	80070dc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d103      	bne.n	80070dc <HAL_SPI_TransmitReceive+0x68>
 80070d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070d8:	2b04      	cmp	r3, #4
 80070da:	d003      	beq.n	80070e4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80070dc:	2302      	movs	r3, #2
 80070de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80070e2:	e16d      	b.n	80073c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d005      	beq.n	80070f6 <HAL_SPI_TransmitReceive+0x82>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d002      	beq.n	80070f6 <HAL_SPI_TransmitReceive+0x82>
 80070f0:	887b      	ldrh	r3, [r7, #2]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d103      	bne.n	80070fe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80070fc:	e160      	b.n	80073c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b04      	cmp	r3, #4
 8007108:	d003      	beq.n	8007112 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2205      	movs	r2, #5
 800710e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	887a      	ldrh	r2, [r7, #2]
 8007122:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	887a      	ldrh	r2, [r7, #2]
 8007128:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	887a      	ldrh	r2, [r7, #2]
 8007134:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	887a      	ldrh	r2, [r7, #2]
 800713a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007152:	2b40      	cmp	r3, #64	; 0x40
 8007154:	d007      	beq.n	8007166 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007164:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800716e:	d17c      	bne.n	800726a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d002      	beq.n	800717e <HAL_SPI_TransmitReceive+0x10a>
 8007178:	8b7b      	ldrh	r3, [r7, #26]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d16a      	bne.n	8007254 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007182:	881a      	ldrh	r2, [r3, #0]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718e:	1c9a      	adds	r2, r3, #2
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007198:	b29b      	uxth	r3, r3
 800719a:	3b01      	subs	r3, #1
 800719c:	b29a      	uxth	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071a2:	e057      	b.n	8007254 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d11b      	bne.n	80071ea <HAL_SPI_TransmitReceive+0x176>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d016      	beq.n	80071ea <HAL_SPI_TransmitReceive+0x176>
 80071bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d113      	bne.n	80071ea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c6:	881a      	ldrh	r2, [r3, #0]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d2:	1c9a      	adds	r2, r3, #2
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071dc:	b29b      	uxth	r3, r3
 80071de:	3b01      	subs	r3, #1
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071e6:	2300      	movs	r3, #0
 80071e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d119      	bne.n	800722c <HAL_SPI_TransmitReceive+0x1b8>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d014      	beq.n	800722c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68da      	ldr	r2, [r3, #12]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720c:	b292      	uxth	r2, r2
 800720e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007214:	1c9a      	adds	r2, r3, #2
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800721e:	b29b      	uxth	r3, r3
 8007220:	3b01      	subs	r3, #1
 8007222:	b29a      	uxth	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007228:	2301      	movs	r3, #1
 800722a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800722c:	f7fe f80a 	bl	8005244 <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007238:	429a      	cmp	r2, r3
 800723a:	d80b      	bhi.n	8007254 <HAL_SPI_TransmitReceive+0x1e0>
 800723c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007242:	d007      	beq.n	8007254 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8007252:	e0b5      	b.n	80073c0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007258:	b29b      	uxth	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1a2      	bne.n	80071a4 <HAL_SPI_TransmitReceive+0x130>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007262:	b29b      	uxth	r3, r3
 8007264:	2b00      	cmp	r3, #0
 8007266:	d19d      	bne.n	80071a4 <HAL_SPI_TransmitReceive+0x130>
 8007268:	e080      	b.n	800736c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d002      	beq.n	8007278 <HAL_SPI_TransmitReceive+0x204>
 8007272:	8b7b      	ldrh	r3, [r7, #26]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d16f      	bne.n	8007358 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	330c      	adds	r3, #12
 8007282:	7812      	ldrb	r2, [r2, #0]
 8007284:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728a:	1c5a      	adds	r2, r3, #1
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007294:	b29b      	uxth	r3, r3
 8007296:	3b01      	subs	r3, #1
 8007298:	b29a      	uxth	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800729e:	e05b      	b.n	8007358 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d11c      	bne.n	80072e8 <HAL_SPI_TransmitReceive+0x274>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d017      	beq.n	80072e8 <HAL_SPI_TransmitReceive+0x274>
 80072b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d114      	bne.n	80072e8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	330c      	adds	r3, #12
 80072c8:	7812      	ldrb	r2, [r2, #0]
 80072ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072da:	b29b      	uxth	r3, r3
 80072dc:	3b01      	subs	r3, #1
 80072de:	b29a      	uxth	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072e4:	2300      	movs	r3, #0
 80072e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d119      	bne.n	800732a <HAL_SPI_TransmitReceive+0x2b6>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d014      	beq.n	800732a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68da      	ldr	r2, [r3, #12]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730a:	b2d2      	uxtb	r2, r2
 800730c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007312:	1c5a      	adds	r2, r3, #1
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800731c:	b29b      	uxth	r3, r3
 800731e:	3b01      	subs	r3, #1
 8007320:	b29a      	uxth	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007326:	2301      	movs	r3, #1
 8007328:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800732a:	f7fd ff8b 	bl	8005244 <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007336:	429a      	cmp	r2, r3
 8007338:	d803      	bhi.n	8007342 <HAL_SPI_TransmitReceive+0x2ce>
 800733a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007340:	d102      	bne.n	8007348 <HAL_SPI_TransmitReceive+0x2d4>
 8007342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007344:	2b00      	cmp	r3, #0
 8007346:	d107      	bne.n	8007358 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8007356:	e033      	b.n	80073c0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800735c:	b29b      	uxth	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d19e      	bne.n	80072a0 <HAL_SPI_TransmitReceive+0x22c>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007366:	b29b      	uxth	r3, r3
 8007368:	2b00      	cmp	r3, #0
 800736a:	d199      	bne.n	80072a0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800736c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800736e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 f92b 	bl	80075cc <SPI_EndRxTxTransaction>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d006      	beq.n	800738a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2220      	movs	r2, #32
 8007386:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007388:	e01a      	b.n	80073c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10a      	bne.n	80073a8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007392:	2300      	movs	r3, #0
 8007394:	617b      	str	r3, [r7, #20]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	617b      	str	r3, [r7, #20]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	617b      	str	r3, [r7, #20]
 80073a6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d003      	beq.n	80073b8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073b6:	e003      	b.n	80073c0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80073c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3730      	adds	r7, #48	; 0x30
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073e2:	b2db      	uxtb	r3, r3
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b088      	sub	sp, #32
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	603b      	str	r3, [r7, #0]
 80073fc:	4613      	mov	r3, r2
 80073fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007400:	f7fd ff20 	bl	8005244 <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007408:	1a9b      	subs	r3, r3, r2
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	4413      	add	r3, r2
 800740e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007410:	f7fd ff18 	bl	8005244 <HAL_GetTick>
 8007414:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007416:	4b39      	ldr	r3, [pc, #228]	; (80074fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	015b      	lsls	r3, r3, #5
 800741c:	0d1b      	lsrs	r3, r3, #20
 800741e:	69fa      	ldr	r2, [r7, #28]
 8007420:	fb02 f303 	mul.w	r3, r2, r3
 8007424:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007426:	e054      	b.n	80074d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742e:	d050      	beq.n	80074d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007430:	f7fd ff08 	bl	8005244 <HAL_GetTick>
 8007434:	4602      	mov	r2, r0
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	69fa      	ldr	r2, [r7, #28]
 800743c:	429a      	cmp	r2, r3
 800743e:	d902      	bls.n	8007446 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d13d      	bne.n	80074c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007454:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800745e:	d111      	bne.n	8007484 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007468:	d004      	beq.n	8007474 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007472:	d107      	bne.n	8007484 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007482:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800748c:	d10f      	bne.n	80074ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e017      	b.n	80074f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074c8:	2300      	movs	r3, #0
 80074ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	3b01      	subs	r3, #1
 80074d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	689a      	ldr	r2, [r3, #8]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	4013      	ands	r3, r2
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	429a      	cmp	r2, r3
 80074e0:	bf0c      	ite	eq
 80074e2:	2301      	moveq	r3, #1
 80074e4:	2300      	movne	r3, #0
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	461a      	mov	r2, r3
 80074ea:	79fb      	ldrb	r3, [r7, #7]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d19b      	bne.n	8007428 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3720      	adds	r7, #32
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	2000003c 	.word	0x2000003c

08007500 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af02      	add	r7, sp, #8
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007514:	d111      	bne.n	800753a <SPI_EndRxTransaction+0x3a>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800751e:	d004      	beq.n	800752a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007528:	d107      	bne.n	800753a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007538:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007542:	d12a      	bne.n	800759a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800754c:	d012      	beq.n	8007574 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	9300      	str	r3, [sp, #0]
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	2200      	movs	r2, #0
 8007556:	2180      	movs	r1, #128	; 0x80
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f7ff ff49 	bl	80073f0 <SPI_WaitFlagStateUntilTimeout>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d02d      	beq.n	80075c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007568:	f043 0220 	orr.w	r2, r3, #32
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007570:	2303      	movs	r3, #3
 8007572:	e026      	b.n	80075c2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	2200      	movs	r2, #0
 800757c:	2101      	movs	r1, #1
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f7ff ff36 	bl	80073f0 <SPI_WaitFlagStateUntilTimeout>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d01a      	beq.n	80075c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800758e:	f043 0220 	orr.w	r2, r3, #32
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e013      	b.n	80075c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	2200      	movs	r2, #0
 80075a2:	2101      	movs	r1, #1
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f7ff ff23 	bl	80073f0 <SPI_WaitFlagStateUntilTimeout>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d007      	beq.n	80075c0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b4:	f043 0220 	orr.w	r2, r3, #32
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	e000      	b.n	80075c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
	...

080075cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af02      	add	r7, sp, #8
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	2201      	movs	r2, #1
 80075e0:	2102      	movs	r1, #2
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f7ff ff04 	bl	80073f0 <SPI_WaitFlagStateUntilTimeout>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d007      	beq.n	80075fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f2:	f043 0220 	orr.w	r2, r3, #32
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e032      	b.n	8007664 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80075fe:	4b1b      	ldr	r3, [pc, #108]	; (800766c <SPI_EndRxTxTransaction+0xa0>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a1b      	ldr	r2, [pc, #108]	; (8007670 <SPI_EndRxTxTransaction+0xa4>)
 8007604:	fba2 2303 	umull	r2, r3, r2, r3
 8007608:	0d5b      	lsrs	r3, r3, #21
 800760a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800760e:	fb02 f303 	mul.w	r3, r2, r3
 8007612:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800761c:	d112      	bne.n	8007644 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	2200      	movs	r2, #0
 8007626:	2180      	movs	r1, #128	; 0x80
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f7ff fee1 	bl	80073f0 <SPI_WaitFlagStateUntilTimeout>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d016      	beq.n	8007662 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007638:	f043 0220 	orr.w	r2, r3, #32
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007640:	2303      	movs	r3, #3
 8007642:	e00f      	b.n	8007664 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00a      	beq.n	8007660 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	3b01      	subs	r3, #1
 800764e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800765a:	2b80      	cmp	r3, #128	; 0x80
 800765c:	d0f2      	beq.n	8007644 <SPI_EndRxTxTransaction+0x78>
 800765e:	e000      	b.n	8007662 <SPI_EndRxTxTransaction+0x96>
        break;
 8007660:	bf00      	nop
  }

  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3718      	adds	r7, #24
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	2000003c 	.word	0x2000003c
 8007670:	165e9f81 	.word	0x165e9f81

08007674 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d101      	bne.n	8007686 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e041      	b.n	800770a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	d106      	bne.n	80076a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7fb fc3e 	bl	8002f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	3304      	adds	r3, #4
 80076b0:	4619      	mov	r1, r3
 80076b2:	4610      	mov	r0, r2
 80076b4:	f000 f9b6 	bl	8007a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
	...

08007714 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b01      	cmp	r3, #1
 8007726:	d001      	beq.n	800772c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e04e      	b.n	80077ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2202      	movs	r2, #2
 8007730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68da      	ldr	r2, [r3, #12]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f042 0201 	orr.w	r2, r2, #1
 8007742:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a23      	ldr	r2, [pc, #140]	; (80077d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d022      	beq.n	8007794 <HAL_TIM_Base_Start_IT+0x80>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007756:	d01d      	beq.n	8007794 <HAL_TIM_Base_Start_IT+0x80>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a1f      	ldr	r2, [pc, #124]	; (80077dc <HAL_TIM_Base_Start_IT+0xc8>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d018      	beq.n	8007794 <HAL_TIM_Base_Start_IT+0x80>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a1e      	ldr	r2, [pc, #120]	; (80077e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d013      	beq.n	8007794 <HAL_TIM_Base_Start_IT+0x80>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a1c      	ldr	r2, [pc, #112]	; (80077e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d00e      	beq.n	8007794 <HAL_TIM_Base_Start_IT+0x80>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a1b      	ldr	r2, [pc, #108]	; (80077e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d009      	beq.n	8007794 <HAL_TIM_Base_Start_IT+0x80>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a19      	ldr	r2, [pc, #100]	; (80077ec <HAL_TIM_Base_Start_IT+0xd8>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d004      	beq.n	8007794 <HAL_TIM_Base_Start_IT+0x80>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a18      	ldr	r2, [pc, #96]	; (80077f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d111      	bne.n	80077b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f003 0307 	and.w	r3, r3, #7
 800779e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2b06      	cmp	r3, #6
 80077a4:	d010      	beq.n	80077c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f042 0201 	orr.w	r2, r2, #1
 80077b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077b6:	e007      	b.n	80077c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f042 0201 	orr.w	r2, r2, #1
 80077c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	40010000 	.word	0x40010000
 80077dc:	40000400 	.word	0x40000400
 80077e0:	40000800 	.word	0x40000800
 80077e4:	40000c00 	.word	0x40000c00
 80077e8:	40010400 	.word	0x40010400
 80077ec:	40014000 	.word	0x40014000
 80077f0:	40001800 	.word	0x40001800

080077f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f003 0302 	and.w	r3, r3, #2
 8007812:	2b00      	cmp	r3, #0
 8007814:	d020      	beq.n	8007858 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f003 0302 	and.w	r3, r3, #2
 800781c:	2b00      	cmp	r3, #0
 800781e:	d01b      	beq.n	8007858 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f06f 0202 	mvn.w	r2, #2
 8007828:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2201      	movs	r2, #1
 800782e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	f003 0303 	and.w	r3, r3, #3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d003      	beq.n	8007846 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f8d2 	bl	80079e8 <HAL_TIM_IC_CaptureCallback>
 8007844:	e005      	b.n	8007852 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f8c4 	bl	80079d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f8d5 	bl	80079fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	f003 0304 	and.w	r3, r3, #4
 800785e:	2b00      	cmp	r3, #0
 8007860:	d020      	beq.n	80078a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f003 0304 	and.w	r3, r3, #4
 8007868:	2b00      	cmp	r3, #0
 800786a:	d01b      	beq.n	80078a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f06f 0204 	mvn.w	r2, #4
 8007874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2202      	movs	r2, #2
 800787a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f8ac 	bl	80079e8 <HAL_TIM_IC_CaptureCallback>
 8007890:	e005      	b.n	800789e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f89e 	bl	80079d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f8af 	bl	80079fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	f003 0308 	and.w	r3, r3, #8
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d020      	beq.n	80078f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f003 0308 	and.w	r3, r3, #8
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d01b      	beq.n	80078f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f06f 0208 	mvn.w	r2, #8
 80078c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2204      	movs	r2, #4
 80078c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	f003 0303 	and.w	r3, r3, #3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d003      	beq.n	80078de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 f886 	bl	80079e8 <HAL_TIM_IC_CaptureCallback>
 80078dc:	e005      	b.n	80078ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f878 	bl	80079d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f889 	bl	80079fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	f003 0310 	and.w	r3, r3, #16
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d020      	beq.n	800793c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f003 0310 	and.w	r3, r3, #16
 8007900:	2b00      	cmp	r3, #0
 8007902:	d01b      	beq.n	800793c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f06f 0210 	mvn.w	r2, #16
 800790c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2208      	movs	r2, #8
 8007912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	69db      	ldr	r3, [r3, #28]
 800791a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800791e:	2b00      	cmp	r3, #0
 8007920:	d003      	beq.n	800792a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f860 	bl	80079e8 <HAL_TIM_IC_CaptureCallback>
 8007928:	e005      	b.n	8007936 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f852 	bl	80079d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f863 	bl	80079fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00c      	beq.n	8007960 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f003 0301 	and.w	r3, r3, #1
 800794c:	2b00      	cmp	r3, #0
 800794e:	d007      	beq.n	8007960 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f06f 0201 	mvn.w	r2, #1
 8007958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7fb f972 	bl	8002c44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00c      	beq.n	8007984 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007970:	2b00      	cmp	r3, #0
 8007972:	d007      	beq.n	8007984 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800797c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f982 	bl	8007c88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00c      	beq.n	80079a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007994:	2b00      	cmp	r3, #0
 8007996:	d007      	beq.n	80079a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f834 	bl	8007a10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	f003 0320 	and.w	r3, r3, #32
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00c      	beq.n	80079cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f003 0320 	and.w	r3, r3, #32
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d007      	beq.n	80079cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f06f 0220 	mvn.w	r2, #32
 80079c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f954 	bl	8007c74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079cc:	bf00      	nop
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a46      	ldr	r2, [pc, #280]	; (8007b50 <TIM_Base_SetConfig+0x12c>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d013      	beq.n	8007a64 <TIM_Base_SetConfig+0x40>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a42:	d00f      	beq.n	8007a64 <TIM_Base_SetConfig+0x40>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a43      	ldr	r2, [pc, #268]	; (8007b54 <TIM_Base_SetConfig+0x130>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d00b      	beq.n	8007a64 <TIM_Base_SetConfig+0x40>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a42      	ldr	r2, [pc, #264]	; (8007b58 <TIM_Base_SetConfig+0x134>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d007      	beq.n	8007a64 <TIM_Base_SetConfig+0x40>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a41      	ldr	r2, [pc, #260]	; (8007b5c <TIM_Base_SetConfig+0x138>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d003      	beq.n	8007a64 <TIM_Base_SetConfig+0x40>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a40      	ldr	r2, [pc, #256]	; (8007b60 <TIM_Base_SetConfig+0x13c>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d108      	bne.n	8007a76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a35      	ldr	r2, [pc, #212]	; (8007b50 <TIM_Base_SetConfig+0x12c>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d02b      	beq.n	8007ad6 <TIM_Base_SetConfig+0xb2>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a84:	d027      	beq.n	8007ad6 <TIM_Base_SetConfig+0xb2>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a32      	ldr	r2, [pc, #200]	; (8007b54 <TIM_Base_SetConfig+0x130>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d023      	beq.n	8007ad6 <TIM_Base_SetConfig+0xb2>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a31      	ldr	r2, [pc, #196]	; (8007b58 <TIM_Base_SetConfig+0x134>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d01f      	beq.n	8007ad6 <TIM_Base_SetConfig+0xb2>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a30      	ldr	r2, [pc, #192]	; (8007b5c <TIM_Base_SetConfig+0x138>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d01b      	beq.n	8007ad6 <TIM_Base_SetConfig+0xb2>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a2f      	ldr	r2, [pc, #188]	; (8007b60 <TIM_Base_SetConfig+0x13c>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d017      	beq.n	8007ad6 <TIM_Base_SetConfig+0xb2>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a2e      	ldr	r2, [pc, #184]	; (8007b64 <TIM_Base_SetConfig+0x140>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d013      	beq.n	8007ad6 <TIM_Base_SetConfig+0xb2>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a2d      	ldr	r2, [pc, #180]	; (8007b68 <TIM_Base_SetConfig+0x144>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d00f      	beq.n	8007ad6 <TIM_Base_SetConfig+0xb2>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a2c      	ldr	r2, [pc, #176]	; (8007b6c <TIM_Base_SetConfig+0x148>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d00b      	beq.n	8007ad6 <TIM_Base_SetConfig+0xb2>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a2b      	ldr	r2, [pc, #172]	; (8007b70 <TIM_Base_SetConfig+0x14c>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d007      	beq.n	8007ad6 <TIM_Base_SetConfig+0xb2>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a2a      	ldr	r2, [pc, #168]	; (8007b74 <TIM_Base_SetConfig+0x150>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d003      	beq.n	8007ad6 <TIM_Base_SetConfig+0xb2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a29      	ldr	r2, [pc, #164]	; (8007b78 <TIM_Base_SetConfig+0x154>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d108      	bne.n	8007ae8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007adc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	689a      	ldr	r2, [r3, #8]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a10      	ldr	r2, [pc, #64]	; (8007b50 <TIM_Base_SetConfig+0x12c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d003      	beq.n	8007b1c <TIM_Base_SetConfig+0xf8>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a12      	ldr	r2, [pc, #72]	; (8007b60 <TIM_Base_SetConfig+0x13c>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d103      	bne.n	8007b24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	691a      	ldr	r2, [r3, #16]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d105      	bne.n	8007b42 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	f023 0201 	bic.w	r2, r3, #1
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	611a      	str	r2, [r3, #16]
  }
}
 8007b42:	bf00      	nop
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	40010000 	.word	0x40010000
 8007b54:	40000400 	.word	0x40000400
 8007b58:	40000800 	.word	0x40000800
 8007b5c:	40000c00 	.word	0x40000c00
 8007b60:	40010400 	.word	0x40010400
 8007b64:	40014000 	.word	0x40014000
 8007b68:	40014400 	.word	0x40014400
 8007b6c:	40014800 	.word	0x40014800
 8007b70:	40001800 	.word	0x40001800
 8007b74:	40001c00 	.word	0x40001c00
 8007b78:	40002000 	.word	0x40002000

08007b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d101      	bne.n	8007b94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b90:	2302      	movs	r3, #2
 8007b92:	e05a      	b.n	8007c4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a21      	ldr	r2, [pc, #132]	; (8007c58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d022      	beq.n	8007c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007be0:	d01d      	beq.n	8007c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a1d      	ldr	r2, [pc, #116]	; (8007c5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d018      	beq.n	8007c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a1b      	ldr	r2, [pc, #108]	; (8007c60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d013      	beq.n	8007c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a1a      	ldr	r2, [pc, #104]	; (8007c64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d00e      	beq.n	8007c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a18      	ldr	r2, [pc, #96]	; (8007c68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d009      	beq.n	8007c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a17      	ldr	r2, [pc, #92]	; (8007c6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d004      	beq.n	8007c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a15      	ldr	r2, [pc, #84]	; (8007c70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d10c      	bne.n	8007c38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	68ba      	ldr	r2, [r7, #8]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3714      	adds	r7, #20
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	40010000 	.word	0x40010000
 8007c5c:	40000400 	.word	0x40000400
 8007c60:	40000800 	.word	0x40000800
 8007c64:	40000c00 	.word	0x40000c00
 8007c68:	40010400 	.word	0x40010400
 8007c6c:	40014000 	.word	0x40014000
 8007c70:	40001800 	.word	0x40001800

08007c74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <__itoa>:
 8007c9c:	1e93      	subs	r3, r2, #2
 8007c9e:	2b22      	cmp	r3, #34	; 0x22
 8007ca0:	b510      	push	{r4, lr}
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	d904      	bls.n	8007cb0 <__itoa+0x14>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	700b      	strb	r3, [r1, #0]
 8007caa:	461c      	mov	r4, r3
 8007cac:	4620      	mov	r0, r4
 8007cae:	bd10      	pop	{r4, pc}
 8007cb0:	2a0a      	cmp	r2, #10
 8007cb2:	d109      	bne.n	8007cc8 <__itoa+0x2c>
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	da07      	bge.n	8007cc8 <__itoa+0x2c>
 8007cb8:	232d      	movs	r3, #45	; 0x2d
 8007cba:	700b      	strb	r3, [r1, #0]
 8007cbc:	4240      	negs	r0, r0
 8007cbe:	2101      	movs	r1, #1
 8007cc0:	4421      	add	r1, r4
 8007cc2:	f000 f8b9 	bl	8007e38 <__utoa>
 8007cc6:	e7f1      	b.n	8007cac <__itoa+0x10>
 8007cc8:	2100      	movs	r1, #0
 8007cca:	e7f9      	b.n	8007cc0 <__itoa+0x24>

08007ccc <itoa>:
 8007ccc:	f7ff bfe6 	b.w	8007c9c <__itoa>

08007cd0 <malloc>:
 8007cd0:	4b02      	ldr	r3, [pc, #8]	; (8007cdc <malloc+0xc>)
 8007cd2:	4601      	mov	r1, r0
 8007cd4:	6818      	ldr	r0, [r3, #0]
 8007cd6:	f000 b823 	b.w	8007d20 <_malloc_r>
 8007cda:	bf00      	nop
 8007cdc:	200000c0 	.word	0x200000c0

08007ce0 <sbrk_aligned>:
 8007ce0:	b570      	push	{r4, r5, r6, lr}
 8007ce2:	4e0e      	ldr	r6, [pc, #56]	; (8007d1c <sbrk_aligned+0x3c>)
 8007ce4:	460c      	mov	r4, r1
 8007ce6:	6831      	ldr	r1, [r6, #0]
 8007ce8:	4605      	mov	r5, r0
 8007cea:	b911      	cbnz	r1, 8007cf2 <sbrk_aligned+0x12>
 8007cec:	f000 f8ee 	bl	8007ecc <_sbrk_r>
 8007cf0:	6030      	str	r0, [r6, #0]
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	f000 f8e9 	bl	8007ecc <_sbrk_r>
 8007cfa:	1c43      	adds	r3, r0, #1
 8007cfc:	d00a      	beq.n	8007d14 <sbrk_aligned+0x34>
 8007cfe:	1cc4      	adds	r4, r0, #3
 8007d00:	f024 0403 	bic.w	r4, r4, #3
 8007d04:	42a0      	cmp	r0, r4
 8007d06:	d007      	beq.n	8007d18 <sbrk_aligned+0x38>
 8007d08:	1a21      	subs	r1, r4, r0
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	f000 f8de 	bl	8007ecc <_sbrk_r>
 8007d10:	3001      	adds	r0, #1
 8007d12:	d101      	bne.n	8007d18 <sbrk_aligned+0x38>
 8007d14:	f04f 34ff 	mov.w	r4, #4294967295
 8007d18:	4620      	mov	r0, r4
 8007d1a:	bd70      	pop	{r4, r5, r6, pc}
 8007d1c:	200009f8 	.word	0x200009f8

08007d20 <_malloc_r>:
 8007d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d24:	1ccd      	adds	r5, r1, #3
 8007d26:	f025 0503 	bic.w	r5, r5, #3
 8007d2a:	3508      	adds	r5, #8
 8007d2c:	2d0c      	cmp	r5, #12
 8007d2e:	bf38      	it	cc
 8007d30:	250c      	movcc	r5, #12
 8007d32:	2d00      	cmp	r5, #0
 8007d34:	4607      	mov	r7, r0
 8007d36:	db01      	blt.n	8007d3c <_malloc_r+0x1c>
 8007d38:	42a9      	cmp	r1, r5
 8007d3a:	d905      	bls.n	8007d48 <_malloc_r+0x28>
 8007d3c:	230c      	movs	r3, #12
 8007d3e:	603b      	str	r3, [r7, #0]
 8007d40:	2600      	movs	r6, #0
 8007d42:	4630      	mov	r0, r6
 8007d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007e1c <_malloc_r+0xfc>
 8007d4c:	f000 f868 	bl	8007e20 <__malloc_lock>
 8007d50:	f8d8 3000 	ldr.w	r3, [r8]
 8007d54:	461c      	mov	r4, r3
 8007d56:	bb5c      	cbnz	r4, 8007db0 <_malloc_r+0x90>
 8007d58:	4629      	mov	r1, r5
 8007d5a:	4638      	mov	r0, r7
 8007d5c:	f7ff ffc0 	bl	8007ce0 <sbrk_aligned>
 8007d60:	1c43      	adds	r3, r0, #1
 8007d62:	4604      	mov	r4, r0
 8007d64:	d155      	bne.n	8007e12 <_malloc_r+0xf2>
 8007d66:	f8d8 4000 	ldr.w	r4, [r8]
 8007d6a:	4626      	mov	r6, r4
 8007d6c:	2e00      	cmp	r6, #0
 8007d6e:	d145      	bne.n	8007dfc <_malloc_r+0xdc>
 8007d70:	2c00      	cmp	r4, #0
 8007d72:	d048      	beq.n	8007e06 <_malloc_r+0xe6>
 8007d74:	6823      	ldr	r3, [r4, #0]
 8007d76:	4631      	mov	r1, r6
 8007d78:	4638      	mov	r0, r7
 8007d7a:	eb04 0903 	add.w	r9, r4, r3
 8007d7e:	f000 f8a5 	bl	8007ecc <_sbrk_r>
 8007d82:	4581      	cmp	r9, r0
 8007d84:	d13f      	bne.n	8007e06 <_malloc_r+0xe6>
 8007d86:	6821      	ldr	r1, [r4, #0]
 8007d88:	1a6d      	subs	r5, r5, r1
 8007d8a:	4629      	mov	r1, r5
 8007d8c:	4638      	mov	r0, r7
 8007d8e:	f7ff ffa7 	bl	8007ce0 <sbrk_aligned>
 8007d92:	3001      	adds	r0, #1
 8007d94:	d037      	beq.n	8007e06 <_malloc_r+0xe6>
 8007d96:	6823      	ldr	r3, [r4, #0]
 8007d98:	442b      	add	r3, r5
 8007d9a:	6023      	str	r3, [r4, #0]
 8007d9c:	f8d8 3000 	ldr.w	r3, [r8]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d038      	beq.n	8007e16 <_malloc_r+0xf6>
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	42a2      	cmp	r2, r4
 8007da8:	d12b      	bne.n	8007e02 <_malloc_r+0xe2>
 8007daa:	2200      	movs	r2, #0
 8007dac:	605a      	str	r2, [r3, #4]
 8007dae:	e00f      	b.n	8007dd0 <_malloc_r+0xb0>
 8007db0:	6822      	ldr	r2, [r4, #0]
 8007db2:	1b52      	subs	r2, r2, r5
 8007db4:	d41f      	bmi.n	8007df6 <_malloc_r+0xd6>
 8007db6:	2a0b      	cmp	r2, #11
 8007db8:	d917      	bls.n	8007dea <_malloc_r+0xca>
 8007dba:	1961      	adds	r1, r4, r5
 8007dbc:	42a3      	cmp	r3, r4
 8007dbe:	6025      	str	r5, [r4, #0]
 8007dc0:	bf18      	it	ne
 8007dc2:	6059      	strne	r1, [r3, #4]
 8007dc4:	6863      	ldr	r3, [r4, #4]
 8007dc6:	bf08      	it	eq
 8007dc8:	f8c8 1000 	streq.w	r1, [r8]
 8007dcc:	5162      	str	r2, [r4, r5]
 8007dce:	604b      	str	r3, [r1, #4]
 8007dd0:	4638      	mov	r0, r7
 8007dd2:	f104 060b 	add.w	r6, r4, #11
 8007dd6:	f000 f829 	bl	8007e2c <__malloc_unlock>
 8007dda:	f026 0607 	bic.w	r6, r6, #7
 8007dde:	1d23      	adds	r3, r4, #4
 8007de0:	1af2      	subs	r2, r6, r3
 8007de2:	d0ae      	beq.n	8007d42 <_malloc_r+0x22>
 8007de4:	1b9b      	subs	r3, r3, r6
 8007de6:	50a3      	str	r3, [r4, r2]
 8007de8:	e7ab      	b.n	8007d42 <_malloc_r+0x22>
 8007dea:	42a3      	cmp	r3, r4
 8007dec:	6862      	ldr	r2, [r4, #4]
 8007dee:	d1dd      	bne.n	8007dac <_malloc_r+0x8c>
 8007df0:	f8c8 2000 	str.w	r2, [r8]
 8007df4:	e7ec      	b.n	8007dd0 <_malloc_r+0xb0>
 8007df6:	4623      	mov	r3, r4
 8007df8:	6864      	ldr	r4, [r4, #4]
 8007dfa:	e7ac      	b.n	8007d56 <_malloc_r+0x36>
 8007dfc:	4634      	mov	r4, r6
 8007dfe:	6876      	ldr	r6, [r6, #4]
 8007e00:	e7b4      	b.n	8007d6c <_malloc_r+0x4c>
 8007e02:	4613      	mov	r3, r2
 8007e04:	e7cc      	b.n	8007da0 <_malloc_r+0x80>
 8007e06:	230c      	movs	r3, #12
 8007e08:	603b      	str	r3, [r7, #0]
 8007e0a:	4638      	mov	r0, r7
 8007e0c:	f000 f80e 	bl	8007e2c <__malloc_unlock>
 8007e10:	e797      	b.n	8007d42 <_malloc_r+0x22>
 8007e12:	6025      	str	r5, [r4, #0]
 8007e14:	e7dc      	b.n	8007dd0 <_malloc_r+0xb0>
 8007e16:	605b      	str	r3, [r3, #4]
 8007e18:	deff      	udf	#255	; 0xff
 8007e1a:	bf00      	nop
 8007e1c:	200009f4 	.word	0x200009f4

08007e20 <__malloc_lock>:
 8007e20:	4801      	ldr	r0, [pc, #4]	; (8007e28 <__malloc_lock+0x8>)
 8007e22:	f000 b88d 	b.w	8007f40 <__retarget_lock_acquire_recursive>
 8007e26:	bf00      	nop
 8007e28:	20000b38 	.word	0x20000b38

08007e2c <__malloc_unlock>:
 8007e2c:	4801      	ldr	r0, [pc, #4]	; (8007e34 <__malloc_unlock+0x8>)
 8007e2e:	f000 b888 	b.w	8007f42 <__retarget_lock_release_recursive>
 8007e32:	bf00      	nop
 8007e34:	20000b38 	.word	0x20000b38

08007e38 <__utoa>:
 8007e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e3a:	4c1f      	ldr	r4, [pc, #124]	; (8007eb8 <__utoa+0x80>)
 8007e3c:	b08b      	sub	sp, #44	; 0x2c
 8007e3e:	4605      	mov	r5, r0
 8007e40:	460b      	mov	r3, r1
 8007e42:	466e      	mov	r6, sp
 8007e44:	f104 0c20 	add.w	ip, r4, #32
 8007e48:	6820      	ldr	r0, [r4, #0]
 8007e4a:	6861      	ldr	r1, [r4, #4]
 8007e4c:	4637      	mov	r7, r6
 8007e4e:	c703      	stmia	r7!, {r0, r1}
 8007e50:	3408      	adds	r4, #8
 8007e52:	4564      	cmp	r4, ip
 8007e54:	463e      	mov	r6, r7
 8007e56:	d1f7      	bne.n	8007e48 <__utoa+0x10>
 8007e58:	7921      	ldrb	r1, [r4, #4]
 8007e5a:	7139      	strb	r1, [r7, #4]
 8007e5c:	1e91      	subs	r1, r2, #2
 8007e5e:	6820      	ldr	r0, [r4, #0]
 8007e60:	6038      	str	r0, [r7, #0]
 8007e62:	2922      	cmp	r1, #34	; 0x22
 8007e64:	f04f 0100 	mov.w	r1, #0
 8007e68:	d904      	bls.n	8007e74 <__utoa+0x3c>
 8007e6a:	7019      	strb	r1, [r3, #0]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	4618      	mov	r0, r3
 8007e70:	b00b      	add	sp, #44	; 0x2c
 8007e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e74:	1e58      	subs	r0, r3, #1
 8007e76:	4684      	mov	ip, r0
 8007e78:	fbb5 f7f2 	udiv	r7, r5, r2
 8007e7c:	fb02 5617 	mls	r6, r2, r7, r5
 8007e80:	3628      	adds	r6, #40	; 0x28
 8007e82:	446e      	add	r6, sp
 8007e84:	460c      	mov	r4, r1
 8007e86:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007e8a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007e8e:	462e      	mov	r6, r5
 8007e90:	42b2      	cmp	r2, r6
 8007e92:	f101 0101 	add.w	r1, r1, #1
 8007e96:	463d      	mov	r5, r7
 8007e98:	d9ee      	bls.n	8007e78 <__utoa+0x40>
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	545a      	strb	r2, [r3, r1]
 8007e9e:	1919      	adds	r1, r3, r4
 8007ea0:	1aa5      	subs	r5, r4, r2
 8007ea2:	42aa      	cmp	r2, r5
 8007ea4:	dae3      	bge.n	8007e6e <__utoa+0x36>
 8007ea6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007eaa:	780e      	ldrb	r6, [r1, #0]
 8007eac:	7006      	strb	r6, [r0, #0]
 8007eae:	3201      	adds	r2, #1
 8007eb0:	f801 5901 	strb.w	r5, [r1], #-1
 8007eb4:	e7f4      	b.n	8007ea0 <__utoa+0x68>
 8007eb6:	bf00      	nop
 8007eb8:	080096f0 	.word	0x080096f0

08007ebc <memset>:
 8007ebc:	4402      	add	r2, r0
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d100      	bne.n	8007ec6 <memset+0xa>
 8007ec4:	4770      	bx	lr
 8007ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8007eca:	e7f9      	b.n	8007ec0 <memset+0x4>

08007ecc <_sbrk_r>:
 8007ecc:	b538      	push	{r3, r4, r5, lr}
 8007ece:	4d06      	ldr	r5, [pc, #24]	; (8007ee8 <_sbrk_r+0x1c>)
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	4604      	mov	r4, r0
 8007ed4:	4608      	mov	r0, r1
 8007ed6:	602b      	str	r3, [r5, #0]
 8007ed8:	f7fb f87c 	bl	8002fd4 <_sbrk>
 8007edc:	1c43      	adds	r3, r0, #1
 8007ede:	d102      	bne.n	8007ee6 <_sbrk_r+0x1a>
 8007ee0:	682b      	ldr	r3, [r5, #0]
 8007ee2:	b103      	cbz	r3, 8007ee6 <_sbrk_r+0x1a>
 8007ee4:	6023      	str	r3, [r4, #0]
 8007ee6:	bd38      	pop	{r3, r4, r5, pc}
 8007ee8:	20000b34 	.word	0x20000b34

08007eec <__errno>:
 8007eec:	4b01      	ldr	r3, [pc, #4]	; (8007ef4 <__errno+0x8>)
 8007eee:	6818      	ldr	r0, [r3, #0]
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	200000c0 	.word	0x200000c0

08007ef8 <__libc_init_array>:
 8007ef8:	b570      	push	{r4, r5, r6, lr}
 8007efa:	4d0d      	ldr	r5, [pc, #52]	; (8007f30 <__libc_init_array+0x38>)
 8007efc:	4c0d      	ldr	r4, [pc, #52]	; (8007f34 <__libc_init_array+0x3c>)
 8007efe:	1b64      	subs	r4, r4, r5
 8007f00:	10a4      	asrs	r4, r4, #2
 8007f02:	2600      	movs	r6, #0
 8007f04:	42a6      	cmp	r6, r4
 8007f06:	d109      	bne.n	8007f1c <__libc_init_array+0x24>
 8007f08:	4d0b      	ldr	r5, [pc, #44]	; (8007f38 <__libc_init_array+0x40>)
 8007f0a:	4c0c      	ldr	r4, [pc, #48]	; (8007f3c <__libc_init_array+0x44>)
 8007f0c:	f000 fff8 	bl	8008f00 <_init>
 8007f10:	1b64      	subs	r4, r4, r5
 8007f12:	10a4      	asrs	r4, r4, #2
 8007f14:	2600      	movs	r6, #0
 8007f16:	42a6      	cmp	r6, r4
 8007f18:	d105      	bne.n	8007f26 <__libc_init_array+0x2e>
 8007f1a:	bd70      	pop	{r4, r5, r6, pc}
 8007f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f20:	4798      	blx	r3
 8007f22:	3601      	adds	r6, #1
 8007f24:	e7ee      	b.n	8007f04 <__libc_init_array+0xc>
 8007f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f2a:	4798      	blx	r3
 8007f2c:	3601      	adds	r6, #1
 8007f2e:	e7f2      	b.n	8007f16 <__libc_init_array+0x1e>
 8007f30:	08009750 	.word	0x08009750
 8007f34:	08009750 	.word	0x08009750
 8007f38:	08009750 	.word	0x08009750
 8007f3c:	08009754 	.word	0x08009754

08007f40 <__retarget_lock_acquire_recursive>:
 8007f40:	4770      	bx	lr

08007f42 <__retarget_lock_release_recursive>:
 8007f42:	4770      	bx	lr

08007f44 <memcpy>:
 8007f44:	440a      	add	r2, r1
 8007f46:	4291      	cmp	r1, r2
 8007f48:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f4c:	d100      	bne.n	8007f50 <memcpy+0xc>
 8007f4e:	4770      	bx	lr
 8007f50:	b510      	push	{r4, lr}
 8007f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f5a:	4291      	cmp	r1, r2
 8007f5c:	d1f9      	bne.n	8007f52 <memcpy+0xe>
 8007f5e:	bd10      	pop	{r4, pc}

08007f60 <pow>:
 8007f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f62:	ed2d 8b02 	vpush	{d8}
 8007f66:	eeb0 8a40 	vmov.f32	s16, s0
 8007f6a:	eef0 8a60 	vmov.f32	s17, s1
 8007f6e:	ec55 4b11 	vmov	r4, r5, d1
 8007f72:	f000 f909 	bl	8008188 <__ieee754_pow>
 8007f76:	4622      	mov	r2, r4
 8007f78:	462b      	mov	r3, r5
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	4629      	mov	r1, r5
 8007f7e:	ec57 6b10 	vmov	r6, r7, d0
 8007f82:	f7f8 fd77 	bl	8000a74 <__aeabi_dcmpun>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	d13b      	bne.n	8008002 <pow+0xa2>
 8007f8a:	ec51 0b18 	vmov	r0, r1, d8
 8007f8e:	2200      	movs	r2, #0
 8007f90:	2300      	movs	r3, #0
 8007f92:	f7f8 fd3d 	bl	8000a10 <__aeabi_dcmpeq>
 8007f96:	b1b8      	cbz	r0, 8007fc8 <pow+0x68>
 8007f98:	2200      	movs	r2, #0
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	f7f8 fd36 	bl	8000a10 <__aeabi_dcmpeq>
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	d146      	bne.n	8008036 <pow+0xd6>
 8007fa8:	ec45 4b10 	vmov	d0, r4, r5
 8007fac:	f000 f848 	bl	8008040 <finite>
 8007fb0:	b338      	cbz	r0, 8008002 <pow+0xa2>
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	4629      	mov	r1, r5
 8007fba:	f7f8 fd33 	bl	8000a24 <__aeabi_dcmplt>
 8007fbe:	b300      	cbz	r0, 8008002 <pow+0xa2>
 8007fc0:	f7ff ff94 	bl	8007eec <__errno>
 8007fc4:	2322      	movs	r3, #34	; 0x22
 8007fc6:	e01b      	b.n	8008000 <pow+0xa0>
 8007fc8:	ec47 6b10 	vmov	d0, r6, r7
 8007fcc:	f000 f838 	bl	8008040 <finite>
 8007fd0:	b9e0      	cbnz	r0, 800800c <pow+0xac>
 8007fd2:	eeb0 0a48 	vmov.f32	s0, s16
 8007fd6:	eef0 0a68 	vmov.f32	s1, s17
 8007fda:	f000 f831 	bl	8008040 <finite>
 8007fde:	b1a8      	cbz	r0, 800800c <pow+0xac>
 8007fe0:	ec45 4b10 	vmov	d0, r4, r5
 8007fe4:	f000 f82c 	bl	8008040 <finite>
 8007fe8:	b180      	cbz	r0, 800800c <pow+0xac>
 8007fea:	4632      	mov	r2, r6
 8007fec:	463b      	mov	r3, r7
 8007fee:	4630      	mov	r0, r6
 8007ff0:	4639      	mov	r1, r7
 8007ff2:	f7f8 fd3f 	bl	8000a74 <__aeabi_dcmpun>
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	d0e2      	beq.n	8007fc0 <pow+0x60>
 8007ffa:	f7ff ff77 	bl	8007eec <__errno>
 8007ffe:	2321      	movs	r3, #33	; 0x21
 8008000:	6003      	str	r3, [r0, #0]
 8008002:	ecbd 8b02 	vpop	{d8}
 8008006:	ec47 6b10 	vmov	d0, r6, r7
 800800a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800800c:	2200      	movs	r2, #0
 800800e:	2300      	movs	r3, #0
 8008010:	4630      	mov	r0, r6
 8008012:	4639      	mov	r1, r7
 8008014:	f7f8 fcfc 	bl	8000a10 <__aeabi_dcmpeq>
 8008018:	2800      	cmp	r0, #0
 800801a:	d0f2      	beq.n	8008002 <pow+0xa2>
 800801c:	eeb0 0a48 	vmov.f32	s0, s16
 8008020:	eef0 0a68 	vmov.f32	s1, s17
 8008024:	f000 f80c 	bl	8008040 <finite>
 8008028:	2800      	cmp	r0, #0
 800802a:	d0ea      	beq.n	8008002 <pow+0xa2>
 800802c:	ec45 4b10 	vmov	d0, r4, r5
 8008030:	f000 f806 	bl	8008040 <finite>
 8008034:	e7c3      	b.n	8007fbe <pow+0x5e>
 8008036:	4f01      	ldr	r7, [pc, #4]	; (800803c <pow+0xdc>)
 8008038:	2600      	movs	r6, #0
 800803a:	e7e2      	b.n	8008002 <pow+0xa2>
 800803c:	3ff00000 	.word	0x3ff00000

08008040 <finite>:
 8008040:	b082      	sub	sp, #8
 8008042:	ed8d 0b00 	vstr	d0, [sp]
 8008046:	9801      	ldr	r0, [sp, #4]
 8008048:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800804c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008050:	0fc0      	lsrs	r0, r0, #31
 8008052:	b002      	add	sp, #8
 8008054:	4770      	bx	lr

08008056 <fmin>:
 8008056:	b508      	push	{r3, lr}
 8008058:	ed2d 8b04 	vpush	{d8-d9}
 800805c:	eeb0 8a40 	vmov.f32	s16, s0
 8008060:	eef0 8a60 	vmov.f32	s17, s1
 8008064:	eeb0 9a41 	vmov.f32	s18, s2
 8008068:	eef0 9a61 	vmov.f32	s19, s3
 800806c:	f000 f81a 	bl	80080a4 <__fpclassifyd>
 8008070:	b168      	cbz	r0, 800808e <fmin+0x38>
 8008072:	eeb0 0a49 	vmov.f32	s0, s18
 8008076:	eef0 0a69 	vmov.f32	s1, s19
 800807a:	f000 f813 	bl	80080a4 <__fpclassifyd>
 800807e:	b150      	cbz	r0, 8008096 <fmin+0x40>
 8008080:	ec53 2b19 	vmov	r2, r3, d9
 8008084:	ec51 0b18 	vmov	r0, r1, d8
 8008088:	f7f8 fccc 	bl	8000a24 <__aeabi_dcmplt>
 800808c:	b918      	cbnz	r0, 8008096 <fmin+0x40>
 800808e:	eeb0 8a49 	vmov.f32	s16, s18
 8008092:	eef0 8a69 	vmov.f32	s17, s19
 8008096:	eeb0 0a48 	vmov.f32	s0, s16
 800809a:	eef0 0a68 	vmov.f32	s1, s17
 800809e:	ecbd 8b04 	vpop	{d8-d9}
 80080a2:	bd08      	pop	{r3, pc}

080080a4 <__fpclassifyd>:
 80080a4:	ec51 0b10 	vmov	r0, r1, d0
 80080a8:	b510      	push	{r4, lr}
 80080aa:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 80080ae:	460b      	mov	r3, r1
 80080b0:	d019      	beq.n	80080e6 <__fpclassifyd+0x42>
 80080b2:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 80080b6:	490e      	ldr	r1, [pc, #56]	; (80080f0 <__fpclassifyd+0x4c>)
 80080b8:	428a      	cmp	r2, r1
 80080ba:	d90e      	bls.n	80080da <__fpclassifyd+0x36>
 80080bc:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 80080c0:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 80080c4:	428a      	cmp	r2, r1
 80080c6:	d908      	bls.n	80080da <__fpclassifyd+0x36>
 80080c8:	4a0a      	ldr	r2, [pc, #40]	; (80080f4 <__fpclassifyd+0x50>)
 80080ca:	4213      	tst	r3, r2
 80080cc:	d007      	beq.n	80080de <__fpclassifyd+0x3a>
 80080ce:	4294      	cmp	r4, r2
 80080d0:	d107      	bne.n	80080e2 <__fpclassifyd+0x3e>
 80080d2:	fab0 f080 	clz	r0, r0
 80080d6:	0940      	lsrs	r0, r0, #5
 80080d8:	bd10      	pop	{r4, pc}
 80080da:	2004      	movs	r0, #4
 80080dc:	e7fc      	b.n	80080d8 <__fpclassifyd+0x34>
 80080de:	2003      	movs	r0, #3
 80080e0:	e7fa      	b.n	80080d8 <__fpclassifyd+0x34>
 80080e2:	2000      	movs	r0, #0
 80080e4:	e7f8      	b.n	80080d8 <__fpclassifyd+0x34>
 80080e6:	2800      	cmp	r0, #0
 80080e8:	d1ee      	bne.n	80080c8 <__fpclassifyd+0x24>
 80080ea:	2002      	movs	r0, #2
 80080ec:	e7f4      	b.n	80080d8 <__fpclassifyd+0x34>
 80080ee:	bf00      	nop
 80080f0:	7fdfffff 	.word	0x7fdfffff
 80080f4:	7ff00000 	.word	0x7ff00000

080080f8 <round>:
 80080f8:	ec53 2b10 	vmov	r2, r3, d0
 80080fc:	b570      	push	{r4, r5, r6, lr}
 80080fe:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8008102:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8008106:	2813      	cmp	r0, #19
 8008108:	ee10 5a10 	vmov	r5, s0
 800810c:	4619      	mov	r1, r3
 800810e:	dc18      	bgt.n	8008142 <round+0x4a>
 8008110:	2800      	cmp	r0, #0
 8008112:	da09      	bge.n	8008128 <round+0x30>
 8008114:	3001      	adds	r0, #1
 8008116:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800811a:	d103      	bne.n	8008124 <round+0x2c>
 800811c:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8008120:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008124:	2300      	movs	r3, #0
 8008126:	e02a      	b.n	800817e <round+0x86>
 8008128:	4c16      	ldr	r4, [pc, #88]	; (8008184 <round+0x8c>)
 800812a:	4104      	asrs	r4, r0
 800812c:	ea03 0604 	and.w	r6, r3, r4
 8008130:	4316      	orrs	r6, r2
 8008132:	d011      	beq.n	8008158 <round+0x60>
 8008134:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008138:	4103      	asrs	r3, r0
 800813a:	440b      	add	r3, r1
 800813c:	ea23 0104 	bic.w	r1, r3, r4
 8008140:	e7f0      	b.n	8008124 <round+0x2c>
 8008142:	2833      	cmp	r0, #51	; 0x33
 8008144:	dd0b      	ble.n	800815e <round+0x66>
 8008146:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800814a:	d105      	bne.n	8008158 <round+0x60>
 800814c:	ee10 0a10 	vmov	r0, s0
 8008150:	f7f8 f840 	bl	80001d4 <__adddf3>
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	ec43 2b10 	vmov	d0, r2, r3
 800815c:	bd70      	pop	{r4, r5, r6, pc}
 800815e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8008162:	f04f 34ff 	mov.w	r4, #4294967295
 8008166:	40f4      	lsrs	r4, r6
 8008168:	4214      	tst	r4, r2
 800816a:	d0f5      	beq.n	8008158 <round+0x60>
 800816c:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8008170:	2301      	movs	r3, #1
 8008172:	4083      	lsls	r3, r0
 8008174:	195b      	adds	r3, r3, r5
 8008176:	bf28      	it	cs
 8008178:	3101      	addcs	r1, #1
 800817a:	ea23 0304 	bic.w	r3, r3, r4
 800817e:	461a      	mov	r2, r3
 8008180:	460b      	mov	r3, r1
 8008182:	e7e9      	b.n	8008158 <round+0x60>
 8008184:	000fffff 	.word	0x000fffff

08008188 <__ieee754_pow>:
 8008188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800818c:	ed2d 8b06 	vpush	{d8-d10}
 8008190:	b089      	sub	sp, #36	; 0x24
 8008192:	ed8d 1b00 	vstr	d1, [sp]
 8008196:	e9dd 2900 	ldrd	r2, r9, [sp]
 800819a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800819e:	ea58 0102 	orrs.w	r1, r8, r2
 80081a2:	ec57 6b10 	vmov	r6, r7, d0
 80081a6:	d115      	bne.n	80081d4 <__ieee754_pow+0x4c>
 80081a8:	19b3      	adds	r3, r6, r6
 80081aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80081ae:	4152      	adcs	r2, r2
 80081b0:	4299      	cmp	r1, r3
 80081b2:	4b89      	ldr	r3, [pc, #548]	; (80083d8 <__ieee754_pow+0x250>)
 80081b4:	4193      	sbcs	r3, r2
 80081b6:	f080 84d1 	bcs.w	8008b5c <__ieee754_pow+0x9d4>
 80081ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081be:	4630      	mov	r0, r6
 80081c0:	4639      	mov	r1, r7
 80081c2:	f7f8 f807 	bl	80001d4 <__adddf3>
 80081c6:	ec41 0b10 	vmov	d0, r0, r1
 80081ca:	b009      	add	sp, #36	; 0x24
 80081cc:	ecbd 8b06 	vpop	{d8-d10}
 80081d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d4:	4b81      	ldr	r3, [pc, #516]	; (80083dc <__ieee754_pow+0x254>)
 80081d6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80081da:	429c      	cmp	r4, r3
 80081dc:	ee10 aa10 	vmov	sl, s0
 80081e0:	463d      	mov	r5, r7
 80081e2:	dc06      	bgt.n	80081f2 <__ieee754_pow+0x6a>
 80081e4:	d101      	bne.n	80081ea <__ieee754_pow+0x62>
 80081e6:	2e00      	cmp	r6, #0
 80081e8:	d1e7      	bne.n	80081ba <__ieee754_pow+0x32>
 80081ea:	4598      	cmp	r8, r3
 80081ec:	dc01      	bgt.n	80081f2 <__ieee754_pow+0x6a>
 80081ee:	d10f      	bne.n	8008210 <__ieee754_pow+0x88>
 80081f0:	b172      	cbz	r2, 8008210 <__ieee754_pow+0x88>
 80081f2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80081f6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80081fa:	ea55 050a 	orrs.w	r5, r5, sl
 80081fe:	d1dc      	bne.n	80081ba <__ieee754_pow+0x32>
 8008200:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008204:	18db      	adds	r3, r3, r3
 8008206:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800820a:	4152      	adcs	r2, r2
 800820c:	429d      	cmp	r5, r3
 800820e:	e7d0      	b.n	80081b2 <__ieee754_pow+0x2a>
 8008210:	2d00      	cmp	r5, #0
 8008212:	da3b      	bge.n	800828c <__ieee754_pow+0x104>
 8008214:	4b72      	ldr	r3, [pc, #456]	; (80083e0 <__ieee754_pow+0x258>)
 8008216:	4598      	cmp	r8, r3
 8008218:	dc51      	bgt.n	80082be <__ieee754_pow+0x136>
 800821a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800821e:	4598      	cmp	r8, r3
 8008220:	f340 84ab 	ble.w	8008b7a <__ieee754_pow+0x9f2>
 8008224:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008228:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800822c:	2b14      	cmp	r3, #20
 800822e:	dd0f      	ble.n	8008250 <__ieee754_pow+0xc8>
 8008230:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008234:	fa22 f103 	lsr.w	r1, r2, r3
 8008238:	fa01 f303 	lsl.w	r3, r1, r3
 800823c:	4293      	cmp	r3, r2
 800823e:	f040 849c 	bne.w	8008b7a <__ieee754_pow+0x9f2>
 8008242:	f001 0101 	and.w	r1, r1, #1
 8008246:	f1c1 0302 	rsb	r3, r1, #2
 800824a:	9304      	str	r3, [sp, #16]
 800824c:	b182      	cbz	r2, 8008270 <__ieee754_pow+0xe8>
 800824e:	e05f      	b.n	8008310 <__ieee754_pow+0x188>
 8008250:	2a00      	cmp	r2, #0
 8008252:	d15b      	bne.n	800830c <__ieee754_pow+0x184>
 8008254:	f1c3 0314 	rsb	r3, r3, #20
 8008258:	fa48 f103 	asr.w	r1, r8, r3
 800825c:	fa01 f303 	lsl.w	r3, r1, r3
 8008260:	4543      	cmp	r3, r8
 8008262:	f040 8487 	bne.w	8008b74 <__ieee754_pow+0x9ec>
 8008266:	f001 0101 	and.w	r1, r1, #1
 800826a:	f1c1 0302 	rsb	r3, r1, #2
 800826e:	9304      	str	r3, [sp, #16]
 8008270:	4b5c      	ldr	r3, [pc, #368]	; (80083e4 <__ieee754_pow+0x25c>)
 8008272:	4598      	cmp	r8, r3
 8008274:	d132      	bne.n	80082dc <__ieee754_pow+0x154>
 8008276:	f1b9 0f00 	cmp.w	r9, #0
 800827a:	f280 8477 	bge.w	8008b6c <__ieee754_pow+0x9e4>
 800827e:	4959      	ldr	r1, [pc, #356]	; (80083e4 <__ieee754_pow+0x25c>)
 8008280:	4632      	mov	r2, r6
 8008282:	463b      	mov	r3, r7
 8008284:	2000      	movs	r0, #0
 8008286:	f7f8 fa85 	bl	8000794 <__aeabi_ddiv>
 800828a:	e79c      	b.n	80081c6 <__ieee754_pow+0x3e>
 800828c:	2300      	movs	r3, #0
 800828e:	9304      	str	r3, [sp, #16]
 8008290:	2a00      	cmp	r2, #0
 8008292:	d13d      	bne.n	8008310 <__ieee754_pow+0x188>
 8008294:	4b51      	ldr	r3, [pc, #324]	; (80083dc <__ieee754_pow+0x254>)
 8008296:	4598      	cmp	r8, r3
 8008298:	d1ea      	bne.n	8008270 <__ieee754_pow+0xe8>
 800829a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800829e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80082a2:	ea53 030a 	orrs.w	r3, r3, sl
 80082a6:	f000 8459 	beq.w	8008b5c <__ieee754_pow+0x9d4>
 80082aa:	4b4f      	ldr	r3, [pc, #316]	; (80083e8 <__ieee754_pow+0x260>)
 80082ac:	429c      	cmp	r4, r3
 80082ae:	dd08      	ble.n	80082c2 <__ieee754_pow+0x13a>
 80082b0:	f1b9 0f00 	cmp.w	r9, #0
 80082b4:	f2c0 8456 	blt.w	8008b64 <__ieee754_pow+0x9dc>
 80082b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082bc:	e783      	b.n	80081c6 <__ieee754_pow+0x3e>
 80082be:	2302      	movs	r3, #2
 80082c0:	e7e5      	b.n	800828e <__ieee754_pow+0x106>
 80082c2:	f1b9 0f00 	cmp.w	r9, #0
 80082c6:	f04f 0000 	mov.w	r0, #0
 80082ca:	f04f 0100 	mov.w	r1, #0
 80082ce:	f6bf af7a 	bge.w	80081c6 <__ieee754_pow+0x3e>
 80082d2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80082d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80082da:	e774      	b.n	80081c6 <__ieee754_pow+0x3e>
 80082dc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80082e0:	d106      	bne.n	80082f0 <__ieee754_pow+0x168>
 80082e2:	4632      	mov	r2, r6
 80082e4:	463b      	mov	r3, r7
 80082e6:	4630      	mov	r0, r6
 80082e8:	4639      	mov	r1, r7
 80082ea:	f7f8 f929 	bl	8000540 <__aeabi_dmul>
 80082ee:	e76a      	b.n	80081c6 <__ieee754_pow+0x3e>
 80082f0:	4b3e      	ldr	r3, [pc, #248]	; (80083ec <__ieee754_pow+0x264>)
 80082f2:	4599      	cmp	r9, r3
 80082f4:	d10c      	bne.n	8008310 <__ieee754_pow+0x188>
 80082f6:	2d00      	cmp	r5, #0
 80082f8:	db0a      	blt.n	8008310 <__ieee754_pow+0x188>
 80082fa:	ec47 6b10 	vmov	d0, r6, r7
 80082fe:	b009      	add	sp, #36	; 0x24
 8008300:	ecbd 8b06 	vpop	{d8-d10}
 8008304:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008308:	f000 bd20 	b.w	8008d4c <__ieee754_sqrt>
 800830c:	2300      	movs	r3, #0
 800830e:	9304      	str	r3, [sp, #16]
 8008310:	ec47 6b10 	vmov	d0, r6, r7
 8008314:	f000 fc62 	bl	8008bdc <fabs>
 8008318:	ec51 0b10 	vmov	r0, r1, d0
 800831c:	f1ba 0f00 	cmp.w	sl, #0
 8008320:	d129      	bne.n	8008376 <__ieee754_pow+0x1ee>
 8008322:	b124      	cbz	r4, 800832e <__ieee754_pow+0x1a6>
 8008324:	4b2f      	ldr	r3, [pc, #188]	; (80083e4 <__ieee754_pow+0x25c>)
 8008326:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800832a:	429a      	cmp	r2, r3
 800832c:	d123      	bne.n	8008376 <__ieee754_pow+0x1ee>
 800832e:	f1b9 0f00 	cmp.w	r9, #0
 8008332:	da05      	bge.n	8008340 <__ieee754_pow+0x1b8>
 8008334:	4602      	mov	r2, r0
 8008336:	460b      	mov	r3, r1
 8008338:	2000      	movs	r0, #0
 800833a:	492a      	ldr	r1, [pc, #168]	; (80083e4 <__ieee754_pow+0x25c>)
 800833c:	f7f8 fa2a 	bl	8000794 <__aeabi_ddiv>
 8008340:	2d00      	cmp	r5, #0
 8008342:	f6bf af40 	bge.w	80081c6 <__ieee754_pow+0x3e>
 8008346:	9b04      	ldr	r3, [sp, #16]
 8008348:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800834c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008350:	431c      	orrs	r4, r3
 8008352:	d108      	bne.n	8008366 <__ieee754_pow+0x1de>
 8008354:	4602      	mov	r2, r0
 8008356:	460b      	mov	r3, r1
 8008358:	4610      	mov	r0, r2
 800835a:	4619      	mov	r1, r3
 800835c:	f7f7 ff38 	bl	80001d0 <__aeabi_dsub>
 8008360:	4602      	mov	r2, r0
 8008362:	460b      	mov	r3, r1
 8008364:	e78f      	b.n	8008286 <__ieee754_pow+0xfe>
 8008366:	9b04      	ldr	r3, [sp, #16]
 8008368:	2b01      	cmp	r3, #1
 800836a:	f47f af2c 	bne.w	80081c6 <__ieee754_pow+0x3e>
 800836e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008372:	4619      	mov	r1, r3
 8008374:	e727      	b.n	80081c6 <__ieee754_pow+0x3e>
 8008376:	0feb      	lsrs	r3, r5, #31
 8008378:	3b01      	subs	r3, #1
 800837a:	9306      	str	r3, [sp, #24]
 800837c:	9a06      	ldr	r2, [sp, #24]
 800837e:	9b04      	ldr	r3, [sp, #16]
 8008380:	4313      	orrs	r3, r2
 8008382:	d102      	bne.n	800838a <__ieee754_pow+0x202>
 8008384:	4632      	mov	r2, r6
 8008386:	463b      	mov	r3, r7
 8008388:	e7e6      	b.n	8008358 <__ieee754_pow+0x1d0>
 800838a:	4b19      	ldr	r3, [pc, #100]	; (80083f0 <__ieee754_pow+0x268>)
 800838c:	4598      	cmp	r8, r3
 800838e:	f340 80fb 	ble.w	8008588 <__ieee754_pow+0x400>
 8008392:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008396:	4598      	cmp	r8, r3
 8008398:	4b13      	ldr	r3, [pc, #76]	; (80083e8 <__ieee754_pow+0x260>)
 800839a:	dd0c      	ble.n	80083b6 <__ieee754_pow+0x22e>
 800839c:	429c      	cmp	r4, r3
 800839e:	dc0f      	bgt.n	80083c0 <__ieee754_pow+0x238>
 80083a0:	f1b9 0f00 	cmp.w	r9, #0
 80083a4:	da0f      	bge.n	80083c6 <__ieee754_pow+0x23e>
 80083a6:	2000      	movs	r0, #0
 80083a8:	b009      	add	sp, #36	; 0x24
 80083aa:	ecbd 8b06 	vpop	{d8-d10}
 80083ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b2:	f000 bcc2 	b.w	8008d3a <__math_oflow>
 80083b6:	429c      	cmp	r4, r3
 80083b8:	dbf2      	blt.n	80083a0 <__ieee754_pow+0x218>
 80083ba:	4b0a      	ldr	r3, [pc, #40]	; (80083e4 <__ieee754_pow+0x25c>)
 80083bc:	429c      	cmp	r4, r3
 80083be:	dd19      	ble.n	80083f4 <__ieee754_pow+0x26c>
 80083c0:	f1b9 0f00 	cmp.w	r9, #0
 80083c4:	dcef      	bgt.n	80083a6 <__ieee754_pow+0x21e>
 80083c6:	2000      	movs	r0, #0
 80083c8:	b009      	add	sp, #36	; 0x24
 80083ca:	ecbd 8b06 	vpop	{d8-d10}
 80083ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d2:	f000 bca9 	b.w	8008d28 <__math_uflow>
 80083d6:	bf00      	nop
 80083d8:	fff00000 	.word	0xfff00000
 80083dc:	7ff00000 	.word	0x7ff00000
 80083e0:	433fffff 	.word	0x433fffff
 80083e4:	3ff00000 	.word	0x3ff00000
 80083e8:	3fefffff 	.word	0x3fefffff
 80083ec:	3fe00000 	.word	0x3fe00000
 80083f0:	41e00000 	.word	0x41e00000
 80083f4:	4b60      	ldr	r3, [pc, #384]	; (8008578 <__ieee754_pow+0x3f0>)
 80083f6:	2200      	movs	r2, #0
 80083f8:	f7f7 feea 	bl	80001d0 <__aeabi_dsub>
 80083fc:	a354      	add	r3, pc, #336	; (adr r3, 8008550 <__ieee754_pow+0x3c8>)
 80083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008402:	4604      	mov	r4, r0
 8008404:	460d      	mov	r5, r1
 8008406:	f7f8 f89b 	bl	8000540 <__aeabi_dmul>
 800840a:	a353      	add	r3, pc, #332	; (adr r3, 8008558 <__ieee754_pow+0x3d0>)
 800840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008410:	4606      	mov	r6, r0
 8008412:	460f      	mov	r7, r1
 8008414:	4620      	mov	r0, r4
 8008416:	4629      	mov	r1, r5
 8008418:	f7f8 f892 	bl	8000540 <__aeabi_dmul>
 800841c:	4b57      	ldr	r3, [pc, #348]	; (800857c <__ieee754_pow+0x3f4>)
 800841e:	4682      	mov	sl, r0
 8008420:	468b      	mov	fp, r1
 8008422:	2200      	movs	r2, #0
 8008424:	4620      	mov	r0, r4
 8008426:	4629      	mov	r1, r5
 8008428:	f7f8 f88a 	bl	8000540 <__aeabi_dmul>
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	a14b      	add	r1, pc, #300	; (adr r1, 8008560 <__ieee754_pow+0x3d8>)
 8008432:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008436:	f7f7 fecb 	bl	80001d0 <__aeabi_dsub>
 800843a:	4622      	mov	r2, r4
 800843c:	462b      	mov	r3, r5
 800843e:	f7f8 f87f 	bl	8000540 <__aeabi_dmul>
 8008442:	4602      	mov	r2, r0
 8008444:	460b      	mov	r3, r1
 8008446:	2000      	movs	r0, #0
 8008448:	494d      	ldr	r1, [pc, #308]	; (8008580 <__ieee754_pow+0x3f8>)
 800844a:	f7f7 fec1 	bl	80001d0 <__aeabi_dsub>
 800844e:	4622      	mov	r2, r4
 8008450:	4680      	mov	r8, r0
 8008452:	4689      	mov	r9, r1
 8008454:	462b      	mov	r3, r5
 8008456:	4620      	mov	r0, r4
 8008458:	4629      	mov	r1, r5
 800845a:	f7f8 f871 	bl	8000540 <__aeabi_dmul>
 800845e:	4602      	mov	r2, r0
 8008460:	460b      	mov	r3, r1
 8008462:	4640      	mov	r0, r8
 8008464:	4649      	mov	r1, r9
 8008466:	f7f8 f86b 	bl	8000540 <__aeabi_dmul>
 800846a:	a33f      	add	r3, pc, #252	; (adr r3, 8008568 <__ieee754_pow+0x3e0>)
 800846c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008470:	f7f8 f866 	bl	8000540 <__aeabi_dmul>
 8008474:	4602      	mov	r2, r0
 8008476:	460b      	mov	r3, r1
 8008478:	4650      	mov	r0, sl
 800847a:	4659      	mov	r1, fp
 800847c:	f7f7 fea8 	bl	80001d0 <__aeabi_dsub>
 8008480:	4602      	mov	r2, r0
 8008482:	460b      	mov	r3, r1
 8008484:	4680      	mov	r8, r0
 8008486:	4689      	mov	r9, r1
 8008488:	4630      	mov	r0, r6
 800848a:	4639      	mov	r1, r7
 800848c:	f7f7 fea2 	bl	80001d4 <__adddf3>
 8008490:	2000      	movs	r0, #0
 8008492:	4632      	mov	r2, r6
 8008494:	463b      	mov	r3, r7
 8008496:	4604      	mov	r4, r0
 8008498:	460d      	mov	r5, r1
 800849a:	f7f7 fe99 	bl	80001d0 <__aeabi_dsub>
 800849e:	4602      	mov	r2, r0
 80084a0:	460b      	mov	r3, r1
 80084a2:	4640      	mov	r0, r8
 80084a4:	4649      	mov	r1, r9
 80084a6:	f7f7 fe93 	bl	80001d0 <__aeabi_dsub>
 80084aa:	9b04      	ldr	r3, [sp, #16]
 80084ac:	9a06      	ldr	r2, [sp, #24]
 80084ae:	3b01      	subs	r3, #1
 80084b0:	4313      	orrs	r3, r2
 80084b2:	4682      	mov	sl, r0
 80084b4:	468b      	mov	fp, r1
 80084b6:	f040 81e7 	bne.w	8008888 <__ieee754_pow+0x700>
 80084ba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008570 <__ieee754_pow+0x3e8>
 80084be:	eeb0 8a47 	vmov.f32	s16, s14
 80084c2:	eef0 8a67 	vmov.f32	s17, s15
 80084c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80084ca:	2600      	movs	r6, #0
 80084cc:	4632      	mov	r2, r6
 80084ce:	463b      	mov	r3, r7
 80084d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084d4:	f7f7 fe7c 	bl	80001d0 <__aeabi_dsub>
 80084d8:	4622      	mov	r2, r4
 80084da:	462b      	mov	r3, r5
 80084dc:	f7f8 f830 	bl	8000540 <__aeabi_dmul>
 80084e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084e4:	4680      	mov	r8, r0
 80084e6:	4689      	mov	r9, r1
 80084e8:	4650      	mov	r0, sl
 80084ea:	4659      	mov	r1, fp
 80084ec:	f7f8 f828 	bl	8000540 <__aeabi_dmul>
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	4640      	mov	r0, r8
 80084f6:	4649      	mov	r1, r9
 80084f8:	f7f7 fe6c 	bl	80001d4 <__adddf3>
 80084fc:	4632      	mov	r2, r6
 80084fe:	463b      	mov	r3, r7
 8008500:	4680      	mov	r8, r0
 8008502:	4689      	mov	r9, r1
 8008504:	4620      	mov	r0, r4
 8008506:	4629      	mov	r1, r5
 8008508:	f7f8 f81a 	bl	8000540 <__aeabi_dmul>
 800850c:	460b      	mov	r3, r1
 800850e:	4604      	mov	r4, r0
 8008510:	460d      	mov	r5, r1
 8008512:	4602      	mov	r2, r0
 8008514:	4649      	mov	r1, r9
 8008516:	4640      	mov	r0, r8
 8008518:	f7f7 fe5c 	bl	80001d4 <__adddf3>
 800851c:	4b19      	ldr	r3, [pc, #100]	; (8008584 <__ieee754_pow+0x3fc>)
 800851e:	4299      	cmp	r1, r3
 8008520:	ec45 4b19 	vmov	d9, r4, r5
 8008524:	4606      	mov	r6, r0
 8008526:	460f      	mov	r7, r1
 8008528:	468b      	mov	fp, r1
 800852a:	f340 82f0 	ble.w	8008b0e <__ieee754_pow+0x986>
 800852e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008532:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008536:	4303      	orrs	r3, r0
 8008538:	f000 81e4 	beq.w	8008904 <__ieee754_pow+0x77c>
 800853c:	ec51 0b18 	vmov	r0, r1, d8
 8008540:	2200      	movs	r2, #0
 8008542:	2300      	movs	r3, #0
 8008544:	f7f8 fa6e 	bl	8000a24 <__aeabi_dcmplt>
 8008548:	3800      	subs	r0, #0
 800854a:	bf18      	it	ne
 800854c:	2001      	movne	r0, #1
 800854e:	e72b      	b.n	80083a8 <__ieee754_pow+0x220>
 8008550:	60000000 	.word	0x60000000
 8008554:	3ff71547 	.word	0x3ff71547
 8008558:	f85ddf44 	.word	0xf85ddf44
 800855c:	3e54ae0b 	.word	0x3e54ae0b
 8008560:	55555555 	.word	0x55555555
 8008564:	3fd55555 	.word	0x3fd55555
 8008568:	652b82fe 	.word	0x652b82fe
 800856c:	3ff71547 	.word	0x3ff71547
 8008570:	00000000 	.word	0x00000000
 8008574:	bff00000 	.word	0xbff00000
 8008578:	3ff00000 	.word	0x3ff00000
 800857c:	3fd00000 	.word	0x3fd00000
 8008580:	3fe00000 	.word	0x3fe00000
 8008584:	408fffff 	.word	0x408fffff
 8008588:	4bd5      	ldr	r3, [pc, #852]	; (80088e0 <__ieee754_pow+0x758>)
 800858a:	402b      	ands	r3, r5
 800858c:	2200      	movs	r2, #0
 800858e:	b92b      	cbnz	r3, 800859c <__ieee754_pow+0x414>
 8008590:	4bd4      	ldr	r3, [pc, #848]	; (80088e4 <__ieee754_pow+0x75c>)
 8008592:	f7f7 ffd5 	bl	8000540 <__aeabi_dmul>
 8008596:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800859a:	460c      	mov	r4, r1
 800859c:	1523      	asrs	r3, r4, #20
 800859e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80085a2:	4413      	add	r3, r2
 80085a4:	9305      	str	r3, [sp, #20]
 80085a6:	4bd0      	ldr	r3, [pc, #832]	; (80088e8 <__ieee754_pow+0x760>)
 80085a8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80085ac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80085b0:	429c      	cmp	r4, r3
 80085b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80085b6:	dd08      	ble.n	80085ca <__ieee754_pow+0x442>
 80085b8:	4bcc      	ldr	r3, [pc, #816]	; (80088ec <__ieee754_pow+0x764>)
 80085ba:	429c      	cmp	r4, r3
 80085bc:	f340 8162 	ble.w	8008884 <__ieee754_pow+0x6fc>
 80085c0:	9b05      	ldr	r3, [sp, #20]
 80085c2:	3301      	adds	r3, #1
 80085c4:	9305      	str	r3, [sp, #20]
 80085c6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80085ca:	2400      	movs	r4, #0
 80085cc:	00e3      	lsls	r3, r4, #3
 80085ce:	9307      	str	r3, [sp, #28]
 80085d0:	4bc7      	ldr	r3, [pc, #796]	; (80088f0 <__ieee754_pow+0x768>)
 80085d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085d6:	ed93 7b00 	vldr	d7, [r3]
 80085da:	4629      	mov	r1, r5
 80085dc:	ec53 2b17 	vmov	r2, r3, d7
 80085e0:	eeb0 9a47 	vmov.f32	s18, s14
 80085e4:	eef0 9a67 	vmov.f32	s19, s15
 80085e8:	4682      	mov	sl, r0
 80085ea:	f7f7 fdf1 	bl	80001d0 <__aeabi_dsub>
 80085ee:	4652      	mov	r2, sl
 80085f0:	4606      	mov	r6, r0
 80085f2:	460f      	mov	r7, r1
 80085f4:	462b      	mov	r3, r5
 80085f6:	ec51 0b19 	vmov	r0, r1, d9
 80085fa:	f7f7 fdeb 	bl	80001d4 <__adddf3>
 80085fe:	4602      	mov	r2, r0
 8008600:	460b      	mov	r3, r1
 8008602:	2000      	movs	r0, #0
 8008604:	49bb      	ldr	r1, [pc, #748]	; (80088f4 <__ieee754_pow+0x76c>)
 8008606:	f7f8 f8c5 	bl	8000794 <__aeabi_ddiv>
 800860a:	ec41 0b1a 	vmov	d10, r0, r1
 800860e:	4602      	mov	r2, r0
 8008610:	460b      	mov	r3, r1
 8008612:	4630      	mov	r0, r6
 8008614:	4639      	mov	r1, r7
 8008616:	f7f7 ff93 	bl	8000540 <__aeabi_dmul>
 800861a:	2300      	movs	r3, #0
 800861c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008620:	9302      	str	r3, [sp, #8]
 8008622:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008626:	46ab      	mov	fp, r5
 8008628:	106d      	asrs	r5, r5, #1
 800862a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800862e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008632:	ec41 0b18 	vmov	d8, r0, r1
 8008636:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800863a:	2200      	movs	r2, #0
 800863c:	4640      	mov	r0, r8
 800863e:	4649      	mov	r1, r9
 8008640:	4614      	mov	r4, r2
 8008642:	461d      	mov	r5, r3
 8008644:	f7f7 ff7c 	bl	8000540 <__aeabi_dmul>
 8008648:	4602      	mov	r2, r0
 800864a:	460b      	mov	r3, r1
 800864c:	4630      	mov	r0, r6
 800864e:	4639      	mov	r1, r7
 8008650:	f7f7 fdbe 	bl	80001d0 <__aeabi_dsub>
 8008654:	ec53 2b19 	vmov	r2, r3, d9
 8008658:	4606      	mov	r6, r0
 800865a:	460f      	mov	r7, r1
 800865c:	4620      	mov	r0, r4
 800865e:	4629      	mov	r1, r5
 8008660:	f7f7 fdb6 	bl	80001d0 <__aeabi_dsub>
 8008664:	4602      	mov	r2, r0
 8008666:	460b      	mov	r3, r1
 8008668:	4650      	mov	r0, sl
 800866a:	4659      	mov	r1, fp
 800866c:	f7f7 fdb0 	bl	80001d0 <__aeabi_dsub>
 8008670:	4642      	mov	r2, r8
 8008672:	464b      	mov	r3, r9
 8008674:	f7f7 ff64 	bl	8000540 <__aeabi_dmul>
 8008678:	4602      	mov	r2, r0
 800867a:	460b      	mov	r3, r1
 800867c:	4630      	mov	r0, r6
 800867e:	4639      	mov	r1, r7
 8008680:	f7f7 fda6 	bl	80001d0 <__aeabi_dsub>
 8008684:	ec53 2b1a 	vmov	r2, r3, d10
 8008688:	f7f7 ff5a 	bl	8000540 <__aeabi_dmul>
 800868c:	ec53 2b18 	vmov	r2, r3, d8
 8008690:	ec41 0b19 	vmov	d9, r0, r1
 8008694:	ec51 0b18 	vmov	r0, r1, d8
 8008698:	f7f7 ff52 	bl	8000540 <__aeabi_dmul>
 800869c:	a37c      	add	r3, pc, #496	; (adr r3, 8008890 <__ieee754_pow+0x708>)
 800869e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a2:	4604      	mov	r4, r0
 80086a4:	460d      	mov	r5, r1
 80086a6:	f7f7 ff4b 	bl	8000540 <__aeabi_dmul>
 80086aa:	a37b      	add	r3, pc, #492	; (adr r3, 8008898 <__ieee754_pow+0x710>)
 80086ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b0:	f7f7 fd90 	bl	80001d4 <__adddf3>
 80086b4:	4622      	mov	r2, r4
 80086b6:	462b      	mov	r3, r5
 80086b8:	f7f7 ff42 	bl	8000540 <__aeabi_dmul>
 80086bc:	a378      	add	r3, pc, #480	; (adr r3, 80088a0 <__ieee754_pow+0x718>)
 80086be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c2:	f7f7 fd87 	bl	80001d4 <__adddf3>
 80086c6:	4622      	mov	r2, r4
 80086c8:	462b      	mov	r3, r5
 80086ca:	f7f7 ff39 	bl	8000540 <__aeabi_dmul>
 80086ce:	a376      	add	r3, pc, #472	; (adr r3, 80088a8 <__ieee754_pow+0x720>)
 80086d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d4:	f7f7 fd7e 	bl	80001d4 <__adddf3>
 80086d8:	4622      	mov	r2, r4
 80086da:	462b      	mov	r3, r5
 80086dc:	f7f7 ff30 	bl	8000540 <__aeabi_dmul>
 80086e0:	a373      	add	r3, pc, #460	; (adr r3, 80088b0 <__ieee754_pow+0x728>)
 80086e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e6:	f7f7 fd75 	bl	80001d4 <__adddf3>
 80086ea:	4622      	mov	r2, r4
 80086ec:	462b      	mov	r3, r5
 80086ee:	f7f7 ff27 	bl	8000540 <__aeabi_dmul>
 80086f2:	a371      	add	r3, pc, #452	; (adr r3, 80088b8 <__ieee754_pow+0x730>)
 80086f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f8:	f7f7 fd6c 	bl	80001d4 <__adddf3>
 80086fc:	4622      	mov	r2, r4
 80086fe:	4606      	mov	r6, r0
 8008700:	460f      	mov	r7, r1
 8008702:	462b      	mov	r3, r5
 8008704:	4620      	mov	r0, r4
 8008706:	4629      	mov	r1, r5
 8008708:	f7f7 ff1a 	bl	8000540 <__aeabi_dmul>
 800870c:	4602      	mov	r2, r0
 800870e:	460b      	mov	r3, r1
 8008710:	4630      	mov	r0, r6
 8008712:	4639      	mov	r1, r7
 8008714:	f7f7 ff14 	bl	8000540 <__aeabi_dmul>
 8008718:	4642      	mov	r2, r8
 800871a:	4604      	mov	r4, r0
 800871c:	460d      	mov	r5, r1
 800871e:	464b      	mov	r3, r9
 8008720:	ec51 0b18 	vmov	r0, r1, d8
 8008724:	f7f7 fd56 	bl	80001d4 <__adddf3>
 8008728:	ec53 2b19 	vmov	r2, r3, d9
 800872c:	f7f7 ff08 	bl	8000540 <__aeabi_dmul>
 8008730:	4622      	mov	r2, r4
 8008732:	462b      	mov	r3, r5
 8008734:	f7f7 fd4e 	bl	80001d4 <__adddf3>
 8008738:	4642      	mov	r2, r8
 800873a:	4682      	mov	sl, r0
 800873c:	468b      	mov	fp, r1
 800873e:	464b      	mov	r3, r9
 8008740:	4640      	mov	r0, r8
 8008742:	4649      	mov	r1, r9
 8008744:	f7f7 fefc 	bl	8000540 <__aeabi_dmul>
 8008748:	4b6b      	ldr	r3, [pc, #428]	; (80088f8 <__ieee754_pow+0x770>)
 800874a:	2200      	movs	r2, #0
 800874c:	4606      	mov	r6, r0
 800874e:	460f      	mov	r7, r1
 8008750:	f7f7 fd40 	bl	80001d4 <__adddf3>
 8008754:	4652      	mov	r2, sl
 8008756:	465b      	mov	r3, fp
 8008758:	f7f7 fd3c 	bl	80001d4 <__adddf3>
 800875c:	2000      	movs	r0, #0
 800875e:	4604      	mov	r4, r0
 8008760:	460d      	mov	r5, r1
 8008762:	4602      	mov	r2, r0
 8008764:	460b      	mov	r3, r1
 8008766:	4640      	mov	r0, r8
 8008768:	4649      	mov	r1, r9
 800876a:	f7f7 fee9 	bl	8000540 <__aeabi_dmul>
 800876e:	4b62      	ldr	r3, [pc, #392]	; (80088f8 <__ieee754_pow+0x770>)
 8008770:	4680      	mov	r8, r0
 8008772:	4689      	mov	r9, r1
 8008774:	2200      	movs	r2, #0
 8008776:	4620      	mov	r0, r4
 8008778:	4629      	mov	r1, r5
 800877a:	f7f7 fd29 	bl	80001d0 <__aeabi_dsub>
 800877e:	4632      	mov	r2, r6
 8008780:	463b      	mov	r3, r7
 8008782:	f7f7 fd25 	bl	80001d0 <__aeabi_dsub>
 8008786:	4602      	mov	r2, r0
 8008788:	460b      	mov	r3, r1
 800878a:	4650      	mov	r0, sl
 800878c:	4659      	mov	r1, fp
 800878e:	f7f7 fd1f 	bl	80001d0 <__aeabi_dsub>
 8008792:	ec53 2b18 	vmov	r2, r3, d8
 8008796:	f7f7 fed3 	bl	8000540 <__aeabi_dmul>
 800879a:	4622      	mov	r2, r4
 800879c:	4606      	mov	r6, r0
 800879e:	460f      	mov	r7, r1
 80087a0:	462b      	mov	r3, r5
 80087a2:	ec51 0b19 	vmov	r0, r1, d9
 80087a6:	f7f7 fecb 	bl	8000540 <__aeabi_dmul>
 80087aa:	4602      	mov	r2, r0
 80087ac:	460b      	mov	r3, r1
 80087ae:	4630      	mov	r0, r6
 80087b0:	4639      	mov	r1, r7
 80087b2:	f7f7 fd0f 	bl	80001d4 <__adddf3>
 80087b6:	4606      	mov	r6, r0
 80087b8:	460f      	mov	r7, r1
 80087ba:	4602      	mov	r2, r0
 80087bc:	460b      	mov	r3, r1
 80087be:	4640      	mov	r0, r8
 80087c0:	4649      	mov	r1, r9
 80087c2:	f7f7 fd07 	bl	80001d4 <__adddf3>
 80087c6:	a33e      	add	r3, pc, #248	; (adr r3, 80088c0 <__ieee754_pow+0x738>)
 80087c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087cc:	2000      	movs	r0, #0
 80087ce:	4604      	mov	r4, r0
 80087d0:	460d      	mov	r5, r1
 80087d2:	f7f7 feb5 	bl	8000540 <__aeabi_dmul>
 80087d6:	4642      	mov	r2, r8
 80087d8:	ec41 0b18 	vmov	d8, r0, r1
 80087dc:	464b      	mov	r3, r9
 80087de:	4620      	mov	r0, r4
 80087e0:	4629      	mov	r1, r5
 80087e2:	f7f7 fcf5 	bl	80001d0 <__aeabi_dsub>
 80087e6:	4602      	mov	r2, r0
 80087e8:	460b      	mov	r3, r1
 80087ea:	4630      	mov	r0, r6
 80087ec:	4639      	mov	r1, r7
 80087ee:	f7f7 fcef 	bl	80001d0 <__aeabi_dsub>
 80087f2:	a335      	add	r3, pc, #212	; (adr r3, 80088c8 <__ieee754_pow+0x740>)
 80087f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f8:	f7f7 fea2 	bl	8000540 <__aeabi_dmul>
 80087fc:	a334      	add	r3, pc, #208	; (adr r3, 80088d0 <__ieee754_pow+0x748>)
 80087fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008802:	4606      	mov	r6, r0
 8008804:	460f      	mov	r7, r1
 8008806:	4620      	mov	r0, r4
 8008808:	4629      	mov	r1, r5
 800880a:	f7f7 fe99 	bl	8000540 <__aeabi_dmul>
 800880e:	4602      	mov	r2, r0
 8008810:	460b      	mov	r3, r1
 8008812:	4630      	mov	r0, r6
 8008814:	4639      	mov	r1, r7
 8008816:	f7f7 fcdd 	bl	80001d4 <__adddf3>
 800881a:	9a07      	ldr	r2, [sp, #28]
 800881c:	4b37      	ldr	r3, [pc, #220]	; (80088fc <__ieee754_pow+0x774>)
 800881e:	4413      	add	r3, r2
 8008820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008824:	f7f7 fcd6 	bl	80001d4 <__adddf3>
 8008828:	4682      	mov	sl, r0
 800882a:	9805      	ldr	r0, [sp, #20]
 800882c:	468b      	mov	fp, r1
 800882e:	f7f7 fe1d 	bl	800046c <__aeabi_i2d>
 8008832:	9a07      	ldr	r2, [sp, #28]
 8008834:	4b32      	ldr	r3, [pc, #200]	; (8008900 <__ieee754_pow+0x778>)
 8008836:	4413      	add	r3, r2
 8008838:	e9d3 8900 	ldrd	r8, r9, [r3]
 800883c:	4606      	mov	r6, r0
 800883e:	460f      	mov	r7, r1
 8008840:	4652      	mov	r2, sl
 8008842:	465b      	mov	r3, fp
 8008844:	ec51 0b18 	vmov	r0, r1, d8
 8008848:	f7f7 fcc4 	bl	80001d4 <__adddf3>
 800884c:	4642      	mov	r2, r8
 800884e:	464b      	mov	r3, r9
 8008850:	f7f7 fcc0 	bl	80001d4 <__adddf3>
 8008854:	4632      	mov	r2, r6
 8008856:	463b      	mov	r3, r7
 8008858:	f7f7 fcbc 	bl	80001d4 <__adddf3>
 800885c:	2000      	movs	r0, #0
 800885e:	4632      	mov	r2, r6
 8008860:	463b      	mov	r3, r7
 8008862:	4604      	mov	r4, r0
 8008864:	460d      	mov	r5, r1
 8008866:	f7f7 fcb3 	bl	80001d0 <__aeabi_dsub>
 800886a:	4642      	mov	r2, r8
 800886c:	464b      	mov	r3, r9
 800886e:	f7f7 fcaf 	bl	80001d0 <__aeabi_dsub>
 8008872:	ec53 2b18 	vmov	r2, r3, d8
 8008876:	f7f7 fcab 	bl	80001d0 <__aeabi_dsub>
 800887a:	4602      	mov	r2, r0
 800887c:	460b      	mov	r3, r1
 800887e:	4650      	mov	r0, sl
 8008880:	4659      	mov	r1, fp
 8008882:	e610      	b.n	80084a6 <__ieee754_pow+0x31e>
 8008884:	2401      	movs	r4, #1
 8008886:	e6a1      	b.n	80085cc <__ieee754_pow+0x444>
 8008888:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80088d8 <__ieee754_pow+0x750>
 800888c:	e617      	b.n	80084be <__ieee754_pow+0x336>
 800888e:	bf00      	nop
 8008890:	4a454eef 	.word	0x4a454eef
 8008894:	3fca7e28 	.word	0x3fca7e28
 8008898:	93c9db65 	.word	0x93c9db65
 800889c:	3fcd864a 	.word	0x3fcd864a
 80088a0:	a91d4101 	.word	0xa91d4101
 80088a4:	3fd17460 	.word	0x3fd17460
 80088a8:	518f264d 	.word	0x518f264d
 80088ac:	3fd55555 	.word	0x3fd55555
 80088b0:	db6fabff 	.word	0xdb6fabff
 80088b4:	3fdb6db6 	.word	0x3fdb6db6
 80088b8:	33333303 	.word	0x33333303
 80088bc:	3fe33333 	.word	0x3fe33333
 80088c0:	e0000000 	.word	0xe0000000
 80088c4:	3feec709 	.word	0x3feec709
 80088c8:	dc3a03fd 	.word	0xdc3a03fd
 80088cc:	3feec709 	.word	0x3feec709
 80088d0:	145b01f5 	.word	0x145b01f5
 80088d4:	be3e2fe0 	.word	0xbe3e2fe0
 80088d8:	00000000 	.word	0x00000000
 80088dc:	3ff00000 	.word	0x3ff00000
 80088e0:	7ff00000 	.word	0x7ff00000
 80088e4:	43400000 	.word	0x43400000
 80088e8:	0003988e 	.word	0x0003988e
 80088ec:	000bb679 	.word	0x000bb679
 80088f0:	08009718 	.word	0x08009718
 80088f4:	3ff00000 	.word	0x3ff00000
 80088f8:	40080000 	.word	0x40080000
 80088fc:	08009738 	.word	0x08009738
 8008900:	08009728 	.word	0x08009728
 8008904:	a3b3      	add	r3, pc, #716	; (adr r3, 8008bd4 <__ieee754_pow+0xa4c>)
 8008906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890a:	4640      	mov	r0, r8
 800890c:	4649      	mov	r1, r9
 800890e:	f7f7 fc61 	bl	80001d4 <__adddf3>
 8008912:	4622      	mov	r2, r4
 8008914:	ec41 0b1a 	vmov	d10, r0, r1
 8008918:	462b      	mov	r3, r5
 800891a:	4630      	mov	r0, r6
 800891c:	4639      	mov	r1, r7
 800891e:	f7f7 fc57 	bl	80001d0 <__aeabi_dsub>
 8008922:	4602      	mov	r2, r0
 8008924:	460b      	mov	r3, r1
 8008926:	ec51 0b1a 	vmov	r0, r1, d10
 800892a:	f7f8 f899 	bl	8000a60 <__aeabi_dcmpgt>
 800892e:	2800      	cmp	r0, #0
 8008930:	f47f ae04 	bne.w	800853c <__ieee754_pow+0x3b4>
 8008934:	4aa2      	ldr	r2, [pc, #648]	; (8008bc0 <__ieee754_pow+0xa38>)
 8008936:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800893a:	4293      	cmp	r3, r2
 800893c:	f340 8107 	ble.w	8008b4e <__ieee754_pow+0x9c6>
 8008940:	151b      	asrs	r3, r3, #20
 8008942:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008946:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800894a:	fa4a fa03 	asr.w	sl, sl, r3
 800894e:	44da      	add	sl, fp
 8008950:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008954:	489b      	ldr	r0, [pc, #620]	; (8008bc4 <__ieee754_pow+0xa3c>)
 8008956:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800895a:	4108      	asrs	r0, r1
 800895c:	ea00 030a 	and.w	r3, r0, sl
 8008960:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008964:	f1c1 0114 	rsb	r1, r1, #20
 8008968:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800896c:	fa4a fa01 	asr.w	sl, sl, r1
 8008970:	f1bb 0f00 	cmp.w	fp, #0
 8008974:	f04f 0200 	mov.w	r2, #0
 8008978:	4620      	mov	r0, r4
 800897a:	4629      	mov	r1, r5
 800897c:	bfb8      	it	lt
 800897e:	f1ca 0a00 	rsblt	sl, sl, #0
 8008982:	f7f7 fc25 	bl	80001d0 <__aeabi_dsub>
 8008986:	ec41 0b19 	vmov	d9, r0, r1
 800898a:	4642      	mov	r2, r8
 800898c:	464b      	mov	r3, r9
 800898e:	ec51 0b19 	vmov	r0, r1, d9
 8008992:	f7f7 fc1f 	bl	80001d4 <__adddf3>
 8008996:	a37a      	add	r3, pc, #488	; (adr r3, 8008b80 <__ieee754_pow+0x9f8>)
 8008998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899c:	2000      	movs	r0, #0
 800899e:	4604      	mov	r4, r0
 80089a0:	460d      	mov	r5, r1
 80089a2:	f7f7 fdcd 	bl	8000540 <__aeabi_dmul>
 80089a6:	ec53 2b19 	vmov	r2, r3, d9
 80089aa:	4606      	mov	r6, r0
 80089ac:	460f      	mov	r7, r1
 80089ae:	4620      	mov	r0, r4
 80089b0:	4629      	mov	r1, r5
 80089b2:	f7f7 fc0d 	bl	80001d0 <__aeabi_dsub>
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	4640      	mov	r0, r8
 80089bc:	4649      	mov	r1, r9
 80089be:	f7f7 fc07 	bl	80001d0 <__aeabi_dsub>
 80089c2:	a371      	add	r3, pc, #452	; (adr r3, 8008b88 <__ieee754_pow+0xa00>)
 80089c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c8:	f7f7 fdba 	bl	8000540 <__aeabi_dmul>
 80089cc:	a370      	add	r3, pc, #448	; (adr r3, 8008b90 <__ieee754_pow+0xa08>)
 80089ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d2:	4680      	mov	r8, r0
 80089d4:	4689      	mov	r9, r1
 80089d6:	4620      	mov	r0, r4
 80089d8:	4629      	mov	r1, r5
 80089da:	f7f7 fdb1 	bl	8000540 <__aeabi_dmul>
 80089de:	4602      	mov	r2, r0
 80089e0:	460b      	mov	r3, r1
 80089e2:	4640      	mov	r0, r8
 80089e4:	4649      	mov	r1, r9
 80089e6:	f7f7 fbf5 	bl	80001d4 <__adddf3>
 80089ea:	4604      	mov	r4, r0
 80089ec:	460d      	mov	r5, r1
 80089ee:	4602      	mov	r2, r0
 80089f0:	460b      	mov	r3, r1
 80089f2:	4630      	mov	r0, r6
 80089f4:	4639      	mov	r1, r7
 80089f6:	f7f7 fbed 	bl	80001d4 <__adddf3>
 80089fa:	4632      	mov	r2, r6
 80089fc:	463b      	mov	r3, r7
 80089fe:	4680      	mov	r8, r0
 8008a00:	4689      	mov	r9, r1
 8008a02:	f7f7 fbe5 	bl	80001d0 <__aeabi_dsub>
 8008a06:	4602      	mov	r2, r0
 8008a08:	460b      	mov	r3, r1
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	f7f7 fbdf 	bl	80001d0 <__aeabi_dsub>
 8008a12:	4642      	mov	r2, r8
 8008a14:	4606      	mov	r6, r0
 8008a16:	460f      	mov	r7, r1
 8008a18:	464b      	mov	r3, r9
 8008a1a:	4640      	mov	r0, r8
 8008a1c:	4649      	mov	r1, r9
 8008a1e:	f7f7 fd8f 	bl	8000540 <__aeabi_dmul>
 8008a22:	a35d      	add	r3, pc, #372	; (adr r3, 8008b98 <__ieee754_pow+0xa10>)
 8008a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a28:	4604      	mov	r4, r0
 8008a2a:	460d      	mov	r5, r1
 8008a2c:	f7f7 fd88 	bl	8000540 <__aeabi_dmul>
 8008a30:	a35b      	add	r3, pc, #364	; (adr r3, 8008ba0 <__ieee754_pow+0xa18>)
 8008a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a36:	f7f7 fbcb 	bl	80001d0 <__aeabi_dsub>
 8008a3a:	4622      	mov	r2, r4
 8008a3c:	462b      	mov	r3, r5
 8008a3e:	f7f7 fd7f 	bl	8000540 <__aeabi_dmul>
 8008a42:	a359      	add	r3, pc, #356	; (adr r3, 8008ba8 <__ieee754_pow+0xa20>)
 8008a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a48:	f7f7 fbc4 	bl	80001d4 <__adddf3>
 8008a4c:	4622      	mov	r2, r4
 8008a4e:	462b      	mov	r3, r5
 8008a50:	f7f7 fd76 	bl	8000540 <__aeabi_dmul>
 8008a54:	a356      	add	r3, pc, #344	; (adr r3, 8008bb0 <__ieee754_pow+0xa28>)
 8008a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5a:	f7f7 fbb9 	bl	80001d0 <__aeabi_dsub>
 8008a5e:	4622      	mov	r2, r4
 8008a60:	462b      	mov	r3, r5
 8008a62:	f7f7 fd6d 	bl	8000540 <__aeabi_dmul>
 8008a66:	a354      	add	r3, pc, #336	; (adr r3, 8008bb8 <__ieee754_pow+0xa30>)
 8008a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6c:	f7f7 fbb2 	bl	80001d4 <__adddf3>
 8008a70:	4622      	mov	r2, r4
 8008a72:	462b      	mov	r3, r5
 8008a74:	f7f7 fd64 	bl	8000540 <__aeabi_dmul>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	4640      	mov	r0, r8
 8008a7e:	4649      	mov	r1, r9
 8008a80:	f7f7 fba6 	bl	80001d0 <__aeabi_dsub>
 8008a84:	4604      	mov	r4, r0
 8008a86:	460d      	mov	r5, r1
 8008a88:	4602      	mov	r2, r0
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	4640      	mov	r0, r8
 8008a8e:	4649      	mov	r1, r9
 8008a90:	f7f7 fd56 	bl	8000540 <__aeabi_dmul>
 8008a94:	2200      	movs	r2, #0
 8008a96:	ec41 0b19 	vmov	d9, r0, r1
 8008a9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	f7f7 fb95 	bl	80001d0 <__aeabi_dsub>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	ec51 0b19 	vmov	r0, r1, d9
 8008aae:	f7f7 fe71 	bl	8000794 <__aeabi_ddiv>
 8008ab2:	4632      	mov	r2, r6
 8008ab4:	4604      	mov	r4, r0
 8008ab6:	460d      	mov	r5, r1
 8008ab8:	463b      	mov	r3, r7
 8008aba:	4640      	mov	r0, r8
 8008abc:	4649      	mov	r1, r9
 8008abe:	f7f7 fd3f 	bl	8000540 <__aeabi_dmul>
 8008ac2:	4632      	mov	r2, r6
 8008ac4:	463b      	mov	r3, r7
 8008ac6:	f7f7 fb85 	bl	80001d4 <__adddf3>
 8008aca:	4602      	mov	r2, r0
 8008acc:	460b      	mov	r3, r1
 8008ace:	4620      	mov	r0, r4
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	f7f7 fb7d 	bl	80001d0 <__aeabi_dsub>
 8008ad6:	4642      	mov	r2, r8
 8008ad8:	464b      	mov	r3, r9
 8008ada:	f7f7 fb79 	bl	80001d0 <__aeabi_dsub>
 8008ade:	460b      	mov	r3, r1
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	4939      	ldr	r1, [pc, #228]	; (8008bc8 <__ieee754_pow+0xa40>)
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	f7f7 fb73 	bl	80001d0 <__aeabi_dsub>
 8008aea:	ec41 0b10 	vmov	d0, r0, r1
 8008aee:	ee10 3a90 	vmov	r3, s1
 8008af2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008afa:	da2b      	bge.n	8008b54 <__ieee754_pow+0x9cc>
 8008afc:	4650      	mov	r0, sl
 8008afe:	f000 f877 	bl	8008bf0 <scalbn>
 8008b02:	ec51 0b10 	vmov	r0, r1, d0
 8008b06:	ec53 2b18 	vmov	r2, r3, d8
 8008b0a:	f7ff bbee 	b.w	80082ea <__ieee754_pow+0x162>
 8008b0e:	4b2f      	ldr	r3, [pc, #188]	; (8008bcc <__ieee754_pow+0xa44>)
 8008b10:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008b14:	429e      	cmp	r6, r3
 8008b16:	f77f af0d 	ble.w	8008934 <__ieee754_pow+0x7ac>
 8008b1a:	4b2d      	ldr	r3, [pc, #180]	; (8008bd0 <__ieee754_pow+0xa48>)
 8008b1c:	440b      	add	r3, r1
 8008b1e:	4303      	orrs	r3, r0
 8008b20:	d009      	beq.n	8008b36 <__ieee754_pow+0x9ae>
 8008b22:	ec51 0b18 	vmov	r0, r1, d8
 8008b26:	2200      	movs	r2, #0
 8008b28:	2300      	movs	r3, #0
 8008b2a:	f7f7 ff7b 	bl	8000a24 <__aeabi_dcmplt>
 8008b2e:	3800      	subs	r0, #0
 8008b30:	bf18      	it	ne
 8008b32:	2001      	movne	r0, #1
 8008b34:	e448      	b.n	80083c8 <__ieee754_pow+0x240>
 8008b36:	4622      	mov	r2, r4
 8008b38:	462b      	mov	r3, r5
 8008b3a:	f7f7 fb49 	bl	80001d0 <__aeabi_dsub>
 8008b3e:	4642      	mov	r2, r8
 8008b40:	464b      	mov	r3, r9
 8008b42:	f7f7 ff83 	bl	8000a4c <__aeabi_dcmpge>
 8008b46:	2800      	cmp	r0, #0
 8008b48:	f43f aef4 	beq.w	8008934 <__ieee754_pow+0x7ac>
 8008b4c:	e7e9      	b.n	8008b22 <__ieee754_pow+0x99a>
 8008b4e:	f04f 0a00 	mov.w	sl, #0
 8008b52:	e71a      	b.n	800898a <__ieee754_pow+0x802>
 8008b54:	ec51 0b10 	vmov	r0, r1, d0
 8008b58:	4619      	mov	r1, r3
 8008b5a:	e7d4      	b.n	8008b06 <__ieee754_pow+0x97e>
 8008b5c:	491a      	ldr	r1, [pc, #104]	; (8008bc8 <__ieee754_pow+0xa40>)
 8008b5e:	2000      	movs	r0, #0
 8008b60:	f7ff bb31 	b.w	80081c6 <__ieee754_pow+0x3e>
 8008b64:	2000      	movs	r0, #0
 8008b66:	2100      	movs	r1, #0
 8008b68:	f7ff bb2d 	b.w	80081c6 <__ieee754_pow+0x3e>
 8008b6c:	4630      	mov	r0, r6
 8008b6e:	4639      	mov	r1, r7
 8008b70:	f7ff bb29 	b.w	80081c6 <__ieee754_pow+0x3e>
 8008b74:	9204      	str	r2, [sp, #16]
 8008b76:	f7ff bb7b 	b.w	8008270 <__ieee754_pow+0xe8>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	f7ff bb65 	b.w	800824a <__ieee754_pow+0xc2>
 8008b80:	00000000 	.word	0x00000000
 8008b84:	3fe62e43 	.word	0x3fe62e43
 8008b88:	fefa39ef 	.word	0xfefa39ef
 8008b8c:	3fe62e42 	.word	0x3fe62e42
 8008b90:	0ca86c39 	.word	0x0ca86c39
 8008b94:	be205c61 	.word	0xbe205c61
 8008b98:	72bea4d0 	.word	0x72bea4d0
 8008b9c:	3e663769 	.word	0x3e663769
 8008ba0:	c5d26bf1 	.word	0xc5d26bf1
 8008ba4:	3ebbbd41 	.word	0x3ebbbd41
 8008ba8:	af25de2c 	.word	0xaf25de2c
 8008bac:	3f11566a 	.word	0x3f11566a
 8008bb0:	16bebd93 	.word	0x16bebd93
 8008bb4:	3f66c16c 	.word	0x3f66c16c
 8008bb8:	5555553e 	.word	0x5555553e
 8008bbc:	3fc55555 	.word	0x3fc55555
 8008bc0:	3fe00000 	.word	0x3fe00000
 8008bc4:	fff00000 	.word	0xfff00000
 8008bc8:	3ff00000 	.word	0x3ff00000
 8008bcc:	4090cbff 	.word	0x4090cbff
 8008bd0:	3f6f3400 	.word	0x3f6f3400
 8008bd4:	652b82fe 	.word	0x652b82fe
 8008bd8:	3c971547 	.word	0x3c971547

08008bdc <fabs>:
 8008bdc:	ec51 0b10 	vmov	r0, r1, d0
 8008be0:	ee10 2a10 	vmov	r2, s0
 8008be4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008be8:	ec43 2b10 	vmov	d0, r2, r3
 8008bec:	4770      	bx	lr
	...

08008bf0 <scalbn>:
 8008bf0:	b570      	push	{r4, r5, r6, lr}
 8008bf2:	ec55 4b10 	vmov	r4, r5, d0
 8008bf6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008bfa:	4606      	mov	r6, r0
 8008bfc:	462b      	mov	r3, r5
 8008bfe:	b999      	cbnz	r1, 8008c28 <scalbn+0x38>
 8008c00:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008c04:	4323      	orrs	r3, r4
 8008c06:	d03f      	beq.n	8008c88 <scalbn+0x98>
 8008c08:	4b35      	ldr	r3, [pc, #212]	; (8008ce0 <scalbn+0xf0>)
 8008c0a:	4629      	mov	r1, r5
 8008c0c:	ee10 0a10 	vmov	r0, s0
 8008c10:	2200      	movs	r2, #0
 8008c12:	f7f7 fc95 	bl	8000540 <__aeabi_dmul>
 8008c16:	4b33      	ldr	r3, [pc, #204]	; (8008ce4 <scalbn+0xf4>)
 8008c18:	429e      	cmp	r6, r3
 8008c1a:	4604      	mov	r4, r0
 8008c1c:	460d      	mov	r5, r1
 8008c1e:	da10      	bge.n	8008c42 <scalbn+0x52>
 8008c20:	a327      	add	r3, pc, #156	; (adr r3, 8008cc0 <scalbn+0xd0>)
 8008c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c26:	e01f      	b.n	8008c68 <scalbn+0x78>
 8008c28:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008c2c:	4291      	cmp	r1, r2
 8008c2e:	d10c      	bne.n	8008c4a <scalbn+0x5a>
 8008c30:	ee10 2a10 	vmov	r2, s0
 8008c34:	4620      	mov	r0, r4
 8008c36:	4629      	mov	r1, r5
 8008c38:	f7f7 facc 	bl	80001d4 <__adddf3>
 8008c3c:	4604      	mov	r4, r0
 8008c3e:	460d      	mov	r5, r1
 8008c40:	e022      	b.n	8008c88 <scalbn+0x98>
 8008c42:	460b      	mov	r3, r1
 8008c44:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008c48:	3936      	subs	r1, #54	; 0x36
 8008c4a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008c4e:	4296      	cmp	r6, r2
 8008c50:	dd0d      	ble.n	8008c6e <scalbn+0x7e>
 8008c52:	2d00      	cmp	r5, #0
 8008c54:	a11c      	add	r1, pc, #112	; (adr r1, 8008cc8 <scalbn+0xd8>)
 8008c56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c5a:	da02      	bge.n	8008c62 <scalbn+0x72>
 8008c5c:	a11c      	add	r1, pc, #112	; (adr r1, 8008cd0 <scalbn+0xe0>)
 8008c5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c62:	a319      	add	r3, pc, #100	; (adr r3, 8008cc8 <scalbn+0xd8>)
 8008c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c68:	f7f7 fc6a 	bl	8000540 <__aeabi_dmul>
 8008c6c:	e7e6      	b.n	8008c3c <scalbn+0x4c>
 8008c6e:	1872      	adds	r2, r6, r1
 8008c70:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008c74:	428a      	cmp	r2, r1
 8008c76:	dcec      	bgt.n	8008c52 <scalbn+0x62>
 8008c78:	2a00      	cmp	r2, #0
 8008c7a:	dd08      	ble.n	8008c8e <scalbn+0x9e>
 8008c7c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008c80:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008c84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008c88:	ec45 4b10 	vmov	d0, r4, r5
 8008c8c:	bd70      	pop	{r4, r5, r6, pc}
 8008c8e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008c92:	da08      	bge.n	8008ca6 <scalbn+0xb6>
 8008c94:	2d00      	cmp	r5, #0
 8008c96:	a10a      	add	r1, pc, #40	; (adr r1, 8008cc0 <scalbn+0xd0>)
 8008c98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c9c:	dac0      	bge.n	8008c20 <scalbn+0x30>
 8008c9e:	a10e      	add	r1, pc, #56	; (adr r1, 8008cd8 <scalbn+0xe8>)
 8008ca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ca4:	e7bc      	b.n	8008c20 <scalbn+0x30>
 8008ca6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008caa:	3236      	adds	r2, #54	; 0x36
 8008cac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008cb0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	4b0c      	ldr	r3, [pc, #48]	; (8008ce8 <scalbn+0xf8>)
 8008cb8:	2200      	movs	r2, #0
 8008cba:	e7d5      	b.n	8008c68 <scalbn+0x78>
 8008cbc:	f3af 8000 	nop.w
 8008cc0:	c2f8f359 	.word	0xc2f8f359
 8008cc4:	01a56e1f 	.word	0x01a56e1f
 8008cc8:	8800759c 	.word	0x8800759c
 8008ccc:	7e37e43c 	.word	0x7e37e43c
 8008cd0:	8800759c 	.word	0x8800759c
 8008cd4:	fe37e43c 	.word	0xfe37e43c
 8008cd8:	c2f8f359 	.word	0xc2f8f359
 8008cdc:	81a56e1f 	.word	0x81a56e1f
 8008ce0:	43500000 	.word	0x43500000
 8008ce4:	ffff3cb0 	.word	0xffff3cb0
 8008ce8:	3c900000 	.word	0x3c900000

08008cec <with_errno>:
 8008cec:	b570      	push	{r4, r5, r6, lr}
 8008cee:	4604      	mov	r4, r0
 8008cf0:	460d      	mov	r5, r1
 8008cf2:	4616      	mov	r6, r2
 8008cf4:	f7ff f8fa 	bl	8007eec <__errno>
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	6006      	str	r6, [r0, #0]
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	bd70      	pop	{r4, r5, r6, pc}

08008d00 <xflow>:
 8008d00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d02:	4614      	mov	r4, r2
 8008d04:	461d      	mov	r5, r3
 8008d06:	b108      	cbz	r0, 8008d0c <xflow+0xc>
 8008d08:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008d0c:	e9cd 2300 	strd	r2, r3, [sp]
 8008d10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d14:	4620      	mov	r0, r4
 8008d16:	4629      	mov	r1, r5
 8008d18:	f7f7 fc12 	bl	8000540 <__aeabi_dmul>
 8008d1c:	2222      	movs	r2, #34	; 0x22
 8008d1e:	b003      	add	sp, #12
 8008d20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d24:	f7ff bfe2 	b.w	8008cec <with_errno>

08008d28 <__math_uflow>:
 8008d28:	b508      	push	{r3, lr}
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008d30:	f7ff ffe6 	bl	8008d00 <xflow>
 8008d34:	ec41 0b10 	vmov	d0, r0, r1
 8008d38:	bd08      	pop	{r3, pc}

08008d3a <__math_oflow>:
 8008d3a:	b508      	push	{r3, lr}
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008d42:	f7ff ffdd 	bl	8008d00 <xflow>
 8008d46:	ec41 0b10 	vmov	d0, r0, r1
 8008d4a:	bd08      	pop	{r3, pc}

08008d4c <__ieee754_sqrt>:
 8008d4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d50:	ec55 4b10 	vmov	r4, r5, d0
 8008d54:	4e67      	ldr	r6, [pc, #412]	; (8008ef4 <__ieee754_sqrt+0x1a8>)
 8008d56:	43ae      	bics	r6, r5
 8008d58:	ee10 0a10 	vmov	r0, s0
 8008d5c:	ee10 2a10 	vmov	r2, s0
 8008d60:	4629      	mov	r1, r5
 8008d62:	462b      	mov	r3, r5
 8008d64:	d10d      	bne.n	8008d82 <__ieee754_sqrt+0x36>
 8008d66:	f7f7 fbeb 	bl	8000540 <__aeabi_dmul>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	4620      	mov	r0, r4
 8008d70:	4629      	mov	r1, r5
 8008d72:	f7f7 fa2f 	bl	80001d4 <__adddf3>
 8008d76:	4604      	mov	r4, r0
 8008d78:	460d      	mov	r5, r1
 8008d7a:	ec45 4b10 	vmov	d0, r4, r5
 8008d7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d82:	2d00      	cmp	r5, #0
 8008d84:	dc0b      	bgt.n	8008d9e <__ieee754_sqrt+0x52>
 8008d86:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008d8a:	4326      	orrs	r6, r4
 8008d8c:	d0f5      	beq.n	8008d7a <__ieee754_sqrt+0x2e>
 8008d8e:	b135      	cbz	r5, 8008d9e <__ieee754_sqrt+0x52>
 8008d90:	f7f7 fa1e 	bl	80001d0 <__aeabi_dsub>
 8008d94:	4602      	mov	r2, r0
 8008d96:	460b      	mov	r3, r1
 8008d98:	f7f7 fcfc 	bl	8000794 <__aeabi_ddiv>
 8008d9c:	e7eb      	b.n	8008d76 <__ieee754_sqrt+0x2a>
 8008d9e:	1509      	asrs	r1, r1, #20
 8008da0:	f000 808d 	beq.w	8008ebe <__ieee754_sqrt+0x172>
 8008da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008da8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8008dac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008db0:	07c9      	lsls	r1, r1, #31
 8008db2:	bf5c      	itt	pl
 8008db4:	005b      	lslpl	r3, r3, #1
 8008db6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8008dba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008dbe:	bf58      	it	pl
 8008dc0:	0052      	lslpl	r2, r2, #1
 8008dc2:	2500      	movs	r5, #0
 8008dc4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008dc8:	1076      	asrs	r6, r6, #1
 8008dca:	0052      	lsls	r2, r2, #1
 8008dcc:	f04f 0e16 	mov.w	lr, #22
 8008dd0:	46ac      	mov	ip, r5
 8008dd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008dd6:	eb0c 0001 	add.w	r0, ip, r1
 8008dda:	4298      	cmp	r0, r3
 8008ddc:	bfde      	ittt	le
 8008dde:	1a1b      	suble	r3, r3, r0
 8008de0:	eb00 0c01 	addle.w	ip, r0, r1
 8008de4:	186d      	addle	r5, r5, r1
 8008de6:	005b      	lsls	r3, r3, #1
 8008de8:	f1be 0e01 	subs.w	lr, lr, #1
 8008dec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008df0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008df4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008df8:	d1ed      	bne.n	8008dd6 <__ieee754_sqrt+0x8a>
 8008dfa:	4674      	mov	r4, lr
 8008dfc:	2720      	movs	r7, #32
 8008dfe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008e02:	4563      	cmp	r3, ip
 8008e04:	eb01 000e 	add.w	r0, r1, lr
 8008e08:	dc02      	bgt.n	8008e10 <__ieee754_sqrt+0xc4>
 8008e0a:	d113      	bne.n	8008e34 <__ieee754_sqrt+0xe8>
 8008e0c:	4290      	cmp	r0, r2
 8008e0e:	d811      	bhi.n	8008e34 <__ieee754_sqrt+0xe8>
 8008e10:	2800      	cmp	r0, #0
 8008e12:	eb00 0e01 	add.w	lr, r0, r1
 8008e16:	da57      	bge.n	8008ec8 <__ieee754_sqrt+0x17c>
 8008e18:	f1be 0f00 	cmp.w	lr, #0
 8008e1c:	db54      	blt.n	8008ec8 <__ieee754_sqrt+0x17c>
 8008e1e:	f10c 0801 	add.w	r8, ip, #1
 8008e22:	eba3 030c 	sub.w	r3, r3, ip
 8008e26:	4290      	cmp	r0, r2
 8008e28:	bf88      	it	hi
 8008e2a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008e2e:	1a12      	subs	r2, r2, r0
 8008e30:	440c      	add	r4, r1
 8008e32:	46c4      	mov	ip, r8
 8008e34:	005b      	lsls	r3, r3, #1
 8008e36:	3f01      	subs	r7, #1
 8008e38:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008e3c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008e40:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008e44:	d1dd      	bne.n	8008e02 <__ieee754_sqrt+0xb6>
 8008e46:	4313      	orrs	r3, r2
 8008e48:	d01b      	beq.n	8008e82 <__ieee754_sqrt+0x136>
 8008e4a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008ef8 <__ieee754_sqrt+0x1ac>
 8008e4e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008efc <__ieee754_sqrt+0x1b0>
 8008e52:	e9da 0100 	ldrd	r0, r1, [sl]
 8008e56:	e9db 2300 	ldrd	r2, r3, [fp]
 8008e5a:	f7f7 f9b9 	bl	80001d0 <__aeabi_dsub>
 8008e5e:	e9da 8900 	ldrd	r8, r9, [sl]
 8008e62:	4602      	mov	r2, r0
 8008e64:	460b      	mov	r3, r1
 8008e66:	4640      	mov	r0, r8
 8008e68:	4649      	mov	r1, r9
 8008e6a:	f7f7 fde5 	bl	8000a38 <__aeabi_dcmple>
 8008e6e:	b140      	cbz	r0, 8008e82 <__ieee754_sqrt+0x136>
 8008e70:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008e74:	e9da 0100 	ldrd	r0, r1, [sl]
 8008e78:	e9db 2300 	ldrd	r2, r3, [fp]
 8008e7c:	d126      	bne.n	8008ecc <__ieee754_sqrt+0x180>
 8008e7e:	3501      	adds	r5, #1
 8008e80:	463c      	mov	r4, r7
 8008e82:	106a      	asrs	r2, r5, #1
 8008e84:	0863      	lsrs	r3, r4, #1
 8008e86:	07e9      	lsls	r1, r5, #31
 8008e88:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008e8c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008e90:	bf48      	it	mi
 8008e92:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008e96:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8008e9a:	461c      	mov	r4, r3
 8008e9c:	e76d      	b.n	8008d7a <__ieee754_sqrt+0x2e>
 8008e9e:	0ad3      	lsrs	r3, r2, #11
 8008ea0:	3815      	subs	r0, #21
 8008ea2:	0552      	lsls	r2, r2, #21
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d0fa      	beq.n	8008e9e <__ieee754_sqrt+0x152>
 8008ea8:	02dc      	lsls	r4, r3, #11
 8008eaa:	d50a      	bpl.n	8008ec2 <__ieee754_sqrt+0x176>
 8008eac:	f1c1 0420 	rsb	r4, r1, #32
 8008eb0:	fa22 f404 	lsr.w	r4, r2, r4
 8008eb4:	1e4d      	subs	r5, r1, #1
 8008eb6:	408a      	lsls	r2, r1
 8008eb8:	4323      	orrs	r3, r4
 8008eba:	1b41      	subs	r1, r0, r5
 8008ebc:	e772      	b.n	8008da4 <__ieee754_sqrt+0x58>
 8008ebe:	4608      	mov	r0, r1
 8008ec0:	e7f0      	b.n	8008ea4 <__ieee754_sqrt+0x158>
 8008ec2:	005b      	lsls	r3, r3, #1
 8008ec4:	3101      	adds	r1, #1
 8008ec6:	e7ef      	b.n	8008ea8 <__ieee754_sqrt+0x15c>
 8008ec8:	46e0      	mov	r8, ip
 8008eca:	e7aa      	b.n	8008e22 <__ieee754_sqrt+0xd6>
 8008ecc:	f7f7 f982 	bl	80001d4 <__adddf3>
 8008ed0:	e9da 8900 	ldrd	r8, r9, [sl]
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	4640      	mov	r0, r8
 8008eda:	4649      	mov	r1, r9
 8008edc:	f7f7 fda2 	bl	8000a24 <__aeabi_dcmplt>
 8008ee0:	b120      	cbz	r0, 8008eec <__ieee754_sqrt+0x1a0>
 8008ee2:	1ca0      	adds	r0, r4, #2
 8008ee4:	bf08      	it	eq
 8008ee6:	3501      	addeq	r5, #1
 8008ee8:	3402      	adds	r4, #2
 8008eea:	e7ca      	b.n	8008e82 <__ieee754_sqrt+0x136>
 8008eec:	3401      	adds	r4, #1
 8008eee:	f024 0401 	bic.w	r4, r4, #1
 8008ef2:	e7c6      	b.n	8008e82 <__ieee754_sqrt+0x136>
 8008ef4:	7ff00000 	.word	0x7ff00000
 8008ef8:	200000c8 	.word	0x200000c8
 8008efc:	200000d0 	.word	0x200000d0

08008f00 <_init>:
 8008f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f02:	bf00      	nop
 8008f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f06:	bc08      	pop	{r3}
 8008f08:	469e      	mov	lr, r3
 8008f0a:	4770      	bx	lr

08008f0c <_fini>:
 8008f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0e:	bf00      	nop
 8008f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f12:	bc08      	pop	{r3}
 8008f14:	469e      	mov	lr, r3
 8008f16:	4770      	bx	lr
