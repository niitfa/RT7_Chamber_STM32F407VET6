
RT7_Chamber.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c78  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000848  08008e00  08008e00  00018e00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009648  08009648  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009648  08009648  00019648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009650  08009650  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009650  08009650  00019650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009654  08009654  00019654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08009658  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d8  2**0
                  CONTENTS
 10 .bss          00000a64  200000d8  200000d8  000200d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000b3c  20000b3c  000200d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001912f  00000000  00000000  0002014b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000045f5  00000000  00000000  0003927a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001640  00000000  00000000  0003d870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010f1  00000000  00000000  0003eeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000254e9  00000000  00000000  0003ffa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e15a  00000000  00000000  0006548a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d3bf4  00000000  00000000  000835e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000063e0  00000000  00000000  001571d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0015d5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000d8 	.word	0x200000d8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008de8 	.word	0x08008de8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000dc 	.word	0x200000dc
 80001c4:	08008de8 	.word	0x08008de8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_uldivmod>:
 8000b30:	b953      	cbnz	r3, 8000b48 <__aeabi_uldivmod+0x18>
 8000b32:	b94a      	cbnz	r2, 8000b48 <__aeabi_uldivmod+0x18>
 8000b34:	2900      	cmp	r1, #0
 8000b36:	bf08      	it	eq
 8000b38:	2800      	cmpeq	r0, #0
 8000b3a:	bf1c      	itt	ne
 8000b3c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b40:	f04f 30ff 	movne.w	r0, #4294967295
 8000b44:	f000 b9a6 	b.w	8000e94 <__aeabi_idiv0>
 8000b48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b50:	f000 f83c 	bl	8000bcc <__udivmoddi4>
 8000b54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b5c:	b004      	add	sp, #16
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2lz>:
 8000b60:	b538      	push	{r3, r4, r5, lr}
 8000b62:	2200      	movs	r2, #0
 8000b64:	2300      	movs	r3, #0
 8000b66:	4604      	mov	r4, r0
 8000b68:	460d      	mov	r5, r1
 8000b6a:	f7ff ff5b 	bl	8000a24 <__aeabi_dcmplt>
 8000b6e:	b928      	cbnz	r0, 8000b7c <__aeabi_d2lz+0x1c>
 8000b70:	4620      	mov	r0, r4
 8000b72:	4629      	mov	r1, r5
 8000b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b78:	f000 b80a 	b.w	8000b90 <__aeabi_d2ulz>
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000b82:	f000 f805 	bl	8000b90 <__aeabi_d2ulz>
 8000b86:	4240      	negs	r0, r0
 8000b88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b8c:	bd38      	pop	{r3, r4, r5, pc}
 8000b8e:	bf00      	nop

08000b90 <__aeabi_d2ulz>:
 8000b90:	b5d0      	push	{r4, r6, r7, lr}
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <__aeabi_d2ulz+0x34>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	4606      	mov	r6, r0
 8000b98:	460f      	mov	r7, r1
 8000b9a:	f7ff fcd1 	bl	8000540 <__aeabi_dmul>
 8000b9e:	f7ff ffa7 	bl	8000af0 <__aeabi_d2uiz>
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	f7ff fc52 	bl	800044c <__aeabi_ui2d>
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <__aeabi_d2ulz+0x38>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	f7ff fcc8 	bl	8000540 <__aeabi_dmul>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	4630      	mov	r0, r6
 8000bb6:	4639      	mov	r1, r7
 8000bb8:	f7ff fb0a 	bl	80001d0 <__aeabi_dsub>
 8000bbc:	f7ff ff98 	bl	8000af0 <__aeabi_d2uiz>
 8000bc0:	4621      	mov	r1, r4
 8000bc2:	bdd0      	pop	{r4, r6, r7, pc}
 8000bc4:	3df00000 	.word	0x3df00000
 8000bc8:	41f00000 	.word	0x41f00000

08000bcc <__udivmoddi4>:
 8000bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd0:	9e08      	ldr	r6, [sp, #32]
 8000bd2:	460d      	mov	r5, r1
 8000bd4:	4604      	mov	r4, r0
 8000bd6:	460f      	mov	r7, r1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d14a      	bne.n	8000c72 <__udivmoddi4+0xa6>
 8000bdc:	428a      	cmp	r2, r1
 8000bde:	4694      	mov	ip, r2
 8000be0:	d965      	bls.n	8000cae <__udivmoddi4+0xe2>
 8000be2:	fab2 f382 	clz	r3, r2
 8000be6:	b143      	cbz	r3, 8000bfa <__udivmoddi4+0x2e>
 8000be8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bec:	f1c3 0220 	rsb	r2, r3, #32
 8000bf0:	409f      	lsls	r7, r3
 8000bf2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bf6:	4317      	orrs	r7, r2
 8000bf8:	409c      	lsls	r4, r3
 8000bfa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bfe:	fa1f f58c 	uxth.w	r5, ip
 8000c02:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c06:	0c22      	lsrs	r2, r4, #16
 8000c08:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c0c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c10:	fb01 f005 	mul.w	r0, r1, r5
 8000c14:	4290      	cmp	r0, r2
 8000c16:	d90a      	bls.n	8000c2e <__udivmoddi4+0x62>
 8000c18:	eb1c 0202 	adds.w	r2, ip, r2
 8000c1c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c20:	f080 811c 	bcs.w	8000e5c <__udivmoddi4+0x290>
 8000c24:	4290      	cmp	r0, r2
 8000c26:	f240 8119 	bls.w	8000e5c <__udivmoddi4+0x290>
 8000c2a:	3902      	subs	r1, #2
 8000c2c:	4462      	add	r2, ip
 8000c2e:	1a12      	subs	r2, r2, r0
 8000c30:	b2a4      	uxth	r4, r4
 8000c32:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c36:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c3a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c3e:	fb00 f505 	mul.w	r5, r0, r5
 8000c42:	42a5      	cmp	r5, r4
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x90>
 8000c46:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c4e:	f080 8107 	bcs.w	8000e60 <__udivmoddi4+0x294>
 8000c52:	42a5      	cmp	r5, r4
 8000c54:	f240 8104 	bls.w	8000e60 <__udivmoddi4+0x294>
 8000c58:	4464      	add	r4, ip
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c60:	1b64      	subs	r4, r4, r5
 8000c62:	2100      	movs	r1, #0
 8000c64:	b11e      	cbz	r6, 8000c6e <__udivmoddi4+0xa2>
 8000c66:	40dc      	lsrs	r4, r3
 8000c68:	2300      	movs	r3, #0
 8000c6a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0xbc>
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	f000 80ed 	beq.w	8000e56 <__udivmoddi4+0x28a>
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c82:	4608      	mov	r0, r1
 8000c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c88:	fab3 f183 	clz	r1, r3
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	d149      	bne.n	8000d24 <__udivmoddi4+0x158>
 8000c90:	42ab      	cmp	r3, r5
 8000c92:	d302      	bcc.n	8000c9a <__udivmoddi4+0xce>
 8000c94:	4282      	cmp	r2, r0
 8000c96:	f200 80f8 	bhi.w	8000e8a <__udivmoddi4+0x2be>
 8000c9a:	1a84      	subs	r4, r0, r2
 8000c9c:	eb65 0203 	sbc.w	r2, r5, r3
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	4617      	mov	r7, r2
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	d0e2      	beq.n	8000c6e <__udivmoddi4+0xa2>
 8000ca8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cac:	e7df      	b.n	8000c6e <__udivmoddi4+0xa2>
 8000cae:	b902      	cbnz	r2, 8000cb2 <__udivmoddi4+0xe6>
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	fab2 f382 	clz	r3, r2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x210>
 8000cbc:	1a8a      	subs	r2, r1, r2
 8000cbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc2:	fa1f fe8c 	uxth.w	lr, ip
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ccc:	fb07 2015 	mls	r0, r7, r5, r2
 8000cd0:	0c22      	lsrs	r2, r4, #16
 8000cd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cd6:	fb0e f005 	mul.w	r0, lr, r5
 8000cda:	4290      	cmp	r0, r2
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x124>
 8000cde:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x122>
 8000ce8:	4290      	cmp	r0, r2
 8000cea:	f200 80cb 	bhi.w	8000e84 <__udivmoddi4+0x2b8>
 8000cee:	4645      	mov	r5, r8
 8000cf0:	1a12      	subs	r2, r2, r0
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cf8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d00:	fb0e fe00 	mul.w	lr, lr, r0
 8000d04:	45a6      	cmp	lr, r4
 8000d06:	d908      	bls.n	8000d1a <__udivmoddi4+0x14e>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d10:	d202      	bcs.n	8000d18 <__udivmoddi4+0x14c>
 8000d12:	45a6      	cmp	lr, r4
 8000d14:	f200 80bb 	bhi.w	8000e8e <__udivmoddi4+0x2c2>
 8000d18:	4610      	mov	r0, r2
 8000d1a:	eba4 040e 	sub.w	r4, r4, lr
 8000d1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d22:	e79f      	b.n	8000c64 <__udivmoddi4+0x98>
 8000d24:	f1c1 0720 	rsb	r7, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d32:	fa05 f401 	lsl.w	r4, r5, r1
 8000d36:	fa20 f307 	lsr.w	r3, r0, r7
 8000d3a:	40fd      	lsrs	r5, r7
 8000d3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d54:	fb08 f50e 	mul.w	r5, r8, lr
 8000d58:	42a5      	cmp	r5, r4
 8000d5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d62:	d90b      	bls.n	8000d7c <__udivmoddi4+0x1b0>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d6c:	f080 8088 	bcs.w	8000e80 <__udivmoddi4+0x2b4>
 8000d70:	42a5      	cmp	r5, r4
 8000d72:	f240 8085 	bls.w	8000e80 <__udivmoddi4+0x2b4>
 8000d76:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7a:	4464      	add	r4, ip
 8000d7c:	1b64      	subs	r4, r4, r5
 8000d7e:	b29d      	uxth	r5, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1da>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d9c:	d26c      	bcs.n	8000e78 <__udivmoddi4+0x2ac>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	d96a      	bls.n	8000e78 <__udivmoddi4+0x2ac>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	4464      	add	r4, ip
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fba3 9502 	umull	r9, r5, r3, r2
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	42ac      	cmp	r4, r5
 8000db4:	46c8      	mov	r8, r9
 8000db6:	46ae      	mov	lr, r5
 8000db8:	d356      	bcc.n	8000e68 <__udivmoddi4+0x29c>
 8000dba:	d053      	beq.n	8000e64 <__udivmoddi4+0x298>
 8000dbc:	b156      	cbz	r6, 8000dd4 <__udivmoddi4+0x208>
 8000dbe:	ebb0 0208 	subs.w	r2, r0, r8
 8000dc2:	eb64 040e 	sbc.w	r4, r4, lr
 8000dc6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dca:	40ca      	lsrs	r2, r1
 8000dcc:	40cc      	lsrs	r4, r1
 8000dce:	4317      	orrs	r7, r2
 8000dd0:	e9c6 7400 	strd	r7, r4, [r6]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ddc:	f1c3 0120 	rsb	r1, r3, #32
 8000de0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000de4:	fa20 f201 	lsr.w	r2, r0, r1
 8000de8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dec:	409d      	lsls	r5, r3
 8000dee:	432a      	orrs	r2, r5
 8000df0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df4:	fa1f fe8c 	uxth.w	lr, ip
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1510 	mls	r5, r7, r0, r1
 8000e00:	0c11      	lsrs	r1, r2, #16
 8000e02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e06:	fb00 f50e 	mul.w	r5, r0, lr
 8000e0a:	428d      	cmp	r5, r1
 8000e0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x258>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e1a:	d22f      	bcs.n	8000e7c <__udivmoddi4+0x2b0>
 8000e1c:	428d      	cmp	r5, r1
 8000e1e:	d92d      	bls.n	8000e7c <__udivmoddi4+0x2b0>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4461      	add	r1, ip
 8000e24:	1b49      	subs	r1, r1, r5
 8000e26:	b292      	uxth	r2, r2
 8000e28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e34:	fb05 f10e 	mul.w	r1, r5, lr
 8000e38:	4291      	cmp	r1, r2
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x282>
 8000e3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e40:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e44:	d216      	bcs.n	8000e74 <__udivmoddi4+0x2a8>
 8000e46:	4291      	cmp	r1, r2
 8000e48:	d914      	bls.n	8000e74 <__udivmoddi4+0x2a8>
 8000e4a:	3d02      	subs	r5, #2
 8000e4c:	4462      	add	r2, ip
 8000e4e:	1a52      	subs	r2, r2, r1
 8000e50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e54:	e738      	b.n	8000cc8 <__udivmoddi4+0xfc>
 8000e56:	4631      	mov	r1, r6
 8000e58:	4630      	mov	r0, r6
 8000e5a:	e708      	b.n	8000c6e <__udivmoddi4+0xa2>
 8000e5c:	4639      	mov	r1, r7
 8000e5e:	e6e6      	b.n	8000c2e <__udivmoddi4+0x62>
 8000e60:	4610      	mov	r0, r2
 8000e62:	e6fb      	b.n	8000c5c <__udivmoddi4+0x90>
 8000e64:	4548      	cmp	r0, r9
 8000e66:	d2a9      	bcs.n	8000dbc <__udivmoddi4+0x1f0>
 8000e68:	ebb9 0802 	subs.w	r8, r9, r2
 8000e6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e70:	3b01      	subs	r3, #1
 8000e72:	e7a3      	b.n	8000dbc <__udivmoddi4+0x1f0>
 8000e74:	4645      	mov	r5, r8
 8000e76:	e7ea      	b.n	8000e4e <__udivmoddi4+0x282>
 8000e78:	462b      	mov	r3, r5
 8000e7a:	e794      	b.n	8000da6 <__udivmoddi4+0x1da>
 8000e7c:	4640      	mov	r0, r8
 8000e7e:	e7d1      	b.n	8000e24 <__udivmoddi4+0x258>
 8000e80:	46d0      	mov	r8, sl
 8000e82:	e77b      	b.n	8000d7c <__udivmoddi4+0x1b0>
 8000e84:	3d02      	subs	r5, #2
 8000e86:	4462      	add	r2, ip
 8000e88:	e732      	b.n	8000cf0 <__udivmoddi4+0x124>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e70a      	b.n	8000ca4 <__udivmoddi4+0xd8>
 8000e8e:	4464      	add	r4, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e742      	b.n	8000d1a <__udivmoddi4+0x14e>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <adc_init>:


#include "adc.h"

void adc_init(adc_t* self)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	self->vtable->init(self);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	4798      	blx	r3
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <adc_update>:

void adc_update(adc_t* self, void* option)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	6039      	str	r1, [r7, #0]
	self->vtable->update(self, option);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	6839      	ldr	r1, [r7, #0]
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	4798      	blx	r3
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <adc_get_cnt>:

uint32_t adc_get_cnt(adc_t* self)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	return self->vtable->get_cnt(self);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	4798      	blx	r3
 8000ee2:	4603      	mov	r3, r0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <adc_get_vout>:

double adc_get_vout(adc_t* self)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	return self->vtable->get_vout(self);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	4798      	blx	r3
 8000efe:	eeb0 7a40 	vmov.f32	s14, s0
 8000f02:	eef0 7a60 	vmov.f32	s15, s1
}
 8000f06:	eeb0 0a47 	vmov.f32	s0, s14
 8000f0a:	eef0 0a67 	vmov.f32	s1, s15
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <init>:
	uint8_t FR_word;
	uint8_t MR_word;
};

static void init(adc_t* self)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	spi_select(self);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f939 	bl	8001194 <spi_select>
	spi_hw_command(self, 0x20); // write to filter register
 8000f22:	2120      	movs	r1, #32
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 f959 	bl	80011dc <spi_hw_command>
	spi_hw_command(self, self->data->FR_word);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f32:	4619      	mov	r1, r3
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f000 f951 	bl	80011dc <spi_hw_command>
	spi_deselect(self);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 f93c 	bl	80011b8 <spi_deselect>
	HAL_Delay(10);
 8000f40:	200a      	movs	r0, #10
 8000f42:	f004 f8fd 	bl	8005140 <HAL_Delay>


	spi_select(self);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 f924 	bl	8001194 <spi_select>
	spi_hw_command(self, 0x10); // write to mode register
 8000f4c:	2110      	movs	r1, #16
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 f944 	bl	80011dc <spi_hw_command>
	spi_hw_command(self, self->data->MR_word);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 f93c 	bl	80011dc <spi_hw_command>
	spi_deselect(self);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f000 f927 	bl	80011b8 <spi_deselect>
	HAL_Delay(10);
 8000f6a:	200a      	movs	r0, #10
 8000f6c:	f004 f8e8 	bl	8005140 <HAL_Delay>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <update>:

static void update(adc_t* self, void* option)
{
 8000f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f7c:	b087      	sub	sp, #28
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
 8000f84:	466b      	mov	r3, sp
 8000f86:	461e      	mov	r6, r3
	const uint8_t kDataSizeBytes = 3;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	74fb      	strb	r3, [r7, #19]
	const uint8_t kBufferSizeBytes = 4;
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	74bb      	strb	r3, [r7, #18]

	uint8_t rxBytes [kBufferSizeBytes];
 8000f90:	7cbb      	ldrb	r3, [r7, #18]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	7cbb      	ldrb	r3, [r7, #18]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	4698      	mov	r8, r3
 8000f9c:	4691      	mov	r9, r2
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000faa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000fae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000fb2:	7cbb      	ldrb	r3, [r7, #18]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	461c      	mov	r4, r3
 8000fb8:	4615      	mov	r5, r2
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	f04f 0300 	mov.w	r3, #0
 8000fc2:	00eb      	lsls	r3, r5, #3
 8000fc4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000fc8:	00e2      	lsls	r2, r4, #3
 8000fca:	7cbb      	ldrb	r3, [r7, #18]
 8000fcc:	3307      	adds	r3, #7
 8000fce:	08db      	lsrs	r3, r3, #3
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	ebad 0d03 	sub.w	sp, sp, r3
 8000fd6:	466b      	mov	r3, sp
 8000fd8:	3300      	adds	r3, #0
 8000fda:	60bb      	str	r3, [r7, #8]
	memset(rxBytes, 0, kBufferSizeBytes);
 8000fdc:	7cbb      	ldrb	r3, [r7, #18]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	68b8      	ldr	r0, [r7, #8]
 8000fe4:	f006 fedc 	bl	8007da0 <memset>

	spi_select(self);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f000 f8d3 	bl	8001194 <spi_select>
	spi_hw_command(self, 0x38); // read data register
 8000fee:	2138      	movs	r1, #56	; 0x38
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 f8f3 	bl	80011dc <spi_hw_command>
	int i;
	for(i = 0; i < kDataSizeBytes; ++i)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	e019      	b.n	8001030 <update+0xb8>
	{
		HAL_SPI_Receive(self->data->hspi, rxBytes + kDataSizeBytes - i - 1, 1, SPI_TIMEOUT);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	6818      	ldr	r0, [r3, #0]
 8001002:	7cfa      	ldrb	r2, [r7, #19]
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	3b01      	subs	r3, #1
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	18d1      	adds	r1, r2, r3
 800100e:	230a      	movs	r3, #10
 8001010:	2201      	movs	r2, #1
 8001012:	f005 fe89 	bl	8006d28 <HAL_SPI_Receive>
		while(HAL_SPI_GetState(self->data->hspi) != HAL_SPI_STATE_READY)
 8001016:	bf00      	nop
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f006 f94a 	bl	80072b8 <HAL_SPI_GetState>
 8001024:	4603      	mov	r3, r0
 8001026:	2b01      	cmp	r3, #1
 8001028:	d1f6      	bne.n	8001018 <update+0xa0>
	for(i = 0; i < kDataSizeBytes; ++i)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	3301      	adds	r3, #1
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	7cfb      	ldrb	r3, [r7, #19]
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	429a      	cmp	r2, r3
 8001036:	dbe1      	blt.n	8000ffc <update+0x84>
			;
	}
	spi_deselect(self);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f8bd 	bl	80011b8 <spi_deselect>
	self->data->lastOutputValue = *(int32_t*)rxBytes;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	6812      	ldr	r2, [r2, #0]
 8001046:	619a      	str	r2, [r3, #24]
 8001048:	46b5      	mov	sp, r6
}
 800104a:	bf00      	nop
 800104c:	371c      	adds	r7, #28
 800104e:	46bd      	mov	sp, r7
 8001050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001054 <get_cnt>:

static uint32_t get_cnt(adc_t* self)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	return self->data->lastOutputValue;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	699b      	ldr	r3, [r3, #24]
}
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <get_vout>:

static double get_vout(adc_t* self)
{
 800106e:	b5b0      	push	{r4, r5, r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
	return self->data->Vref * get_cnt(self) / self->data->maxOutputValue;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ffe8 	bl	8001054 <get_cnt>
 8001084:	4603      	mov	r3, r0
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff f9e0 	bl	800044c <__aeabi_ui2d>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4620      	mov	r0, r4
 8001092:	4629      	mov	r1, r5
 8001094:	f7ff fa54 	bl	8000540 <__aeabi_dmul>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4614      	mov	r4, r2
 800109e:	461d      	mov	r5, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff f9e0 	bl	800046c <__aeabi_i2d>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4620      	mov	r0, r4
 80010b2:	4629      	mov	r1, r5
 80010b4:	f7ff fb6e 	bl	8000794 <__aeabi_ddiv>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	ec43 2b17 	vmov	d7, r2, r3
}
 80010c0:	eeb0 0a47 	vmov.f32	s0, s14
 80010c4:	eef0 0a67 	vmov.f32	s1, s15
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080010d0 <adc_AD7791_create>:
		uint16_t pinCS,
		double Vref,
		uint8_t FR_word,
		uint8_t MR_word
		)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6178      	str	r0, [r7, #20]
 80010d8:	6139      	str	r1, [r7, #16]
 80010da:	60fa      	str	r2, [r7, #12]
 80010dc:	ed87 0b00 	vstr	d0, [r7]
 80010e0:	817b      	strh	r3, [r7, #10]
	adc_t adc;
	adc.vtable = &methods;
 80010e2:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <adc_AD7791_create+0xc0>)
 80010e4:	61fb      	str	r3, [r7, #28]
	struct adc_data_t* pdata =
			(struct adc_data_t*)malloc(sizeof(struct adc_data_t));
 80010e6:	2028      	movs	r0, #40	; 0x28
 80010e8:	f006 fd64 	bl	8007bb4 <malloc>
 80010ec:	4603      	mov	r3, r0
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
	if(pdata)
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d03b      	beq.n	800116e <adc_AD7791_create+0x9e>
	{
		memset(pdata, 0, sizeof(*pdata));
 80010f6:	2228      	movs	r2, #40	; 0x28
 80010f8:	2100      	movs	r1, #0
 80010fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010fc:	f006 fe50 	bl	8007da0 <memset>
		pdata->hspi = hspi;
 8001100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	601a      	str	r2, [r3, #0]
		pdata->portCS = portCS;
 8001106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	605a      	str	r2, [r3, #4]
		pdata->pinCS = pinCS;
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	897a      	ldrh	r2, [r7, #10]
 8001110:	811a      	strh	r2, [r3, #8]
		pdata->Vref = Vref;
 8001112:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001114:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001118:	e9c1 2304 	strd	r2, r3, [r1, #16]
		pdata->lastOutputValue = 0;
 800111c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
		pdata->bitResolution = 24;
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	2218      	movs	r2, #24
 8001126:	729a      	strb	r2, [r3, #10]
		pdata->maxOutputValue = (uint32_t)pow(2, pdata->bitResolution);
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	7a9b      	ldrb	r3, [r3, #10]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f98d 	bl	800044c <__aeabi_ui2d>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	ec43 2b11 	vmov	d1, r2, r3
 800113a:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8001188 <adc_AD7791_create+0xb8>
 800113e:	f006 fe81 	bl	8007e44 <pow>
 8001142:	ec53 2b10 	vmov	r2, r3, d0
 8001146:	4610      	mov	r0, r2
 8001148:	4619      	mov	r1, r3
 800114a:	f7ff fcd1 	bl	8000af0 <__aeabi_d2uiz>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	61da      	str	r2, [r3, #28]
		pdata->FR_word = FR_word;
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800115c:	f883 2020 	strb.w	r2, [r3, #32]
		pdata->MR_word = MR_word;
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001166:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		adc.data = pdata;
 800116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116c:	623b      	str	r3, [r7, #32]
	}
	// init
	return adc;
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	461a      	mov	r2, r3
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	e893 0003 	ldmia.w	r3, {r0, r1}
 800117a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800117e:	6978      	ldr	r0, [r7, #20]
 8001180:	3728      	adds	r7, #40	; 0x28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	00000000 	.word	0x00000000
 800118c:	40000000 	.word	0x40000000
 8001190:	20000000 	.word	0x20000000

08001194 <spi_select>:

static void spi_select(adc_t* self)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
			self->data->portCS,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 80011a0:	6858      	ldr	r0, [r3, #4]
			self->data->pinCS,
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 80011a6:	891b      	ldrh	r3, [r3, #8]
 80011a8:	2200      	movs	r2, #0
 80011aa:	4619      	mov	r1, r3
 80011ac:	f004 fae4 	bl	8005778 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET
			);
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <spi_deselect>:
static void spi_deselect(adc_t* self)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
			self->data->portCS,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 80011c4:	6858      	ldr	r0, [r3, #4]
			self->data->pinCS,
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 80011ca:	891b      	ldrh	r3, [r3, #8]
 80011cc:	2201      	movs	r2, #1
 80011ce:	4619      	mov	r1, r3
 80011d0:	f004 fad2 	bl	8005778 <HAL_GPIO_WritePin>
			GPIO_PIN_SET
			);
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <spi_hw_command>:

static void spi_hw_command(adc_t *self, uint8_t cmd)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(self->data->hspi, &cmd, 1, SPI_TIMEOUT);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	6818      	ldr	r0, [r3, #0]
 80011ee:	1cf9      	adds	r1, r7, #3
 80011f0:	230a      	movs	r3, #10
 80011f2:	2201      	movs	r2, #1
 80011f4:	f005 fc55 	bl	8006aa2 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(self->data->hspi) != HAL_SPI_STATE_READY)
 80011f8:	bf00      	nop
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f006 f859 	bl	80072b8 <HAL_SPI_GetState>
 8001206:	4603      	mov	r3, r0
 8001208:	2b01      	cmp	r3, #1
 800120a:	d1f6      	bne.n	80011fa <spi_hw_command+0x1e>
		;
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <adc_monitor_init>:
#include <string.h>
#include <math.h>


void adc_monitor_init(adc_monitor_t* self, adc_t* adc, IRQn_Type IRQn)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b084      	sub	sp, #16
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	4613      	mov	r3, r2
 8001222:	71fb      	strb	r3, [r7, #7]
	memset(self, 0, sizeof(*self));
 8001224:	2228      	movs	r2, #40	; 0x28
 8001226:	2100      	movs	r1, #0
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f006 fdb9 	bl	8007da0 <memset>
	self->adc = adc;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	601a      	str	r2, [r3, #0]
	self->IRQn = IRQn;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	79fa      	ldrb	r2, [r7, #7]
 8001238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	self->state = ADC_STANDBY;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2200      	movs	r2, #0
 8001240:	761a      	strb	r2, [r3, #24]
}
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <adc_monitor_update>:

void adc_monitor_update(adc_monitor_t* self)
{
 800124c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
	self->currValue = adc_get_vout(self->adc);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fe46 	bl	8000eec <adc_get_vout>
 8001260:	eeb0 7a40 	vmov.f32	s14, s0
 8001264:	eef0 7a60 	vmov.f32	s15, s1
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed83 7b02 	vstr	d7, [r3, #8]
	switch(self->state)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7e1b      	ldrb	r3, [r3, #24]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d062      	beq.n	800133c <adc_monitor_update+0xf0>
 8001276:	2b02      	cmp	r3, #2
 8001278:	dc63      	bgt.n	8001342 <adc_monitor_update+0xf6>
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <adc_monitor_update+0x38>
 800127e:	2b01      	cmp	r3, #1
 8001280:	d00e      	beq.n	80012a0 <adc_monitor_update+0x54>
		}
		break;
	case ADC_COMPLETED:
		break;
	}
}
 8001282:	e05e      	b.n	8001342 <adc_monitor_update+0xf6>
		self->averageValue 			= 0;
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	f04f 0300 	mov.w	r3, #0
 800128e:	e9c1 2304 	strd	r2, r3, [r1, #16]
		self->measurementCycles 	= 0;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	61da      	str	r2, [r3, #28]
		self->measurementCyclesMax	= 0;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	621a      	str	r2, [r3, #32]
		break;
 800129e:	e050      	b.n	8001342 <adc_monitor_update+0xf6>
		self->measurementCycles++;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	61da      	str	r2, [r3, #28]
				((double)self->measurementCycles - 1) / self->measurementCycles * self->averageValue +
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff f8cc 	bl	800044c <__aeabi_ui2d>
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	4b24      	ldr	r3, [pc, #144]	; (800134c <adc_monitor_update+0x100>)
 80012ba:	f7fe ff89 	bl	80001d0 <__aeabi_dsub>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4614      	mov	r4, r2
 80012c4:	461d      	mov	r5, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f8be 	bl	800044c <__aeabi_ui2d>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4620      	mov	r0, r4
 80012d6:	4629      	mov	r1, r5
 80012d8:	f7ff fa5c 	bl	8000794 <__aeabi_ddiv>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4610      	mov	r0, r2
 80012e2:	4619      	mov	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80012ea:	f7ff f929 	bl	8000540 <__aeabi_dmul>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4690      	mov	r8, r2
 80012f4:	4699      	mov	r9, r3
				self->currValue / self->measurementCycles;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f8a3 	bl	800044c <__aeabi_ui2d>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4620      	mov	r0, r4
 800130c:	4629      	mov	r1, r5
 800130e:	f7ff fa41 	bl	8000794 <__aeabi_ddiv>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
				((double)self->measurementCycles - 1) / self->measurementCycles * self->averageValue +
 8001316:	4640      	mov	r0, r8
 8001318:	4649      	mov	r1, r9
 800131a:	f7fe ff5b 	bl	80001d4 <__adddf3>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
		self->averageValue =
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	e9c1 2304 	strd	r2, r3, [r1, #16]
		if(self->measurementCycles >= self->measurementCyclesMax)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69da      	ldr	r2, [r3, #28]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	429a      	cmp	r2, r3
 8001332:	d305      	bcc.n	8001340 <adc_monitor_update+0xf4>
			self->state = ADC_COMPLETED;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2202      	movs	r2, #2
 8001338:	761a      	strb	r2, [r3, #24]
		break;
 800133a:	e001      	b.n	8001340 <adc_monitor_update+0xf4>
		break;
 800133c:	bf00      	nop
 800133e:	e000      	b.n	8001342 <adc_monitor_update+0xf6>
		break;
 8001340:	bf00      	nop
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800134c:	3ff00000 	.word	0x3ff00000

08001350 <adc_monitor_start_measurement>:

void adc_monitor_start_measurement(adc_monitor_t* self, uint32_t cycles)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
	HAL_NVIC_DisableIRQ(self->IRQn);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8001360:	4618      	mov	r0, r3
 8001362:	f004 f83a 	bl	80053da <HAL_NVIC_DisableIRQ>
	if(self->state == ADC_STANDBY)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7e1b      	ldrb	r3, [r3, #24]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d108      	bne.n	8001380 <adc_monitor_start_measurement+0x30>
	{
		self->measurementCycles = 0;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	61da      	str	r2, [r3, #28]
		self->measurementCyclesMax = cycles;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	621a      	str	r2, [r3, #32]
		self->state = ADC_PROCESS;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	761a      	strb	r2, [r3, #24]
	}
	HAL_NVIC_EnableIRQ(self->IRQn);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8001386:	4618      	mov	r0, r3
 8001388:	f004 f819 	bl	80053be <HAL_NVIC_EnableIRQ>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <adc_monitor_reset_measurement>:

void adc_monitor_reset_measurement(adc_monitor_t* self)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(self->IRQn);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 80013a2:	4618      	mov	r0, r3
 80013a4:	f004 f819 	bl	80053da <HAL_NVIC_DisableIRQ>
	self->state = ADC_STANDBY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	761a      	strb	r2, [r3, #24]
	HAL_NVIC_EnableIRQ(self->IRQn);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 80013b4:	4618      	mov	r0, r3
 80013b6:	f004 f802 	bl	80053be <HAL_NVIC_EnableIRQ>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <adc_monitor_get_average_signal_value>:

double adc_monitor_get_average_signal_value(adc_monitor_t* self)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
	return self->averageValue;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80013d0:	ec43 2b17 	vmov	d7, r2, r3
}
 80013d4:	eeb0 0a47 	vmov.f32	s0, s14
 80013d8:	eef0 0a67 	vmov.f32	s1, s15
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <adc_monitor_get_measurement_cycle_no>:

uint32_t adc_monitor_get_measurement_cycle_no(adc_monitor_t* self)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
	return self->measurementCycles;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69db      	ldr	r3, [r3, #28]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <adc_monitor_get_measurement_state>:

int8_t adc_monitor_get_measurement_state(adc_monitor_t* self)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
	return self->state;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	7e1b      	ldrb	r3, [r3, #24]
 800140a:	b25b      	sxtb	r3, r3
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <set_adc_dose_range_select_pin>:

static const int BROAD_RANGE_PIN_STATE = 0;
static const int NARROW_RANGE_PIN_STATE = 1;

void set_adc_dose_range_select_pin(GPIO_TypeDef* port, uint16_t pin)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	807b      	strh	r3, [r7, #2]
	rangeSelectPort = port;
 8001424:	4a05      	ldr	r2, [pc, #20]	; (800143c <set_adc_dose_range_select_pin+0x24>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6013      	str	r3, [r2, #0]
	rangeSelectPin = pin;
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <set_adc_dose_range_select_pin+0x28>)
 800142c:	887b      	ldrh	r3, [r7, #2]
 800142e:	8013      	strh	r3, [r2, #0]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	200000f4 	.word	0x200000f4
 8001440:	200000f8 	.word	0x200000f8

08001444 <select_broad_adc_dose_range>:

void select_broad_adc_dose_range()
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	if(rangeSelectPort)
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <select_broad_adc_dose_range+0x24>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d008      	beq.n	8001462 <select_broad_adc_dose_range+0x1e>
	{
		HAL_GPIO_WritePin(rangeSelectPort, rangeSelectPin, BROAD_RANGE_PIN_STATE);
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <select_broad_adc_dose_range+0x24>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a05      	ldr	r2, [pc, #20]	; (800146c <select_broad_adc_dose_range+0x28>)
 8001456:	8811      	ldrh	r1, [r2, #0]
 8001458:	2200      	movs	r2, #0
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f004 f98b 	bl	8005778 <HAL_GPIO_WritePin>
	}
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200000f4 	.word	0x200000f4
 800146c:	200000f8 	.word	0x200000f8

08001470 <select_narrow_adc_dose_range>:

void select_narrow_adc_dose_range()
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	if(rangeSelectPort)
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <select_narrow_adc_dose_range+0x24>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d008      	beq.n	800148e <select_narrow_adc_dose_range+0x1e>
	{
		HAL_GPIO_WritePin(rangeSelectPort, rangeSelectPin, NARROW_RANGE_PIN_STATE);
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <select_narrow_adc_dose_range+0x24>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a05      	ldr	r2, [pc, #20]	; (8001498 <select_narrow_adc_dose_range+0x28>)
 8001482:	8811      	ldrh	r1, [r2, #0]
 8001484:	2201      	movs	r2, #1
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f004 f975 	bl	8005778 <HAL_GPIO_WritePin>
	}
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200000f4 	.word	0x200000f4
 8001498:	200000f8 	.word	0x200000f8

0800149c <dac_init>:
 */

#include "dac.h"

void dac_init(dac_t* self)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	self->vtable->init(self);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	4798      	blx	r3
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <dac_set_input_value>:

void dac_set_input_value(dac_t* self, uint32_t digital_value)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	6039      	str	r1, [r7, #0]
	self->vtable->set_input_value(self, digital_value);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	6839      	ldr	r1, [r7, #0]
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	4798      	blx	r3
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	0000      	movs	r0, r0
	...

080014d8 <init>:
	double Vref;
	uint32_t maxInputValue;
};

static void init(dac_t* self)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	spi_deselect(self);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 f8f5 	bl	80016d0 <spi_deselect>
	HAL_Delay(10);
 80014e6:	200a      	movs	r0, #10
 80014e8:	f003 fe2a 	bl	8005140 <HAL_Delay>

	if(self->data->portLDAC)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d009      	beq.n	800150a <init+0x32>
	{
		HAL_GPIO_WritePin(self->data->portLDAC, self->data->pinLDAC, 0);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	68d8      	ldr	r0, [r3, #12]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	8a1b      	ldrh	r3, [r3, #16]
 8001502:	2200      	movs	r2, #0
 8001504:	4619      	mov	r1, r3
 8001506:	f004 f937 	bl	8005778 <HAL_GPIO_WritePin>
	}

	if(self->data->portSHDW)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d009      	beq.n	8001528 <init+0x50>
	{
		HAL_GPIO_WritePin(self->data->portSHDW, self->data->pinSHDW, 1);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	6958      	ldr	r0, [r3, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	8b1b      	ldrh	r3, [r3, #24]
 8001520:	2201      	movs	r2, #1
 8001522:	4619      	mov	r1, r3
 8001524:	f004 f928 	bl	8005778 <HAL_GPIO_WritePin>
	// SPI config begin
	//spi_select(self);
	//spi_deselect(self);

	// SPI config end
	self->data->Vref = 2.048;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6859      	ldr	r1, [r3, #4]
 800152c:	a306      	add	r3, pc, #24	; (adr r3, 8001548 <init+0x70>)
 800152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001532:	e9c1 2308 	strd	r2, r3, [r1, #32]

	// always send zero after init
	set_digital_value(self, 0);
 8001536:	2100      	movs	r1, #0
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 f809 	bl	8001550 <set_digital_value>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	d2f1a9fc 	.word	0xd2f1a9fc
 800154c:	4000624d 	.word	0x4000624d

08001550 <set_digital_value>:

static void set_digital_value(dac_t* self, uint32_t digital_value)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
	if(digital_value < self->data->maxInputValue)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	429a      	cmp	r2, r3
 8001564:	d230      	bcs.n	80015c8 <set_digital_value+0x78>
	{
	    uint16_t shdw = 1;
 8001566:	2301      	movs	r3, #1
 8001568:	81fb      	strh	r3, [r7, #14]
	    uint16_t gain = 1;
 800156a:	2301      	movs	r3, #1
 800156c:	81bb      	strh	r3, [r7, #12]
	    uint16_t x = digital_value;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	817b      	strh	r3, [r7, #10]
	    uint16_t val = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	813b      	strh	r3, [r7, #8]
	    val += (shdw <<= 12);
 8001576:	89fb      	ldrh	r3, [r7, #14]
 8001578:	031b      	lsls	r3, r3, #12
 800157a:	81fb      	strh	r3, [r7, #14]
 800157c:	89fa      	ldrh	r2, [r7, #14]
 800157e:	893b      	ldrh	r3, [r7, #8]
 8001580:	4413      	add	r3, r2
 8001582:	813b      	strh	r3, [r7, #8]
	    val += (gain <<= 13);
 8001584:	89bb      	ldrh	r3, [r7, #12]
 8001586:	035b      	lsls	r3, r3, #13
 8001588:	81bb      	strh	r3, [r7, #12]
 800158a:	89ba      	ldrh	r2, [r7, #12]
 800158c:	893b      	ldrh	r3, [r7, #8]
 800158e:	4413      	add	r3, r2
 8001590:	813b      	strh	r3, [r7, #8]
	    val += (x <<= 2);
 8001592:	897b      	ldrh	r3, [r7, #10]
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	817b      	strh	r3, [r7, #10]
 8001598:	897a      	ldrh	r2, [r7, #10]
 800159a:	893b      	ldrh	r3, [r7, #8]
 800159c:	4413      	add	r3, r2
 800159e:	813b      	strh	r3, [r7, #8]

		// SPI Transmit digital value begin
		spi_select(self);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 f883 	bl	80016ac <spi_select>
		//spi_hw_command(self, (uint8_t)val);
		spi_hw_command(self, (uint8_t)(val >> 8));
 80015a6:	893b      	ldrh	r3, [r7, #8]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	4619      	mov	r1, r3
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 f89f 	bl	80016f4 <spi_hw_command>
		spi_hw_command(self, (uint8_t)val);
 80015b6:	893b      	ldrh	r3, [r7, #8]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	4619      	mov	r1, r3
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f899 	bl	80016f4 <spi_hw_command>
		spi_deselect(self);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 f884 	bl	80016d0 <spi_deselect>
		// SPI Transmit digital value end

	}
}
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <get_reference_voltage>:

static double get_reference_voltage(dac_t* self)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	return self->data->Vref;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80015e0:	ec43 2b17 	vmov	d7, r2, r3
}
 80015e4:	eeb0 0a47 	vmov.f32	s0, s14
 80015e8:	eef0 0a67 	vmov.f32	s1, s15
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <dac_MCP4811EP_create>:
		GPIO_TypeDef* portLDAC,
		uint16_t pinLDAC,
		GPIO_TypeDef* portSHDW,
		uint16_t pinSHDW
		)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	807b      	strh	r3, [r7, #2]
	dac_t dac;
	dac.vtable = &methods;
 8001606:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <dac_MCP4811EP_create+0xb0>)
 8001608:	617b      	str	r3, [r7, #20]
	struct dac_data_t* pdata =
			(struct dac_data_t*)malloc(sizeof(struct dac_data_t));
 800160a:	2030      	movs	r0, #48	; 0x30
 800160c:	f006 fad2 	bl	8007bb4 <malloc>
 8001610:	4603      	mov	r3, r0
 8001612:	61fb      	str	r3, [r7, #28]
	if(pdata)
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d034      	beq.n	8001684 <dac_MCP4811EP_create+0x8c>
	{
		memset(pdata, 0, sizeof(*pdata));
 800161a:	2230      	movs	r2, #48	; 0x30
 800161c:	2100      	movs	r1, #0
 800161e:	69f8      	ldr	r0, [r7, #28]
 8001620:	f006 fbbe 	bl	8007da0 <memset>
		// fill data structure
		pdata->hspi = hspi;
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	601a      	str	r2, [r3, #0]
		pdata->portCS = portCS;
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	605a      	str	r2, [r3, #4]
		pdata->pinCS = pinCS;
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	887a      	ldrh	r2, [r7, #2]
 8001634:	811a      	strh	r2, [r3, #8]
		pdata->portLDAC = portLDAC;
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800163a:	60da      	str	r2, [r3, #12]
		pdata->pinLDAC = pinLDAC;
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001640:	821a      	strh	r2, [r3, #16]
		pdata->portSHDW = portSHDW;
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001646:	615a      	str	r2, [r3, #20]
		pdata->pinSHDW = pinSHDW;
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800164c:	831a      	strh	r2, [r3, #24]
		pdata->bitResolution = 10;
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	220a      	movs	r2, #10
 8001652:	769a      	strb	r2, [r3, #26]
		pdata->maxInputValue = (uint32_t)pow(2, pdata->bitResolution);
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	7e9b      	ldrb	r3, [r3, #26]
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe fef7 	bl	800044c <__aeabi_ui2d>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	ec43 2b11 	vmov	d1, r2, r3
 8001666:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80016a0 <dac_MCP4811EP_create+0xa8>
 800166a:	f006 fbeb 	bl	8007e44 <pow>
 800166e:	ec53 2b10 	vmov	r2, r3, d0
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f7ff fa3b 	bl	8000af0 <__aeabi_d2uiz>
 800167a:	4602      	mov	r2, r0
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	629a      	str	r2, [r3, #40]	; 0x28
		dac.data = pdata;
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	61bb      	str	r3, [r7, #24]
	}
	return dac;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	461a      	mov	r2, r3
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001690:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	3720      	adds	r7, #32
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	f3af 8000 	nop.w
 80016a0:	00000000 	.word	0x00000000
 80016a4:	40000000 	.word	0x40000000
 80016a8:	20000010 	.word	0x20000010

080016ac <spi_select>:

static void spi_select(dac_t* self)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
			self->data->portCS,
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 80016b8:	6858      	ldr	r0, [r3, #4]
			self->data->pinCS,
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 80016be:	891b      	ldrh	r3, [r3, #8]
 80016c0:	2200      	movs	r2, #0
 80016c2:	4619      	mov	r1, r3
 80016c4:	f004 f858 	bl	8005778 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET
			);
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <spi_deselect>:

static void spi_deselect(dac_t* self)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
			self->data->portCS,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 80016dc:	6858      	ldr	r0, [r3, #4]
			self->data->pinCS,
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 80016e2:	891b      	ldrh	r3, [r3, #8]
 80016e4:	2201      	movs	r2, #1
 80016e6:	4619      	mov	r1, r3
 80016e8:	f004 f846 	bl	8005778 <HAL_GPIO_WritePin>
			GPIO_PIN_SET
			);
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <spi_hw_command>:

static void spi_hw_command(dac_t *self, uint8_t cmd)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(self->data->hspi, &cmd, 1, SPI_TIMEOUT);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	6818      	ldr	r0, [r3, #0]
 8001706:	1cf9      	adds	r1, r7, #3
 8001708:	230a      	movs	r3, #10
 800170a:	2201      	movs	r2, #1
 800170c:	f005 f9c9 	bl	8006aa2 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(self->data->hspi) != HAL_SPI_STATE_READY)
 8001710:	bf00      	nop
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f005 fdcd 	bl	80072b8 <HAL_SPI_GetState>
 800171e:	4603      	mov	r3, r0
 8001720:	2b01      	cmp	r3, #1
 8001722:	d1f6      	bne.n	8001712 <spi_hw_command+0x1e>
		;
}
 8001724:	bf00      	nop
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <screen_init>:
 */

#include "screen.h"

void screen_init(screen_t* self)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
	self->vtable_->init(self);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	4798      	blx	r3
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <screen_draw>:

void screen_draw(screen_t* self)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	self->vtable_->draw(self);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	4798      	blx	r3
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <screen_update>:

void screen_update(screen_t* self)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
	self->vtable_->update(self);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	4798      	blx	r3
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <init_>:
};

static struct screen_data_t data;

static void init_(screen_t* self)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	memset(&data, 0, sizeof(data));
 8001784:	2250      	movs	r2, #80	; 0x50
 8001786:	2100      	movs	r1, #0
 8001788:	4813      	ldr	r0, [pc, #76]	; (80017d8 <init_+0x5c>)
 800178a:	f006 fb09 	bl	8007da0 <memset>

	self->data->adcDRValueCurr = 0;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6859      	ldr	r1, [r3, #4]
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	self->data->adcDRValuePrev = 0;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6859      	ldr	r1, [r3, #4]
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	e9c1 2304 	strd	r2, r3, [r1, #16]
	self->data->adcHVValueCurr = 0;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6859      	ldr	r1, [r3, #4]
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	e9c1 2306 	strd	r2, r3, [r1, #24]
	self->data->adcHVValuePrev = 0;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6859      	ldr	r1, [r3, #4]
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000100 	.word	0x20000100
 80017dc:	00000000 	.word	0x00000000

080017e0 <update_>:

static void update_(screen_t* self)
{
 80017e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017e4:	b084      	sub	sp, #16
 80017e6:	af02      	add	r7, sp, #8
 80017e8:	6078      	str	r0, [r7, #4]

	self->data->adcDRValueCurr = adc_get_cnt(&task.adcDoseRate);
 80017ea:	4889      	ldr	r0, [pc, #548]	; (8001a10 <update_+0x230>)
 80017ec:	f7ff fb70 	bl	8000ed0 <adc_get_cnt>
 80017f0:	4602      	mov	r2, r0
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2100      	movs	r1, #0
 80017f8:	4692      	mov	sl, r2
 80017fa:	468b      	mov	fp, r1
 80017fc:	e9c3 ab02 	strd	sl, fp, [r3, #8]
	self->data->adcHVValueCurr = adc_get_cnt(&task.adcHV);
 8001800:	4884      	ldr	r0, [pc, #528]	; (8001a14 <update_+0x234>)
 8001802:	f7ff fb65 	bl	8000ed0 <adc_get_cnt>
 8001806:	4602      	mov	r2, r0
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2100      	movs	r1, #0
 800180e:	4690      	mov	r8, r2
 8001810:	4689      	mov	r9, r1
 8001812:	e9c3 8906 	strd	r8, r9, [r3, #24]
	self->data->adcPRValueCurr = adc_get_cnt(&task.adcPressure);
 8001816:	4880      	ldr	r0, [pc, #512]	; (8001a18 <update_+0x238>)
 8001818:	f7ff fb5a 	bl	8000ed0 <adc_get_cnt>
 800181c:	4602      	mov	r2, r0
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2100      	movs	r1, #0
 8001824:	4614      	mov	r4, r2
 8001826:	460d      	mov	r5, r1
 8001828:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28

	self->data->adcDRAverValueCurr = adc_monitor_get_average_signal_value(&task.adcDRMonitor) * 1e+6;
 800182c:	487b      	ldr	r0, [pc, #492]	; (8001a1c <update_+0x23c>)
 800182e:	f7ff fdc8 	bl	80013c2 <adc_monitor_get_average_signal_value>
 8001832:	ec51 0b10 	vmov	r0, r1, d0
 8001836:	a374      	add	r3, pc, #464	; (adr r3, 8001a08 <update_+0x228>)
 8001838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183c:	f7fe fe80 	bl	8000540 <__aeabi_dmul>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685c      	ldr	r4, [r3, #4]
 800184c:	f7ff f988 	bl	8000b60 <__aeabi_d2lz>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38

	if(self->data->adcPRValuePrev != self->data->adcPRValueCurr)
	{
	}*/

	ssd1306_Fill(Black);
 8001858:	2000      	movs	r0, #0
 800185a:	f001 fc19 	bl	8003090 <ssd1306_Fill>

	// HEAD
	ssd1306_SetCursor(HEAD_X, HEAD_Y);
 800185e:	2303      	movs	r3, #3
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2203      	movs	r2, #3
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f001 fd5d 	bl	8003328 <ssd1306_SetCursor>
	ssd1306_WriteString("________________", *TEXT_FONT, White);
 800186e:	4b6c      	ldr	r3, [pc, #432]	; (8001a20 <update_+0x240>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2201      	movs	r2, #1
 8001874:	9200      	str	r2, [sp, #0]
 8001876:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001878:	486a      	ldr	r0, [pc, #424]	; (8001a24 <update_+0x244>)
 800187a:	f001 fd2f 	bl	80032dc <ssd1306_WriteString>

	// DR
	ssd1306_SetCursor(DR_DESC_X, DR_DESC_Y);
 800187e:	2303      	movs	r3, #3
 8001880:	b2db      	uxtb	r3, r3
 8001882:	221a      	movs	r2, #26
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f001 fd4d 	bl	8003328 <ssd1306_SetCursor>
	ssd1306_WriteString("DR:", *TEXT_FONT, White);
 800188e:	4b64      	ldr	r3, [pc, #400]	; (8001a20 <update_+0x240>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2201      	movs	r2, #1
 8001894:	9200      	str	r2, [sp, #0]
 8001896:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001898:	4863      	ldr	r0, [pc, #396]	; (8001a28 <update_+0x248>)
 800189a:	f001 fd1f 	bl	80032dc <ssd1306_WriteString>
	ssd1306_SetCursor(DR_VAL_X, DR_VAL_Y);
 800189e:	231e      	movs	r3, #30
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	221a      	movs	r2, #26
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	4611      	mov	r1, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f001 fd3d 	bl	8003328 <ssd1306_SetCursor>
	//ssd1306_WriteInt((int)adc_get_vout(&task.adcDoseRate) * 1e+6, *TEXT_FONT, White);
	ssd1306_WriteInt(adc_get_cnt(&task.adcDoseRate), *TEXT_FONT, White);
 80018ae:	4858      	ldr	r0, [pc, #352]	; (8001a10 <update_+0x230>)
 80018b0:	f7ff fb0e 	bl	8000ed0 <adc_get_cnt>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4618      	mov	r0, r3
 80018b8:	4b59      	ldr	r3, [pc, #356]	; (8001a20 <update_+0x240>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2201      	movs	r2, #1
 80018be:	9200      	str	r2, [sp, #0]
 80018c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018c2:	f001 fd7b 	bl	80033bc <ssd1306_WriteInt>
	ssd1306_SetCursor(DR_UNIT_X, DR_UNIT_Y);
 80018c6:	235a      	movs	r3, #90	; 0x5a
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	221a      	movs	r2, #26
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	4611      	mov	r1, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f001 fd29 	bl	8003328 <ssd1306_SetCursor>
	ssd1306_WriteString("uV", *TEXT_FONT, White);
 80018d6:	4b52      	ldr	r3, [pc, #328]	; (8001a20 <update_+0x240>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2201      	movs	r2, #1
 80018dc:	9200      	str	r2, [sp, #0]
 80018de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018e0:	4852      	ldr	r0, [pc, #328]	; (8001a2c <update_+0x24c>)
 80018e2:	f001 fcfb 	bl	80032dc <ssd1306_WriteString>

	// HV
	ssd1306_SetCursor(HV_DESC_X, HV_DESC_Y);
 80018e6:	2303      	movs	r3, #3
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2228      	movs	r2, #40	; 0x28
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f001 fd19 	bl	8003328 <ssd1306_SetCursor>
	ssd1306_WriteString("HV:", *TEXT_FONT, White);
 80018f6:	4b4a      	ldr	r3, [pc, #296]	; (8001a20 <update_+0x240>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2201      	movs	r2, #1
 80018fc:	9200      	str	r2, [sp, #0]
 80018fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001900:	484b      	ldr	r0, [pc, #300]	; (8001a30 <update_+0x250>)
 8001902:	f001 fceb 	bl	80032dc <ssd1306_WriteString>
	ssd1306_SetCursor(HV_VAL_X, HV_VAL_Y);
 8001906:	231e      	movs	r3, #30
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2228      	movs	r2, #40	; 0x28
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f001 fd09 	bl	8003328 <ssd1306_SetCursor>
	//ssd1306_WriteInt((int)hv_get_output_voltage_V(&task.hv_system), *TEXT_FONT, White);
	ssd1306_WriteInt(adc_get_cnt(&task.adcHV), *TEXT_FONT, White);
 8001916:	483f      	ldr	r0, [pc, #252]	; (8001a14 <update_+0x234>)
 8001918:	f7ff fada 	bl	8000ed0 <adc_get_cnt>
 800191c:	4603      	mov	r3, r0
 800191e:	4618      	mov	r0, r3
 8001920:	4b3f      	ldr	r3, [pc, #252]	; (8001a20 <update_+0x240>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2201      	movs	r2, #1
 8001926:	9200      	str	r2, [sp, #0]
 8001928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800192a:	f001 fd47 	bl	80033bc <ssd1306_WriteInt>
	ssd1306_SetCursor(HV_UNIT_X, HV_UNIT_Y);
 800192e:	235a      	movs	r3, #90	; 0x5a
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2228      	movs	r2, #40	; 0x28
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f001 fcf5 	bl	8003328 <ssd1306_SetCursor>
	ssd1306_WriteString("V", *TEXT_FONT, White);
 800193e:	4b38      	ldr	r3, [pc, #224]	; (8001a20 <update_+0x240>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2201      	movs	r2, #1
 8001944:	9200      	str	r2, [sp, #0]
 8001946:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001948:	483a      	ldr	r0, [pc, #232]	; (8001a34 <update_+0x254>)
 800194a:	f001 fcc7 	bl	80032dc <ssd1306_WriteString>

	// Pressure
	ssd1306_SetCursor(PRESS_DESC_X, PRESS_DESC_Y);
 800194e:	2303      	movs	r3, #3
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2236      	movs	r2, #54	; 0x36
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f001 fce5 	bl	8003328 <ssd1306_SetCursor>
	ssd1306_WriteString("PR:", *TEXT_FONT, White);
 800195e:	4b30      	ldr	r3, [pc, #192]	; (8001a20 <update_+0x240>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2201      	movs	r2, #1
 8001964:	9200      	str	r2, [sp, #0]
 8001966:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001968:	4833      	ldr	r0, [pc, #204]	; (8001a38 <update_+0x258>)
 800196a:	f001 fcb7 	bl	80032dc <ssd1306_WriteString>
	ssd1306_SetCursor(PRESS_VAL_X, PRESS_VAL_Y);
 800196e:	231e      	movs	r3, #30
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2236      	movs	r2, #54	; 0x36
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	4611      	mov	r1, r2
 8001978:	4618      	mov	r0, r3
 800197a:	f001 fcd5 	bl	8003328 <ssd1306_SetCursor>
	//ssd1306_WriteInt(adc_get_vout(&task.adcPressure) * task.pressureCoeff, *TEXT_FONT, White);
	ssd1306_WriteInt(adc_get_cnt(&task.adcPressure), *TEXT_FONT, White);
 800197e:	4826      	ldr	r0, [pc, #152]	; (8001a18 <update_+0x238>)
 8001980:	f7ff faa6 	bl	8000ed0 <adc_get_cnt>
 8001984:	4603      	mov	r3, r0
 8001986:	4618      	mov	r0, r3
 8001988:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <update_+0x240>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2201      	movs	r2, #1
 800198e:	9200      	str	r2, [sp, #0]
 8001990:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001992:	f001 fd13 	bl	80033bc <ssd1306_WriteInt>
	ssd1306_SetCursor(PRESS_UNIT_X, PRESS_UNIT_Y);
 8001996:	235a      	movs	r3, #90	; 0x5a
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2236      	movs	r2, #54	; 0x36
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f001 fcc1 	bl	8003328 <ssd1306_SetCursor>
	ssd1306_WriteString("Pa", *TEXT_FONT, White);
 80019a6:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <update_+0x240>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2201      	movs	r2, #1
 80019ac:	9200      	str	r2, [sp, #0]
 80019ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019b0:	4822      	ldr	r0, [pc, #136]	; (8001a3c <update_+0x25c>)
 80019b2:	f001 fc93 	bl	80032dc <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 80019b6:	f001 fb83 	bl	80030c0 <ssd1306_UpdateScreen>
	/*if(self->data->adcDRAverValuePrev != self->data->adcDRAverValueCurr)
	{
	} */


	self->data->adcDRValuePrev = self->data->adcDRValueCurr;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6851      	ldr	r1, [r2, #4]
 80019c2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80019c6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	self->data->adcHVValuePrev = self->data->adcHVValueCurr;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6851      	ldr	r1, [r2, #4]
 80019d2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80019d6:	e9c1 2308 	strd	r2, r3, [r1, #32]
	self->data->adcPRValuePrev = self->data->adcPRValueCurr;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6851      	ldr	r1, [r2, #4]
 80019e2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80019e6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	self->data->adcDRAverValuePrev = self->data->adcDRAverValueCurr;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6851      	ldr	r1, [r2, #4]
 80019f2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80019f6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a04:	f3af 8000 	nop.w
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	412e8480 	.word	0x412e8480
 8001a10:	200004b4 	.word	0x200004b4
 8001a14:	200004bc 	.word	0x200004bc
 8001a18:	200004c4 	.word	0x200004c4
 8001a1c:	200004d0 	.word	0x200004d0
 8001a20:	2000001c 	.word	0x2000001c
 8001a24:	08008e00 	.word	0x08008e00
 8001a28:	08008e14 	.word	0x08008e14
 8001a2c:	08008e18 	.word	0x08008e18
 8001a30:	08008e1c 	.word	0x08008e1c
 8001a34:	08008e20 	.word	0x08008e20
 8001a38:	08008e24 	.word	0x08008e24
 8001a3c:	08008e28 	.word	0x08008e28

08001a40 <draw_>:

static void draw_(screen_t* self)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	6078      	str	r0, [r7, #4]
	ssd1306_Fill(Black);
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f001 fb21 	bl	8003090 <ssd1306_Fill>
	ssd1306_SetCursor(3, 3);
 8001a4e:	2103      	movs	r1, #3
 8001a50:	2003      	movs	r0, #3
 8001a52:	f001 fc69 	bl	8003328 <ssd1306_SetCursor>
	ssd1306_WriteString("Loading...", *TEXT_FONT, White);
 8001a56:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <draw_+0x34>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	9200      	str	r2, [sp, #0]
 8001a5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a60:	4805      	ldr	r0, [pc, #20]	; (8001a78 <draw_+0x38>)
 8001a62:	f001 fc3b 	bl	80032dc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001a66:	f001 fb2b 	bl	80030c0 <ssd1306_UpdateScreen>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	2000001c 	.word	0x2000001c
 8001a78:	08008e2c 	.word	0x08008e2c

08001a7c <reg_keyboard_cbs_>:

static void reg_keyboard_cbs_(screen_t* self, keyboard_t* keyboard)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
	if(keyboard)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d002      	beq.n	8001a92 <reg_keyboard_cbs_+0x16>
	{
		keyboard_reset_cbs(keyboard);
 8001a8c:	6838      	ldr	r0, [r7, #0]
 8001a8e:	f000 fdc6 	bl	800261e <keyboard_reset_cbs>
	}
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <screen_1_instance>:
	&methods,
	&data
};

screen_t* screen_1_instance()
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
	if(!initialized)
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <screen_1_instance+0x20>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d105      	bne.n	8001ab4 <screen_1_instance+0x18>
	{
		screen_init(&single_screen);
 8001aa8:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <screen_1_instance+0x24>)
 8001aaa:	f7ff fe40 	bl	800172e <screen_init>
		initialized = 1;
 8001aae:	4b03      	ldr	r3, [pc, #12]	; (8001abc <screen_1_instance+0x20>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	701a      	strb	r2, [r3, #0]
	}
	return &single_screen;
 8001ab4:	4b02      	ldr	r3, [pc, #8]	; (8001ac0 <screen_1_instance+0x24>)
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200000fa 	.word	0x200000fa
 8001ac0:	20000030 	.word	0x20000030
 8001ac4:	00000000 	.word	0x00000000

08001ac8 <general_task_init>:
#define TIMER_FREQUENCY (uint32_t)84000000

//extern TIM_HandleTypeDef htim7;

void general_task_init(general_task_t* self)
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b09a      	sub	sp, #104	; 0x68
 8001acc:	af04      	add	r7, sp, #16
 8001ace:	60f8      	str	r0, [r7, #12]
	HAL_Delay(500);
 8001ad0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ad4:	f003 fb34 	bl	8005140 <HAL_Delay>
	memset(self, 0, sizeof(*self));
 8001ad8:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 8001adc:	2100      	movs	r1, #0
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f006 f95e 	bl	8007da0 <memset>

	self->loopPeriod_ms = 50;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2232      	movs	r2, #50	; 0x32
 8001ae8:	801a      	strh	r2, [r3, #0]
	self->freqIT = TIMER_FREQUENCY / (adctim->Init.Period + 1) / (adctim->Init.Prescaler + 1);
 8001aea:	4bdb      	ldr	r3, [pc, #876]	; (8001e58 <general_task_init+0x390>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	3301      	adds	r3, #1
 8001af2:	4ada      	ldr	r2, [pc, #872]	; (8001e5c <general_task_init+0x394>)
 8001af4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001af8:	4bd7      	ldr	r3, [pc, #860]	; (8001e58 <general_task_init+0x390>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	3301      	adds	r3, #1
 8001b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	805a      	strh	r2, [r3, #2]
	self->adcNoCnt = 0;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8

	self->pressureCoeff = 1e+6; // Pa per volt
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4ad2      	ldr	r2, [pc, #840]	; (8001e60 <general_task_init+0x398>)
 8001b16:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

	/* ADC */
	uint8_t MR_word, BUF, UnB, BO, MD; // mode register options
	uint8_t FR_word, FS, CDIV; // filter register options
	double Vref = 0;
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	/* ADC Dose Rate - bipolar */
	// Filter register mode
	FR_word = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FS = 0b011;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	CDIV = 0b00;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	FR_word = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FR_word += (FS << 0);
 8001b3e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001b42:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001b46:	4413      	add	r3, r2
 8001b48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FR_word += (CDIV << 4);
 8001b4c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b58:	4413      	add	r3, r2
 8001b5a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	// Mode register word
	BUF 	= 0b1;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	UnB 	= 0b0; // 0 - bipolar, 1 - unipolar
 8001b64:	2300      	movs	r3, #0
 8001b66:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	BO 		= 0b0; // 0 - disable / 1 - enable burnout current
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	MD 		= 0b00; // single - 0b10, cont - 0b00
 8001b70:	2300      	movs	r3, #0
 8001b72:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	MR_word = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (BUF << 1);
 8001b7c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001b88:	4413      	add	r3, r2
 8001b8a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (UnB << 2);
 8001b8e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001b9a:	4413      	add	r3, r2
 8001b9c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (BO << 3);
 8001ba0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001bac:	4413      	add	r3, r2
 8001bae:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (MD << 6);
 8001bb2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001bb6:	019b      	lsls	r3, r3, #6
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001bbe:	4413      	add	r3, r2
 8001bc0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	Vref = 2.048;
 8001bc4:	a3a2      	add	r3, pc, #648	; (adr r3, 8001e50 <general_task_init+0x388>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	self->adcDoseRate = adc_AD7791_create(&hspi1, ADC_DOSE_SPI_CS_GPIO_Port, ADC_DOSE_SPI_CS_Pin, Vref, FR_word, MR_word);
 8001bce:	68fc      	ldr	r4, [r7, #12]
 8001bd0:	4638      	mov	r0, r7
 8001bd2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8001be2:	2304      	movs	r3, #4
 8001be4:	4a9f      	ldr	r2, [pc, #636]	; (8001e64 <general_task_init+0x39c>)
 8001be6:	49a0      	ldr	r1, [pc, #640]	; (8001e68 <general_task_init+0x3a0>)
 8001be8:	f7ff fa72 	bl	80010d0 <adc_AD7791_create>
 8001bec:	f504 73de 	add.w	r3, r4, #444	; 0x1bc
 8001bf0:	463a      	mov	r2, r7
 8001bf2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bf6:	e883 0003 	stmia.w	r3, {r0, r1}
	adc_init(&self->adcDoseRate);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff f949 	bl	8000e98 <adc_init>
	HAL_Delay(5);
 8001c06:	2005      	movs	r0, #5
 8001c08:	f003 fa9a 	bl	8005140 <HAL_Delay>

	/* ADC HV - bipolar */
	// Filter register mode
	FR_word = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FS = 0b011;
 8001c12:	2303      	movs	r3, #3
 8001c14:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	CDIV = 0b00;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	FR_word = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FR_word += (FS << 0);
 8001c24:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001c28:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FR_word += (CDIV << 4);
 8001c32:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c3e:	4413      	add	r3, r2
 8001c40:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	// Mode register word
	BUF 	= 0b1;
 8001c44:	2301      	movs	r3, #1
 8001c46:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	UnB 	= 0b0; // 0 - bipolar, 1 - unipolar
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	BO 		= 0b0; // 0 - disable / 1 - enable burnout current
 8001c50:	2300      	movs	r3, #0
 8001c52:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	MD 		= 0b00; // single - 0b10, cont - 0b00
 8001c56:	2300      	movs	r3, #0
 8001c58:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	MR_word = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (BUF << 1);
 8001c62:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001c6e:	4413      	add	r3, r2
 8001c70:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (UnB << 2);
 8001c74:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001c80:	4413      	add	r3, r2
 8001c82:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (BO << 3);
 8001c86:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001c92:	4413      	add	r3, r2
 8001c94:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (MD << 6);
 8001c98:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001c9c:	019b      	lsls	r3, r3, #6
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001ca4:	4413      	add	r3, r2
 8001ca6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

	Vref = 2.048;
 8001caa:	a369      	add	r3, pc, #420	; (adr r3, 8001e50 <general_task_init+0x388>)
 8001cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	self->adcHV = adc_AD7791_create(&hspi1, ADC_HV_SPI_CS_GPIO_Port, ADC_HV_SPI_CS_Pin, Vref, FR_word, MR_word);
 8001cb4:	68fc      	ldr	r4, [r7, #12]
 8001cb6:	4638      	mov	r0, r7
 8001cb8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001cbc:	9301      	str	r3, [sp, #4]
 8001cbe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8001cc8:	2308      	movs	r3, #8
 8001cca:	4a66      	ldr	r2, [pc, #408]	; (8001e64 <general_task_init+0x39c>)
 8001ccc:	4966      	ldr	r1, [pc, #408]	; (8001e68 <general_task_init+0x3a0>)
 8001cce:	f7ff f9ff 	bl	80010d0 <adc_AD7791_create>
 8001cd2:	f504 73e2 	add.w	r3, r4, #452	; 0x1c4
 8001cd6:	463a      	mov	r2, r7
 8001cd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cdc:	e883 0003 	stmia.w	r3, {r0, r1}
	adc_init(&self->adcHV);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff f8d6 	bl	8000e98 <adc_init>
	HAL_Delay(5);
 8001cec:	2005      	movs	r0, #5
 8001cee:	f003 fa27 	bl	8005140 <HAL_Delay>

	/* ADC Pressure - unipolar */
	// Filter register mode
	FR_word = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FS = 0b011;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	CDIV = 0b00;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	FR_word = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FR_word += (FS << 0);
 8001d0a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001d0e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001d12:	4413      	add	r3, r2
 8001d14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FR_word += (CDIV << 4);
 8001d18:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d1c:	011b      	lsls	r3, r3, #4
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001d24:	4413      	add	r3, r2
 8001d26:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	// Mode register word
	BUF 	= 0b1;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	UnB 	= 0b1; // 0 - bipolar, 1 - unipolar
 8001d30:	2301      	movs	r3, #1
 8001d32:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	BO 		= 0b0; // 0 - disable / 1 - enable burnout current
 8001d36:	2300      	movs	r3, #0
 8001d38:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	MD 		= 0b00; // single - 0b10, cont - 0b00
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	MR_word = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (BUF << 1);
 8001d48:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001d54:	4413      	add	r3, r2
 8001d56:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (UnB << 2);
 8001d5a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001d66:	4413      	add	r3, r2
 8001d68:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (BO << 3);
 8001d6c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001d78:	4413      	add	r3, r2
 8001d7a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (MD << 6);
 8001d7e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001d82:	019b      	lsls	r3, r3, #6
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	Vref = 2.048;
 8001d90:	a32f      	add	r3, pc, #188	; (adr r3, 8001e50 <general_task_init+0x388>)
 8001d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d96:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	self->adcPressure = adc_AD7791_create(&hspi1, ADC_PRESS_SPI_CS_GPIO_Port, ADC_PRESS_SPI_CS_Pin, Vref, FR_word, MR_word);
 8001d9a:	68fc      	ldr	r4, [r7, #12]
 8001d9c:	4638      	mov	r0, r7
 8001d9e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8001dae:	2302      	movs	r3, #2
 8001db0:	4a2c      	ldr	r2, [pc, #176]	; (8001e64 <general_task_init+0x39c>)
 8001db2:	492d      	ldr	r1, [pc, #180]	; (8001e68 <general_task_init+0x3a0>)
 8001db4:	f7ff f98c 	bl	80010d0 <adc_AD7791_create>
 8001db8:	f504 73e6 	add.w	r3, r4, #460	; 0x1cc
 8001dbc:	463a      	mov	r2, r7
 8001dbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dc2:	e883 0003 	stmia.w	r3, {r0, r1}
	adc_init(&self->adcPressure);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff f863 	bl	8000e98 <adc_init>
	HAL_Delay(5);
 8001dd2:	2005      	movs	r0, #5
 8001dd4:	f003 f9b4 	bl	8005140 <HAL_Delay>

	/* ADC Dose Rate monitor */
	adc_monitor_init(&self->adcDRMonitor, &self->adcDoseRate, USR_ADC_TIM_IRQn);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001de4:	2236      	movs	r2, #54	; 0x36
 8001de6:	4619      	mov	r1, r3
 8001de8:	f7ff fa15 	bl	8001216 <adc_monitor_init>

	/* ADC HV monitor */
	adc_monitor_init(&self->adcHVMonitor, &self->adcHV, USR_ADC_TIM_IRQn);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f503 7000 	add.w	r0, r3, #512	; 0x200
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8001df8:	2236      	movs	r2, #54	; 0x36
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f7ff fa0b 	bl	8001216 <adc_monitor_init>

	/* ADC Pressure monitor */
	adc_monitor_init(&self->adcPRMonitor, &self->adcPressure, USR_ADC_TIM_IRQn);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f503 700a 	add.w	r0, r3, #552	; 0x228
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8001e0c:	2236      	movs	r2, #54	; 0x36
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f7ff fa01 	bl	8001216 <adc_monitor_init>

	/* DAC HV Input */
	//self->dacInputHV = dac_emulator_create(); // emulator
	self->dacInputHV = dac_MCP4811EP_create(&hspi3,
 8001e14:	68fc      	ldr	r4, [r7, #12]
 8001e16:	4638      	mov	r0, r7
 8001e18:	2300      	movs	r3, #0
 8001e1a:	9303      	str	r3, [sp, #12]
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	9302      	str	r3, [sp, #8]
 8001e20:	2300      	movs	r3, #0
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	2300      	movs	r3, #0
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2302      	movs	r3, #2
 8001e2a:	4a10      	ldr	r2, [pc, #64]	; (8001e6c <general_task_init+0x3a4>)
 8001e2c:	4910      	ldr	r1, [pc, #64]	; (8001e70 <general_task_init+0x3a8>)
 8001e2e:	f7ff fbe3 	bl	80015f8 <dac_MCP4811EP_create>
 8001e32:	f504 7314 	add.w	r3, r4, #592	; 0x250
 8001e36:	463a      	mov	r2, r7
 8001e38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e3c:	e883 0003 	stmia.w	r3, {r0, r1}
			DAC_SPI_CS_GPIO_Port, DAC_SPI_CS_Pin,
			NULL, 0,
			NULL, 0
			); // real

	dac_init(&self->dacInputHV);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001e46:	4618      	mov	r0, r3
 8001e48:	e014      	b.n	8001e74 <general_task_init+0x3ac>
 8001e4a:	bf00      	nop
 8001e4c:	f3af 8000 	nop.w
 8001e50:	d2f1a9fc 	.word	0xd2f1a9fc
 8001e54:	4000624d 	.word	0x4000624d
 8001e58:	20000038 	.word	0x20000038
 8001e5c:	0501bd00 	.word	0x0501bd00
 8001e60:	49742400 	.word	0x49742400
 8001e64:	40020000 	.word	0x40020000
 8001e68:	200001a4 	.word	0x200001a4
 8001e6c:	40020c00 	.word	0x40020c00
 8001e70:	20000254 	.word	0x20000254
 8001e74:	f7ff fb12 	bl	800149c <dac_init>

	/* HV System */
	hv_init(&self->hv_system,
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f503 7016 	add.w	r0, r3, #600	; 0x258
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f503 7114 	add.w	r1, r3, #592	; 0x250
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f503 72e2 	add.w	r2, r3, #452	; 0x1c4
 8001e8a:	2308      	movs	r3, #8
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	ed9f 2b34 	vldr	d2, [pc, #208]	; 8001f60 <general_task_init+0x498>
 8001e92:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8001f68 <general_task_init+0x4a0>
 8001e96:	ed9f 0b36 	vldr	d0, [pc, #216]	; 8001f70 <general_task_init+0x4a8>
 8001e9a:	4b37      	ldr	r3, [pc, #220]	; (8001f78 <general_task_init+0x4b0>)
 8001e9c:	f000 fa0c 	bl	80022b8 <hv_init>
			0.002,
			500
			);

	/* Select range pin */
	set_adc_dose_range_select_pin(SENSOR_RANGE_SELECT_GPIO_Port, SENSOR_RANGE_SELECT_Pin);
 8001ea0:	2104      	movs	r1, #4
 8001ea2:	4835      	ldr	r0, [pc, #212]	; (8001f78 <general_task_init+0x4b0>)
 8001ea4:	f7ff fab8 	bl	8001418 <set_adc_dose_range_select_pin>
	select_broad_adc_dose_range();
 8001ea8:	f7ff facc 	bl	8001444 <select_broad_adc_dose_range>


	/* SD Card*/

	HAL_Delay(5);
 8001eac:	2005      	movs	r0, #5
 8001eae:	f003 f947 	bl	8005140 <HAL_Delay>
	/* Ethernet */
	wiz_NetInfo gWIZNETINFO = {
 8001eb2:	4b32      	ldr	r3, [pc, #200]	; (8001f7c <general_task_init+0x4b4>)
 8001eb4:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001eb8:	461d      	mov	r5, r3
 8001eba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ebc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ebe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ec2:	6020      	str	r0, [r4, #0]
 8001ec4:	3404      	adds	r4, #4
 8001ec6:	8021      	strh	r1, [r4, #0]
 8001ec8:	3402      	adds	r4, #2
 8001eca:	0c0b      	lsrs	r3, r1, #16
 8001ecc:	7023      	strb	r3, [r4, #0]
			.gw		= {169, 254, 206, 240},
			.dns 	= {0, 0, 0, 0},
			.dhcp 	= NETINFO_STATIC
	};

	W5500_SetAddress(gWIZNETINFO);
 8001ece:	466b      	mov	r3, sp
 8001ed0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001ed4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ed8:	6018      	str	r0, [r3, #0]
 8001eda:	3304      	adds	r3, #4
 8001edc:	8019      	strh	r1, [r3, #0]
 8001ede:	3302      	adds	r3, #2
 8001ee0:	0c0a      	lsrs	r2, r1, #16
 8001ee2:	701a      	strb	r2, [r3, #0]
 8001ee4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ee8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eea:	f003 f829 	bl	8004f40 <W5500_SetAddress>
	W5500_Reboot();
 8001eee:	f003 f843 	bl	8004f78 <W5500_Reboot>

	/* TCP server sockets */
	tcp_output_stream_init_data_t tcpOutputInit;
	tcpOutputInit.sn = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f887 3020 	strb.w	r3, [r7, #32]
	tcpOutputInit.port = 11151;
 8001ef8:	f642 338f 	movw	r3, #11151	; 0x2b8f
 8001efc:	847b      	strh	r3, [r7, #34]	; 0x22
	tcpOutputInit.flag = SF_IO_NONBLOCK;
 8001efe:	2301      	movs	r3, #1
 8001f00:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	tcpOutputInit.hinput = &self->tcpInput;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	33a0      	adds	r3, #160	; 0xa0
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
	tcpOutputInit.closeSocketCounterMax = 50;
 8001f0a:	2332      	movs	r3, #50	; 0x32
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c

	tcp_output_stream_init(&self->tcpOutput, tcpOutputInit);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1d18      	adds	r0, r3, #4
 8001f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	f107 0320 	add.w	r3, r7, #32
 8001f1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f1c:	f001 fc7e 	bl	800381c <tcp_output_stream_init>

	tcp_input_stream_init_data_t tcpInputInit;
	tcpInputInit.sn = 1;
 8001f20:	2301      	movs	r3, #1
 8001f22:	753b      	strb	r3, [r7, #20]
	tcpInputInit.port = 11152;
 8001f24:	f642 3390 	movw	r3, #11152	; 0x2b90
 8001f28:	82fb      	strh	r3, [r7, #22]
	tcpInputInit.flag = SF_IO_NONBLOCK;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	763b      	strb	r3, [r7, #24]
	tcpInputInit.w5500RebootCounterMax = 50;
 8001f2e:	2332      	movs	r3, #50	; 0x32
 8001f30:	61fb      	str	r3, [r7, #28]
	tcp_input_stream_init(&self->tcpInput, tcpInputInit);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f3e:	f001 fb25 	bl	800358c <tcp_input_stream_init>

	self->cycleCounter = 0;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	self->cycleCounterMax = self->loopPeriod_ms;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
}
 8001f56:	bf00      	nop
 8001f58:	3758      	adds	r7, #88	; 0x58
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	00000000 	.word	0x00000000
 8001f64:	407f4000 	.word	0x407f4000
 8001f68:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f6c:	3f60624d 	.word	0x3f60624d
 8001f70:	00000000 	.word	0x00000000
 8001f74:	3ff00000 	.word	0x3ff00000
 8001f78:	40020800 	.word	0x40020800
 8001f7c:	08008e38 	.word	0x08008e38

08001f80 <general_task_setup>:

void general_task_setup(general_task_t* self)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
	//ILI9341_Init();

	// init display
	ssd1306_Init();
 8001f88:	f001 f818 	bl	8002fbc <ssd1306_Init>
	general_task_switch_screen(self, screen_1_instance());
 8001f8c:	f7ff fd86 	bl	8001a9c <screen_1_instance>
 8001f90:	4603      	mov	r3, r0
 8001f92:	4619      	mov	r1, r3
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f97d 	bl	8002294 <general_task_switch_screen>
	tcp_input_stream_enable_handler(&self->tcpInput);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	33a0      	adds	r3, #160	; 0xa0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f001 fb7d 	bl	800369e <tcp_input_stream_enable_handler>
	/* HV ADC Start Calibration (offset measurement) */
	adc_monitor_start_measurement(&self->adcHVMonitor, self->freqIT * 2 / 3);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f503 7000 	add.w	r0, r3, #512	; 0x200
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	885b      	ldrh	r3, [r3, #2]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4a05      	ldr	r2, [pc, #20]	; (8001fc8 <general_task_setup+0x48>)
 8001fb2:	fb82 1203 	smull	r1, r2, r2, r3
 8001fb6:	17db      	asrs	r3, r3, #31
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f7ff f9c8 	bl	8001350 <adc_monitor_start_measurement>
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	55555556 	.word	0x55555556
 8001fcc:	00000000 	.word	0x00000000

08001fd0 <general_task_loop>:

void general_task_loop(general_task_t* self)
{
 8001fd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
	keyboard_routine(&self->keyboard);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	33f4      	adds	r3, #244	; 0xf4
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 faf8 	bl	80025d4 <keyboard_routine>
	if(!self->cycleCounter)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f040 80c5 	bne.w	800217a <general_task_loop+0x1aa>
	{
		self->cycleCounter = self->cycleCounterMax;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f8d3 22ac 	ldr.w	r2, [r3, #684]	; 0x2ac
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8

		// Output message

		//tx_message_increase_id(&self->txMessage);

		HAL_NVIC_DisableIRQ(USR_ADC_TIM_IRQn);
 8001ffc:	2036      	movs	r0, #54	; 0x36
 8001ffe:	f003 f9ec 	bl	80053da <HAL_NVIC_DisableIRQ>
		tx_message_set_adc_dr_uV(&self->txMessage, (int32_t)(adc_get_vout(&self->adcDoseRate) * 1e+6));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe ff6c 	bl	8000eec <adc_get_vout>
 8002014:	ec51 0b10 	vmov	r0, r1, d0
 8002018:	a360      	add	r3, pc, #384	; (adr r3, 800219c <general_task_loop+0x1cc>)
 800201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201e:	f7fe fa8f 	bl	8000540 <__aeabi_dmul>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4610      	mov	r0, r2
 8002028:	4619      	mov	r1, r3
 800202a:	f7fe fd39 	bl	8000aa0 <__aeabi_d2iz>
 800202e:	4603      	mov	r3, r0
 8002030:	4619      	mov	r1, r3
 8002032:	4620      	mov	r0, r4
 8002034:	f001 fd29 	bl	8003a8a <tx_message_set_adc_dr_uV>
		tx_message_set_adc_dr_average_uV(&self->txMessage, (int32_t)(adc_monitor_get_average_signal_value(&self->adcDRMonitor) * 1e+6));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff f9bc 	bl	80013c2 <adc_monitor_get_average_signal_value>
 800204a:	ec51 0b10 	vmov	r0, r1, d0
 800204e:	a353      	add	r3, pc, #332	; (adr r3, 800219c <general_task_loop+0x1cc>)
 8002050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002054:	f7fe fa74 	bl	8000540 <__aeabi_dmul>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	f7fe fd1e 	bl	8000aa0 <__aeabi_d2iz>
 8002064:	4603      	mov	r3, r0
 8002066:	4619      	mov	r1, r3
 8002068:	4620      	mov	r0, r4
 800206a:	f001 fd1d 	bl	8003aa8 <tx_message_set_adc_dr_average_uV>
		tx_message_set_hv_out_mV(&self->txMessage, (int32_t)(hv_get_output_voltage_V(&self->hv_system) * 1e+3)); // hv offset!!!
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f9b2 	bl	80023e4 <hv_get_output_voltage_V>
 8002080:	ec51 0b10 	vmov	r0, r1, d0
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	4b43      	ldr	r3, [pc, #268]	; (8002198 <general_task_loop+0x1c8>)
 800208a:	f7fe fa59 	bl	8000540 <__aeabi_dmul>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4610      	mov	r0, r2
 8002094:	4619      	mov	r1, r3
 8002096:	f7fe fd03 	bl	8000aa0 <__aeabi_d2iz>
 800209a:	4603      	mov	r3, r0
 800209c:	4619      	mov	r1, r3
 800209e:	4620      	mov	r0, r4
 80020a0:	f001 fd11 	bl	8003ac6 <tx_message_set_hv_out_mV>
		tx_message_set_press_out_Pa(&self->txMessage, adc_get_vout(&self->adcPressure) * self->pressureCoeff);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe ff1b 	bl	8000eec <adc_get_vout>
 80020b6:	ec59 8b10 	vmov	r8, r9, d0
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe f9e5 	bl	8000490 <__aeabi_f2d>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4640      	mov	r0, r8
 80020cc:	4649      	mov	r1, r9
 80020ce:	f7fe fa37 	bl	8000540 <__aeabi_dmul>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4610      	mov	r0, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	f7fe fce1 	bl	8000aa0 <__aeabi_d2iz>
 80020de:	4603      	mov	r3, r0
 80020e0:	4619      	mov	r1, r3
 80020e2:	4620      	mov	r0, r4
 80020e4:	f001 fcfe 	bl	8003ae4 <tx_message_set_press_out_Pa>
		tx_message_set_adc_dr_measure_state(&self->txMessage, adc_monitor_get_measurement_state(&self->adcDRMonitor));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff f982 	bl	80013fe <adc_monitor_get_measurement_state>
 80020fa:	4603      	mov	r3, r0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	4619      	mov	r1, r3
 8002100:	4620      	mov	r0, r4
 8002102:	f001 fcfe 	bl	8003b02 <tx_message_set_adc_dr_measure_state>
		tx_message_set_adc_dr_measure_time(&self->txMessage, adc_monitor_get_measurement_cycle_no(&self->adcDRMonitor) * 3 / self->freqIT );
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff f967 	bl	80013e6 <adc_monitor_get_measurement_cycle_no>
 8002118:	4602      	mov	r2, r0
 800211a:	4613      	mov	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	4413      	add	r3, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	8852      	ldrh	r2, [r2, #2]
 8002124:	fbb3 f3f2 	udiv	r3, r3, r2
 8002128:	b29b      	uxth	r3, r3
 800212a:	4619      	mov	r1, r3
 800212c:	4620      	mov	r0, r4
 800212e:	f001 fcf8 	bl	8003b22 <tx_message_set_adc_dr_measure_time>
		HAL_NVIC_EnableIRQ(USR_ADC_TIM_IRQn);
 8002132:	2036      	movs	r0, #54	; 0x36
 8002134:	f003 f943 	bl	80053be <HAL_NVIC_EnableIRQ>

		tcp_output_stream_set_message(&self->tcpOutput, tx_message_get(&self->txMessage), tx_message_size());
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	1d1c      	adds	r4, r3, #4
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	33dc      	adds	r3, #220	; 0xdc
 8002140:	4618      	mov	r0, r3
 8002142:	f001 fcfe 	bl	8003b42 <tx_message_get>
 8002146:	4605      	mov	r5, r0
 8002148:	f001 fd06 	bl	8003b58 <tx_message_size>
 800214c:	4603      	mov	r3, r0
 800214e:	b29b      	uxth	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	4629      	mov	r1, r5
 8002154:	4620      	mov	r0, r4
 8002156:	f001 fb97 	bl	8003888 <tcp_output_stream_set_message>
		tcp_output_stream_routine(&self->tcpOutput);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3304      	adds	r3, #4
 800215e:	4618      	mov	r0, r3
 8002160:	f001 fbbf 	bl	80038e2 <tcp_output_stream_routine>

		// Input message
		tcp_input_stream_routine(&self->tcpInput);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	33a0      	adds	r3, #160	; 0xa0
 8002168:	4618      	mov	r0, r3
 800216a:	f001 fa53 	bl	8003614 <tcp_input_stream_routine>

		// Update screen
		screen_update(self->currentScreen);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff faf4 	bl	8001762 <screen_update>
	}

	self->cycleCounter--;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 8002180:	1e5a      	subs	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	HAL_Delay(1);
 8002188:	2001      	movs	r0, #1
 800218a:	f002 ffd9 	bl	8005140 <HAL_Delay>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002198:	408f4000 	.word	0x408f4000
 800219c:	00000000 	.word	0x00000000
 80021a0:	412e8480 	.word	0x412e8480

080021a4 <general_task_timer_interrupt>:

void general_task_timer_interrupt(general_task_t* self)
{
 80021a4:	b590      	push	{r4, r7, lr}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	tx_message_increase_id(&self->txMessage);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	33dc      	adds	r3, #220	; 0xdc
 80021b0:	4618      	mov	r0, r3
 80021b2:	f001 fc57 	bl	8003a64 <tx_message_increase_id>

	switch(self->adcNoCnt)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d053      	beq.n	8002268 <general_task_timer_interrupt+0xc4>
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	dc63      	bgt.n	800228c <general_task_timer_interrupt+0xe8>
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <general_task_timer_interrupt+0x2a>
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d015      	beq.n	80021f8 <general_task_timer_interrupt+0x54>
		adc_update(&self->adcPressure, NULL);
		adc_monitor_update(&self->adcPRMonitor);
		self->adcNoCnt = 0;
		break;
	}
}
 80021cc:	e05e      	b.n	800228c <general_task_timer_interrupt+0xe8>
		adc_update(&self->adcDoseRate, NULL);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe fe6b 	bl	8000eb2 <adc_update>
		adc_monitor_update(&self->adcDRMonitor);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff f832 	bl	800124c <adc_monitor_update>
		self->adcNoCnt++;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		break;
 80021f6:	e049      	b.n	800228c <general_task_timer_interrupt+0xe8>
		adc_update(&self->adcHV, NULL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe fe56 	bl	8000eb2 <adc_update>
		adc_monitor_update(&self->adcHVMonitor);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff f81d 	bl	800124c <adc_monitor_update>
		if(adc_monitor_get_measurement_state(&self->adcHVMonitor) == ADC_COMPLETED)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff f8f0 	bl	80013fe <adc_monitor_get_measurement_state>
 800221e:	4603      	mov	r3, r0
 8002220:	2b02      	cmp	r3, #2
 8002222:	d119      	bne.n	8002258 <general_task_timer_interrupt+0xb4>
			hv_set_output_voltage_adc_offset(&self->hv_system,
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f503 7416 	add.w	r4, r3, #600	; 0x258
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff f8c6 	bl	80013c2 <adc_monitor_get_average_signal_value>
 8002236:	eeb0 7a40 	vmov.f32	s14, s0
 800223a:	eef0 7a60 	vmov.f32	s15, s1
 800223e:	eeb0 0a47 	vmov.f32	s0, s14
 8002242:	eef0 0a67 	vmov.f32	s1, s15
 8002246:	4620      	mov	r0, r4
 8002248:	f000 f8f0 	bl	800242c <hv_set_output_voltage_adc_offset>
			adc_monitor_reset_measurement(&self->adcHVMonitor);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff f89e 	bl	8001394 <adc_monitor_reset_measurement>
		self->adcNoCnt++;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		break;
 8002266:	e011      	b.n	800228c <general_task_timer_interrupt+0xe8>
		adc_update(&self->adcPressure, NULL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe fe1e 	bl	8000eb2 <adc_update>
		adc_monitor_update(&self->adcPRMonitor);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe ffe5 	bl	800124c <adc_monitor_update>
		self->adcNoCnt = 0;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		break;
 800228a:	bf00      	nop
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	bd90      	pop	{r4, r7, pc}

08002294 <general_task_switch_screen>:


void general_task_switch_screen(general_task_t* self, screen_t* screen)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
	//screen_register_keyboard(screen, &self->keyboard);
	screen_draw(screen);
 800229e:	6838      	ldr	r0, [r7, #0]
 80022a0:	f7ff fa52 	bl	8001748 <screen_draw>
	self->currentScreen = screen;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	0000      	movs	r0, r0
	...

080022b8 <hv_init>:
		uint16_t pinSelectHV,
		double VoutStep_V,
		double VoutGainADC,
		double VoutMax
		)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	; 0x28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6278      	str	r0, [r7, #36]	; 0x24
 80022c0:	6239      	str	r1, [r7, #32]
 80022c2:	61fa      	str	r2, [r7, #28]
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	ed87 0b04 	vstr	d0, [r7, #16]
 80022ca:	ed87 1b02 	vstr	d1, [r7, #8]
 80022ce:	ed87 2b00 	vstr	d2, [r7]
	memset(self, 0, sizeof(*self));
 80022d2:	2230      	movs	r2, #48	; 0x30
 80022d4:	2100      	movs	r1, #0
 80022d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022d8:	f005 fd62 	bl	8007da0 <memset>
	self->inputDAC 		= inputDAC;
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	6a3a      	ldr	r2, [r7, #32]
 80022e0:	601a      	str	r2, [r3, #0]
	self->outputADC 	= outputADC;
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	69fa      	ldr	r2, [r7, #28]
 80022e6:	605a      	str	r2, [r3, #4]
	self->portSelectHV 	= portSelectHV;
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	609a      	str	r2, [r3, #8]
	self->pinSelectHV 	= pinSelectHV;
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80022f2:	819a      	strh	r2, [r3, #12]
	self->VoutStep_V 	= VoutStep_V;
 80022f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80022fa:	e9c1 2304 	strd	r2, r3, [r1, #16]
	self->VoutGainADC 	= VoutGainADC;
 80022fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002300:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002304:	e9c1 2308 	strd	r2, r3, [r1, #32]
	self->VoutMax		= VoutMax;
 8002308:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800230a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800230e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	hv_select_positive_source(self);
 8002312:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002314:	f000 f821 	bl	800235a <hv_select_positive_source>
	hv_set_output_voltage_adc_offset(self, 0);
 8002318:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8002330 <hv_init+0x78>
 800231c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800231e:	f000 f885 	bl	800242c <hv_set_output_voltage_adc_offset>
}
 8002322:	bf00      	nop
 8002324:	3728      	adds	r7, #40	; 0x28
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	f3af 8000 	nop.w
	...

08002338 <hv_select_negative_source>:

void hv_select_negative_source(high_voltage_system_t* self)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(self->portSelectHV, self->pinSelectHV, HV_NEGATIVE_SOURCE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6898      	ldr	r0, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	899b      	ldrh	r3, [r3, #12]
 8002348:	2201      	movs	r2, #1
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	4619      	mov	r1, r3
 800234e:	f003 fa13 	bl	8005778 <HAL_GPIO_WritePin>
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <hv_select_positive_source>:

void hv_select_positive_source(high_voltage_system_t* self)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(self->portSelectHV, self->pinSelectHV, HV_POSITIVE_SOURCE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6898      	ldr	r0, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	899b      	ldrh	r3, [r3, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	4619      	mov	r1, r3
 8002370:	f003 fa02 	bl	8005778 <HAL_GPIO_WritePin>
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <hv_set_abs_output_voltage_V>:

void hv_set_abs_output_voltage_V(high_voltage_system_t* self, double Vout)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	ed87 0b00 	vstr	d0, [r7]
	uint32_t digital = (uint32_t)round(fmin(Vout, self->VoutMax) / self->VoutStep_V);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800238e:	eeb0 1a47 	vmov.f32	s2, s14
 8002392:	eef0 1a67 	vmov.f32	s3, s15
 8002396:	ed97 0b00 	vldr	d0, [r7]
 800239a:	f005 fdce 	bl	8007f3a <fmin>
 800239e:	ec51 0b10 	vmov	r0, r1, d0
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80023a8:	f7fe f9f4 	bl	8000794 <__aeabi_ddiv>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	ec43 2b17 	vmov	d7, r2, r3
 80023b4:	eeb0 0a47 	vmov.f32	s0, s14
 80023b8:	eef0 0a67 	vmov.f32	s1, s15
 80023bc:	f005 fe0e 	bl	8007fdc <round>
 80023c0:	ec53 2b10 	vmov	r2, r3, d0
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	f7fe fb92 	bl	8000af0 <__aeabi_d2uiz>
 80023cc:	4603      	mov	r3, r0
 80023ce:	617b      	str	r3, [r7, #20]
	dac_set_input_value(self->inputDAC, digital);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6979      	ldr	r1, [r7, #20]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff f86d 	bl	80014b6 <dac_set_input_value>
}
 80023dc:	bf00      	nop
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <hv_get_output_voltage_V>:

double hv_get_output_voltage_V(high_voltage_system_t* self)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
	return (adc_get_vout(self->outputADC) - self->VoutOffsetADC_V) / self->VoutGainADC;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe fd7b 	bl	8000eec <adc_get_vout>
 80023f6:	ec51 0b10 	vmov	r0, r1, d0
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002400:	f7fd fee6 	bl	80001d0 <__aeabi_dsub>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4610      	mov	r0, r2
 800240a:	4619      	mov	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002412:	f7fe f9bf 	bl	8000794 <__aeabi_ddiv>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	ec43 2b17 	vmov	d7, r2, r3
}
 800241e:	eeb0 0a47 	vmov.f32	s0, s14
 8002422:	eef0 0a67 	vmov.f32	s1, s15
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <hv_set_output_voltage_adc_offset>:

void hv_set_output_voltage_adc_offset(high_voltage_system_t* self, double offset_V)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	ed87 0b00 	vstr	d0, [r7]
	self->VoutOffsetADC_V = offset_V;
 8002438:	68f9      	ldr	r1, [r7, #12]
 800243a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800243e:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <empty_cb_>:
#include "button.h"
#include <string.h>
//#include "button_callbacks.h"

static uint8_t button_is_pressed(button_t* self);
static void empty_cb_(void) {};
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0
 8002452:	bf00      	nop
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <button_reset_cbs>:
{
	self->release_cb = callback;
}

void button_reset_cbs(button_t* self)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
	self->short_press_cb 	= empty_cb_;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a07      	ldr	r2, [pc, #28]	; (8002484 <button_reset_cbs+0x28>)
 8002468:	615a      	str	r2, [r3, #20]
	self->long_press_cb 	= empty_cb_;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a05      	ldr	r2, [pc, #20]	; (8002484 <button_reset_cbs+0x28>)
 800246e:	619a      	str	r2, [r3, #24]
	self->release_cb		= empty_cb_;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a04      	ldr	r2, [pc, #16]	; (8002484 <button_reset_cbs+0x28>)
 8002474:	61da      	str	r2, [r3, #28]
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	0800244f 	.word	0x0800244f

08002488 <button_routine>:

void button_routine(button_t* self)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	self->currentButtonState = button_is_pressed(self);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f887 	bl	80025a4 <button_is_pressed>
 8002496:	4603      	mov	r3, r0
 8002498:	461a      	mov	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	749a      	strb	r2, [r3, #18]
	switch(self->state)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	7b1b      	ldrb	r3, [r3, #12]
 80024a2:	2b06      	cmp	r3, #6
 80024a4:	d876      	bhi.n	8002594 <button_routine+0x10c>
 80024a6:	a201      	add	r2, pc, #4	; (adr r2, 80024ac <button_routine+0x24>)
 80024a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ac:	080024c9 	.word	0x080024c9
 80024b0:	080024ed 	.word	0x080024ed
 80024b4:	0800251d 	.word	0x0800251d
 80024b8:	0800252b 	.word	0x0800252b
 80024bc:	0800255b 	.word	0x0800255b
 80024c0:	08002569 	.word	0x08002569
 80024c4:	08002579 	.word	0x08002579
	{
	case BUTTON_NOT_ACTIVE:
		self->filteringCounter = 0;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	81da      	strh	r2, [r3, #14]
		self->longDelayCounter = 0;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	821a      	strh	r2, [r3, #16]
		if(self->currentButtonState && !self->previousButtonState)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	7c9b      	ldrb	r3, [r3, #18]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d054      	beq.n	8002586 <button_routine+0xfe>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	7cdb      	ldrb	r3, [r3, #19]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d150      	bne.n	8002586 <button_routine+0xfe>
		{
			self->state = BUTTON_FILTERING;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	731a      	strb	r2, [r3, #12]
		}
		break;
 80024ea:	e04c      	b.n	8002586 <button_routine+0xfe>
	case BUTTON_FILTERING:
		if(self->currentButtonState)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	7c9b      	ldrb	r3, [r3, #18]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d006      	beq.n	8002502 <button_routine+0x7a>
		{
			self->filteringCounter++;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	89db      	ldrh	r3, [r3, #14]
 80024f8:	3301      	adds	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	81da      	strh	r2, [r3, #14]
 8002500:	e002      	b.n	8002508 <button_routine+0x80>
		}
		else
		{
			self->state = BUTTON_NOT_ACTIVE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	731a      	strb	r2, [r3, #12]
		}
		if(self->filteringCounter >= self->initData.cyclesFiltering)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	89da      	ldrh	r2, [r3, #14]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	891b      	ldrh	r3, [r3, #8]
 8002510:	429a      	cmp	r2, r3
 8002512:	d33a      	bcc.n	800258a <button_routine+0x102>
		{
			self->state = BUTTON_SHORT_PRESS;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2202      	movs	r2, #2
 8002518:	731a      	strb	r2, [r3, #12]
		}
		break;
 800251a:	e036      	b.n	800258a <button_routine+0x102>
	case BUTTON_SHORT_PRESS:
		self->short_press_cb();
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	4798      	blx	r3
		self->state = BUTTON_SHORT_HOLD;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2203      	movs	r2, #3
 8002526:	731a      	strb	r2, [r3, #12]
		break;
 8002528:	e034      	b.n	8002594 <button_routine+0x10c>
	case BUTTON_SHORT_HOLD:
		if(self->currentButtonState)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	7c9b      	ldrb	r3, [r3, #18]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d006      	beq.n	8002540 <button_routine+0xb8>
		{
			self->longDelayCounter++;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	8a1b      	ldrh	r3, [r3, #16]
 8002536:	3301      	adds	r3, #1
 8002538:	b29a      	uxth	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	821a      	strh	r2, [r3, #16]
 800253e:	e002      	b.n	8002546 <button_routine+0xbe>
		}
		else
		{
			self->state = BUTTON_RELEASE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2206      	movs	r2, #6
 8002544:	731a      	strb	r2, [r3, #12]
		}

		if(self->longDelayCounter >= self->initData.cyclesLongDelay)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	8a1a      	ldrh	r2, [r3, #16]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	895b      	ldrh	r3, [r3, #10]
 800254e:	429a      	cmp	r2, r3
 8002550:	d31d      	bcc.n	800258e <button_routine+0x106>
		{
			self->state = BUTTON_LONG_PRESS;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2204      	movs	r2, #4
 8002556:	731a      	strb	r2, [r3, #12]
		}
		break;
 8002558:	e019      	b.n	800258e <button_routine+0x106>
	case BUTTON_LONG_PRESS:
		self->long_press_cb();
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	4798      	blx	r3
		self->state = BUTTON_LONG_HOLD;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2205      	movs	r2, #5
 8002564:	731a      	strb	r2, [r3, #12]
		break;
 8002566:	e015      	b.n	8002594 <button_routine+0x10c>
	case BUTTON_LONG_HOLD:
		if(!self->currentButtonState)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	7c9b      	ldrb	r3, [r3, #18]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d110      	bne.n	8002592 <button_routine+0x10a>
		{
			self->state = BUTTON_RELEASE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2206      	movs	r2, #6
 8002574:	731a      	strb	r2, [r3, #12]
		}
		break;
 8002576:	e00c      	b.n	8002592 <button_routine+0x10a>
	case BUTTON_RELEASE:
		self->release_cb();
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	4798      	blx	r3
		self->state = BUTTON_NOT_ACTIVE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	731a      	strb	r2, [r3, #12]
		break;
 8002584:	e006      	b.n	8002594 <button_routine+0x10c>
		break;
 8002586:	bf00      	nop
 8002588:	e004      	b.n	8002594 <button_routine+0x10c>
		break;
 800258a:	bf00      	nop
 800258c:	e002      	b.n	8002594 <button_routine+0x10c>
		break;
 800258e:	bf00      	nop
 8002590:	e000      	b.n	8002594 <button_routine+0x10c>
		break;
 8002592:	bf00      	nop
	}
	self->previousButtonState = self->currentButtonState;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	7c9a      	ldrb	r2, [r3, #18]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	74da      	strb	r2, [r3, #19]
}
 800259c:	bf00      	nop
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <button_is_pressed>:

static uint8_t button_is_pressed(button_t* self)
{
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	return self->initData.unpressedState != HAL_GPIO_ReadPin(self->initData.port, self->initData.pin);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	799c      	ldrb	r4, [r3, #6]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	889b      	ldrh	r3, [r3, #4]
 80025b8:	4619      	mov	r1, r3
 80025ba:	4610      	mov	r0, r2
 80025bc:	f003 f8c4 	bl	8005748 <HAL_GPIO_ReadPin>
 80025c0:	4603      	mov	r3, r0
 80025c2:	429c      	cmp	r4, r3
 80025c4:	bf14      	ite	ne
 80025c6:	2301      	movne	r3, #1
 80025c8:	2300      	moveq	r3, #0
 80025ca:	b2db      	uxtb	r3, r3
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd90      	pop	{r4, r7, pc}

080025d4 <keyboard_routine>:

#include "keyboard.h"
#include <string.h>

void keyboard_routine(keyboard_t* self)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	button_routine(&self->up);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff ff52 	bl	8002488 <button_routine>
	button_routine(&self->down);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3320      	adds	r3, #32
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ff4d 	bl	8002488 <button_routine>
	button_routine(&self->ok);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3340      	adds	r3, #64	; 0x40
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff ff48 	bl	8002488 <button_routine>
	button_routine(&self->axisReset);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3360      	adds	r3, #96	; 0x60
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ff43 	bl	8002488 <button_routine>
	button_routine(&self->step);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3380      	adds	r3, #128	; 0x80
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff ff3e 	bl	8002488 <button_routine>
	button_routine(&self->motion);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	33a0      	adds	r3, #160	; 0xa0
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ff39 	bl	8002488 <button_routine>
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <keyboard_reset_cbs>:

void keyboard_reset_cbs(keyboard_t* self)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]

	button_reset_cbs(&self->up);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff17 	bl	800245c <button_reset_cbs>
	button_reset_cbs(&self->down);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3320      	adds	r3, #32
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff ff12 	bl	800245c <button_reset_cbs>
	button_reset_cbs(&self->ok);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3340      	adds	r3, #64	; 0x40
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff ff0d 	bl	800245c <button_reset_cbs>
	button_reset_cbs(&self->axisReset);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3360      	adds	r3, #96	; 0x60
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff ff08 	bl	800245c <button_reset_cbs>
	button_reset_cbs(&self->step);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3380      	adds	r3, #128	; 0x80
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ff03 	bl	800245c <button_reset_cbs>
	button_reset_cbs(&self->motion);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	33a0      	adds	r3, #160	; 0xa0
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fefe 	bl	800245c <button_reset_cbs>
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800266c:	f002 fcf6 	bl	800505c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002670:	f000 f826 	bl	80026c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002674:	f000 f994 	bl	80029a0 <MX_GPIO_Init>
  MX_TIM6_Init();
 8002678:	f000 f95c 	bl	8002934 <MX_TIM6_Init>
  MX_SPI3_Init();
 800267c:	f000 f924 	bl	80028c8 <MX_SPI3_Init>
  MX_SPI2_Init();
 8002680:	f000 f8ec 	bl	800285c <MX_SPI2_Init>
  MX_SPI1_Init();
 8002684:	f000 f8b4 	bl	80027f0 <MX_SPI1_Init>
  MX_I2C3_Init();
 8002688:	f000 f884 	bl	8002794 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_DisableIRQ(USR_ADC_TIM_IRQn);
 800268c:	2036      	movs	r0, #54	; 0x36
 800268e:	f002 fea4 	bl	80053da <HAL_NVIC_DisableIRQ>
  HAL_TIM_Base_Start_IT(adctim);
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <main+0x50>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f004 ffae 	bl	80075f8 <HAL_TIM_Base_Start_IT>

  // general task init
  general_task_init(&task);
 800269c:	4807      	ldr	r0, [pc, #28]	; (80026bc <main+0x54>)
 800269e:	f7ff fa13 	bl	8001ac8 <general_task_init>
  general_task_setup(&task);
 80026a2:	4806      	ldr	r0, [pc, #24]	; (80026bc <main+0x54>)
 80026a4:	f7ff fc6c 	bl	8001f80 <general_task_setup>

  HAL_NVIC_EnableIRQ(USR_ADC_TIM_IRQn);
 80026a8:	2036      	movs	r0, #54	; 0x36
 80026aa:	f002 fe88 	bl	80053be <HAL_NVIC_EnableIRQ>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 general_task_loop(&task);
 80026ae:	4803      	ldr	r0, [pc, #12]	; (80026bc <main+0x54>)
 80026b0:	f7ff fc8e 	bl	8001fd0 <general_task_loop>
 80026b4:	e7fb      	b.n	80026ae <main+0x46>
 80026b6:	bf00      	nop
 80026b8:	20000038 	.word	0x20000038
 80026bc:	200002f8 	.word	0x200002f8

080026c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b094      	sub	sp, #80	; 0x50
 80026c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026c6:	f107 0320 	add.w	r3, r7, #32
 80026ca:	2230      	movs	r2, #48	; 0x30
 80026cc:	2100      	movs	r1, #0
 80026ce:	4618      	mov	r0, r3
 80026d0:	f005 fb66 	bl	8007da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026d4:	f107 030c 	add.w	r3, r7, #12
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e4:	2300      	movs	r3, #0
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	4b28      	ldr	r3, [pc, #160]	; (800278c <SystemClock_Config+0xcc>)
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	4a27      	ldr	r2, [pc, #156]	; (800278c <SystemClock_Config+0xcc>)
 80026ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f2:	6413      	str	r3, [r2, #64]	; 0x40
 80026f4:	4b25      	ldr	r3, [pc, #148]	; (800278c <SystemClock_Config+0xcc>)
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002700:	2300      	movs	r3, #0
 8002702:	607b      	str	r3, [r7, #4]
 8002704:	4b22      	ldr	r3, [pc, #136]	; (8002790 <SystemClock_Config+0xd0>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a21      	ldr	r2, [pc, #132]	; (8002790 <SystemClock_Config+0xd0>)
 800270a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	4b1f      	ldr	r3, [pc, #124]	; (8002790 <SystemClock_Config+0xd0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002718:	607b      	str	r3, [r7, #4]
 800271a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800271c:	2302      	movs	r3, #2
 800271e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002720:	2301      	movs	r3, #1
 8002722:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002724:	2310      	movs	r3, #16
 8002726:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002728:	2302      	movs	r3, #2
 800272a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800272c:	2300      	movs	r3, #0
 800272e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002730:	2308      	movs	r3, #8
 8002732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002734:	23a8      	movs	r3, #168	; 0xa8
 8002736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002738:	2302      	movs	r3, #2
 800273a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800273c:	2304      	movs	r3, #4
 800273e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002740:	f107 0320 	add.w	r3, r7, #32
 8002744:	4618      	mov	r0, r3
 8002746:	f003 fcdf 	bl	8006108 <HAL_RCC_OscConfig>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002750:	f000 fa08 	bl	8002b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002754:	230f      	movs	r3, #15
 8002756:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002758:	2302      	movs	r3, #2
 800275a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002760:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002764:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800276a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800276c:	f107 030c 	add.w	r3, r7, #12
 8002770:	2105      	movs	r1, #5
 8002772:	4618      	mov	r0, r3
 8002774:	f003 ff40 	bl	80065f8 <HAL_RCC_ClockConfig>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800277e:	f000 f9f1 	bl	8002b64 <Error_Handler>
  }
}
 8002782:	bf00      	nop
 8002784:	3750      	adds	r7, #80	; 0x50
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800
 8002790:	40007000 	.word	0x40007000

08002794 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002798:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <MX_I2C3_Init+0x50>)
 800279a:	4a13      	ldr	r2, [pc, #76]	; (80027e8 <MX_I2C3_Init+0x54>)
 800279c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800279e:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <MX_I2C3_Init+0x50>)
 80027a0:	4a12      	ldr	r2, [pc, #72]	; (80027ec <MX_I2C3_Init+0x58>)
 80027a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027a4:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <MX_I2C3_Init+0x50>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80027aa:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <MX_I2C3_Init+0x50>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027b0:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <MX_I2C3_Init+0x50>)
 80027b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027b6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027b8:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <MX_I2C3_Init+0x50>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80027be:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <MX_I2C3_Init+0x50>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027c4:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <MX_I2C3_Init+0x50>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <MX_I2C3_Init+0x50>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80027d0:	4804      	ldr	r0, [pc, #16]	; (80027e4 <MX_I2C3_Init+0x50>)
 80027d2:	f002 ffeb 	bl	80057ac <HAL_I2C_Init>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80027dc:	f000 f9c2 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80027e0:	bf00      	nop
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20000150 	.word	0x20000150
 80027e8:	40005c00 	.word	0x40005c00
 80027ec:	00061a80 	.word	0x00061a80

080027f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80027f4:	4b17      	ldr	r3, [pc, #92]	; (8002854 <MX_SPI1_Init+0x64>)
 80027f6:	4a18      	ldr	r2, [pc, #96]	; (8002858 <MX_SPI1_Init+0x68>)
 80027f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027fa:	4b16      	ldr	r3, [pc, #88]	; (8002854 <MX_SPI1_Init+0x64>)
 80027fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002800:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002802:	4b14      	ldr	r3, [pc, #80]	; (8002854 <MX_SPI1_Init+0x64>)
 8002804:	2200      	movs	r2, #0
 8002806:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002808:	4b12      	ldr	r3, [pc, #72]	; (8002854 <MX_SPI1_Init+0x64>)
 800280a:	2200      	movs	r2, #0
 800280c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800280e:	4b11      	ldr	r3, [pc, #68]	; (8002854 <MX_SPI1_Init+0x64>)
 8002810:	2202      	movs	r2, #2
 8002812:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002814:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <MX_SPI1_Init+0x64>)
 8002816:	2200      	movs	r2, #0
 8002818:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800281a:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <MX_SPI1_Init+0x64>)
 800281c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002820:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002822:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <MX_SPI1_Init+0x64>)
 8002824:	2230      	movs	r2, #48	; 0x30
 8002826:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <MX_SPI1_Init+0x64>)
 800282a:	2200      	movs	r2, #0
 800282c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800282e:	4b09      	ldr	r3, [pc, #36]	; (8002854 <MX_SPI1_Init+0x64>)
 8002830:	2200      	movs	r2, #0
 8002832:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002834:	4b07      	ldr	r3, [pc, #28]	; (8002854 <MX_SPI1_Init+0x64>)
 8002836:	2200      	movs	r2, #0
 8002838:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <MX_SPI1_Init+0x64>)
 800283c:	220a      	movs	r2, #10
 800283e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002840:	4804      	ldr	r0, [pc, #16]	; (8002854 <MX_SPI1_Init+0x64>)
 8002842:	f004 f8a5 	bl	8006990 <HAL_SPI_Init>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800284c:	f000 f98a 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002850:	bf00      	nop
 8002852:	bd80      	pop	{r7, pc}
 8002854:	200001a4 	.word	0x200001a4
 8002858:	40013000 	.word	0x40013000

0800285c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002860:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <MX_SPI2_Init+0x64>)
 8002862:	4a18      	ldr	r2, [pc, #96]	; (80028c4 <MX_SPI2_Init+0x68>)
 8002864:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002866:	4b16      	ldr	r3, [pc, #88]	; (80028c0 <MX_SPI2_Init+0x64>)
 8002868:	f44f 7282 	mov.w	r2, #260	; 0x104
 800286c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800286e:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <MX_SPI2_Init+0x64>)
 8002870:	2200      	movs	r2, #0
 8002872:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002874:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <MX_SPI2_Init+0x64>)
 8002876:	2200      	movs	r2, #0
 8002878:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800287a:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <MX_SPI2_Init+0x64>)
 800287c:	2200      	movs	r2, #0
 800287e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <MX_SPI2_Init+0x64>)
 8002882:	2200      	movs	r2, #0
 8002884:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002886:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <MX_SPI2_Init+0x64>)
 8002888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800288c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800288e:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <MX_SPI2_Init+0x64>)
 8002890:	2200      	movs	r2, #0
 8002892:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002894:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <MX_SPI2_Init+0x64>)
 8002896:	2200      	movs	r2, #0
 8002898:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800289a:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <MX_SPI2_Init+0x64>)
 800289c:	2200      	movs	r2, #0
 800289e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028a0:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <MX_SPI2_Init+0x64>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <MX_SPI2_Init+0x64>)
 80028a8:	220a      	movs	r2, #10
 80028aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80028ac:	4804      	ldr	r0, [pc, #16]	; (80028c0 <MX_SPI2_Init+0x64>)
 80028ae:	f004 f86f 	bl	8006990 <HAL_SPI_Init>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80028b8:	f000 f954 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80028bc:	bf00      	nop
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	200001fc 	.word	0x200001fc
 80028c4:	40003800 	.word	0x40003800

080028c8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80028cc:	4b17      	ldr	r3, [pc, #92]	; (800292c <MX_SPI3_Init+0x64>)
 80028ce:	4a18      	ldr	r2, [pc, #96]	; (8002930 <MX_SPI3_Init+0x68>)
 80028d0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80028d2:	4b16      	ldr	r3, [pc, #88]	; (800292c <MX_SPI3_Init+0x64>)
 80028d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028d8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80028da:	4b14      	ldr	r3, [pc, #80]	; (800292c <MX_SPI3_Init+0x64>)
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80028e0:	4b12      	ldr	r3, [pc, #72]	; (800292c <MX_SPI3_Init+0x64>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028e6:	4b11      	ldr	r3, [pc, #68]	; (800292c <MX_SPI3_Init+0x64>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028ec:	4b0f      	ldr	r3, [pc, #60]	; (800292c <MX_SPI3_Init+0x64>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80028f2:	4b0e      	ldr	r3, [pc, #56]	; (800292c <MX_SPI3_Init+0x64>)
 80028f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028f8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028fa:	4b0c      	ldr	r3, [pc, #48]	; (800292c <MX_SPI3_Init+0x64>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002900:	4b0a      	ldr	r3, [pc, #40]	; (800292c <MX_SPI3_Init+0x64>)
 8002902:	2200      	movs	r2, #0
 8002904:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002906:	4b09      	ldr	r3, [pc, #36]	; (800292c <MX_SPI3_Init+0x64>)
 8002908:	2200      	movs	r2, #0
 800290a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800290c:	4b07      	ldr	r3, [pc, #28]	; (800292c <MX_SPI3_Init+0x64>)
 800290e:	2200      	movs	r2, #0
 8002910:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002912:	4b06      	ldr	r3, [pc, #24]	; (800292c <MX_SPI3_Init+0x64>)
 8002914:	220a      	movs	r2, #10
 8002916:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002918:	4804      	ldr	r0, [pc, #16]	; (800292c <MX_SPI3_Init+0x64>)
 800291a:	f004 f839 	bl	8006990 <HAL_SPI_Init>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002924:	f000 f91e 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002928:	bf00      	nop
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20000254 	.word	0x20000254
 8002930:	40003c00 	.word	0x40003c00

08002934 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800293a:	463b      	mov	r3, r7
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002942:	4b15      	ldr	r3, [pc, #84]	; (8002998 <MX_TIM6_Init+0x64>)
 8002944:	4a15      	ldr	r2, [pc, #84]	; (800299c <MX_TIM6_Init+0x68>)
 8002946:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000 - 1;
 8002948:	4b13      	ldr	r3, [pc, #76]	; (8002998 <MX_TIM6_Init+0x64>)
 800294a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800294e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002950:	4b11      	ldr	r3, [pc, #68]	; (8002998 <MX_TIM6_Init+0x64>)
 8002952:	2200      	movs	r2, #0
 8002954:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4200 / 3 - 1;
 8002956:	4b10      	ldr	r3, [pc, #64]	; (8002998 <MX_TIM6_Init+0x64>)
 8002958:	f240 5277 	movw	r2, #1399	; 0x577
 800295c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800295e:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <MX_TIM6_Init+0x64>)
 8002960:	2200      	movs	r2, #0
 8002962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002964:	480c      	ldr	r0, [pc, #48]	; (8002998 <MX_TIM6_Init+0x64>)
 8002966:	f004 fdf7 	bl	8007558 <HAL_TIM_Base_Init>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002970:	f000 f8f8 	bl	8002b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002974:	2300      	movs	r3, #0
 8002976:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002978:	2300      	movs	r3, #0
 800297a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800297c:	463b      	mov	r3, r7
 800297e:	4619      	mov	r1, r3
 8002980:	4805      	ldr	r0, [pc, #20]	; (8002998 <MX_TIM6_Init+0x64>)
 8002982:	f005 f86d 	bl	8007a60 <HAL_TIMEx_MasterConfigSynchronization>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800298c:	f000 f8ea 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	200002ac 	.word	0x200002ac
 800299c:	40001000 	.word	0x40001000

080029a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	; 0x28
 80029a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a6:	f107 0314 	add.w	r3, r7, #20
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	605a      	str	r2, [r3, #4]
 80029b0:	609a      	str	r2, [r3, #8]
 80029b2:	60da      	str	r2, [r3, #12]
 80029b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	4b55      	ldr	r3, [pc, #340]	; (8002b10 <MX_GPIO_Init+0x170>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	4a54      	ldr	r2, [pc, #336]	; (8002b10 <MX_GPIO_Init+0x170>)
 80029c0:	f043 0304 	orr.w	r3, r3, #4
 80029c4:	6313      	str	r3, [r2, #48]	; 0x30
 80029c6:	4b52      	ldr	r3, [pc, #328]	; (8002b10 <MX_GPIO_Init+0x170>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	4b4e      	ldr	r3, [pc, #312]	; (8002b10 <MX_GPIO_Init+0x170>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	4a4d      	ldr	r2, [pc, #308]	; (8002b10 <MX_GPIO_Init+0x170>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	6313      	str	r3, [r2, #48]	; 0x30
 80029e2:	4b4b      	ldr	r3, [pc, #300]	; (8002b10 <MX_GPIO_Init+0x170>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	4b47      	ldr	r3, [pc, #284]	; (8002b10 <MX_GPIO_Init+0x170>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	4a46      	ldr	r2, [pc, #280]	; (8002b10 <MX_GPIO_Init+0x170>)
 80029f8:	f043 0310 	orr.w	r3, r3, #16
 80029fc:	6313      	str	r3, [r2, #48]	; 0x30
 80029fe:	4b44      	ldr	r3, [pc, #272]	; (8002b10 <MX_GPIO_Init+0x170>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	4b40      	ldr	r3, [pc, #256]	; (8002b10 <MX_GPIO_Init+0x170>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	4a3f      	ldr	r2, [pc, #252]	; (8002b10 <MX_GPIO_Init+0x170>)
 8002a14:	f043 0302 	orr.w	r3, r3, #2
 8002a18:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1a:	4b3d      	ldr	r3, [pc, #244]	; (8002b10 <MX_GPIO_Init+0x170>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	607b      	str	r3, [r7, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	603b      	str	r3, [r7, #0]
 8002a2a:	4b39      	ldr	r3, [pc, #228]	; (8002b10 <MX_GPIO_Init+0x170>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	4a38      	ldr	r2, [pc, #224]	; (8002b10 <MX_GPIO_Init+0x170>)
 8002a30:	f043 0308 	orr.w	r3, r3, #8
 8002a34:	6313      	str	r3, [r2, #48]	; 0x30
 8002a36:	4b36      	ldr	r3, [pc, #216]	; (8002b10 <MX_GPIO_Init+0x170>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSOR_RANGE_SELECT_Pin|HV_INPUT_SELECT_Pin, GPIO_PIN_RESET);
 8002a42:	2200      	movs	r2, #0
 8002a44:	210c      	movs	r1, #12
 8002a46:	4833      	ldr	r0, [pc, #204]	; (8002b14 <MX_GPIO_Init+0x174>)
 8002a48:	f002 fe96 	bl	8005778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADC_PRESS_SPI_CS_Pin|ADC_DOSE_SPI_CS_Pin|ADC_HV_SPI_CS_Pin, GPIO_PIN_RESET);
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	210e      	movs	r1, #14
 8002a50:	4831      	ldr	r0, [pc, #196]	; (8002b18 <MX_GPIO_Init+0x178>)
 8002a52:	f002 fe91 	bl	8005778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_RESET);
 8002a56:	2200      	movs	r2, #0
 8002a58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a5c:	482f      	ldr	r0, [pc, #188]	; (8002b1c <MX_GPIO_Init+0x17c>)
 8002a5e:	f002 fe8b 	bl	8005778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ETH_SPI_CS_Pin|ETH_RESET_Pin|SD_SPI_CSB12_Pin, GPIO_PIN_RESET);
 8002a62:	2200      	movs	r2, #0
 8002a64:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002a68:	482d      	ldr	r0, [pc, #180]	; (8002b20 <MX_GPIO_Init+0x180>)
 8002a6a:	f002 fe85 	bl	8005778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_SPI_CS_GPIO_Port, DAC_SPI_CS_Pin, GPIO_PIN_RESET);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2102      	movs	r1, #2
 8002a72:	482c      	ldr	r0, [pc, #176]	; (8002b24 <MX_GPIO_Init+0x184>)
 8002a74:	f002 fe80 	bl	8005778 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSOR_RANGE_SELECT_Pin HV_INPUT_SELECT_Pin */
  GPIO_InitStruct.Pin = SENSOR_RANGE_SELECT_Pin|HV_INPUT_SELECT_Pin;
 8002a78:	230c      	movs	r3, #12
 8002a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a84:	2302      	movs	r3, #2
 8002a86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a88:	f107 0314 	add.w	r3, r7, #20
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4821      	ldr	r0, [pc, #132]	; (8002b14 <MX_GPIO_Init+0x174>)
 8002a90:	f002 fcbe 	bl	8005410 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_PRESS_SPI_CS_Pin ADC_DOSE_SPI_CS_Pin ADC_HV_SPI_CS_Pin */
  GPIO_InitStruct.Pin = ADC_PRESS_SPI_CS_Pin|ADC_DOSE_SPI_CS_Pin|ADC_HV_SPI_CS_Pin;
 8002a94:	230e      	movs	r3, #14
 8002a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa4:	f107 0314 	add.w	r3, r7, #20
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	481b      	ldr	r0, [pc, #108]	; (8002b18 <MX_GPIO_Init+0x178>)
 8002aac:	f002 fcb0 	bl	8005410 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_SPI_CS_Pin */
  GPIO_InitStruct.Pin = SD_SPI_CS_Pin;
 8002ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002ac2:	f107 0314 	add.w	r3, r7, #20
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4814      	ldr	r0, [pc, #80]	; (8002b1c <MX_GPIO_Init+0x17c>)
 8002aca:	f002 fca1 	bl	8005410 <HAL_GPIO_Init>

  /*Configure GPIO pins : ETH_SPI_CS_Pin ETH_RESET_Pin SD_SPI_CSB12_Pin */
  GPIO_InitStruct.Pin = ETH_SPI_CS_Pin|ETH_RESET_Pin|SD_SPI_CSB12_Pin;
 8002ace:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002adc:	2302      	movs	r3, #2
 8002ade:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae0:	f107 0314 	add.w	r3, r7, #20
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	480e      	ldr	r0, [pc, #56]	; (8002b20 <MX_GPIO_Init+0x180>)
 8002ae8:	f002 fc92 	bl	8005410 <HAL_GPIO_Init>

  /*Configure GPIO pin : DAC_SPI_CS_Pin */
  GPIO_InitStruct.Pin = DAC_SPI_CS_Pin;
 8002aec:	2302      	movs	r3, #2
 8002aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af0:	2301      	movs	r3, #1
 8002af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002af8:	2302      	movs	r3, #2
 8002afa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DAC_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	4619      	mov	r1, r3
 8002b02:	4808      	ldr	r0, [pc, #32]	; (8002b24 <MX_GPIO_Init+0x184>)
 8002b04:	f002 fc84 	bl	8005410 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b08:	bf00      	nop
 8002b0a:	3728      	adds	r7, #40	; 0x28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40020800 	.word	0x40020800
 8002b18:	40020000 	.word	0x40020000
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40020400 	.word	0x40020400
 8002b24:	40020c00 	.word	0x40020c00

08002b28 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim == adctim)
 8002b30:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d102      	bne.n	8002b40 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		general_task_timer_interrupt(&task);
 8002b3a:	4808      	ldr	r0, [pc, #32]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002b3c:	f7ff fb32 	bl	80021a4 <general_task_timer_interrupt>
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a06      	ldr	r2, [pc, #24]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d101      	bne.n	8002b4e <HAL_TIM_PeriodElapsedCallback+0x26>
    HAL_IncTick();
 8002b4a:	f002 fad9 	bl	8005100 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20000038 	.word	0x20000038
 8002b5c:	200002f8 	.word	0x200002f8
 8002b60:	40010000 	.word	0x40010000

08002b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b68:	b672      	cpsid	i
}
 8002b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b6c:	e7fe      	b.n	8002b6c <Error_Handler+0x8>
	...

08002b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	607b      	str	r3, [r7, #4]
 8002b7a:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <HAL_MspInit+0x4c>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	4a0f      	ldr	r2, [pc, #60]	; (8002bbc <HAL_MspInit+0x4c>)
 8002b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b84:	6453      	str	r3, [r2, #68]	; 0x44
 8002b86:	4b0d      	ldr	r3, [pc, #52]	; (8002bbc <HAL_MspInit+0x4c>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8e:	607b      	str	r3, [r7, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	603b      	str	r3, [r7, #0]
 8002b96:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <HAL_MspInit+0x4c>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	4a08      	ldr	r2, [pc, #32]	; (8002bbc <HAL_MspInit+0x4c>)
 8002b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba2:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <HAL_MspInit+0x4c>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40023800 	.word	0x40023800

08002bc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08a      	sub	sp, #40	; 0x28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc8:	f107 0314 	add.w	r3, r7, #20
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	60da      	str	r2, [r3, #12]
 8002bd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a29      	ldr	r2, [pc, #164]	; (8002c84 <HAL_I2C_MspInit+0xc4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d14b      	bne.n	8002c7a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	4b28      	ldr	r3, [pc, #160]	; (8002c88 <HAL_I2C_MspInit+0xc8>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	4a27      	ldr	r2, [pc, #156]	; (8002c88 <HAL_I2C_MspInit+0xc8>)
 8002bec:	f043 0304 	orr.w	r3, r3, #4
 8002bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf2:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <HAL_I2C_MspInit+0xc8>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <HAL_I2C_MspInit+0xc8>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	4a20      	ldr	r2, [pc, #128]	; (8002c88 <HAL_I2C_MspInit+0xc8>)
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0e:	4b1e      	ldr	r3, [pc, #120]	; (8002c88 <HAL_I2C_MspInit+0xc8>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c20:	2312      	movs	r3, #18
 8002c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c30:	f107 0314 	add.w	r3, r7, #20
 8002c34:	4619      	mov	r1, r3
 8002c36:	4815      	ldr	r0, [pc, #84]	; (8002c8c <HAL_I2C_MspInit+0xcc>)
 8002c38:	f002 fbea 	bl	8005410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c42:	2312      	movs	r3, #18
 8002c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c4e:	2304      	movs	r3, #4
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c52:	f107 0314 	add.w	r3, r7, #20
 8002c56:	4619      	mov	r1, r3
 8002c58:	480d      	ldr	r0, [pc, #52]	; (8002c90 <HAL_I2C_MspInit+0xd0>)
 8002c5a:	f002 fbd9 	bl	8005410 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <HAL_I2C_MspInit+0xc8>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	4a08      	ldr	r2, [pc, #32]	; (8002c88 <HAL_I2C_MspInit+0xc8>)
 8002c68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <HAL_I2C_MspInit+0xc8>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002c7a:	bf00      	nop
 8002c7c:	3728      	adds	r7, #40	; 0x28
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40005c00 	.word	0x40005c00
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40020800 	.word	0x40020800
 8002c90:	40020000 	.word	0x40020000

08002c94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08e      	sub	sp, #56	; 0x38
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a4c      	ldr	r2, [pc, #304]	; (8002de4 <HAL_SPI_MspInit+0x150>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d12c      	bne.n	8002d10 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	623b      	str	r3, [r7, #32]
 8002cba:	4b4b      	ldr	r3, [pc, #300]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	4a4a      	ldr	r2, [pc, #296]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002cc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cc6:	4b48      	ldr	r3, [pc, #288]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cce:	623b      	str	r3, [r7, #32]
 8002cd0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	4b44      	ldr	r3, [pc, #272]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	4a43      	ldr	r2, [pc, #268]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce2:	4b41      	ldr	r3, [pc, #260]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002cee:	23e0      	movs	r3, #224	; 0xe0
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cfe:	2305      	movs	r3, #5
 8002d00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d06:	4619      	mov	r1, r3
 8002d08:	4838      	ldr	r0, [pc, #224]	; (8002dec <HAL_SPI_MspInit+0x158>)
 8002d0a:	f002 fb81 	bl	8005410 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002d0e:	e064      	b.n	8002dda <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a36      	ldr	r2, [pc, #216]	; (8002df0 <HAL_SPI_MspInit+0x15c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d12d      	bne.n	8002d76 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61bb      	str	r3, [r7, #24]
 8002d1e:	4b32      	ldr	r3, [pc, #200]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	4a31      	ldr	r2, [pc, #196]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d28:	6413      	str	r3, [r2, #64]	; 0x40
 8002d2a:	4b2f      	ldr	r3, [pc, #188]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d32:	61bb      	str	r3, [r7, #24]
 8002d34:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	4b2b      	ldr	r3, [pc, #172]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	4a2a      	ldr	r2, [pc, #168]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d40:	f043 0302 	orr.w	r3, r3, #2
 8002d44:	6313      	str	r3, [r2, #48]	; 0x30
 8002d46:	4b28      	ldr	r3, [pc, #160]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002d52:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d60:	2303      	movs	r3, #3
 8002d62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d64:	2305      	movs	r3, #5
 8002d66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4821      	ldr	r0, [pc, #132]	; (8002df4 <HAL_SPI_MspInit+0x160>)
 8002d70:	f002 fb4e 	bl	8005410 <HAL_GPIO_Init>
}
 8002d74:	e031      	b.n	8002dda <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a1f      	ldr	r2, [pc, #124]	; (8002df8 <HAL_SPI_MspInit+0x164>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d12c      	bne.n	8002dda <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002d80:	2300      	movs	r3, #0
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	4a17      	ldr	r2, [pc, #92]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d8e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d90:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	4a10      	ldr	r2, [pc, #64]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002da6:	f043 0304 	orr.w	r3, r3, #4
 8002daa:	6313      	str	r3, [r2, #48]	; 0x30
 8002dac:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002db8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002dca:	2306      	movs	r3, #6
 8002dcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4809      	ldr	r0, [pc, #36]	; (8002dfc <HAL_SPI_MspInit+0x168>)
 8002dd6:	f002 fb1b 	bl	8005410 <HAL_GPIO_Init>
}
 8002dda:	bf00      	nop
 8002ddc:	3738      	adds	r7, #56	; 0x38
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40013000 	.word	0x40013000
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40020000 	.word	0x40020000
 8002df0:	40003800 	.word	0x40003800
 8002df4:	40020400 	.word	0x40020400
 8002df8:	40003c00 	.word	0x40003c00
 8002dfc:	40020800 	.word	0x40020800

08002e00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a0e      	ldr	r2, [pc, #56]	; (8002e48 <HAL_TIM_Base_MspInit+0x48>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d115      	bne.n	8002e3e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <HAL_TIM_Base_MspInit+0x4c>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	4a0c      	ldr	r2, [pc, #48]	; (8002e4c <HAL_TIM_Base_MspInit+0x4c>)
 8002e1c:	f043 0310 	orr.w	r3, r3, #16
 8002e20:	6413      	str	r3, [r2, #64]	; 0x40
 8002e22:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <HAL_TIM_Base_MspInit+0x4c>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2100      	movs	r1, #0
 8002e32:	2036      	movs	r0, #54	; 0x36
 8002e34:	f002 faa7 	bl	8005386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e38:	2036      	movs	r0, #54	; 0x36
 8002e3a:	f002 fac0 	bl	80053be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40001000 	.word	0x40001000
 8002e4c:	40023800 	.word	0x40023800

08002e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e54:	e7fe      	b.n	8002e54 <NMI_Handler+0x4>

08002e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e56:	b480      	push	{r7}
 8002e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e5a:	e7fe      	b.n	8002e5a <HardFault_Handler+0x4>

08002e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e60:	e7fe      	b.n	8002e60 <MemManage_Handler+0x4>

08002e62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e62:	b480      	push	{r7}
 8002e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e66:	e7fe      	b.n	8002e66 <BusFault_Handler+0x4>

08002e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e6c:	e7fe      	b.n	8002e6c <UsageFault_Handler+0x4>

08002e6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e9c:	f002 f930 	bl	8005100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ea0:	bf00      	nop
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ea8:	4802      	ldr	r0, [pc, #8]	; (8002eb4 <TIM6_DAC_IRQHandler+0x10>)
 8002eaa:	f004 fc15 	bl	80076d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	200002ac 	.word	0x200002ac

08002eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ec0:	4a14      	ldr	r2, [pc, #80]	; (8002f14 <_sbrk+0x5c>)
 8002ec2:	4b15      	ldr	r3, [pc, #84]	; (8002f18 <_sbrk+0x60>)
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ecc:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <_sbrk+0x64>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d102      	bne.n	8002eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ed4:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <_sbrk+0x64>)
 8002ed6:	4a12      	ldr	r2, [pc, #72]	; (8002f20 <_sbrk+0x68>)
 8002ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eda:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <_sbrk+0x64>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d207      	bcs.n	8002ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ee8:	f004 ff72 	bl	8007dd0 <__errno>
 8002eec:	4603      	mov	r3, r0
 8002eee:	220c      	movs	r2, #12
 8002ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef6:	e009      	b.n	8002f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ef8:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <_sbrk+0x64>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002efe:	4b07      	ldr	r3, [pc, #28]	; (8002f1c <_sbrk+0x64>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4413      	add	r3, r2
 8002f06:	4a05      	ldr	r2, [pc, #20]	; (8002f1c <_sbrk+0x64>)
 8002f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	20020000 	.word	0x20020000
 8002f18:	00000400 	.word	0x00000400
 8002f1c:	200005a8 	.word	0x200005a8
 8002f20:	20000b40 	.word	0x20000b40

08002f24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <SystemInit+0x20>)
 8002f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2e:	4a05      	ldr	r2, [pc, #20]	; (8002f44 <SystemInit+0x20>)
 8002f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f38:	bf00      	nop
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	e000ed00 	.word	0xe000ed00

08002f48 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002f4c:	bf00      	nop
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
	...

08002f58 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af04      	add	r7, sp, #16
 8002f5e:	4603      	mov	r3, r0
 8002f60:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002f62:	f04f 33ff 	mov.w	r3, #4294967295
 8002f66:	9302      	str	r3, [sp, #8]
 8002f68:	2301      	movs	r3, #1
 8002f6a:	9301      	str	r3, [sp, #4]
 8002f6c:	1dfb      	adds	r3, r7, #7
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	2301      	movs	r3, #1
 8002f72:	2200      	movs	r2, #0
 8002f74:	2178      	movs	r1, #120	; 0x78
 8002f76:	4803      	ldr	r0, [pc, #12]	; (8002f84 <ssd1306_WriteCommand+0x2c>)
 8002f78:	f002 fd5c 	bl	8005a34 <HAL_I2C_Mem_Write>
}
 8002f7c:	bf00      	nop
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20000150 	.word	0x20000150

08002f88 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af04      	add	r7, sp, #16
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	f04f 32ff 	mov.w	r2, #4294967295
 8002f9a:	9202      	str	r2, [sp, #8]
 8002f9c:	9301      	str	r3, [sp, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	2240      	movs	r2, #64	; 0x40
 8002fa6:	2178      	movs	r1, #120	; 0x78
 8002fa8:	4803      	ldr	r0, [pc, #12]	; (8002fb8 <ssd1306_WriteData+0x30>)
 8002faa:	f002 fd43 	bl	8005a34 <HAL_I2C_Mem_Write>
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000150 	.word	0x20000150

08002fbc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002fc0:	f7ff ffc2 	bl	8002f48 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002fc4:	2064      	movs	r0, #100	; 0x64
 8002fc6:	f002 f8bb 	bl	8005140 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002fca:	2000      	movs	r0, #0
 8002fcc:	f000 f9d8 	bl	8003380 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002fd0:	2020      	movs	r0, #32
 8002fd2:	f7ff ffc1 	bl	8002f58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	f7ff ffbe 	bl	8002f58 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002fdc:	20b0      	movs	r0, #176	; 0xb0
 8002fde:	f7ff ffbb 	bl	8002f58 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002fe2:	20c8      	movs	r0, #200	; 0xc8
 8002fe4:	f7ff ffb8 	bl	8002f58 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f7ff ffb5 	bl	8002f58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002fee:	2010      	movs	r0, #16
 8002ff0:	f7ff ffb2 	bl	8002f58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002ff4:	2040      	movs	r0, #64	; 0x40
 8002ff6:	f7ff ffaf 	bl	8002f58 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002ffa:	20ff      	movs	r0, #255	; 0xff
 8002ffc:	f000 f9ac 	bl	8003358 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003000:	20a1      	movs	r0, #161	; 0xa1
 8003002:	f7ff ffa9 	bl	8002f58 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003006:	20a6      	movs	r0, #166	; 0xa6
 8003008:	f7ff ffa6 	bl	8002f58 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800300c:	20a8      	movs	r0, #168	; 0xa8
 800300e:	f7ff ffa3 	bl	8002f58 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003012:	203f      	movs	r0, #63	; 0x3f
 8003014:	f7ff ffa0 	bl	8002f58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003018:	20a4      	movs	r0, #164	; 0xa4
 800301a:	f7ff ff9d 	bl	8002f58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800301e:	20d3      	movs	r0, #211	; 0xd3
 8003020:	f7ff ff9a 	bl	8002f58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003024:	2000      	movs	r0, #0
 8003026:	f7ff ff97 	bl	8002f58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800302a:	20d5      	movs	r0, #213	; 0xd5
 800302c:	f7ff ff94 	bl	8002f58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003030:	20f0      	movs	r0, #240	; 0xf0
 8003032:	f7ff ff91 	bl	8002f58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003036:	20d9      	movs	r0, #217	; 0xd9
 8003038:	f7ff ff8e 	bl	8002f58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800303c:	2022      	movs	r0, #34	; 0x22
 800303e:	f7ff ff8b 	bl	8002f58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003042:	20da      	movs	r0, #218	; 0xda
 8003044:	f7ff ff88 	bl	8002f58 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003048:	2012      	movs	r0, #18
 800304a:	f7ff ff85 	bl	8002f58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800304e:	20db      	movs	r0, #219	; 0xdb
 8003050:	f7ff ff82 	bl	8002f58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003054:	2020      	movs	r0, #32
 8003056:	f7ff ff7f 	bl	8002f58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800305a:	208d      	movs	r0, #141	; 0x8d
 800305c:	f7ff ff7c 	bl	8002f58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003060:	2014      	movs	r0, #20
 8003062:	f7ff ff79 	bl	8002f58 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003066:	2001      	movs	r0, #1
 8003068:	f000 f98a 	bl	8003380 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800306c:	2000      	movs	r0, #0
 800306e:	f000 f80f 	bl	8003090 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003072:	f000 f825 	bl	80030c0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003076:	4b05      	ldr	r3, [pc, #20]	; (800308c <ssd1306_Init+0xd0>)
 8003078:	2200      	movs	r2, #0
 800307a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800307c:	4b03      	ldr	r3, [pc, #12]	; (800308c <ssd1306_Init+0xd0>)
 800307e:	2200      	movs	r2, #0
 8003080:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003082:	4b02      	ldr	r3, [pc, #8]	; (800308c <ssd1306_Init+0xd0>)
 8003084:	2201      	movs	r2, #1
 8003086:	711a      	strb	r2, [r3, #4]
}
 8003088:	bf00      	nop
 800308a:	bd80      	pop	{r7, pc}
 800308c:	200009ac 	.word	0x200009ac

08003090 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <ssd1306_Fill+0x14>
 80030a0:	2300      	movs	r3, #0
 80030a2:	e000      	b.n	80030a6 <ssd1306_Fill+0x16>
 80030a4:	23ff      	movs	r3, #255	; 0xff
 80030a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030aa:	4619      	mov	r1, r3
 80030ac:	4803      	ldr	r0, [pc, #12]	; (80030bc <ssd1306_Fill+0x2c>)
 80030ae:	f004 fe77 	bl	8007da0 <memset>
}
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	200005ac 	.word	0x200005ac

080030c0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80030c6:	2300      	movs	r3, #0
 80030c8:	71fb      	strb	r3, [r7, #7]
 80030ca:	e016      	b.n	80030fa <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	3b50      	subs	r3, #80	; 0x50
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff ff40 	bl	8002f58 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80030d8:	2000      	movs	r0, #0
 80030da:	f7ff ff3d 	bl	8002f58 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80030de:	2010      	movs	r0, #16
 80030e0:	f7ff ff3a 	bl	8002f58 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	01db      	lsls	r3, r3, #7
 80030e8:	4a08      	ldr	r2, [pc, #32]	; (800310c <ssd1306_UpdateScreen+0x4c>)
 80030ea:	4413      	add	r3, r2
 80030ec:	2180      	movs	r1, #128	; 0x80
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff ff4a 	bl	8002f88 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80030f4:	79fb      	ldrb	r3, [r7, #7]
 80030f6:	3301      	adds	r3, #1
 80030f8:	71fb      	strb	r3, [r7, #7]
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	2b07      	cmp	r3, #7
 80030fe:	d9e5      	bls.n	80030cc <ssd1306_UpdateScreen+0xc>
    }
}
 8003100:	bf00      	nop
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	200005ac 	.word	0x200005ac

08003110 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	71fb      	strb	r3, [r7, #7]
 800311a:	460b      	mov	r3, r1
 800311c:	71bb      	strb	r3, [r7, #6]
 800311e:	4613      	mov	r3, r2
 8003120:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003126:	2b00      	cmp	r3, #0
 8003128:	db3d      	blt.n	80031a6 <ssd1306_DrawPixel+0x96>
 800312a:	79bb      	ldrb	r3, [r7, #6]
 800312c:	2b3f      	cmp	r3, #63	; 0x3f
 800312e:	d83a      	bhi.n	80031a6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003130:	797b      	ldrb	r3, [r7, #5]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d11a      	bne.n	800316c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003136:	79fa      	ldrb	r2, [r7, #7]
 8003138:	79bb      	ldrb	r3, [r7, #6]
 800313a:	08db      	lsrs	r3, r3, #3
 800313c:	b2d8      	uxtb	r0, r3
 800313e:	4603      	mov	r3, r0
 8003140:	01db      	lsls	r3, r3, #7
 8003142:	4413      	add	r3, r2
 8003144:	4a1b      	ldr	r2, [pc, #108]	; (80031b4 <ssd1306_DrawPixel+0xa4>)
 8003146:	5cd3      	ldrb	r3, [r2, r3]
 8003148:	b25a      	sxtb	r2, r3
 800314a:	79bb      	ldrb	r3, [r7, #6]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	2101      	movs	r1, #1
 8003152:	fa01 f303 	lsl.w	r3, r1, r3
 8003156:	b25b      	sxtb	r3, r3
 8003158:	4313      	orrs	r3, r2
 800315a:	b259      	sxtb	r1, r3
 800315c:	79fa      	ldrb	r2, [r7, #7]
 800315e:	4603      	mov	r3, r0
 8003160:	01db      	lsls	r3, r3, #7
 8003162:	4413      	add	r3, r2
 8003164:	b2c9      	uxtb	r1, r1
 8003166:	4a13      	ldr	r2, [pc, #76]	; (80031b4 <ssd1306_DrawPixel+0xa4>)
 8003168:	54d1      	strb	r1, [r2, r3]
 800316a:	e01d      	b.n	80031a8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800316c:	79fa      	ldrb	r2, [r7, #7]
 800316e:	79bb      	ldrb	r3, [r7, #6]
 8003170:	08db      	lsrs	r3, r3, #3
 8003172:	b2d8      	uxtb	r0, r3
 8003174:	4603      	mov	r3, r0
 8003176:	01db      	lsls	r3, r3, #7
 8003178:	4413      	add	r3, r2
 800317a:	4a0e      	ldr	r2, [pc, #56]	; (80031b4 <ssd1306_DrawPixel+0xa4>)
 800317c:	5cd3      	ldrb	r3, [r2, r3]
 800317e:	b25a      	sxtb	r2, r3
 8003180:	79bb      	ldrb	r3, [r7, #6]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	2101      	movs	r1, #1
 8003188:	fa01 f303 	lsl.w	r3, r1, r3
 800318c:	b25b      	sxtb	r3, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	b25b      	sxtb	r3, r3
 8003192:	4013      	ands	r3, r2
 8003194:	b259      	sxtb	r1, r3
 8003196:	79fa      	ldrb	r2, [r7, #7]
 8003198:	4603      	mov	r3, r0
 800319a:	01db      	lsls	r3, r3, #7
 800319c:	4413      	add	r3, r2
 800319e:	b2c9      	uxtb	r1, r1
 80031a0:	4a04      	ldr	r2, [pc, #16]	; (80031b4 <ssd1306_DrawPixel+0xa4>)
 80031a2:	54d1      	strb	r1, [r2, r3]
 80031a4:	e000      	b.n	80031a8 <ssd1306_DrawPixel+0x98>
        return;
 80031a6:	bf00      	nop
    }
}
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	200005ac 	.word	0x200005ac

080031b8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80031b8:	b590      	push	{r4, r7, lr}
 80031ba:	b089      	sub	sp, #36	; 0x24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4604      	mov	r4, r0
 80031c0:	4638      	mov	r0, r7
 80031c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80031c6:	4623      	mov	r3, r4
 80031c8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	2b1f      	cmp	r3, #31
 80031ce:	d902      	bls.n	80031d6 <ssd1306_WriteChar+0x1e>
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
 80031d2:	2b7e      	cmp	r3, #126	; 0x7e
 80031d4:	d901      	bls.n	80031da <ssd1306_WriteChar+0x22>
        return 0;
 80031d6:	2300      	movs	r3, #0
 80031d8:	e079      	b.n	80032ce <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80031da:	4b3f      	ldr	r3, [pc, #252]	; (80032d8 <ssd1306_WriteChar+0x120>)
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	783b      	ldrb	r3, [r7, #0]
 80031e2:	4413      	add	r3, r2
 80031e4:	2b80      	cmp	r3, #128	; 0x80
 80031e6:	dc06      	bgt.n	80031f6 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80031e8:	4b3b      	ldr	r3, [pc, #236]	; (80032d8 <ssd1306_WriteChar+0x120>)
 80031ea:	885b      	ldrh	r3, [r3, #2]
 80031ec:	461a      	mov	r2, r3
 80031ee:	787b      	ldrb	r3, [r7, #1]
 80031f0:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80031f2:	2b40      	cmp	r3, #64	; 0x40
 80031f4:	dd01      	ble.n	80031fa <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80031f6:	2300      	movs	r3, #0
 80031f8:	e069      	b.n	80032ce <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80031fa:	2300      	movs	r3, #0
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	e04e      	b.n	800329e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	3b20      	subs	r3, #32
 8003206:	7879      	ldrb	r1, [r7, #1]
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	4619      	mov	r1, r3
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	440b      	add	r3, r1
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	4413      	add	r3, r2
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800321a:	2300      	movs	r3, #0
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	e036      	b.n	800328e <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d013      	beq.n	8003258 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003230:	4b29      	ldr	r3, [pc, #164]	; (80032d8 <ssd1306_WriteChar+0x120>)
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	b2da      	uxtb	r2, r3
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	4413      	add	r3, r2
 800323c:	b2d8      	uxtb	r0, r3
 800323e:	4b26      	ldr	r3, [pc, #152]	; (80032d8 <ssd1306_WriteChar+0x120>)
 8003240:	885b      	ldrh	r3, [r3, #2]
 8003242:	b2da      	uxtb	r2, r3
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	4413      	add	r3, r2
 800324a:	b2db      	uxtb	r3, r3
 800324c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8003250:	4619      	mov	r1, r3
 8003252:	f7ff ff5d 	bl	8003110 <ssd1306_DrawPixel>
 8003256:	e017      	b.n	8003288 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003258:	4b1f      	ldr	r3, [pc, #124]	; (80032d8 <ssd1306_WriteChar+0x120>)
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	b2da      	uxtb	r2, r3
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	b2db      	uxtb	r3, r3
 8003262:	4413      	add	r3, r2
 8003264:	b2d8      	uxtb	r0, r3
 8003266:	4b1c      	ldr	r3, [pc, #112]	; (80032d8 <ssd1306_WriteChar+0x120>)
 8003268:	885b      	ldrh	r3, [r3, #2]
 800326a:	b2da      	uxtb	r2, r3
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	b2db      	uxtb	r3, r3
 8003270:	4413      	add	r3, r2
 8003272:	b2d9      	uxtb	r1, r3
 8003274:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003278:	2b00      	cmp	r3, #0
 800327a:	bf0c      	ite	eq
 800327c:	2301      	moveq	r3, #1
 800327e:	2300      	movne	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	461a      	mov	r2, r3
 8003284:	f7ff ff44 	bl	8003110 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	3301      	adds	r3, #1
 800328c:	61bb      	str	r3, [r7, #24]
 800328e:	783b      	ldrb	r3, [r7, #0]
 8003290:	461a      	mov	r2, r3
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	4293      	cmp	r3, r2
 8003296:	d3c3      	bcc.n	8003220 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	3301      	adds	r3, #1
 800329c:	61fb      	str	r3, [r7, #28]
 800329e:	787b      	ldrb	r3, [r7, #1]
 80032a0:	461a      	mov	r2, r3
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d3ab      	bcc.n	8003200 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80032a8:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <ssd1306_WriteChar+0x120>)
 80032aa:	881a      	ldrh	r2, [r3, #0]
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d006      	beq.n	80032c0 <ssd1306_WriteChar+0x108>
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	3b20      	subs	r3, #32
 80032b8:	440b      	add	r3, r1
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	b29b      	uxth	r3, r3
 80032be:	e001      	b.n	80032c4 <ssd1306_WriteChar+0x10c>
 80032c0:	783b      	ldrb	r3, [r7, #0]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	4413      	add	r3, r2
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	4b03      	ldr	r3, [pc, #12]	; (80032d8 <ssd1306_WriteChar+0x120>)
 80032ca:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3724      	adds	r7, #36	; 0x24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd90      	pop	{r4, r7, pc}
 80032d6:	bf00      	nop
 80032d8:	200009ac 	.word	0x200009ac

080032dc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	4638      	mov	r0, r7
 80032e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80032ea:	e013      	b.n	8003314 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	7818      	ldrb	r0, [r3, #0]
 80032f0:	7e3b      	ldrb	r3, [r7, #24]
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	463b      	mov	r3, r7
 80032f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032f8:	f7ff ff5e 	bl	80031b8 <ssd1306_WriteChar>
 80032fc:	4603      	mov	r3, r0
 80032fe:	461a      	mov	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d002      	beq.n	800330e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	e008      	b.n	8003320 <ssd1306_WriteString+0x44>
        }
        str++;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	3301      	adds	r3, #1
 8003312:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1e7      	bne.n	80032ec <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	781b      	ldrb	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	460a      	mov	r2, r1
 8003332:	71fb      	strb	r3, [r7, #7]
 8003334:	4613      	mov	r3, r2
 8003336:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003338:	79fb      	ldrb	r3, [r7, #7]
 800333a:	b29a      	uxth	r2, r3
 800333c:	4b05      	ldr	r3, [pc, #20]	; (8003354 <ssd1306_SetCursor+0x2c>)
 800333e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003340:	79bb      	ldrb	r3, [r7, #6]
 8003342:	b29a      	uxth	r2, r3
 8003344:	4b03      	ldr	r3, [pc, #12]	; (8003354 <ssd1306_SetCursor+0x2c>)
 8003346:	805a      	strh	r2, [r3, #2]
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	200009ac 	.word	0x200009ac

08003358 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003362:	2381      	movs	r3, #129	; 0x81
 8003364:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003366:	7bfb      	ldrb	r3, [r7, #15]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff fdf5 	bl	8002f58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff fdf1 	bl	8002f58 <ssd1306_WriteCommand>
}
 8003376:	bf00      	nop
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003390:	23af      	movs	r3, #175	; 0xaf
 8003392:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003394:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <ssd1306_SetDisplayOn+0x38>)
 8003396:	2201      	movs	r2, #1
 8003398:	715a      	strb	r2, [r3, #5]
 800339a:	e004      	b.n	80033a6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800339c:	23ae      	movs	r3, #174	; 0xae
 800339e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <ssd1306_SetDisplayOn+0x38>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff fdd5 	bl	8002f58 <ssd1306_WriteCommand>
}
 80033ae:	bf00      	nop
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	200009ac 	.word	0x200009ac

080033bc <ssd1306_WriteInt>:
    return SSD1306.DisplayOn;
}

// Upd by AKG
void ssd1306_WriteInt(int num, SSD1306_Font_t Font, SSD1306_COLOR color)
{
 80033bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033c0:	b08b      	sub	sp, #44	; 0x2c
 80033c2:	af02      	add	r7, sp, #8
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	4638      	mov	r0, r7
 80033c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80033cc:	466b      	mov	r3, sp
 80033ce:	461e      	mov	r6, r3
	static const int MAX_NUMBER_LENGTH = 10;

	int num_length = 1;
 80033d0:	2301      	movs	r3, #1
 80033d2:	61fb      	str	r3, [r7, #28]
	int num_divided = num;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	61bb      	str	r3, [r7, #24]
	while(num_divided / 10) {
 80033d8:	e00a      	b.n	80033f0 <ssd1306_WriteInt+0x34>
		num_length++;
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	3301      	adds	r3, #1
 80033de:	61fb      	str	r3, [r7, #28]
		num_divided = num_divided / 10;
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	4a32      	ldr	r2, [pc, #200]	; (80034ac <ssd1306_WriteInt+0xf0>)
 80033e4:	fb82 1203 	smull	r1, r2, r2, r3
 80033e8:	1092      	asrs	r2, r2, #2
 80033ea:	17db      	asrs	r3, r3, #31
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	61bb      	str	r3, [r7, #24]
	while(num_divided / 10) {
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	3309      	adds	r3, #9
 80033f4:	2b12      	cmp	r3, #18
 80033f6:	d8f0      	bhi.n	80033da <ssd1306_WriteInt+0x1e>
	}

	char str[MAX_NUMBER_LENGTH];
 80033f8:	4b2d      	ldr	r3, [pc, #180]	; (80034b0 <ssd1306_WriteInt+0xf4>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3b01      	subs	r3, #1
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	4b2b      	ldr	r3, [pc, #172]	; (80034b0 <ssd1306_WriteInt+0xf4>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	2300      	movs	r3, #0
 8003408:	4690      	mov	r8, r2
 800340a:	4699      	mov	r9, r3
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003418:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800341c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003420:	4b23      	ldr	r3, [pc, #140]	; (80034b0 <ssd1306_WriteInt+0xf4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	461a      	mov	r2, r3
 8003426:	2300      	movs	r3, #0
 8003428:	4614      	mov	r4, r2
 800342a:	461d      	mov	r5, r3
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	00eb      	lsls	r3, r5, #3
 8003436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800343a:	00e2      	lsls	r2, r4, #3
 800343c:	4b1c      	ldr	r3, [pc, #112]	; (80034b0 <ssd1306_WriteInt+0xf4>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3307      	adds	r3, #7
 8003442:	08db      	lsrs	r3, r3, #3
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	ebad 0d03 	sub.w	sp, sp, r3
 800344a:	ab02      	add	r3, sp, #8
 800344c:	3300      	adds	r3, #0
 800344e:	613b      	str	r3, [r7, #16]
	memset(str, 0, MAX_NUMBER_LENGTH*sizeof(char));
 8003450:	4b17      	ldr	r3, [pc, #92]	; (80034b0 <ssd1306_WriteInt+0xf4>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	461a      	mov	r2, r3
 8003456:	2100      	movs	r1, #0
 8003458:	6938      	ldr	r0, [r7, #16]
 800345a:	f004 fca1 	bl	8007da0 <memset>

	if(num_length <= MAX_NUMBER_LENGTH)
 800345e:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <ssd1306_WriteInt+0xf4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69fa      	ldr	r2, [r7, #28]
 8003464:	429a      	cmp	r2, r3
 8003466:	dc0d      	bgt.n	8003484 <ssd1306_WriteInt+0xc8>
	{
		itoa(num, str, 10);
 8003468:	220a      	movs	r2, #10
 800346a:	6939      	ldr	r1, [r7, #16]
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f004 fb9f 	bl	8007bb0 <itoa>
		ssd1306_WriteString(str, Font, color);
 8003472:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	463b      	mov	r3, r7
 800347a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800347c:	6938      	ldr	r0, [r7, #16]
 800347e:	f7ff ff2d 	bl	80032dc <ssd1306_WriteString>
 8003482:	e00c      	b.n	800349e <ssd1306_WriteInt+0xe2>
	}
	else
	{
		itoa(0, str, 10);
 8003484:	220a      	movs	r2, #10
 8003486:	6939      	ldr	r1, [r7, #16]
 8003488:	2000      	movs	r0, #0
 800348a:	f004 fb91 	bl	8007bb0 <itoa>
		ssd1306_WriteString(str, Font, color);
 800348e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	463b      	mov	r3, r7
 8003496:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003498:	6938      	ldr	r0, [r7, #16]
 800349a:	f7ff ff1f 	bl	80032dc <ssd1306_WriteString>
 800349e:	46b5      	mov	sp, r6
	}
}
 80034a0:	bf00      	nop
 80034a2:	3724      	adds	r7, #36	; 0x24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80034aa:	bf00      	nop
 80034ac:	66666667 	.word	0x66666667
 80034b0:	08008e70 	.word	0x08008e70

080034b4 <rx_message_run_command>:
#include <stdlib.h>

extern general_task_t task;

void rx_message_run_command(char* msg)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
	int32_t code = 0, param = 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	2300      	movs	r3, #0
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
	memcpy(&code, msg, sizeof(code));
 80034c8:	60fb      	str	r3, [r7, #12]
	memcpy(&param, msg + 4, sizeof(param));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3304      	adds	r3, #4
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	60bb      	str	r3, [r7, #8]

	switch(code)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2b05      	cmp	r3, #5
 80034d6:	d84c      	bhi.n	8003572 <rx_message_run_command+0xbe>
 80034d8:	a201      	add	r2, pc, #4	; (adr r2, 80034e0 <rx_message_run_command+0x2c>)
 80034da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034de:	bf00      	nop
 80034e0:	0800356d 	.word	0x0800356d
 80034e4:	080034f9 	.word	0x080034f9
 80034e8:	08003517 	.word	0x08003517
 80034ec:	0800353d 	.word	0x0800353d
 80034f0:	08003545 	.word	0x08003545
 80034f4:	08003557 	.word	0x08003557
	{
	case COMM_EMPTY:
		break;
	case COMM_SET_HV:
		// [param] = HV in Volts
		hv_set_abs_output_voltage_V(&task.hv_system, (double)abs(param));
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	bfb8      	it	lt
 80034fe:	425b      	neglt	r3, r3
 8003500:	4618      	mov	r0, r3
 8003502:	f7fc ffb3 	bl	800046c <__aeabi_i2d>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	ec43 2b10 	vmov	d0, r2, r3
 800350e:	481b      	ldr	r0, [pc, #108]	; (800357c <rx_message_run_command+0xc8>)
 8003510:	f7fe ff34 	bl	800237c <hv_set_abs_output_voltage_V>
		break;
 8003514:	e02d      	b.n	8003572 <rx_message_run_command+0xbe>
	case COMM_START_MEAS:
		if(param >= 0) // [param] = seconds
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	db29      	blt.n	8003570 <rx_message_run_command+0xbc>
		{
			adc_monitor_start_measurement(&task.adcDRMonitor, task.freqIT / 3 * param);
 800351c:	4b18      	ldr	r3, [pc, #96]	; (8003580 <rx_message_run_command+0xcc>)
 800351e:	885b      	ldrh	r3, [r3, #2]
 8003520:	4a18      	ldr	r2, [pc, #96]	; (8003584 <rx_message_run_command+0xd0>)
 8003522:	fba2 2303 	umull	r2, r3, r2, r3
 8003526:	085b      	lsrs	r3, r3, #1
 8003528:	b29b      	uxth	r3, r3
 800352a:	461a      	mov	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	fb02 f303 	mul.w	r3, r2, r3
 8003532:	4619      	mov	r1, r3
 8003534:	4814      	ldr	r0, [pc, #80]	; (8003588 <rx_message_run_command+0xd4>)
 8003536:	f7fd ff0b 	bl	8001350 <adc_monitor_start_measurement>
		}
		break;
 800353a:	e019      	b.n	8003570 <rx_message_run_command+0xbc>
	case COMM_RESET_MEAS:
		adc_monitor_reset_measurement(&task.adcDRMonitor);
 800353c:	4812      	ldr	r0, [pc, #72]	; (8003588 <rx_message_run_command+0xd4>)
 800353e:	f7fd ff29 	bl	8001394 <adc_monitor_reset_measurement>
		break;
 8003542:	e016      	b.n	8003572 <rx_message_run_command+0xbe>
	case COMM_SET_MEAS_RANGE:
		if(!param) // [param] = 0 - broad range, 1 - narrow range
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d102      	bne.n	8003550 <rx_message_run_command+0x9c>
		{
			select_broad_adc_dose_range();
 800354a:	f7fd ff7b 	bl	8001444 <select_broad_adc_dose_range>
		}
		else
		{
			select_narrow_adc_dose_range();
		}
		break;
 800354e:	e010      	b.n	8003572 <rx_message_run_command+0xbe>
			select_narrow_adc_dose_range();
 8003550:	f7fd ff8e 	bl	8001470 <select_narrow_adc_dose_range>
		break;
 8003554:	e00d      	b.n	8003572 <rx_message_run_command+0xbe>
	case COMM_SWITCH_HV:
		if(!param) // [param] = 0 - positive HV source, 1 - negative HV source
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d103      	bne.n	8003564 <rx_message_run_command+0xb0>
		{
			hv_select_positive_source(&task.hv_system);
 800355c:	4807      	ldr	r0, [pc, #28]	; (800357c <rx_message_run_command+0xc8>)
 800355e:	f7fe fefc 	bl	800235a <hv_select_positive_source>
		else
		{
			hv_select_negative_source(&task.hv_system);
		}
		// gpio toggle
		break;
 8003562:	e006      	b.n	8003572 <rx_message_run_command+0xbe>
			hv_select_negative_source(&task.hv_system);
 8003564:	4805      	ldr	r0, [pc, #20]	; (800357c <rx_message_run_command+0xc8>)
 8003566:	f7fe fee7 	bl	8002338 <hv_select_negative_source>
		break;
 800356a:	e002      	b.n	8003572 <rx_message_run_command+0xbe>
		break;
 800356c:	bf00      	nop
 800356e:	e000      	b.n	8003572 <rx_message_run_command+0xbe>
		break;
 8003570:	bf00      	nop
	}
}
 8003572:	bf00      	nop
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000550 	.word	0x20000550
 8003580:	200002f8 	.word	0x200002f8
 8003584:	aaaaaaab 	.word	0xaaaaaaab
 8003588:	200004d0 	.word	0x200004d0

0800358c <tcp_input_stream_init>:
static int tcp_input_stream_listen_socket(tcp_input_stream_t *self);
static int tcp_input_stream_receive(tcp_input_stream_t *self);
static int tcp_input_stream_reboot_ethernet(tcp_input_stream_t *self, int sockOpen);

int tcp_input_stream_init(tcp_input_stream_t *self, tcp_input_stream_init_data_t tcpInit)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	4638      	mov	r0, r7
 8003596:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	memset(self, 0, sizeof(*self));
 800359a:	223c      	movs	r2, #60	; 0x3c
 800359c:	2100      	movs	r1, #0
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f004 fbfe 	bl	8007da0 <memset>
	memset(self->msg, 0, INPUT_MESSAGE_SIZE);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	3301      	adds	r3, #1
 80035a8:	2208      	movs	r2, #8
 80035aa:	2100      	movs	r1, #0
 80035ac:	4618      	mov	r0, r3
 80035ae:	f004 fbf7 	bl	8007da0 <memset>
	memset(self->msgTemp, 0, INPUT_MESSAGE_SIZE);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	3309      	adds	r3, #9
 80035b6:	2208      	movs	r2, #8
 80035b8:	2100      	movs	r1, #0
 80035ba:	4618      	mov	r0, r3
 80035bc:	f004 fbf0 	bl	8007da0 <memset>
	memset(self->buff, 0, INPUT_MESSAGE_BUFFER_SIZE);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	3311      	adds	r3, #17
 80035c4:	2208      	movs	r2, #8
 80035c6:	2100      	movs	r1, #0
 80035c8:	4618      	mov	r0, r3
 80035ca:	f004 fbe9 	bl	8007da0 <memset>
	self->stat = 0;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	701a      	strb	r2, [r3, #0]
	self->initData = tcpInit;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	3328      	adds	r3, #40	; 0x28
 80035d8:	463a      	mov	r2, r7
 80035da:	ca07      	ldmia	r2, {r0, r1, r2}
 80035dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	self->currentBuffIndex = 0;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	61da      	str	r2, [r3, #28]
	self->bytesReceived = 0;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	621a      	str	r2, [r3, #32]
	self->msgSize = 0;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	849a      	strh	r2, [r3, #36]	; 0x24
	self->handlerEnabled = 0;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	self->isConnected = 0;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	self->w5500RebootCounter = self->initData.w5500RebootCounterMax;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	639a      	str	r2, [r3, #56]	; 0x38

	//self->state = INPUT_SOCK_INIT;
	return 0;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <tcp_input_stream_routine>:
{
	return INPUT_MESSAGE_SIZE; //size
}

int tcp_input_stream_routine(tcp_input_stream_t *self)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	// new state mashine
	int received = -1;
 800361c:	f04f 33ff 	mov.w	r3, #4294967295
 8003620:	60fb      	str	r3, [r7, #12]
	self->isConnected = 0;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	switch(getSn_SR(self->initData.sn))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	3301      	adds	r3, #1
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fe96 	bl	800436c <WIZCHIP_READ>
 8003640:	4603      	mov	r3, r0
 8003642:	2b17      	cmp	r3, #23
 8003644:	d013      	beq.n	800366e <tcp_input_stream_routine+0x5a>
 8003646:	2b17      	cmp	r3, #23
 8003648:	dc24      	bgt.n	8003694 <tcp_input_stream_routine+0x80>
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <tcp_input_stream_routine+0x40>
 800364e:	2b13      	cmp	r3, #19
 8003650:	d009      	beq.n	8003666 <tcp_input_stream_routine+0x52>
 8003652:	e01f      	b.n	8003694 <tcp_input_stream_routine+0x80>
	{
	case SOCK_CLOSED:
		int open = tcp_input_stream_open_socket(self);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f830 	bl	80036ba <tcp_input_stream_open_socket>
 800365a:	60b8      	str	r0, [r7, #8]
		tcp_input_stream_reboot_ethernet(self, open);
 800365c:	68b9      	ldr	r1, [r7, #8]
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f8ba 	bl	80037d8 <tcp_input_stream_reboot_ethernet>
		break;
 8003664:	e016      	b.n	8003694 <tcp_input_stream_routine+0x80>
	case SOCK_INIT:
		tcp_input_stream_listen_socket(self);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f83f 	bl	80036ea <tcp_input_stream_listen_socket>
		break;
 800366c:	e012      	b.n	8003694 <tcp_input_stream_routine+0x80>
	case SOCK_ESTABLISHED:
		received = tcp_input_stream_receive(self);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f84e 	bl	8003710 <tcp_input_stream_receive>
 8003674:	60f8      	str	r0, [r7, #12]
		if(received < 0)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	da06      	bge.n	800368a <tcp_input_stream_routine+0x76>
		{
			disconnect(self->initData.sn);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003682:	4618      	mov	r0, r3
 8003684:	f000 fc4c 	bl	8003f20 <disconnect>
		}
		else
		{
			self->isConnected = 1;
		}
		break;
 8003688:	e003      	b.n	8003692 <tcp_input_stream_routine+0x7e>
			self->isConnected = 1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		break;
 8003692:	bf00      	nop
	}
	return 0;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <tcp_input_stream_enable_handler>:


void tcp_input_stream_enable_handler(tcp_input_stream_t *self)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
	self->handlerEnabled = 1;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <tcp_input_stream_open_socket>:
{
	return self->isConnected;
}

static int tcp_input_stream_open_socket(tcp_input_stream_t *self)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
	self->stat = socket(self->initData.sn, Sn_MR_TCP, self->initData.port, self->initData.flag);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80036d2:	2101      	movs	r1, #1
 80036d4:	f000 fa48 	bl	8003b68 <socket>
 80036d8:	4603      	mov	r3, r0
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	701a      	strb	r2, [r3, #0]
	return 0;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <tcp_input_stream_listen_socket>:

static int tcp_input_stream_listen_socket(tcp_input_stream_t *self)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
	self->stat = listen(self->initData.sn);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fbb7 	bl	8003e6c <listen>
 80036fe:	4603      	mov	r3, r0
 8003700:	b2da      	uxtb	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	701a      	strb	r2, [r3, #0]
	return 0;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <tcp_input_stream_receive>:

static int tcp_input_stream_receive(tcp_input_stream_t *self)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
	while (self->bytesReceived != INPUT_MESSAGE_SIZE)
 8003718:	e033      	b.n	8003782 <tcp_input_stream_receive+0x72>
	{
		int recv_size = recv(self->initData.sn, (uint8_t*)self->buff, INPUT_MESSAGE_BUFFER_SIZE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3311      	adds	r3, #17
 8003724:	2208      	movs	r2, #8
 8003726:	4619      	mov	r1, r3
 8003728:	f000 fd6a 	bl	8004200 <recv>
 800372c:	60f8      	str	r0, [r7, #12]
		if (recv_size == 0)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <tcp_input_stream_receive+0x28>
		{
			return 0;
 8003734:	2300      	movs	r3, #0
 8003736:	e04b      	b.n	80037d0 <tcp_input_stream_receive+0xc0>
		}
		if (recv_size < 0)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	da01      	bge.n	8003742 <tcp_input_stream_receive+0x32>
		{
			return recv_size;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	e046      	b.n	80037d0 <tcp_input_stream_receive+0xc0>
		}

		self->bytesReceived += recv_size;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1a      	ldr	r2, [r3, #32]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	441a      	add	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	621a      	str	r2, [r3, #32]

		int i;
		for(i = 0; i < recv_size; ++i)
 800374e:	2300      	movs	r3, #0
 8003750:	617b      	str	r3, [r7, #20]
 8003752:	e012      	b.n	800377a <tcp_input_stream_receive+0x6a>
		{
			self->msgTemp[self->currentBuffIndex] = self->buff[i];
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	440a      	add	r2, r1
 800375e:	3211      	adds	r2, #17
 8003760:	7811      	ldrb	r1, [r2, #0]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	4413      	add	r3, r2
 8003766:	460a      	mov	r2, r1
 8003768:	725a      	strb	r2, [r3, #9]
			self->currentBuffIndex++;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	61da      	str	r2, [r3, #28]
		for(i = 0; i < recv_size; ++i)
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	3301      	adds	r3, #1
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	429a      	cmp	r2, r3
 8003780:	dbe8      	blt.n	8003754 <tcp_input_stream_receive+0x44>
	while (self->bytesReceived != INPUT_MESSAGE_SIZE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	2b08      	cmp	r3, #8
 8003788:	d1c7      	bne.n	800371a <tcp_input_stream_receive+0xa>
		}

	}

	memcpy(self->msg, self->msgTemp, INPUT_MESSAGE_SIZE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	1c58      	adds	r0, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3309      	adds	r3, #9
 8003792:	2208      	movs	r2, #8
 8003794:	4619      	mov	r1, r3
 8003796:	f004 fb47 	bl	8007e28 <memcpy>

	if(self->handlerEnabled)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d004      	beq.n	80037ae <tcp_input_stream_receive+0x9e>
	{
		rx_message_run_command(self->msg); // reaction
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3301      	adds	r3, #1
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff fe83 	bl	80034b4 <rx_message_run_command>
	}

	int tempBytesReceived = self->bytesReceived;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	613b      	str	r3, [r7, #16]
	memset(self->msgTemp, 0, INPUT_MESSAGE_SIZE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3309      	adds	r3, #9
 80037b8:	2208      	movs	r2, #8
 80037ba:	2100      	movs	r1, #0
 80037bc:	4618      	mov	r0, r3
 80037be:	f004 faef 	bl	8007da0 <memset>
	self->bytesReceived = 0;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	621a      	str	r2, [r3, #32]
	self->currentBuffIndex = 0;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	61da      	str	r2, [r3, #28]

	return tempBytesReceived;
 80037ce:	693b      	ldr	r3, [r7, #16]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <tcp_input_stream_reboot_ethernet>:
	close(self->initData.sn);
	return 0;
}

static int tcp_input_stream_reboot_ethernet(tcp_input_stream_t *self, int sockOpen)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
	if(sockOpen != SOCK_OK)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d010      	beq.n	800380a <tcp_input_stream_reboot_ethernet+0x32>
	{
		if(self->w5500RebootCounter == 0)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d106      	bne.n	80037fe <tcp_input_stream_reboot_ethernet+0x26>
		{
			W5500_Reboot();
 80037f0:	f001 fbc2 	bl	8004f78 <W5500_Reboot>
			// reset delay counter after reboot
			self->w5500RebootCounter = self->initData.w5500RebootCounterMax;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	639a      	str	r2, [r3, #56]	; 0x38
 80037fc:	e009      	b.n	8003812 <tcp_input_stream_reboot_ethernet+0x3a>
		}
		else
		{
			// count delay
			self->w5500RebootCounter--;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	1e5a      	subs	r2, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	639a      	str	r2, [r3, #56]	; 0x38
 8003808:	e003      	b.n	8003812 <tcp_input_stream_reboot_ethernet+0x3a>
		}
	}
	else
	{
		// reset delay counter after ok open socket
		self->w5500RebootCounter = self->initData.w5500RebootCounterMax;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	639a      	str	r2, [r3, #56]	; 0x38
	}
	return 0;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <tcp_output_stream_init>:
static int tcp_output_stream_listen_socket(tcp_output_stream_t *self);
static int tcp_output_stream_send(tcp_output_stream_t *self);
static int tcp_output_stream_reboot_socket(tcp_output_stream_t *self, int sent);

int tcp_output_stream_init(tcp_output_stream_t *self, tcp_output_stream_init_data_t tcpInit)
{
 800381c:	b084      	sub	sp, #16
 800381e:	b590      	push	{r4, r7, lr}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	f107 001c 	add.w	r0, r7, #28
 800382a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	memset(self, 0, sizeof(*self));
 800382e:	229c      	movs	r2, #156	; 0x9c
 8003830:	2100      	movs	r1, #0
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f004 fab4 	bl	8007da0 <memset>
	self->stat = 0;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	701a      	strb	r2, [r3, #0]
	self->initData = tcpInit;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f103 0484 	add.w	r4, r3, #132	; 0x84
 8003844:	f107 031c 	add.w	r3, r7, #28
 8003848:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800384a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->msgSize = 0;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	self->isConnected = 0;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	self->closeSocketCounter = self->initData.closeSocketCounterMax;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	memset(self->msg, 0, MAX_OUTPUT_MESSAGE_SIZE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3301      	adds	r3, #1
 800386e:	2280      	movs	r2, #128	; 0x80
 8003870:	2100      	movs	r1, #0
 8003872:	4618      	mov	r0, r3
 8003874:	f004 fa94 	bl	8007da0 <memset>
	return 0;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003884:	b004      	add	sp, #16
 8003886:	4770      	bx	lr

08003888 <tcp_output_stream_set_message>:
{
	return 0;
}

int tcp_output_stream_set_message(tcp_output_stream_t *self, char* message, uint16_t size)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	4613      	mov	r3, r2
 8003894:	80fb      	strh	r3, [r7, #6]
	memset(self->msg, 0, MAX_OUTPUT_MESSAGE_SIZE);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	3301      	adds	r3, #1
 800389a:	2280      	movs	r2, #128	; 0x80
 800389c:	2100      	movs	r1, #0
 800389e:	4618      	mov	r0, r3
 80038a0:	f004 fa7e 	bl	8007da0 <memset>
	if(size < MAX_OUTPUT_MESSAGE_SIZE)
 80038a4:	88fb      	ldrh	r3, [r7, #6]
 80038a6:	2b7f      	cmp	r3, #127	; 0x7f
 80038a8:	d80b      	bhi.n	80038c2 <tcp_output_stream_set_message+0x3a>
	{
		self->msgSize = size;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	88fa      	ldrh	r2, [r7, #6]
 80038ae:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		memcpy(self->msg, message, size);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	3301      	adds	r3, #1
 80038b6:	88fa      	ldrh	r2, [r7, #6]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f004 fab4 	bl	8007e28 <memcpy>
 80038c0:	e00a      	b.n	80038d8 <tcp_output_stream_set_message+0x50>
	}
	else
	{
		self->msgSize = MAX_OUTPUT_MESSAGE_SIZE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2280      	movs	r2, #128	; 0x80
 80038c6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		memcpy(self->msg, message, MAX_OUTPUT_MESSAGE_SIZE);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	3301      	adds	r3, #1
 80038ce:	2280      	movs	r2, #128	; 0x80
 80038d0:	68b9      	ldr	r1, [r7, #8]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f004 faa8 	bl	8007e28 <memcpy>
	}
	return 0;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <tcp_output_stream_routine>:

int tcp_output_stream_routine(tcp_output_stream_t *self)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b084      	sub	sp, #16
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
	// new state machine
	int sent = -1;
 80038ea:	f04f 33ff 	mov.w	r3, #4294967295
 80038ee:	60fb      	str	r3, [r7, #12]
	self->isConnected = 0;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	switch(getSn_SR(self->initData.sn))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	3301      	adds	r3, #1
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fd2f 	bl	800436c <WIZCHIP_READ>
 800390e:	4603      	mov	r3, r0
 8003910:	2b17      	cmp	r3, #23
 8003912:	d00e      	beq.n	8003932 <tcp_output_stream_routine+0x50>
 8003914:	2b17      	cmp	r3, #23
 8003916:	dc27      	bgt.n	8003968 <tcp_output_stream_routine+0x86>
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <tcp_output_stream_routine+0x40>
 800391c:	2b13      	cmp	r3, #19
 800391e:	d004      	beq.n	800392a <tcp_output_stream_routine+0x48>
 8003920:	e022      	b.n	8003968 <tcp_output_stream_routine+0x86>
	{
	case SOCK_CLOSED:
		//int open = tcp_output_stream_open_socket(self);
		tcp_output_stream_open_socket(self);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f825 	bl	8003972 <tcp_output_stream_open_socket>
		break;
 8003928:	e01e      	b.n	8003968 <tcp_output_stream_routine+0x86>
	case SOCK_INIT:
		tcp_output_stream_listen_socket(self);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f83a 	bl	80039a4 <tcp_output_stream_listen_socket>
		break;
 8003930:	e01a      	b.n	8003968 <tcp_output_stream_routine+0x86>
	case SOCK_ESTABLISHED:
		sent = tcp_output_stream_send(self);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f849 	bl	80039ca <tcp_output_stream_send>
 8003938:	60f8      	str	r0, [r7, #12]
		if(sent < 0)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	da06      	bge.n	800394e <tcp_output_stream_routine+0x6c>
		{
			disconnect(self->initData.sn);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003946:	4618      	mov	r0, r3
 8003948:	f000 faea 	bl	8003f20 <disconnect>
		}
		else
		{
			self->isConnected = 1;
		}
		break;
 800394c:	e00b      	b.n	8003966 <tcp_output_stream_routine+0x84>
		else if (self == 0)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d104      	bne.n	800395e <tcp_output_stream_routine+0x7c>
			tcp_output_stream_reboot_socket(self, sent);
 8003954:	68f9      	ldr	r1, [r7, #12]
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f85a 	bl	8003a10 <tcp_output_stream_reboot_socket>
		break;
 800395c:	e003      	b.n	8003966 <tcp_output_stream_routine+0x84>
			self->isConnected = 1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		break;
 8003966:	bf00      	nop
	}
	return 0;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <tcp_output_stream_open_socket>:
{
	return self->isConnected;
}

static int tcp_output_stream_open_socket(tcp_output_stream_t *self)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
	self->stat = socket(self->initData.sn, Sn_MR_TCP, self->initData.port, self->initData.flag);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 0084 	ldrb.w	r0, [r3, #132]	; 0x84
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800398c:	2101      	movs	r1, #1
 800398e:	f000 f8eb 	bl	8003b68 <socket>
 8003992:	4603      	mov	r3, r0
 8003994:	b2da      	uxtb	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	701a      	strb	r2, [r3, #0]
	return 0;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <tcp_output_stream_listen_socket>:

static int tcp_output_stream_listen_socket(tcp_output_stream_t *self)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
	self->stat = listen(self->initData.sn);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fa5a 	bl	8003e6c <listen>
 80039b8:	4603      	mov	r3, r0
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	701a      	strb	r2, [r3, #0]
	return 0;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <tcp_output_stream_send>:

static int tcp_output_stream_send(tcp_output_stream_t *self)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
	return send(self->initData.sn, (uint8_t*)self->msg, self->msgSize);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 0084 	ldrb.w	r0, [r3, #132]	; 0x84
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	1c59      	adds	r1, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80039e2:	461a      	mov	r2, r3
 80039e4:	f000 fb12 	bl	800400c <send>
 80039e8:	4603      	mov	r3, r0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <tcp_output_stream_close_socket>:

int tcp_output_stream_close_socket(tcp_output_stream_t *self)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b082      	sub	sp, #8
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
	close(self->initData.sn);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 f9c5 	bl	8003d90 <close>
	return 0;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <tcp_output_stream_reboot_socket>:

static int tcp_output_stream_reboot_socket(tcp_output_stream_t *self, int sent)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
	if (!sent) // sent == 0
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d116      	bne.n	8003a4e <tcp_output_stream_reboot_socket+0x3e>
	{
		if(self->closeSocketCounter == 0)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d109      	bne.n	8003a3e <tcp_output_stream_reboot_socket+0x2e>
		{
			tcp_output_stream_close_socket(self);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff ffe1 	bl	80039f2 <tcp_output_stream_close_socket>

			// reset delay counter after reboot
			self->closeSocketCounter = self->initData.closeSocketCounterMax;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003a3c:	e00d      	b.n	8003a5a <tcp_output_stream_reboot_socket+0x4a>
		}
		else
		{
			// count delay
			self->closeSocketCounter--;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a44:	1e5a      	subs	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003a4c:	e005      	b.n	8003a5a <tcp_output_stream_reboot_socket+0x4a>
		}
	}
	else
	{
		// reset delay counter after reboot
		self->closeSocketCounter = self->initData.closeSocketCounterMax;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}

	return 0;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <tx_message_increase_id>:
{
	return 0;
}

void tx_message_increase_id(tx_message_t *self)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
	uint32_t id;
	memcpy(&id, self->message + BYTE_POS_ID, sizeof(id)); // get current id
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60fb      	str	r3, [r7, #12]
	id++; // increase id
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	3301      	adds	r3, #1
 8003a76:	60fb      	str	r3, [r7, #12]
	memcpy(self->message + BYTE_POS_ID, (char*)&id, sizeof(id)); // copy increased id
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	601a      	str	r2, [r3, #0]
}
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <tx_message_set_adc_dr_uV>:

void tx_message_set_adc_dr_uV(tx_message_t *self, int32_t val)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	6039      	str	r1, [r7, #0]
	memcpy(self->message + BYTE_POS_ADC_DR, (char*)&val, sizeof(val));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3304      	adds	r3, #4
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	601a      	str	r2, [r3, #0]
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <tx_message_set_adc_dr_average_uV>:

void tx_message_set_adc_dr_average_uV(tx_message_t *self, int32_t val)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
	memcpy(self->message + BYTE_POS_ADC_DR_AV, (char*)&val, sizeof(val));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	601a      	str	r2, [r3, #0]
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <tx_message_set_hv_out_mV>:

void tx_message_set_hv_out_mV(tx_message_t *self, int32_t val)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	6039      	str	r1, [r7, #0]
	memcpy(self->message + BYTE_POS_HV_OUT, (char*)&val, sizeof(val));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	330c      	adds	r3, #12
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	601a      	str	r2, [r3, #0]
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <tx_message_set_press_out_Pa>:

void tx_message_set_press_out_Pa(tx_message_t *self, int32_t val)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
	memcpy(self->message + BYTE_POS_PRESS_OUT, (char*)&val, sizeof(val));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3310      	adds	r3, #16
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	601a      	str	r2, [r3, #0]
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <tx_message_set_adc_dr_measure_state>:

void tx_message_set_adc_dr_measure_state(tx_message_t *self, uint8_t val)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	70fb      	strb	r3, [r7, #3]
	memcpy(self->message + BYTE_POS_DR_MEASURE_STATE, (char*)&val, sizeof(val));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3314      	adds	r3, #20
 8003b12:	78fa      	ldrb	r2, [r7, #3]
 8003b14:	701a      	strb	r2, [r3, #0]
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <tx_message_set_adc_dr_measure_time>:

void tx_message_set_adc_dr_measure_time(tx_message_t *self, uint16_t val)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	807b      	strh	r3, [r7, #2]
	memcpy(self->message + BYTE_POS_DR_MEASURE_TIME, (char*)&val, sizeof(val));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3315      	adds	r3, #21
 8003b32:	887a      	ldrh	r2, [r7, #2]
 8003b34:	801a      	strh	r2, [r3, #0]
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <tx_message_get>:


char* tx_message_get(tx_message_t *self)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
	return self->message;
 8003b4a:	687b      	ldr	r3, [r7, #4]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <tx_message_size>:

size_t tx_message_size(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
	return TX_MESSAGE_SIZE;
 8003b5c:	2317      	movs	r3, #23
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8003b68:	b590      	push	{r4, r7, lr}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4604      	mov	r4, r0
 8003b70:	4608      	mov	r0, r1
 8003b72:	4611      	mov	r1, r2
 8003b74:	461a      	mov	r2, r3
 8003b76:	4623      	mov	r3, r4
 8003b78:	71fb      	strb	r3, [r7, #7]
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	71bb      	strb	r3, [r7, #6]
 8003b7e:	460b      	mov	r3, r1
 8003b80:	80bb      	strh	r3, [r7, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d902      	bls.n	8003b92 <socket+0x2a>
 8003b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b90:	e0f0      	b.n	8003d74 <socket+0x20c>
	switch(protocol)
 8003b92:	79bb      	ldrb	r3, [r7, #6]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d005      	beq.n	8003ba4 <socket+0x3c>
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	dd11      	ble.n	8003bc0 <socket+0x58>
 8003b9c:	3b02      	subs	r3, #2
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d80e      	bhi.n	8003bc0 <socket+0x58>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8003ba2:	e010      	b.n	8003bc6 <socket+0x5e>
            getSIPR((uint8_t*)&taddr);
 8003ba4:	f107 030c 	add.w	r3, r7, #12
 8003ba8:	2204      	movs	r2, #4
 8003baa:	4619      	mov	r1, r3
 8003bac:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003bb0:	f000 fc76 	bl	80044a0 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d105      	bne.n	8003bc6 <socket+0x5e>
 8003bba:	f06f 0302 	mvn.w	r3, #2
 8003bbe:	e0d9      	b.n	8003d74 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8003bc0:	f06f 0304 	mvn.w	r3, #4
 8003bc4:	e0d6      	b.n	8003d74 <socket+0x20c>
         break;
 8003bc6:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8003bc8:	78fb      	ldrb	r3, [r7, #3]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <socket+0x70>
 8003bd2:	f06f 0305 	mvn.w	r3, #5
 8003bd6:	e0cd      	b.n	8003d74 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d028      	beq.n	8003c30 <socket+0xc8>
	{
   	switch(protocol)
 8003bde:	79bb      	ldrb	r3, [r7, #6]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d002      	beq.n	8003bea <socket+0x82>
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d008      	beq.n	8003bfa <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8003be8:	e022      	b.n	8003c30 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8003bea:	78fb      	ldrb	r3, [r7, #3]
 8003bec:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d11a      	bne.n	8003c2a <socket+0xc2>
 8003bf4:	f06f 0305 	mvn.w	r3, #5
 8003bf8:	e0bc      	b.n	8003d74 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8003bfa:	78fb      	ldrb	r3, [r7, #3]
 8003bfc:	f003 0320 	and.w	r3, r3, #32
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d006      	beq.n	8003c12 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8003c04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	db02      	blt.n	8003c12 <socket+0xaa>
 8003c0c:	f06f 0305 	mvn.w	r3, #5
 8003c10:	e0b0      	b.n	8003d74 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8003c12:	78fb      	ldrb	r3, [r7, #3]
 8003c14:	f003 0310 	and.w	r3, r3, #16
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8003c1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	db04      	blt.n	8003c2e <socket+0xc6>
 8003c24:	f06f 0305 	mvn.w	r3, #5
 8003c28:	e0a4      	b.n	8003d74 <socket+0x20c>
   	      break;
 8003c2a:	bf00      	nop
 8003c2c:	e000      	b.n	8003c30 <socket+0xc8>
   	      break;
 8003c2e:	bf00      	nop
   	}
   }
	close(sn);
 8003c30:	79fb      	ldrb	r3, [r7, #7]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 f8ac 	bl	8003d90 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8003c38:	79fb      	ldrb	r3, [r7, #7]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4618      	mov	r0, r3
 8003c42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c46:	f023 030f 	bic.w	r3, r3, #15
 8003c4a:	b25a      	sxtb	r2, r3
 8003c4c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	b25b      	sxtb	r3, r3
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	4619      	mov	r1, r3
 8003c58:	f000 fbd4 	bl	8004404 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8003c5c:	88bb      	ldrh	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d110      	bne.n	8003c84 <socket+0x11c>
	{
	   port = sock_any_port++;
 8003c62:	4b46      	ldr	r3, [pc, #280]	; (8003d7c <socket+0x214>)
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	b291      	uxth	r1, r2
 8003c6a:	4a44      	ldr	r2, [pc, #272]	; (8003d7c <socket+0x214>)
 8003c6c:	8011      	strh	r1, [r2, #0]
 8003c6e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8003c70:	4b42      	ldr	r3, [pc, #264]	; (8003d7c <socket+0x214>)
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d103      	bne.n	8003c84 <socket+0x11c>
 8003c7c:	4b3f      	ldr	r3, [pc, #252]	; (8003d7c <socket+0x214>)
 8003c7e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8003c82:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8003c84:	79fb      	ldrb	r3, [r7, #7]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	3301      	adds	r3, #1
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c90:	461a      	mov	r2, r3
 8003c92:	88bb      	ldrh	r3, [r7, #4]
 8003c94:	0a1b      	lsrs	r3, r3, #8
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	f000 fbb1 	bl	8004404 <WIZCHIP_WRITE>
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cae:	461a      	mov	r2, r3
 8003cb0:	88bb      	ldrh	r3, [r7, #4]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	f000 fba4 	bl	8004404 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8003cbc:	79fb      	ldrb	r3, [r7, #7]
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003cc8:	2101      	movs	r1, #1
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fb9a 	bl	8004404 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003cd0:	bf00      	nop
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fb44 	bl	800436c <WIZCHIP_READ>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f3      	bne.n	8003cd2 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	2201      	movs	r2, #1
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	b21b      	sxth	r3, r3
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	b21a      	sxth	r2, r3
 8003cf8:	4b21      	ldr	r3, [pc, #132]	; (8003d80 <socket+0x218>)
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	b21b      	sxth	r3, r3
 8003cfe:	4013      	ands	r3, r2
 8003d00:	b21b      	sxth	r3, r3
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	4b1e      	ldr	r3, [pc, #120]	; (8003d80 <socket+0x218>)
 8003d06:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8003d08:	78fb      	ldrb	r3, [r7, #3]
 8003d0a:	f003 0201 	and.w	r2, r3, #1
 8003d0e:	79fb      	ldrb	r3, [r7, #7]
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	b21a      	sxth	r2, r3
 8003d16:	4b1a      	ldr	r3, [pc, #104]	; (8003d80 <socket+0x218>)
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	b21b      	sxth	r3, r3
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	b21b      	sxth	r3, r3
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	4b17      	ldr	r3, [pc, #92]	; (8003d80 <socket+0x218>)
 8003d24:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	b21b      	sxth	r3, r3
 8003d30:	43db      	mvns	r3, r3
 8003d32:	b21a      	sxth	r2, r3
 8003d34:	4b13      	ldr	r3, [pc, #76]	; (8003d84 <socket+0x21c>)
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	b21b      	sxth	r3, r3
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	b21b      	sxth	r3, r3
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <socket+0x21c>)
 8003d42:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003d44:	79fb      	ldrb	r3, [r7, #7]
 8003d46:	4a10      	ldr	r2, [pc, #64]	; (8003d88 <socket+0x220>)
 8003d48:	2100      	movs	r1, #0
 8003d4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8003d4e:	79fb      	ldrb	r3, [r7, #7]
 8003d50:	4a0e      	ldr	r2, [pc, #56]	; (8003d8c <socket+0x224>)
 8003d52:	2100      	movs	r1, #0
 8003d54:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8003d56:	bf00      	nop
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 fb01 	bl	800436c <WIZCHIP_READ>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0f3      	beq.n	8003d58 <socket+0x1f0>
   return (int8_t)sn;
 8003d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8003d74:	4618      	mov	r0, r3
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd90      	pop	{r4, r7, pc}
 8003d7c:	20000040 	.word	0x20000040
 8003d80:	200009b2 	.word	0x200009b2
 8003d84:	200009b4 	.word	0x200009b4
 8003d88:	200009b8 	.word	0x200009b8
 8003d8c:	200009c8 	.word	0x200009c8

08003d90 <close>:

int8_t close(uint8_t sn)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8003d9a:	79fb      	ldrb	r3, [r7, #7]
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d902      	bls.n	8003da6 <close+0x16>
 8003da0:	f04f 33ff 	mov.w	r3, #4294967295
 8003da4:	e055      	b.n	8003e52 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8003da6:	79fb      	ldrb	r3, [r7, #7]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	3301      	adds	r3, #1
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003db2:	2110      	movs	r1, #16
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 fb25 	bl	8004404 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8003dba:	bf00      	nop
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 facf 	bl	800436c <WIZCHIP_READ>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1f3      	bne.n	8003dbc <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8003dd4:	79fb      	ldrb	r3, [r7, #7]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	3301      	adds	r3, #1
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003de0:	211f      	movs	r1, #31
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fb0e 	bl	8004404 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	2201      	movs	r2, #1
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	b21b      	sxth	r3, r3
 8003df2:	43db      	mvns	r3, r3
 8003df4:	b21a      	sxth	r2, r3
 8003df6:	4b19      	ldr	r3, [pc, #100]	; (8003e5c <close+0xcc>)
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	b21b      	sxth	r3, r3
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	b21b      	sxth	r3, r3
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	4b16      	ldr	r3, [pc, #88]	; (8003e5c <close+0xcc>)
 8003e04:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	b21b      	sxth	r3, r3
 8003e10:	43db      	mvns	r3, r3
 8003e12:	b21a      	sxth	r2, r3
 8003e14:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <close+0xd0>)
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	b21b      	sxth	r3, r3
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	b21b      	sxth	r3, r3
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	4b0f      	ldr	r3, [pc, #60]	; (8003e60 <close+0xd0>)
 8003e22:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8003e24:	79fb      	ldrb	r3, [r7, #7]
 8003e26:	4a0f      	ldr	r2, [pc, #60]	; (8003e64 <close+0xd4>)
 8003e28:	2100      	movs	r1, #0
 8003e2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	4a0d      	ldr	r2, [pc, #52]	; (8003e68 <close+0xd8>)
 8003e32:	2100      	movs	r1, #0
 8003e34:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8003e36:	bf00      	nop
 8003e38:	79fb      	ldrb	r3, [r7, #7]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fa91 	bl	800436c <WIZCHIP_READ>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1f3      	bne.n	8003e38 <close+0xa8>
	return SOCK_OK;
 8003e50:	2301      	movs	r3, #1
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	200009b2 	.word	0x200009b2
 8003e60:	200009b4 	.word	0x200009b4
 8003e64:	200009b8 	.word	0x200009b8
 8003e68:	200009c8 	.word	0x200009c8

08003e6c <listen>:

int8_t listen(uint8_t sn)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	4603      	mov	r3, r0
 8003e74:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d902      	bls.n	8003e82 <listen+0x16>
 8003e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e80:	e049      	b.n	8003f16 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	3301      	adds	r3, #1
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 fa6e 	bl	800436c <WIZCHIP_READ>
 8003e90:	4603      	mov	r3, r0
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d002      	beq.n	8003ea0 <listen+0x34>
 8003e9a:	f06f 0304 	mvn.w	r3, #4
 8003e9e:	e03a      	b.n	8003f16 <listen+0xaa>
	CHECK_SOCKINIT();
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fa5d 	bl	800436c <WIZCHIP_READ>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b13      	cmp	r3, #19
 8003eb6:	d002      	beq.n	8003ebe <listen+0x52>
 8003eb8:	f06f 0302 	mvn.w	r3, #2
 8003ebc:	e02b      	b.n	8003f16 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8003ebe:	79fb      	ldrb	r3, [r7, #7]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003eca:	2102      	movs	r1, #2
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 fa99 	bl	8004404 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8003ed2:	bf00      	nop
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	3301      	adds	r3, #1
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 fa43 	bl	800436c <WIZCHIP_READ>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1f3      	bne.n	8003ed4 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8003eec:	e006      	b.n	8003efc <listen+0x90>
   {
         close(sn);
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff ff4d 	bl	8003d90 <close>
         return SOCKERR_SOCKCLOSED;
 8003ef6:	f06f 0303 	mvn.w	r3, #3
 8003efa:	e00c      	b.n	8003f16 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	3301      	adds	r3, #1
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fa2f 	bl	800436c <WIZCHIP_READ>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b14      	cmp	r3, #20
 8003f12:	d1ec      	bne.n	8003eee <listen+0x82>
   }
   return SOCK_OK;
 8003f14:	2301      	movs	r3, #1
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
	...

08003f20 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d902      	bls.n	8003f36 <disconnect+0x16>
 8003f30:	f04f 33ff 	mov.w	r3, #4294967295
 8003f34:	e062      	b.n	8003ffc <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003f36:	79fb      	ldrb	r3, [r7, #7]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 fa14 	bl	800436c <WIZCHIP_READ>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d002      	beq.n	8003f54 <disconnect+0x34>
 8003f4e:	f06f 0304 	mvn.w	r3, #4
 8003f52:	e053      	b.n	8003ffc <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	3301      	adds	r3, #1
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003f60:	2108      	movs	r1, #8
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fa4e 	bl	8004404 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8003f68:	bf00      	nop
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	3301      	adds	r3, #1
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 f9f8 	bl	800436c <WIZCHIP_READ>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f3      	bne.n	8003f6a <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8003f82:	79fb      	ldrb	r3, [r7, #7]
 8003f84:	2201      	movs	r2, #1
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	b21b      	sxth	r3, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	b21a      	sxth	r2, r3
 8003f90:	4b1c      	ldr	r3, [pc, #112]	; (8004004 <disconnect+0xe4>)
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	b21b      	sxth	r3, r3
 8003f96:	4013      	ands	r3, r2
 8003f98:	b21b      	sxth	r3, r3
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	4b19      	ldr	r3, [pc, #100]	; (8004004 <disconnect+0xe4>)
 8003f9e:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8003fa0:	4b19      	ldr	r3, [pc, #100]	; (8004008 <disconnect+0xe8>)
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	79fb      	ldrb	r3, [r7, #7]
 8003fa8:	fa42 f303 	asr.w	r3, r2, r3
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d016      	beq.n	8003fe2 <disconnect+0xc2>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	e021      	b.n	8003ffc <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8003fb8:	79fb      	ldrb	r3, [r7, #7]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 f9d1 	bl	800436c <WIZCHIP_READ>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d006      	beq.n	8003fe2 <disconnect+0xc2>
	   {
	      close(sn);
 8003fd4:	79fb      	ldrb	r3, [r7, #7]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff feda 	bl	8003d90 <close>
	      return SOCKERR_TIMEOUT;
 8003fdc:	f06f 030c 	mvn.w	r3, #12
 8003fe0:	e00c      	b.n	8003ffc <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 f9bc 	bl	800436c <WIZCHIP_READ>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1de      	bne.n	8003fb8 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8003ffa:	2301      	movs	r3, #1
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	200009b4 	.word	0x200009b4
 8004008:	200009b2 	.word	0x200009b2

0800400c <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	6039      	str	r1, [r7, #0]
 8004016:	71fb      	strb	r3, [r7, #7]
 8004018:	4613      	mov	r3, r2
 800401a:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 800401c:	2300      	movs	r3, #0
 800401e:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8004020:	2300      	movs	r3, #0
 8004022:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8004024:	79fb      	ldrb	r3, [r7, #7]
 8004026:	2b08      	cmp	r3, #8
 8004028:	d902      	bls.n	8004030 <send+0x24>
 800402a:	f04f 33ff 	mov.w	r3, #4294967295
 800402e:	e0de      	b.n	80041ee <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004030:	79fb      	ldrb	r3, [r7, #7]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	3301      	adds	r3, #1
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	4618      	mov	r0, r3
 800403a:	f000 f997 	bl	800436c <WIZCHIP_READ>
 800403e:	4603      	mov	r3, r0
 8004040:	f003 030f 	and.w	r3, r3, #15
 8004044:	2b01      	cmp	r3, #1
 8004046:	d002      	beq.n	800404e <send+0x42>
 8004048:	f06f 0304 	mvn.w	r3, #4
 800404c:	e0cf      	b.n	80041ee <send+0x1e2>
   CHECK_SOCKDATA();
 800404e:	88bb      	ldrh	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d102      	bne.n	800405a <send+0x4e>
 8004054:	f06f 030d 	mvn.w	r3, #13
 8004058:	e0c9      	b.n	80041ee <send+0x1e2>
   tmp = getSn_SR(sn);
 800405a:	79fb      	ldrb	r3, [r7, #7]
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	3301      	adds	r3, #1
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004066:	4618      	mov	r0, r3
 8004068:	f000 f980 	bl	800436c <WIZCHIP_READ>
 800406c:	4603      	mov	r3, r0
 800406e:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8004070:	7bfb      	ldrb	r3, [r7, #15]
 8004072:	2b17      	cmp	r3, #23
 8004074:	d005      	beq.n	8004082 <send+0x76>
 8004076:	7bfb      	ldrb	r3, [r7, #15]
 8004078:	2b1c      	cmp	r3, #28
 800407a:	d002      	beq.n	8004082 <send+0x76>
 800407c:	f06f 0306 	mvn.w	r3, #6
 8004080:	e0b5      	b.n	80041ee <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8004082:	4b5d      	ldr	r3, [pc, #372]	; (80041f8 <send+0x1ec>)
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	fa42 f303 	asr.w	r3, r2, r3
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d039      	beq.n	800410a <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	3301      	adds	r3, #1
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 f962 	bl	800436c <WIZCHIP_READ>
 80040a8:	4603      	mov	r3, r0
 80040aa:	f003 031f 	and.w	r3, r3, #31
 80040ae:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	f003 0310 	and.w	r3, r3, #16
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d019      	beq.n	80040ee <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80040ba:	79fb      	ldrb	r3, [r7, #7]
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	3301      	adds	r3, #1
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80040c6:	2110      	movs	r1, #16
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 f99b 	bl	8004404 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	2201      	movs	r2, #1
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	b21b      	sxth	r3, r3
 80040d8:	43db      	mvns	r3, r3
 80040da:	b21a      	sxth	r2, r3
 80040dc:	4b46      	ldr	r3, [pc, #280]	; (80041f8 <send+0x1ec>)
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	b21b      	sxth	r3, r3
 80040e2:	4013      	ands	r3, r2
 80040e4:	b21b      	sxth	r3, r3
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	4b43      	ldr	r3, [pc, #268]	; (80041f8 <send+0x1ec>)
 80040ea:	801a      	strh	r2, [r3, #0]
 80040ec:	e00d      	b.n	800410a <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d006      	beq.n	8004106 <send+0xfa>
      {
         close(sn);
 80040f8:	79fb      	ldrb	r3, [r7, #7]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff fe48 	bl	8003d90 <close>
         return SOCKERR_TIMEOUT;
 8004100:	f06f 030c 	mvn.w	r3, #12
 8004104:	e073      	b.n	80041ee <send+0x1e2>
      }
      else return SOCK_BUSY;
 8004106:	2300      	movs	r3, #0
 8004108:	e071      	b.n	80041ee <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 800410a:	79fb      	ldrb	r3, [r7, #7]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	3301      	adds	r3, #1
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004116:	4618      	mov	r0, r3
 8004118:	f000 f928 	bl	800436c <WIZCHIP_READ>
 800411c:	4603      	mov	r3, r0
 800411e:	b29b      	uxth	r3, r3
 8004120:	029b      	lsls	r3, r3, #10
 8004122:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8004124:	88ba      	ldrh	r2, [r7, #4]
 8004126:	89bb      	ldrh	r3, [r7, #12]
 8004128:	429a      	cmp	r2, r3
 800412a:	d901      	bls.n	8004130 <send+0x124>
 800412c:	89bb      	ldrh	r3, [r7, #12]
 800412e:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8004130:	79fb      	ldrb	r3, [r7, #7]
 8004132:	4618      	mov	r0, r3
 8004134:	f000 fa74 	bl	8004620 <getSn_TX_FSR>
 8004138:	4603      	mov	r3, r0
 800413a:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800413c:	79fb      	ldrb	r3, [r7, #7]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	3301      	adds	r3, #1
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004148:	4618      	mov	r0, r3
 800414a:	f000 f90f 	bl	800436c <WIZCHIP_READ>
 800414e:	4603      	mov	r3, r0
 8004150:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8004152:	7bfb      	ldrb	r3, [r7, #15]
 8004154:	2b17      	cmp	r3, #23
 8004156:	d009      	beq.n	800416c <send+0x160>
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	2b1c      	cmp	r3, #28
 800415c:	d006      	beq.n	800416c <send+0x160>
      {
         close(sn);
 800415e:	79fb      	ldrb	r3, [r7, #7]
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff fe15 	bl	8003d90 <close>
         return SOCKERR_SOCKSTATUS;
 8004166:	f06f 0306 	mvn.w	r3, #6
 800416a:	e040      	b.n	80041ee <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800416c:	4b23      	ldr	r3, [pc, #140]	; (80041fc <send+0x1f0>)
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	461a      	mov	r2, r3
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	fa42 f303 	asr.w	r3, r2, r3
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d005      	beq.n	800418c <send+0x180>
 8004180:	88ba      	ldrh	r2, [r7, #4]
 8004182:	89bb      	ldrh	r3, [r7, #12]
 8004184:	429a      	cmp	r2, r3
 8004186:	d901      	bls.n	800418c <send+0x180>
 8004188:	2300      	movs	r3, #0
 800418a:	e030      	b.n	80041ee <send+0x1e2>
      if(len <= freesize) break;
 800418c:	88ba      	ldrh	r2, [r7, #4]
 800418e:	89bb      	ldrh	r3, [r7, #12]
 8004190:	429a      	cmp	r2, r3
 8004192:	d900      	bls.n	8004196 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8004194:	e7cc      	b.n	8004130 <send+0x124>
      if(len <= freesize) break;
 8004196:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8004198:	88ba      	ldrh	r2, [r7, #4]
 800419a:	79fb      	ldrb	r3, [r7, #7]
 800419c:	6839      	ldr	r1, [r7, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fad4 	bl	800474c <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80041a4:	79fb      	ldrb	r3, [r7, #7]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	3301      	adds	r3, #1
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80041b0:	2120      	movs	r1, #32
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 f926 	bl	8004404 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80041b8:	bf00      	nop
 80041ba:	79fb      	ldrb	r3, [r7, #7]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	3301      	adds	r3, #1
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 f8d0 	bl	800436c <WIZCHIP_READ>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f3      	bne.n	80041ba <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	2201      	movs	r2, #1
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	b21a      	sxth	r2, r3
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <send+0x1ec>)
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	b21b      	sxth	r3, r3
 80041e2:	4313      	orrs	r3, r2
 80041e4:	b21b      	sxth	r3, r3
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	4b03      	ldr	r3, [pc, #12]	; (80041f8 <send+0x1ec>)
 80041ea:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80041ec:	88bb      	ldrh	r3, [r7, #4]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	200009b4 	.word	0x200009b4
 80041fc:	200009b2 	.word	0x200009b2

08004200 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004200:	b590      	push	{r4, r7, lr}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	4603      	mov	r3, r0
 8004208:	6039      	str	r1, [r7, #0]
 800420a:	71fb      	strb	r3, [r7, #7]
 800420c:	4613      	mov	r3, r2
 800420e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8004210:	2300      	movs	r3, #0
 8004212:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8004214:	2300      	movs	r3, #0
 8004216:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	2b08      	cmp	r3, #8
 800421c:	d902      	bls.n	8004224 <recv+0x24>
 800421e:	f04f 33ff 	mov.w	r3, #4294967295
 8004222:	e09c      	b.n	800435e <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	3301      	adds	r3, #1
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	4618      	mov	r0, r3
 800422e:	f000 f89d 	bl	800436c <WIZCHIP_READ>
 8004232:	4603      	mov	r3, r0
 8004234:	f003 030f 	and.w	r3, r3, #15
 8004238:	2b01      	cmp	r3, #1
 800423a:	d002      	beq.n	8004242 <recv+0x42>
 800423c:	f06f 0304 	mvn.w	r3, #4
 8004240:	e08d      	b.n	800435e <recv+0x15e>
   CHECK_SOCKDATA();
 8004242:	88bb      	ldrh	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d102      	bne.n	800424e <recv+0x4e>
 8004248:	f06f 030d 	mvn.w	r3, #13
 800424c:	e087      	b.n	800435e <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 800424e:	79fb      	ldrb	r3, [r7, #7]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	3301      	adds	r3, #1
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800425a:	4618      	mov	r0, r3
 800425c:	f000 f886 	bl	800436c <WIZCHIP_READ>
 8004260:	4603      	mov	r3, r0
 8004262:	b29b      	uxth	r3, r3
 8004264:	029b      	lsls	r3, r3, #10
 8004266:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8004268:	89ba      	ldrh	r2, [r7, #12]
 800426a:	88bb      	ldrh	r3, [r7, #4]
 800426c:	429a      	cmp	r2, r3
 800426e:	d201      	bcs.n	8004274 <recv+0x74>
 8004270:	89bb      	ldrh	r3, [r7, #12]
 8004272:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8004274:	79fb      	ldrb	r3, [r7, #7]
 8004276:	4618      	mov	r0, r3
 8004278:	f000 fa1d 	bl	80046b6 <getSn_RX_RSR>
 800427c:	4603      	mov	r3, r0
 800427e:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	3301      	adds	r3, #1
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800428c:	4618      	mov	r0, r3
 800428e:	f000 f86d 	bl	800436c <WIZCHIP_READ>
 8004292:	4603      	mov	r3, r0
 8004294:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8004296:	7bfb      	ldrb	r3, [r7, #15]
 8004298:	2b17      	cmp	r3, #23
 800429a:	d026      	beq.n	80042ea <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	2b1c      	cmp	r3, #28
 80042a0:	d11c      	bne.n	80042dc <recv+0xdc>
            {
               if(recvsize != 0) break;
 80042a2:	89bb      	ldrh	r3, [r7, #12]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d133      	bne.n	8004310 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80042a8:	79fb      	ldrb	r3, [r7, #7]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 f9b8 	bl	8004620 <getSn_TX_FSR>
 80042b0:	4603      	mov	r3, r0
 80042b2:	461c      	mov	r4, r3
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	3301      	adds	r3, #1
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 f853 	bl	800436c <WIZCHIP_READ>
 80042c6:	4603      	mov	r3, r0
 80042c8:	029b      	lsls	r3, r3, #10
 80042ca:	429c      	cmp	r4, r3
 80042cc:	d10d      	bne.n	80042ea <recv+0xea>
               {
                  close(sn);
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff fd5d 	bl	8003d90 <close>
                  return SOCKERR_SOCKSTATUS;
 80042d6:	f06f 0306 	mvn.w	r3, #6
 80042da:	e040      	b.n	800435e <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 80042dc:	79fb      	ldrb	r3, [r7, #7]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff fd56 	bl	8003d90 <close>
               return SOCKERR_SOCKSTATUS;
 80042e4:	f06f 0306 	mvn.w	r3, #6
 80042e8:	e039      	b.n	800435e <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80042ea:	4b1f      	ldr	r3, [pc, #124]	; (8004368 <recv+0x168>)
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	461a      	mov	r2, r3
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	fa42 f303 	asr.w	r3, r2, r3
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d004      	beq.n	8004308 <recv+0x108>
 80042fe:	89bb      	ldrh	r3, [r7, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <recv+0x108>
 8004304:	2300      	movs	r3, #0
 8004306:	e02a      	b.n	800435e <recv+0x15e>
         if(recvsize != 0) break;
 8004308:	89bb      	ldrh	r3, [r7, #12]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d102      	bne.n	8004314 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 800430e:	e7b1      	b.n	8004274 <recv+0x74>
               if(recvsize != 0) break;
 8004310:	bf00      	nop
 8004312:	e000      	b.n	8004316 <recv+0x116>
         if(recvsize != 0) break;
 8004314:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8004316:	89ba      	ldrh	r2, [r7, #12]
 8004318:	88bb      	ldrh	r3, [r7, #4]
 800431a:	429a      	cmp	r2, r3
 800431c:	d201      	bcs.n	8004322 <recv+0x122>
 800431e:	89bb      	ldrh	r3, [r7, #12]
 8004320:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8004322:	88ba      	ldrh	r2, [r7, #4]
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	6839      	ldr	r1, [r7, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f000 fa6b 	bl	8004804 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800432e:	79fb      	ldrb	r3, [r7, #7]
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	3301      	adds	r3, #1
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800433a:	2140      	movs	r1, #64	; 0x40
 800433c:	4618      	mov	r0, r3
 800433e:	f000 f861 	bl	8004404 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004342:	bf00      	nop
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	3301      	adds	r3, #1
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004350:	4618      	mov	r0, r3
 8004352:	f000 f80b 	bl	800436c <WIZCHIP_READ>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1f3      	bne.n	8004344 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800435c:	88bb      	ldrh	r3, [r7, #4]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	bd90      	pop	{r4, r7, pc}
 8004366:	bf00      	nop
 8004368:	200009b2 	.word	0x200009b2

0800436c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8004374:	4b22      	ldr	r3, [pc, #136]	; (8004400 <WIZCHIP_READ+0x94>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	4798      	blx	r3
   WIZCHIP.CS._select();
 800437a:	4b21      	ldr	r3, [pc, #132]	; (8004400 <WIZCHIP_READ+0x94>)
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004380:	4b1f      	ldr	r3, [pc, #124]	; (8004400 <WIZCHIP_READ+0x94>)
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <WIZCHIP_READ+0x24>
 8004388:	4b1d      	ldr	r3, [pc, #116]	; (8004400 <WIZCHIP_READ+0x94>)
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	2b00      	cmp	r3, #0
 800438e:	d114      	bne.n	80043ba <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004390:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <WIZCHIP_READ+0x94>)
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	0c12      	lsrs	r2, r2, #16
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	4610      	mov	r0, r2
 800439c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800439e:	4b18      	ldr	r3, [pc, #96]	; (8004400 <WIZCHIP_READ+0x94>)
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	0a12      	lsrs	r2, r2, #8
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	4610      	mov	r0, r2
 80043aa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80043ac:	4b14      	ldr	r3, [pc, #80]	; (8004400 <WIZCHIP_READ+0x94>)
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	4610      	mov	r0, r2
 80043b6:	4798      	blx	r3
 80043b8:	e011      	b.n	80043de <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	0c1b      	lsrs	r3, r3, #16
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	0a1b      	lsrs	r3, r3, #8
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <WIZCHIP_READ+0x94>)
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	f107 020c 	add.w	r2, r7, #12
 80043d8:	2103      	movs	r1, #3
 80043da:	4610      	mov	r0, r2
 80043dc:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80043de:	4b08      	ldr	r3, [pc, #32]	; (8004400 <WIZCHIP_READ+0x94>)
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	4798      	blx	r3
 80043e4:	4603      	mov	r3, r0
 80043e6:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80043e8:	4b05      	ldr	r3, [pc, #20]	; (8004400 <WIZCHIP_READ+0x94>)
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80043ee:	4b04      	ldr	r3, [pc, #16]	; (8004400 <WIZCHIP_READ+0x94>)
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	4798      	blx	r3
   return ret;
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	20000044 	.word	0x20000044

08004404 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8004410:	4b22      	ldr	r3, [pc, #136]	; (800449c <WIZCHIP_WRITE+0x98>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004416:	4b21      	ldr	r3, [pc, #132]	; (800449c <WIZCHIP_WRITE+0x98>)
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f043 0304 	orr.w	r3, r3, #4
 8004422:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004424:	4b1d      	ldr	r3, [pc, #116]	; (800449c <WIZCHIP_WRITE+0x98>)
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	2b00      	cmp	r3, #0
 800442a:	d119      	bne.n	8004460 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800442c:	4b1b      	ldr	r3, [pc, #108]	; (800449c <WIZCHIP_WRITE+0x98>)
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	0c12      	lsrs	r2, r2, #16
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	4610      	mov	r0, r2
 8004438:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800443a:	4b18      	ldr	r3, [pc, #96]	; (800449c <WIZCHIP_WRITE+0x98>)
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	0a12      	lsrs	r2, r2, #8
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	4610      	mov	r0, r2
 8004446:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004448:	4b14      	ldr	r3, [pc, #80]	; (800449c <WIZCHIP_WRITE+0x98>)
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	4610      	mov	r0, r2
 8004452:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8004454:	4b11      	ldr	r3, [pc, #68]	; (800449c <WIZCHIP_WRITE+0x98>)
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	78fa      	ldrb	r2, [r7, #3]
 800445a:	4610      	mov	r0, r2
 800445c:	4798      	blx	r3
 800445e:	e013      	b.n	8004488 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	0c1b      	lsrs	r3, r3, #16
 8004464:	b2db      	uxtb	r3, r3
 8004466:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	0a1b      	lsrs	r3, r3, #8
 800446c:	b2db      	uxtb	r3, r3
 800446e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8004476:	78fb      	ldrb	r3, [r7, #3]
 8004478:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800447a:	4b08      	ldr	r3, [pc, #32]	; (800449c <WIZCHIP_WRITE+0x98>)
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	f107 020c 	add.w	r2, r7, #12
 8004482:	2104      	movs	r1, #4
 8004484:	4610      	mov	r0, r2
 8004486:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004488:	4b04      	ldr	r3, [pc, #16]	; (800449c <WIZCHIP_WRITE+0x98>)
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800448e:	4b03      	ldr	r3, [pc, #12]	; (800449c <WIZCHIP_WRITE+0x98>)
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	4798      	blx	r3
}
 8004494:	bf00      	nop
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	20000044 	.word	0x20000044

080044a0 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80044a0:	b590      	push	{r4, r7, lr}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	4613      	mov	r3, r2
 80044ac:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80044ae:	4b2b      	ldr	r3, [pc, #172]	; (800455c <WIZCHIP_READ_BUF+0xbc>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80044b4:	4b29      	ldr	r3, [pc, #164]	; (800455c <WIZCHIP_READ_BUF+0xbc>)
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80044ba:	4b28      	ldr	r3, [pc, #160]	; (800455c <WIZCHIP_READ_BUF+0xbc>)
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <WIZCHIP_READ_BUF+0x2a>
 80044c2:	4b26      	ldr	r3, [pc, #152]	; (800455c <WIZCHIP_READ_BUF+0xbc>)
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d126      	bne.n	8004518 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80044ca:	4b24      	ldr	r3, [pc, #144]	; (800455c <WIZCHIP_READ_BUF+0xbc>)
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	0c12      	lsrs	r2, r2, #16
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	4610      	mov	r0, r2
 80044d6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80044d8:	4b20      	ldr	r3, [pc, #128]	; (800455c <WIZCHIP_READ_BUF+0xbc>)
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	0a12      	lsrs	r2, r2, #8
 80044e0:	b2d2      	uxtb	r2, r2
 80044e2:	4610      	mov	r0, r2
 80044e4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80044e6:	4b1d      	ldr	r3, [pc, #116]	; (800455c <WIZCHIP_READ_BUF+0xbc>)
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	4610      	mov	r0, r2
 80044f0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80044f2:	2300      	movs	r3, #0
 80044f4:	82fb      	strh	r3, [r7, #22]
 80044f6:	e00a      	b.n	800450e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80044f8:	4b18      	ldr	r3, [pc, #96]	; (800455c <WIZCHIP_READ_BUF+0xbc>)
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	8afa      	ldrh	r2, [r7, #22]
 80044fe:	68b9      	ldr	r1, [r7, #8]
 8004500:	188c      	adds	r4, r1, r2
 8004502:	4798      	blx	r3
 8004504:	4603      	mov	r3, r0
 8004506:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8004508:	8afb      	ldrh	r3, [r7, #22]
 800450a:	3301      	adds	r3, #1
 800450c:	82fb      	strh	r3, [r7, #22]
 800450e:	8afa      	ldrh	r2, [r7, #22]
 8004510:	88fb      	ldrh	r3, [r7, #6]
 8004512:	429a      	cmp	r2, r3
 8004514:	d3f0      	bcc.n	80044f8 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004516:	e017      	b.n	8004548 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	0c1b      	lsrs	r3, r3, #16
 800451c:	b2db      	uxtb	r3, r3
 800451e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	0a1b      	lsrs	r3, r3, #8
 8004524:	b2db      	uxtb	r3, r3
 8004526:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800452e:	4b0b      	ldr	r3, [pc, #44]	; (800455c <WIZCHIP_READ_BUF+0xbc>)
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	f107 0210 	add.w	r2, r7, #16
 8004536:	2103      	movs	r1, #3
 8004538:	4610      	mov	r0, r2
 800453a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800453c:	4b07      	ldr	r3, [pc, #28]	; (800455c <WIZCHIP_READ_BUF+0xbc>)
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	88fa      	ldrh	r2, [r7, #6]
 8004542:	4611      	mov	r1, r2
 8004544:	68b8      	ldr	r0, [r7, #8]
 8004546:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004548:	4b04      	ldr	r3, [pc, #16]	; (800455c <WIZCHIP_READ_BUF+0xbc>)
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800454e:	4b03      	ldr	r3, [pc, #12]	; (800455c <WIZCHIP_READ_BUF+0xbc>)
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	4798      	blx	r3
}
 8004554:	bf00      	nop
 8004556:	371c      	adds	r7, #28
 8004558:	46bd      	mov	sp, r7
 800455a:	bd90      	pop	{r4, r7, pc}
 800455c:	20000044 	.word	0x20000044

08004560 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	4613      	mov	r3, r2
 800456c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800456e:	4b2b      	ldr	r3, [pc, #172]	; (800461c <WIZCHIP_WRITE_BUF+0xbc>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004574:	4b29      	ldr	r3, [pc, #164]	; (800461c <WIZCHIP_WRITE_BUF+0xbc>)
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f043 0304 	orr.w	r3, r3, #4
 8004580:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004582:	4b26      	ldr	r3, [pc, #152]	; (800461c <WIZCHIP_WRITE_BUF+0xbc>)
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	2b00      	cmp	r3, #0
 8004588:	d126      	bne.n	80045d8 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800458a:	4b24      	ldr	r3, [pc, #144]	; (800461c <WIZCHIP_WRITE_BUF+0xbc>)
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	0c12      	lsrs	r2, r2, #16
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	4610      	mov	r0, r2
 8004596:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004598:	4b20      	ldr	r3, [pc, #128]	; (800461c <WIZCHIP_WRITE_BUF+0xbc>)
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	0a12      	lsrs	r2, r2, #8
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	4610      	mov	r0, r2
 80045a4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80045a6:	4b1d      	ldr	r3, [pc, #116]	; (800461c <WIZCHIP_WRITE_BUF+0xbc>)
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	4610      	mov	r0, r2
 80045b0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80045b2:	2300      	movs	r3, #0
 80045b4:	82fb      	strh	r3, [r7, #22]
 80045b6:	e00a      	b.n	80045ce <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80045b8:	4b18      	ldr	r3, [pc, #96]	; (800461c <WIZCHIP_WRITE_BUF+0xbc>)
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	8afa      	ldrh	r2, [r7, #22]
 80045be:	68b9      	ldr	r1, [r7, #8]
 80045c0:	440a      	add	r2, r1
 80045c2:	7812      	ldrb	r2, [r2, #0]
 80045c4:	4610      	mov	r0, r2
 80045c6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80045c8:	8afb      	ldrh	r3, [r7, #22]
 80045ca:	3301      	adds	r3, #1
 80045cc:	82fb      	strh	r3, [r7, #22]
 80045ce:	8afa      	ldrh	r2, [r7, #22]
 80045d0:	88fb      	ldrh	r3, [r7, #6]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d3f0      	bcc.n	80045b8 <WIZCHIP_WRITE_BUF+0x58>
 80045d6:	e017      	b.n	8004608 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	0c1b      	lsrs	r3, r3, #16
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	0a1b      	lsrs	r3, r3, #8
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80045ee:	4b0b      	ldr	r3, [pc, #44]	; (800461c <WIZCHIP_WRITE_BUF+0xbc>)
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	f107 0210 	add.w	r2, r7, #16
 80045f6:	2103      	movs	r1, #3
 80045f8:	4610      	mov	r0, r2
 80045fa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80045fc:	4b07      	ldr	r3, [pc, #28]	; (800461c <WIZCHIP_WRITE_BUF+0xbc>)
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	88fa      	ldrh	r2, [r7, #6]
 8004602:	4611      	mov	r1, r2
 8004604:	68b8      	ldr	r0, [r7, #8]
 8004606:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004608:	4b04      	ldr	r3, [pc, #16]	; (800461c <WIZCHIP_WRITE_BUF+0xbc>)
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800460e:	4b03      	ldr	r3, [pc, #12]	; (800461c <WIZCHIP_WRITE_BUF+0xbc>)
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	4798      	blx	r3
}
 8004614:	bf00      	nop
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	20000044 	.word	0x20000044

08004620 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8004620:	b590      	push	{r4, r7, lr}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800462a:	2300      	movs	r3, #0
 800462c:	81fb      	strh	r3, [r7, #14]
 800462e:	2300      	movs	r3, #0
 8004630:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8004632:	79fb      	ldrb	r3, [r7, #7]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	3301      	adds	r3, #1
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff fe94 	bl	800436c <WIZCHIP_READ>
 8004644:	4603      	mov	r3, r0
 8004646:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004648:	89bb      	ldrh	r3, [r7, #12]
 800464a:	021b      	lsls	r3, r3, #8
 800464c:	b29c      	uxth	r4, r3
 800464e:	79fb      	ldrb	r3, [r7, #7]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	3301      	adds	r3, #1
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff fe86 	bl	800436c <WIZCHIP_READ>
 8004660:	4603      	mov	r3, r0
 8004662:	b29b      	uxth	r3, r3
 8004664:	4423      	add	r3, r4
 8004666:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8004668:	89bb      	ldrh	r3, [r7, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d01a      	beq.n	80046a4 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800466e:	79fb      	ldrb	r3, [r7, #7]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	3301      	adds	r3, #1
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800467a:	4618      	mov	r0, r3
 800467c:	f7ff fe76 	bl	800436c <WIZCHIP_READ>
 8004680:	4603      	mov	r3, r0
 8004682:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004684:	89fb      	ldrh	r3, [r7, #14]
 8004686:	021b      	lsls	r3, r3, #8
 8004688:	b29c      	uxth	r4, r3
 800468a:	79fb      	ldrb	r3, [r7, #7]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	3301      	adds	r3, #1
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff fe68 	bl	800436c <WIZCHIP_READ>
 800469c:	4603      	mov	r3, r0
 800469e:	b29b      	uxth	r3, r3
 80046a0:	4423      	add	r3, r4
 80046a2:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80046a4:	89fa      	ldrh	r2, [r7, #14]
 80046a6:	89bb      	ldrh	r3, [r7, #12]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d1c2      	bne.n	8004632 <getSn_TX_FSR+0x12>
   return val;
 80046ac:	89fb      	ldrh	r3, [r7, #14]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd90      	pop	{r4, r7, pc}

080046b6 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80046b6:	b590      	push	{r4, r7, lr}
 80046b8:	b085      	sub	sp, #20
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	4603      	mov	r3, r0
 80046be:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	81fb      	strh	r3, [r7, #14]
 80046c4:	2300      	movs	r3, #0
 80046c6:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80046c8:	79fb      	ldrb	r3, [r7, #7]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	3301      	adds	r3, #1
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff fe49 	bl	800436c <WIZCHIP_READ>
 80046da:	4603      	mov	r3, r0
 80046dc:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80046de:	89bb      	ldrh	r3, [r7, #12]
 80046e0:	021b      	lsls	r3, r3, #8
 80046e2:	b29c      	uxth	r4, r3
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	3301      	adds	r3, #1
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff fe3b 	bl	800436c <WIZCHIP_READ>
 80046f6:	4603      	mov	r3, r0
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	4423      	add	r3, r4
 80046fc:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80046fe:	89bb      	ldrh	r3, [r7, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d01a      	beq.n	800473a <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8004704:	79fb      	ldrb	r3, [r7, #7]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	3301      	adds	r3, #1
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff fe2b 	bl	800436c <WIZCHIP_READ>
 8004716:	4603      	mov	r3, r0
 8004718:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800471a:	89fb      	ldrh	r3, [r7, #14]
 800471c:	021b      	lsls	r3, r3, #8
 800471e:	b29c      	uxth	r4, r3
 8004720:	79fb      	ldrb	r3, [r7, #7]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	3301      	adds	r3, #1
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff fe1d 	bl	800436c <WIZCHIP_READ>
 8004732:	4603      	mov	r3, r0
 8004734:	b29b      	uxth	r3, r3
 8004736:	4423      	add	r3, r4
 8004738:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800473a:	89fa      	ldrh	r2, [r7, #14]
 800473c:	89bb      	ldrh	r3, [r7, #12]
 800473e:	429a      	cmp	r2, r3
 8004740:	d1c2      	bne.n	80046c8 <getSn_RX_RSR+0x12>
   return val;
 8004742:	89fb      	ldrh	r3, [r7, #14]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	bd90      	pop	{r4, r7, pc}

0800474c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800474c:	b590      	push	{r4, r7, lr}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	6039      	str	r1, [r7, #0]
 8004756:	71fb      	strb	r3, [r7, #7]
 8004758:	4613      	mov	r3, r2
 800475a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800475c:	2300      	movs	r3, #0
 800475e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8004760:	2300      	movs	r3, #0
 8004762:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8004764:	88bb      	ldrh	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d048      	beq.n	80047fc <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 800476a:	79fb      	ldrb	r3, [r7, #7]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	3301      	adds	r3, #1
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff fdf8 	bl	800436c <WIZCHIP_READ>
 800477c:	4603      	mov	r3, r0
 800477e:	b29b      	uxth	r3, r3
 8004780:	021b      	lsls	r3, r3, #8
 8004782:	b29c      	uxth	r4, r3
 8004784:	79fb      	ldrb	r3, [r7, #7]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	3301      	adds	r3, #1
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8004790:	4618      	mov	r0, r3
 8004792:	f7ff fdeb 	bl	800436c <WIZCHIP_READ>
 8004796:	4603      	mov	r3, r0
 8004798:	b29b      	uxth	r3, r3
 800479a:	4423      	add	r3, r4
 800479c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800479e:	89fb      	ldrh	r3, [r7, #14]
 80047a0:	021b      	lsls	r3, r3, #8
 80047a2:	79fa      	ldrb	r2, [r7, #7]
 80047a4:	0092      	lsls	r2, r2, #2
 80047a6:	3202      	adds	r2, #2
 80047a8:	00d2      	lsls	r2, r2, #3
 80047aa:	4413      	add	r3, r2
 80047ac:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80047ae:	88bb      	ldrh	r3, [r7, #4]
 80047b0:	461a      	mov	r2, r3
 80047b2:	6839      	ldr	r1, [r7, #0]
 80047b4:	68b8      	ldr	r0, [r7, #8]
 80047b6:	f7ff fed3 	bl	8004560 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80047ba:	89fa      	ldrh	r2, [r7, #14]
 80047bc:	88bb      	ldrh	r3, [r7, #4]
 80047be:	4413      	add	r3, r2
 80047c0:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	3301      	adds	r3, #1
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80047ce:	461a      	mov	r2, r3
 80047d0:	89fb      	ldrh	r3, [r7, #14]
 80047d2:	0a1b      	lsrs	r3, r3, #8
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	4619      	mov	r1, r3
 80047da:	4610      	mov	r0, r2
 80047dc:	f7ff fe12 	bl	8004404 <WIZCHIP_WRITE>
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	3301      	adds	r3, #1
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80047ec:	461a      	mov	r2, r3
 80047ee:	89fb      	ldrh	r3, [r7, #14]
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	4619      	mov	r1, r3
 80047f4:	4610      	mov	r0, r2
 80047f6:	f7ff fe05 	bl	8004404 <WIZCHIP_WRITE>
 80047fa:	e000      	b.n	80047fe <wiz_send_data+0xb2>
   if(len == 0)  return;
 80047fc:	bf00      	nop
}
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	bd90      	pop	{r4, r7, pc}

08004804 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004804:	b590      	push	{r4, r7, lr}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	4603      	mov	r3, r0
 800480c:	6039      	str	r1, [r7, #0]
 800480e:	71fb      	strb	r3, [r7, #7]
 8004810:	4613      	mov	r3, r2
 8004812:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004814:	2300      	movs	r3, #0
 8004816:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 800481c:	88bb      	ldrh	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d048      	beq.n	80048b4 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8004822:	79fb      	ldrb	r3, [r7, #7]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	3301      	adds	r3, #1
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff fd9c 	bl	800436c <WIZCHIP_READ>
 8004834:	4603      	mov	r3, r0
 8004836:	b29b      	uxth	r3, r3
 8004838:	021b      	lsls	r3, r3, #8
 800483a:	b29c      	uxth	r4, r3
 800483c:	79fb      	ldrb	r3, [r7, #7]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	3301      	adds	r3, #1
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff fd8f 	bl	800436c <WIZCHIP_READ>
 800484e:	4603      	mov	r3, r0
 8004850:	b29b      	uxth	r3, r3
 8004852:	4423      	add	r3, r4
 8004854:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8004856:	89fb      	ldrh	r3, [r7, #14]
 8004858:	021b      	lsls	r3, r3, #8
 800485a:	79fa      	ldrb	r2, [r7, #7]
 800485c:	0092      	lsls	r2, r2, #2
 800485e:	3203      	adds	r2, #3
 8004860:	00d2      	lsls	r2, r2, #3
 8004862:	4413      	add	r3, r2
 8004864:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8004866:	88bb      	ldrh	r3, [r7, #4]
 8004868:	461a      	mov	r2, r3
 800486a:	6839      	ldr	r1, [r7, #0]
 800486c:	68b8      	ldr	r0, [r7, #8]
 800486e:	f7ff fe17 	bl	80044a0 <WIZCHIP_READ_BUF>
   ptr += len;
 8004872:	89fa      	ldrh	r2, [r7, #14]
 8004874:	88bb      	ldrh	r3, [r7, #4]
 8004876:	4413      	add	r3, r2
 8004878:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	3301      	adds	r3, #1
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8004886:	461a      	mov	r2, r3
 8004888:	89fb      	ldrh	r3, [r7, #14]
 800488a:	0a1b      	lsrs	r3, r3, #8
 800488c:	b29b      	uxth	r3, r3
 800488e:	b2db      	uxtb	r3, r3
 8004890:	4619      	mov	r1, r3
 8004892:	4610      	mov	r0, r2
 8004894:	f7ff fdb6 	bl	8004404 <WIZCHIP_WRITE>
 8004898:	79fb      	ldrb	r3, [r7, #7]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	3301      	adds	r3, #1
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80048a4:	461a      	mov	r2, r3
 80048a6:	89fb      	ldrh	r3, [r7, #14]
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	4619      	mov	r1, r3
 80048ac:	4610      	mov	r0, r2
 80048ae:	f7ff fda9 	bl	8004404 <WIZCHIP_WRITE>
 80048b2:	e000      	b.n	80048b6 <wiz_recv_data+0xb2>
   if(len == 0) return;
 80048b4:	bf00      	nop
}
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd90      	pop	{r4, r7, pc}

080048bc <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_enter(void)           {};
void       wizchip_cris_enter(void)           {}
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
 80048c0:	bf00      	nop
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_exit(void)          {};
void       wizchip_cris_exit(void)          {}
 80048ca:	b480      	push	{r7}
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	bf00      	nop
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_select(void)            {};

void wizchip_cs_select(void) {}
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
 80048dc:	bf00      	nop
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 80048e6:	b480      	push	{r7}
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	bf00      	nop
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	4618      	mov	r0, r3
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
 8004916:	460b      	mov	r3, r1
 8004918:	70fb      	strb	r3, [r7, #3]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	78fa      	ldrb	r2, [r7, #3]
 800491e:	701a      	strb	r2, [r3, #0]
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
 8004930:	2300      	movs	r3, #0
 8004932:	4618      	mov	r0, r3
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	4603      	mov	r3, r0
 8004944:	71fb      	strb	r3, [r7, #7]
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}; 
void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	460b      	mov	r3, r1
 800495c:	807b      	strh	r3, [r7, #2]
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
 8004972:	460b      	mov	r3, r1
 8004974:	807b      	strh	r3, [r7, #2]
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
	...

08004984 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <reg_wizchip_cs_cbfunc+0x16>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800499a:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <reg_wizchip_cs_cbfunc+0x40>)
 800499c:	4a0a      	ldr	r2, [pc, #40]	; (80049c8 <reg_wizchip_cs_cbfunc+0x44>)
 800499e:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80049a0:	4b08      	ldr	r3, [pc, #32]	; (80049c4 <reg_wizchip_cs_cbfunc+0x40>)
 80049a2:	4a0a      	ldr	r2, [pc, #40]	; (80049cc <reg_wizchip_cs_cbfunc+0x48>)
 80049a4:	615a      	str	r2, [r3, #20]
 80049a6:	e006      	b.n	80049b6 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80049a8:	4a06      	ldr	r2, [pc, #24]	; (80049c4 <reg_wizchip_cs_cbfunc+0x40>)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 80049ae:	4a05      	ldr	r2, [pc, #20]	; (80049c4 <reg_wizchip_cs_cbfunc+0x40>)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	6153      	str	r3, [r2, #20]
   }
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	20000044 	.word	0x20000044
 80049c8:	080048d9 	.word	0x080048d9
 80049cc:	080048e7 	.word	0x080048e7

080049d0 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80049da:	bf00      	nop
 80049dc:	4b0f      	ldr	r3, [pc, #60]	; (8004a1c <reg_wizchip_spi_cbfunc+0x4c>)
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0f9      	beq.n	80049dc <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d002      	beq.n	80049f4 <reg_wizchip_spi_cbfunc+0x24>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d106      	bne.n	8004a02 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80049f4:	4b09      	ldr	r3, [pc, #36]	; (8004a1c <reg_wizchip_spi_cbfunc+0x4c>)
 80049f6:	4a0a      	ldr	r2, [pc, #40]	; (8004a20 <reg_wizchip_spi_cbfunc+0x50>)
 80049f8:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80049fa:	4b08      	ldr	r3, [pc, #32]	; (8004a1c <reg_wizchip_spi_cbfunc+0x4c>)
 80049fc:	4a09      	ldr	r2, [pc, #36]	; (8004a24 <reg_wizchip_spi_cbfunc+0x54>)
 80049fe:	61da      	str	r2, [r3, #28]
 8004a00:	e006      	b.n	8004a10 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8004a02:	4a06      	ldr	r2, [pc, #24]	; (8004a1c <reg_wizchip_spi_cbfunc+0x4c>)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8004a08:	4a04      	ldr	r2, [pc, #16]	; (8004a1c <reg_wizchip_spi_cbfunc+0x4c>)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	61d3      	str	r3, [r2, #28]
   }
}
 8004a0e:	bf00      	nop
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	20000044 	.word	0x20000044
 8004a20:	0800492d 	.word	0x0800492d
 8004a24:	0800493d 	.word	0x0800493d

08004a28 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8004a32:	bf00      	nop
 8004a34:	4b0f      	ldr	r3, [pc, #60]	; (8004a74 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004a36:	881b      	ldrh	r3, [r3, #0]
 8004a38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0f9      	beq.n	8004a34 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <reg_wizchip_spiburst_cbfunc+0x24>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d106      	bne.n	8004a5a <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8004a4c:	4b09      	ldr	r3, [pc, #36]	; (8004a74 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004a4e:	4a0a      	ldr	r2, [pc, #40]	; (8004a78 <reg_wizchip_spiburst_cbfunc+0x50>)
 8004a50:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8004a52:	4b08      	ldr	r3, [pc, #32]	; (8004a74 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004a54:	4a09      	ldr	r2, [pc, #36]	; (8004a7c <reg_wizchip_spiburst_cbfunc+0x54>)
 8004a56:	625a      	str	r2, [r3, #36]	; 0x24
 8004a58:	e006      	b.n	8004a68 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8004a5a:	4a06      	ldr	r2, [pc, #24]	; (8004a74 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6213      	str	r3, [r2, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8004a60:	4a04      	ldr	r2, [pc, #16]	; (8004a74 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6253      	str	r3, [r2, #36]	; 0x24
   }
}
 8004a66:	bf00      	nop
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	20000044 	.word	0x20000044
 8004a78:	08004953 	.word	0x08004953
 8004a7c:	0800496b 	.word	0x0800496b

08004a80 <ctlnetwork>:
   return 0;
}


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	4603      	mov	r3, r0
 8004a88:	6039      	str	r1, [r7, #0]
 8004a8a:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	2b05      	cmp	r3, #5
 8004a90:	d82c      	bhi.n	8004aec <ctlnetwork+0x6c>
 8004a92:	a201      	add	r2, pc, #4	; (adr r2, 8004a98 <ctlnetwork+0x18>)
 8004a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a98:	08004ab1 	.word	0x08004ab1
 8004a9c:	08004ab9 	.word	0x08004ab9
 8004aa0:	08004ac1 	.word	0x08004ac1
 8004aa4:	08004acf 	.word	0x08004acf
 8004aa8:	08004add 	.word	0x08004add
 8004aac:	08004ae5 	.word	0x08004ae5
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8004ab0:	6838      	ldr	r0, [r7, #0]
 8004ab2:	f000 f8fb 	bl	8004cac <wizchip_setnetinfo>
         break;
 8004ab6:	e01c      	b.n	8004af2 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8004ab8:	6838      	ldr	r0, [r7, #0]
 8004aba:	f000 f937 	bl	8004d2c <wizchip_getnetinfo>
         break;
 8004abe:	e018      	b.n	8004af2 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 f971 	bl	8004dac <wizchip_setnetmode>
 8004aca:	4603      	mov	r3, r0
 8004acc:	e012      	b.n	8004af4 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8004ace:	f000 f98f 	bl	8004df0 <wizchip_getnetmode>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	701a      	strb	r2, [r3, #0]
         break;
 8004ada:	e00a      	b.n	8004af2 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8004adc:	6838      	ldr	r0, [r7, #0]
 8004ade:	f000 f98f 	bl	8004e00 <wizchip_settimeout>
         break;
 8004ae2:	e006      	b.n	8004af2 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8004ae4:	6838      	ldr	r0, [r7, #0]
 8004ae6:	f000 f9ac 	bl	8004e42 <wizchip_gettimeout>
         break;
 8004aea:	e002      	b.n	8004af2 <ctlnetwork+0x72>
      default:
         return -1;
 8004aec:	f04f 33ff 	mov.w	r3, #4294967295
 8004af0:	e000      	b.n	8004af4 <ctlnetwork+0x74>
   }
   return 0;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8004b02:	1d3b      	adds	r3, r7, #4
 8004b04:	2206      	movs	r2, #6
 8004b06:	4619      	mov	r1, r3
 8004b08:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004b0c:	f7ff fcc8 	bl	80044a0 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8004b10:	f107 0314 	add.w	r3, r7, #20
 8004b14:	2204      	movs	r2, #4
 8004b16:	4619      	mov	r1, r3
 8004b18:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004b1c:	f7ff fcc0 	bl	80044a0 <WIZCHIP_READ_BUF>
 8004b20:	f107 0310 	add.w	r3, r7, #16
 8004b24:	2204      	movs	r2, #4
 8004b26:	4619      	mov	r1, r3
 8004b28:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004b2c:	f7ff fcb8 	bl	80044a0 <WIZCHIP_READ_BUF>
 8004b30:	f107 030c 	add.w	r3, r7, #12
 8004b34:	2204      	movs	r2, #4
 8004b36:	4619      	mov	r1, r3
 8004b38:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004b3c:	f7ff fcb0 	bl	80044a0 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8004b40:	2180      	movs	r1, #128	; 0x80
 8004b42:	2000      	movs	r0, #0
 8004b44:	f7ff fc5e 	bl	8004404 <WIZCHIP_WRITE>
   getMR(); // for delay
 8004b48:	2000      	movs	r0, #0
 8004b4a:	f7ff fc0f 	bl	800436c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8004b4e:	1d3b      	adds	r3, r7, #4
 8004b50:	2206      	movs	r2, #6
 8004b52:	4619      	mov	r1, r3
 8004b54:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004b58:	f7ff fd02 	bl	8004560 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8004b5c:	f107 0314 	add.w	r3, r7, #20
 8004b60:	2204      	movs	r2, #4
 8004b62:	4619      	mov	r1, r3
 8004b64:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004b68:	f7ff fcfa 	bl	8004560 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8004b6c:	f107 0310 	add.w	r3, r7, #16
 8004b70:	2204      	movs	r2, #4
 8004b72:	4619      	mov	r1, r3
 8004b74:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004b78:	f7ff fcf2 	bl	8004560 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8004b7c:	f107 030c 	add.w	r3, r7, #12
 8004b80:	2204      	movs	r2, #4
 8004b82:	4619      	mov	r1, r3
 8004b84:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004b88:	f7ff fcea 	bl	8004560 <WIZCHIP_WRITE_BUF>
}
 8004b8c:	bf00      	nop
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8004ba2:	f7ff ffab 	bl	8004afc <wizchip_sw_reset>
   if(txsize)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d03b      	beq.n	8004c24 <wizchip_init+0x90>
   {
      tmp = 0;
 8004bac:	2300      	movs	r3, #0
 8004bae:	73bb      	strb	r3, [r7, #14]
            tmp += txsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	73fb      	strb	r3, [r7, #15]
 8004bb4:	e015      	b.n	8004be2 <wizchip_init+0x4e>
        {
            tmp += txsize[i];
 8004bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	781a      	ldrb	r2, [r3, #0]
 8004bc0:	7bbb      	ldrb	r3, [r7, #14]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	73bb      	strb	r3, [r7, #14]

        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8004bc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004bcc:	2b10      	cmp	r3, #16
 8004bce:	dd02      	ble.n	8004bd6 <wizchip_init+0x42>
 8004bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd4:	e066      	b.n	8004ca4 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	3301      	adds	r3, #1
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	73fb      	strb	r3, [r7, #15]
 8004be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004be6:	2b07      	cmp	r3, #7
 8004be8:	dde5      	ble.n	8004bb6 <wizchip_init+0x22>
        #endif
        }
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004bea:	2300      	movs	r3, #0
 8004bec:	73fb      	strb	r3, [r7, #15]
 8004bee:	e015      	b.n	8004c1c <wizchip_init+0x88>
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100
            j = 0;
            while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_TXBUF_SIZE(i, j);
        #else
            setSn_TXBUF_SIZE(i, txsize[i]);
 8004bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	4413      	add	r3, r2
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	f7ff fbfa 	bl	8004404 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	3301      	adds	r3, #1
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	73fb      	strb	r3, [r7, #15]
 8004c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c20:	2b07      	cmp	r3, #7
 8004c22:	dde5      	ble.n	8004bf0 <wizchip_init+0x5c>
        }

    #endif
   }

   if(rxsize)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d03b      	beq.n	8004ca2 <wizchip_init+0x10e>
   {
      tmp = 0;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	73bb      	strb	r3, [r7, #14]
            tmp += rxsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004c2e:	2300      	movs	r3, #0
 8004c30:	73fb      	strb	r3, [r7, #15]
 8004c32:	e015      	b.n	8004c60 <wizchip_init+0xcc>
        {
            tmp += rxsize[i];
 8004c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	781a      	ldrb	r2, [r3, #0]
 8004c3e:	7bbb      	ldrb	r3, [r7, #14]
 8004c40:	4413      	add	r3, r2
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	73bb      	strb	r3, [r7, #14]
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8004c46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c4a:	2b10      	cmp	r3, #16
 8004c4c:	dd02      	ble.n	8004c54 <wizchip_init+0xc0>
 8004c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c52:	e027      	b.n	8004ca4 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	73fb      	strb	r3, [r7, #15]
 8004c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c64:	2b07      	cmp	r3, #7
 8004c66:	dde5      	ble.n	8004c34 <wizchip_init+0xa0>
        #endif
        }

        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004c68:	2300      	movs	r3, #0
 8004c6a:	73fb      	strb	r3, [r7, #15]
 8004c6c:	e015      	b.n	8004c9a <wizchip_init+0x106>
        #if _WIZCHIP_ < W5200    // add condition for w5100
            j = 0;
            while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_RXBUF_SIZE(i, j);
        #else
            setSn_RXBUF_SIZE(i, rxsize[i]);
 8004c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	3301      	adds	r3, #1
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	4413      	add	r3, r2
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	4619      	mov	r1, r3
 8004c8a:	f7ff fbbb 	bl	8004404 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	3301      	adds	r3, #1
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	73fb      	strb	r3, [r7, #15]
 8004c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c9e:	2b07      	cmp	r3, #7
 8004ca0:	dde5      	ble.n	8004c6e <wizchip_init+0xda>
        #endif
        }
    #endif
   }
   return 0;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2206      	movs	r2, #6
 8004cb8:	4619      	mov	r1, r3
 8004cba:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004cbe:	f7ff fc4f 	bl	8004560 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	330e      	adds	r3, #14
 8004cc6:	2204      	movs	r2, #4
 8004cc8:	4619      	mov	r1, r3
 8004cca:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004cce:	f7ff fc47 	bl	8004560 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	330a      	adds	r3, #10
 8004cd6:	2204      	movs	r2, #4
 8004cd8:	4619      	mov	r1, r3
 8004cda:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004cde:	f7ff fc3f 	bl	8004560 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	3306      	adds	r3, #6
 8004ce6:	2204      	movs	r2, #4
 8004ce8:	4619      	mov	r1, r3
 8004cea:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004cee:	f7ff fc37 	bl	8004560 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	7c9a      	ldrb	r2, [r3, #18]
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <wizchip_setnetinfo+0x78>)
 8004cf8:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	7cda      	ldrb	r2, [r3, #19]
 8004cfe:	4b09      	ldr	r3, [pc, #36]	; (8004d24 <wizchip_setnetinfo+0x78>)
 8004d00:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	7d1a      	ldrb	r2, [r3, #20]
 8004d06:	4b07      	ldr	r3, [pc, #28]	; (8004d24 <wizchip_setnetinfo+0x78>)
 8004d08:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	7d5a      	ldrb	r2, [r3, #21]
 8004d0e:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <wizchip_setnetinfo+0x78>)
 8004d10:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	7d9a      	ldrb	r2, [r3, #22]
 8004d16:	4b04      	ldr	r3, [pc, #16]	; (8004d28 <wizchip_setnetinfo+0x7c>)
 8004d18:	701a      	strb	r2, [r3, #0]
}
 8004d1a:	bf00      	nop
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	200009d0 	.word	0x200009d0
 8004d28:	200009d4 	.word	0x200009d4

08004d2c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2206      	movs	r2, #6
 8004d38:	4619      	mov	r1, r3
 8004d3a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004d3e:	f7ff fbaf 	bl	80044a0 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	330e      	adds	r3, #14
 8004d46:	2204      	movs	r2, #4
 8004d48:	4619      	mov	r1, r3
 8004d4a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004d4e:	f7ff fba7 	bl	80044a0 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	330a      	adds	r3, #10
 8004d56:	2204      	movs	r2, #4
 8004d58:	4619      	mov	r1, r3
 8004d5a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004d5e:	f7ff fb9f 	bl	80044a0 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3306      	adds	r3, #6
 8004d66:	2204      	movs	r2, #4
 8004d68:	4619      	mov	r1, r3
 8004d6a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004d6e:	f7ff fb97 	bl	80044a0 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8004d72:	4b0c      	ldr	r3, [pc, #48]	; (8004da4 <wizchip_getnetinfo+0x78>)
 8004d74:	781a      	ldrb	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8004d7a:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <wizchip_getnetinfo+0x78>)
 8004d7c:	785a      	ldrb	r2, [r3, #1]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8004d82:	4b08      	ldr	r3, [pc, #32]	; (8004da4 <wizchip_getnetinfo+0x78>)
 8004d84:	789a      	ldrb	r2, [r3, #2]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8004d8a:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <wizchip_getnetinfo+0x78>)
 8004d8c:	78da      	ldrb	r2, [r3, #3]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8004d92:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <wizchip_getnetinfo+0x7c>)
 8004d94:	781a      	ldrb	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	759a      	strb	r2, [r3, #22]
}
 8004d9a:	bf00      	nop
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	200009d0 	.word	0x200009d0
 8004da8:	200009d4 	.word	0x200009d4

08004dac <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	4603      	mov	r3, r0
 8004db4:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8004dba:	79fb      	ldrb	r3, [r7, #7]
 8004dbc:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <wizchip_setnetmode+0x1e>
 8004dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc8:	e00e      	b.n	8004de8 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8004dca:	2000      	movs	r0, #0
 8004dcc:	f7ff face 	bl	800436c <WIZCHIP_READ>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8004dd4:	7bfa      	ldrb	r2, [r7, #15]
 8004dd6:	79fb      	ldrb	r3, [r7, #7]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
 8004dde:	4619      	mov	r1, r3
 8004de0:	2000      	movs	r0, #0
 8004de2:	f7ff fb0f 	bl	8004404 <WIZCHIP_WRITE>
   return 0;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8004df4:	2000      	movs	r0, #0
 8004df6:	f7ff fab9 	bl	800436c <WIZCHIP_READ>
 8004dfa:	4603      	mov	r3, r0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8004e12:	f7ff faf7 	bl	8004404 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	885b      	ldrh	r3, [r3, #2]
 8004e1a:	0a1b      	lsrs	r3, r3, #8
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	4619      	mov	r1, r3
 8004e22:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8004e26:	f7ff faed 	bl	8004404 <WIZCHIP_WRITE>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	885b      	ldrh	r3, [r3, #2]
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	4619      	mov	r1, r3
 8004e32:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8004e36:	f7ff fae5 	bl	8004404 <WIZCHIP_WRITE>
}
 8004e3a:	bf00      	nop
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8004e42:	b590      	push	{r4, r7, lr}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8004e4a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8004e4e:	f7ff fa8d 	bl	800436c <WIZCHIP_READ>
 8004e52:	4603      	mov	r3, r0
 8004e54:	461a      	mov	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8004e5a:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8004e5e:	f7ff fa85 	bl	800436c <WIZCHIP_READ>
 8004e62:	4603      	mov	r3, r0
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	021b      	lsls	r3, r3, #8
 8004e68:	b29c      	uxth	r4, r3
 8004e6a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8004e6e:	f7ff fa7d 	bl	800436c <WIZCHIP_READ>
 8004e72:	4603      	mov	r3, r0
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	4423      	add	r3, r4
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	805a      	strh	r2, [r3, #2]
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd90      	pop	{r4, r7, pc}
	...

08004e88 <W5500_Select>:
#include "wiznet_api.h"

static wiz_NetInfo gWIZNETINFO;

void W5500_Select(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIZNET_CS_PORT, WIZNET_CS_PIN, GPIO_PIN_RESET);
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e92:	4802      	ldr	r0, [pc, #8]	; (8004e9c <W5500_Select+0x14>)
 8004e94:	f000 fc70 	bl	8005778 <HAL_GPIO_WritePin>
}
 8004e98:	bf00      	nop
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40020400 	.word	0x40020400

08004ea0 <W5500_Deselect>:

void W5500_Deselect(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIZNET_CS_PORT, WIZNET_CS_PIN, GPIO_PIN_SET);
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004eaa:	4802      	ldr	r0, [pc, #8]	; (8004eb4 <W5500_Deselect+0x14>)
 8004eac:	f000 fc64 	bl	8005778 <HAL_GPIO_WritePin>
}
 8004eb0:	bf00      	nop
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	40020400 	.word	0x40020400

08004eb8 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(WIZNET_SPI_INSTANCE, buff, len, HAL_MAX_DELAY);
 8004ec4:	887a      	ldrh	r2, [r7, #2]
 8004ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	4803      	ldr	r0, [pc, #12]	; (8004edc <W5500_ReadBuff+0x24>)
 8004ece:	f001 ff2b 	bl	8006d28 <HAL_SPI_Receive>
}
 8004ed2:	bf00      	nop
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	200001fc 	.word	0x200001fc

08004ee0 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(WIZNET_SPI_INSTANCE, buff, len, HAL_MAX_DELAY);
 8004eec:	887a      	ldrh	r2, [r7, #2]
 8004eee:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	4803      	ldr	r0, [pc, #12]	; (8004f04 <W5500_WriteBuff+0x24>)
 8004ef6:	f001 fdd4 	bl	8006aa2 <HAL_SPI_Transmit>
}
 8004efa:	bf00      	nop
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	200001fc 	.word	0x200001fc

08004f08 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
	uint8_t byte;
	W5500_ReadBuff(&byte, sizeof(byte));
 8004f0e:	1dfb      	adds	r3, r7, #7
 8004f10:	2101      	movs	r1, #1
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7ff ffd0 	bl	8004eb8 <W5500_ReadBuff>
	return byte;
 8004f18:	79fb      	ldrb	r3, [r7, #7]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b082      	sub	sp, #8
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	4603      	mov	r3, r0
 8004f2a:	71fb      	strb	r3, [r7, #7]
	W5500_WriteBuff(&byte, sizeof(byte));
 8004f2c:	1dfb      	adds	r3, r7, #7
 8004f2e:	2101      	movs	r1, #1
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7ff ffd5 	bl	8004ee0 <W5500_WriteBuff>
}
 8004f36:	bf00      	nop
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <W5500_SetAddress>:

void W5500_SetAddress(wiz_NetInfo info)
{
 8004f40:	b084      	sub	sp, #16
 8004f42:	b4b0      	push	{r4, r5, r7}
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	f107 040c 	add.w	r4, r7, #12
 8004f4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	gWIZNETINFO = info;
 8004f4e:	4b09      	ldr	r3, [pc, #36]	; (8004f74 <W5500_SetAddress+0x34>)
 8004f50:	461c      	mov	r4, r3
 8004f52:	f107 050c 	add.w	r5, r7, #12
 8004f56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f5a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004f5e:	6020      	str	r0, [r4, #0]
 8004f60:	3404      	adds	r4, #4
 8004f62:	8021      	strh	r1, [r4, #0]
 8004f64:	3402      	adds	r4, #2
 8004f66:	0c0b      	lsrs	r3, r1, #16
 8004f68:	7023      	strb	r3, [r4, #0]
}
 8004f6a:	bf00      	nop
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bcb0      	pop	{r4, r5, r7}
 8004f70:	b004      	add	sp, #16
 8004f72:	4770      	bx	lr
 8004f74:	200009d8 	.word	0x200009d8

08004f78 <W5500_Reboot>:
void W5500_Reboot()
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIZNET_RST_PORT, WIZNET_RST_PIN, GPIO_PIN_RESET);
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f84:	4817      	ldr	r0, [pc, #92]	; (8004fe4 <W5500_Reboot+0x6c>)
 8004f86:	f000 fbf7 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8004f8a:	2005      	movs	r0, #5
 8004f8c:	f000 f8d8 	bl	8005140 <HAL_Delay>
	HAL_GPIO_WritePin(WIZNET_RST_PORT, WIZNET_RST_PIN, GPIO_PIN_SET);
 8004f90:	2201      	movs	r2, #1
 8004f92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f96:	4813      	ldr	r0, [pc, #76]	; (8004fe4 <W5500_Reboot+0x6c>)
 8004f98:	f000 fbee 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8004f9c:	2005      	movs	r0, #5
 8004f9e:	f000 f8cf 	bl	8005140 <HAL_Delay>
	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Deselect);
 8004fa2:	4911      	ldr	r1, [pc, #68]	; (8004fe8 <W5500_Reboot+0x70>)
 8004fa4:	4811      	ldr	r0, [pc, #68]	; (8004fec <W5500_Reboot+0x74>)
 8004fa6:	f7ff fced 	bl	8004984 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8004faa:	4911      	ldr	r1, [pc, #68]	; (8004ff0 <W5500_Reboot+0x78>)
 8004fac:	4811      	ldr	r0, [pc, #68]	; (8004ff4 <W5500_Reboot+0x7c>)
 8004fae:	f7ff fd0f 	bl	80049d0 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8004fb2:	4911      	ldr	r1, [pc, #68]	; (8004ff8 <W5500_Reboot+0x80>)
 8004fb4:	4811      	ldr	r0, [pc, #68]	; (8004ffc <W5500_Reboot+0x84>)
 8004fb6:	f7ff fd37 	bl	8004a28 <reg_wizchip_spiburst_cbfunc>
	uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 8004fba:	4a11      	ldr	r2, [pc, #68]	; (8005000 <W5500_Reboot+0x88>)
 8004fbc:	463b      	mov	r3, r7
 8004fbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fc2:	e883 0003 	stmia.w	r3, {r0, r1}
	wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8004fc6:	463a      	mov	r2, r7
 8004fc8:	463b      	mov	r3, r7
 8004fca:	4611      	mov	r1, r2
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff fde1 	bl	8004b94 <wizchip_init>
	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 8004fd2:	490c      	ldr	r1, [pc, #48]	; (8005004 <W5500_Reboot+0x8c>)
 8004fd4:	2000      	movs	r0, #0
 8004fd6:	f7ff fd53 	bl	8004a80 <ctlnetwork>
}
 8004fda:	bf00      	nop
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40020400 	.word	0x40020400
 8004fe8:	08004ea1 	.word	0x08004ea1
 8004fec:	08004e89 	.word	0x08004e89
 8004ff0:	08004f23 	.word	0x08004f23
 8004ff4:	08004f09 	.word	0x08004f09
 8004ff8:	08004ee1 	.word	0x08004ee1
 8004ffc:	08004eb9 	.word	0x08004eb9
 8005000:	08008e50 	.word	0x08008e50
 8005004:	200009d8 	.word	0x200009d8

08005008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005008:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005040 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800500c:	f7fd ff8a 	bl	8002f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005010:	480c      	ldr	r0, [pc, #48]	; (8005044 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005012:	490d      	ldr	r1, [pc, #52]	; (8005048 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005014:	4a0d      	ldr	r2, [pc, #52]	; (800504c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005018:	e002      	b.n	8005020 <LoopCopyDataInit>

0800501a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800501a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800501c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800501e:	3304      	adds	r3, #4

08005020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005024:	d3f9      	bcc.n	800501a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005026:	4a0a      	ldr	r2, [pc, #40]	; (8005050 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005028:	4c0a      	ldr	r4, [pc, #40]	; (8005054 <LoopFillZerobss+0x22>)
  movs r3, #0
 800502a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800502c:	e001      	b.n	8005032 <LoopFillZerobss>

0800502e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800502e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005030:	3204      	adds	r2, #4

08005032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005034:	d3fb      	bcc.n	800502e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005036:	f002 fed1 	bl	8007ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800503a:	f7fd fb15 	bl	8002668 <main>
  bx  lr    
 800503e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005040:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005048:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 800504c:	08009658 	.word	0x08009658
  ldr r2, =_sbss
 8005050:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8005054:	20000b3c 	.word	0x20000b3c

08005058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005058:	e7fe      	b.n	8005058 <ADC_IRQHandler>
	...

0800505c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005060:	4b0e      	ldr	r3, [pc, #56]	; (800509c <HAL_Init+0x40>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a0d      	ldr	r2, [pc, #52]	; (800509c <HAL_Init+0x40>)
 8005066:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800506a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800506c:	4b0b      	ldr	r3, [pc, #44]	; (800509c <HAL_Init+0x40>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a0a      	ldr	r2, [pc, #40]	; (800509c <HAL_Init+0x40>)
 8005072:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005076:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005078:	4b08      	ldr	r3, [pc, #32]	; (800509c <HAL_Init+0x40>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a07      	ldr	r2, [pc, #28]	; (800509c <HAL_Init+0x40>)
 800507e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005082:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005084:	2003      	movs	r0, #3
 8005086:	f000 f973 	bl	8005370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800508a:	200f      	movs	r0, #15
 800508c:	f000 f808 	bl	80050a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005090:	f7fd fd6e 	bl	8002b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	40023c00 	.word	0x40023c00

080050a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80050a8:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <HAL_InitTick+0x54>)
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	4b12      	ldr	r3, [pc, #72]	; (80050f8 <HAL_InitTick+0x58>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	4619      	mov	r1, r3
 80050b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80050ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 f999 	bl	80053f6 <HAL_SYSTICK_Config>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e00e      	b.n	80050ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b0f      	cmp	r3, #15
 80050d2:	d80a      	bhi.n	80050ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80050d4:	2200      	movs	r2, #0
 80050d6:	6879      	ldr	r1, [r7, #4]
 80050d8:	f04f 30ff 	mov.w	r0, #4294967295
 80050dc:	f000 f953 	bl	8005386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80050e0:	4a06      	ldr	r2, [pc, #24]	; (80050fc <HAL_InitTick+0x5c>)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	e000      	b.n	80050ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	2000003c 	.word	0x2000003c
 80050f8:	20000070 	.word	0x20000070
 80050fc:	2000006c 	.word	0x2000006c

08005100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005104:	4b06      	ldr	r3, [pc, #24]	; (8005120 <HAL_IncTick+0x20>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	4b06      	ldr	r3, [pc, #24]	; (8005124 <HAL_IncTick+0x24>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4413      	add	r3, r2
 8005110:	4a04      	ldr	r2, [pc, #16]	; (8005124 <HAL_IncTick+0x24>)
 8005112:	6013      	str	r3, [r2, #0]
}
 8005114:	bf00      	nop
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	20000070 	.word	0x20000070
 8005124:	200009f0 	.word	0x200009f0

08005128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005128:	b480      	push	{r7}
 800512a:	af00      	add	r7, sp, #0
  return uwTick;
 800512c:	4b03      	ldr	r3, [pc, #12]	; (800513c <HAL_GetTick+0x14>)
 800512e:	681b      	ldr	r3, [r3, #0]
}
 8005130:	4618      	mov	r0, r3
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	200009f0 	.word	0x200009f0

08005140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005148:	f7ff ffee 	bl	8005128 <HAL_GetTick>
 800514c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005158:	d005      	beq.n	8005166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800515a:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <HAL_Delay+0x44>)
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	461a      	mov	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4413      	add	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005166:	bf00      	nop
 8005168:	f7ff ffde 	bl	8005128 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	429a      	cmp	r2, r3
 8005176:	d8f7      	bhi.n	8005168 <HAL_Delay+0x28>
  {
  }
}
 8005178:	bf00      	nop
 800517a:	bf00      	nop
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	20000070 	.word	0x20000070

08005188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005198:	4b0c      	ldr	r3, [pc, #48]	; (80051cc <__NVIC_SetPriorityGrouping+0x44>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051a4:	4013      	ands	r3, r2
 80051a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80051b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80051b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051ba:	4a04      	ldr	r2, [pc, #16]	; (80051cc <__NVIC_SetPriorityGrouping+0x44>)
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	60d3      	str	r3, [r2, #12]
}
 80051c0:	bf00      	nop
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	e000ed00 	.word	0xe000ed00

080051d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051d4:	4b04      	ldr	r3, [pc, #16]	; (80051e8 <__NVIC_GetPriorityGrouping+0x18>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	0a1b      	lsrs	r3, r3, #8
 80051da:	f003 0307 	and.w	r3, r3, #7
}
 80051de:	4618      	mov	r0, r3
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	e000ed00 	.word	0xe000ed00

080051ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	4603      	mov	r3, r0
 80051f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	db0b      	blt.n	8005216 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051fe:	79fb      	ldrb	r3, [r7, #7]
 8005200:	f003 021f 	and.w	r2, r3, #31
 8005204:	4907      	ldr	r1, [pc, #28]	; (8005224 <__NVIC_EnableIRQ+0x38>)
 8005206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	2001      	movs	r0, #1
 800520e:	fa00 f202 	lsl.w	r2, r0, r2
 8005212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	e000e100 	.word	0xe000e100

08005228 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	4603      	mov	r3, r0
 8005230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005236:	2b00      	cmp	r3, #0
 8005238:	db12      	blt.n	8005260 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	f003 021f 	and.w	r2, r3, #31
 8005240:	490a      	ldr	r1, [pc, #40]	; (800526c <__NVIC_DisableIRQ+0x44>)
 8005242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005246:	095b      	lsrs	r3, r3, #5
 8005248:	2001      	movs	r0, #1
 800524a:	fa00 f202 	lsl.w	r2, r0, r2
 800524e:	3320      	adds	r3, #32
 8005250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005254:	f3bf 8f4f 	dsb	sy
}
 8005258:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800525a:	f3bf 8f6f 	isb	sy
}
 800525e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	e000e100 	.word	0xe000e100

08005270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	4603      	mov	r3, r0
 8005278:	6039      	str	r1, [r7, #0]
 800527a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800527c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005280:	2b00      	cmp	r3, #0
 8005282:	db0a      	blt.n	800529a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	b2da      	uxtb	r2, r3
 8005288:	490c      	ldr	r1, [pc, #48]	; (80052bc <__NVIC_SetPriority+0x4c>)
 800528a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800528e:	0112      	lsls	r2, r2, #4
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	440b      	add	r3, r1
 8005294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005298:	e00a      	b.n	80052b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	b2da      	uxtb	r2, r3
 800529e:	4908      	ldr	r1, [pc, #32]	; (80052c0 <__NVIC_SetPriority+0x50>)
 80052a0:	79fb      	ldrb	r3, [r7, #7]
 80052a2:	f003 030f 	and.w	r3, r3, #15
 80052a6:	3b04      	subs	r3, #4
 80052a8:	0112      	lsls	r2, r2, #4
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	440b      	add	r3, r1
 80052ae:	761a      	strb	r2, [r3, #24]
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	e000e100 	.word	0xe000e100
 80052c0:	e000ed00 	.word	0xe000ed00

080052c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b089      	sub	sp, #36	; 0x24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f1c3 0307 	rsb	r3, r3, #7
 80052de:	2b04      	cmp	r3, #4
 80052e0:	bf28      	it	cs
 80052e2:	2304      	movcs	r3, #4
 80052e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	3304      	adds	r3, #4
 80052ea:	2b06      	cmp	r3, #6
 80052ec:	d902      	bls.n	80052f4 <NVIC_EncodePriority+0x30>
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	3b03      	subs	r3, #3
 80052f2:	e000      	b.n	80052f6 <NVIC_EncodePriority+0x32>
 80052f4:	2300      	movs	r3, #0
 80052f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052f8:	f04f 32ff 	mov.w	r2, #4294967295
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005302:	43da      	mvns	r2, r3
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	401a      	ands	r2, r3
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800530c:	f04f 31ff 	mov.w	r1, #4294967295
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	fa01 f303 	lsl.w	r3, r1, r3
 8005316:	43d9      	mvns	r1, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800531c:	4313      	orrs	r3, r2
         );
}
 800531e:	4618      	mov	r0, r3
 8005320:	3724      	adds	r7, #36	; 0x24
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
	...

0800532c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	3b01      	subs	r3, #1
 8005338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800533c:	d301      	bcc.n	8005342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800533e:	2301      	movs	r3, #1
 8005340:	e00f      	b.n	8005362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005342:	4a0a      	ldr	r2, [pc, #40]	; (800536c <SysTick_Config+0x40>)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3b01      	subs	r3, #1
 8005348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800534a:	210f      	movs	r1, #15
 800534c:	f04f 30ff 	mov.w	r0, #4294967295
 8005350:	f7ff ff8e 	bl	8005270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005354:	4b05      	ldr	r3, [pc, #20]	; (800536c <SysTick_Config+0x40>)
 8005356:	2200      	movs	r2, #0
 8005358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800535a:	4b04      	ldr	r3, [pc, #16]	; (800536c <SysTick_Config+0x40>)
 800535c:	2207      	movs	r2, #7
 800535e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	e000e010 	.word	0xe000e010

08005370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7ff ff05 	bl	8005188 <__NVIC_SetPriorityGrouping>
}
 800537e:	bf00      	nop
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005386:	b580      	push	{r7, lr}
 8005388:	b086      	sub	sp, #24
 800538a:	af00      	add	r7, sp, #0
 800538c:	4603      	mov	r3, r0
 800538e:	60b9      	str	r1, [r7, #8]
 8005390:	607a      	str	r2, [r7, #4]
 8005392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005394:	2300      	movs	r3, #0
 8005396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005398:	f7ff ff1a 	bl	80051d0 <__NVIC_GetPriorityGrouping>
 800539c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	68b9      	ldr	r1, [r7, #8]
 80053a2:	6978      	ldr	r0, [r7, #20]
 80053a4:	f7ff ff8e 	bl	80052c4 <NVIC_EncodePriority>
 80053a8:	4602      	mov	r2, r0
 80053aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053ae:	4611      	mov	r1, r2
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7ff ff5d 	bl	8005270 <__NVIC_SetPriority>
}
 80053b6:	bf00      	nop
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b082      	sub	sp, #8
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	4603      	mov	r3, r0
 80053c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff ff0d 	bl	80051ec <__NVIC_EnableIRQ>
}
 80053d2:	bf00      	nop
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b082      	sub	sp, #8
 80053de:	af00      	add	r7, sp, #0
 80053e0:	4603      	mov	r3, r0
 80053e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80053e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff ff1d 	bl	8005228 <__NVIC_DisableIRQ>
}
 80053ee:	bf00      	nop
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b082      	sub	sp, #8
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7ff ff94 	bl	800532c <SysTick_Config>
 8005404:	4603      	mov	r3, r0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
	...

08005410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005410:	b480      	push	{r7}
 8005412:	b089      	sub	sp, #36	; 0x24
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800541a:	2300      	movs	r3, #0
 800541c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800541e:	2300      	movs	r3, #0
 8005420:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005422:	2300      	movs	r3, #0
 8005424:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005426:	2300      	movs	r3, #0
 8005428:	61fb      	str	r3, [r7, #28]
 800542a:	e16b      	b.n	8005704 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800542c:	2201      	movs	r2, #1
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	fa02 f303 	lsl.w	r3, r2, r3
 8005434:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4013      	ands	r3, r2
 800543e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	429a      	cmp	r2, r3
 8005446:	f040 815a 	bne.w	80056fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	2b01      	cmp	r3, #1
 8005454:	d005      	beq.n	8005462 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800545e:	2b02      	cmp	r3, #2
 8005460:	d130      	bne.n	80054c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	005b      	lsls	r3, r3, #1
 800546c:	2203      	movs	r2, #3
 800546e:	fa02 f303 	lsl.w	r3, r2, r3
 8005472:	43db      	mvns	r3, r3
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	4013      	ands	r3, r2
 8005478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	005b      	lsls	r3, r3, #1
 8005482:	fa02 f303 	lsl.w	r3, r2, r3
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	4313      	orrs	r3, r2
 800548a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005498:	2201      	movs	r2, #1
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	fa02 f303 	lsl.w	r3, r2, r3
 80054a0:	43db      	mvns	r3, r3
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	4013      	ands	r3, r2
 80054a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	091b      	lsrs	r3, r3, #4
 80054ae:	f003 0201 	and.w	r2, r3, #1
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	fa02 f303 	lsl.w	r3, r2, r3
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f003 0303 	and.w	r3, r3, #3
 80054cc:	2b03      	cmp	r3, #3
 80054ce:	d017      	beq.n	8005500 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	2203      	movs	r2, #3
 80054dc:	fa02 f303 	lsl.w	r3, r2, r3
 80054e0:	43db      	mvns	r3, r3
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	4013      	ands	r3, r2
 80054e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	fa02 f303 	lsl.w	r3, r2, r3
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f003 0303 	and.w	r3, r3, #3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d123      	bne.n	8005554 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	08da      	lsrs	r2, r3, #3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3208      	adds	r2, #8
 8005514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005518:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	220f      	movs	r2, #15
 8005524:	fa02 f303 	lsl.w	r3, r2, r3
 8005528:	43db      	mvns	r3, r3
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	4013      	ands	r3, r2
 800552e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	691a      	ldr	r2, [r3, #16]
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	fa02 f303 	lsl.w	r3, r2, r3
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	4313      	orrs	r3, r2
 8005544:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	08da      	lsrs	r2, r3, #3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	3208      	adds	r2, #8
 800554e:	69b9      	ldr	r1, [r7, #24]
 8005550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	2203      	movs	r2, #3
 8005560:	fa02 f303 	lsl.w	r3, r2, r3
 8005564:	43db      	mvns	r3, r3
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	4013      	ands	r3, r2
 800556a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f003 0203 	and.w	r2, r3, #3
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	005b      	lsls	r3, r3, #1
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	4313      	orrs	r3, r2
 8005580:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 80b4 	beq.w	80056fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005596:	2300      	movs	r3, #0
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	4b60      	ldr	r3, [pc, #384]	; (800571c <HAL_GPIO_Init+0x30c>)
 800559c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800559e:	4a5f      	ldr	r2, [pc, #380]	; (800571c <HAL_GPIO_Init+0x30c>)
 80055a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055a4:	6453      	str	r3, [r2, #68]	; 0x44
 80055a6:	4b5d      	ldr	r3, [pc, #372]	; (800571c <HAL_GPIO_Init+0x30c>)
 80055a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055b2:	4a5b      	ldr	r2, [pc, #364]	; (8005720 <HAL_GPIO_Init+0x310>)
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	089b      	lsrs	r3, r3, #2
 80055b8:	3302      	adds	r3, #2
 80055ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f003 0303 	and.w	r3, r3, #3
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	220f      	movs	r2, #15
 80055ca:	fa02 f303 	lsl.w	r3, r2, r3
 80055ce:	43db      	mvns	r3, r3
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	4013      	ands	r3, r2
 80055d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a52      	ldr	r2, [pc, #328]	; (8005724 <HAL_GPIO_Init+0x314>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d02b      	beq.n	8005636 <HAL_GPIO_Init+0x226>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a51      	ldr	r2, [pc, #324]	; (8005728 <HAL_GPIO_Init+0x318>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d025      	beq.n	8005632 <HAL_GPIO_Init+0x222>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a50      	ldr	r2, [pc, #320]	; (800572c <HAL_GPIO_Init+0x31c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d01f      	beq.n	800562e <HAL_GPIO_Init+0x21e>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a4f      	ldr	r2, [pc, #316]	; (8005730 <HAL_GPIO_Init+0x320>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d019      	beq.n	800562a <HAL_GPIO_Init+0x21a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a4e      	ldr	r2, [pc, #312]	; (8005734 <HAL_GPIO_Init+0x324>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d013      	beq.n	8005626 <HAL_GPIO_Init+0x216>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a4d      	ldr	r2, [pc, #308]	; (8005738 <HAL_GPIO_Init+0x328>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00d      	beq.n	8005622 <HAL_GPIO_Init+0x212>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a4c      	ldr	r2, [pc, #304]	; (800573c <HAL_GPIO_Init+0x32c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d007      	beq.n	800561e <HAL_GPIO_Init+0x20e>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a4b      	ldr	r2, [pc, #300]	; (8005740 <HAL_GPIO_Init+0x330>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d101      	bne.n	800561a <HAL_GPIO_Init+0x20a>
 8005616:	2307      	movs	r3, #7
 8005618:	e00e      	b.n	8005638 <HAL_GPIO_Init+0x228>
 800561a:	2308      	movs	r3, #8
 800561c:	e00c      	b.n	8005638 <HAL_GPIO_Init+0x228>
 800561e:	2306      	movs	r3, #6
 8005620:	e00a      	b.n	8005638 <HAL_GPIO_Init+0x228>
 8005622:	2305      	movs	r3, #5
 8005624:	e008      	b.n	8005638 <HAL_GPIO_Init+0x228>
 8005626:	2304      	movs	r3, #4
 8005628:	e006      	b.n	8005638 <HAL_GPIO_Init+0x228>
 800562a:	2303      	movs	r3, #3
 800562c:	e004      	b.n	8005638 <HAL_GPIO_Init+0x228>
 800562e:	2302      	movs	r3, #2
 8005630:	e002      	b.n	8005638 <HAL_GPIO_Init+0x228>
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <HAL_GPIO_Init+0x228>
 8005636:	2300      	movs	r3, #0
 8005638:	69fa      	ldr	r2, [r7, #28]
 800563a:	f002 0203 	and.w	r2, r2, #3
 800563e:	0092      	lsls	r2, r2, #2
 8005640:	4093      	lsls	r3, r2
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	4313      	orrs	r3, r2
 8005646:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005648:	4935      	ldr	r1, [pc, #212]	; (8005720 <HAL_GPIO_Init+0x310>)
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	089b      	lsrs	r3, r3, #2
 800564e:	3302      	adds	r3, #2
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005656:	4b3b      	ldr	r3, [pc, #236]	; (8005744 <HAL_GPIO_Init+0x334>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	43db      	mvns	r3, r3
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	4013      	ands	r3, r2
 8005664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	4313      	orrs	r3, r2
 8005678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800567a:	4a32      	ldr	r2, [pc, #200]	; (8005744 <HAL_GPIO_Init+0x334>)
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005680:	4b30      	ldr	r3, [pc, #192]	; (8005744 <HAL_GPIO_Init+0x334>)
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	43db      	mvns	r3, r3
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	4013      	ands	r3, r2
 800568e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056a4:	4a27      	ldr	r2, [pc, #156]	; (8005744 <HAL_GPIO_Init+0x334>)
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80056aa:	4b26      	ldr	r3, [pc, #152]	; (8005744 <HAL_GPIO_Init+0x334>)
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	43db      	mvns	r3, r3
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	4013      	ands	r3, r2
 80056b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056ce:	4a1d      	ldr	r2, [pc, #116]	; (8005744 <HAL_GPIO_Init+0x334>)
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80056d4:	4b1b      	ldr	r3, [pc, #108]	; (8005744 <HAL_GPIO_Init+0x334>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	43db      	mvns	r3, r3
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	4013      	ands	r3, r2
 80056e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80056f8:	4a12      	ldr	r2, [pc, #72]	; (8005744 <HAL_GPIO_Init+0x334>)
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	3301      	adds	r3, #1
 8005702:	61fb      	str	r3, [r7, #28]
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	2b0f      	cmp	r3, #15
 8005708:	f67f ae90 	bls.w	800542c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800570c:	bf00      	nop
 800570e:	bf00      	nop
 8005710:	3724      	adds	r7, #36	; 0x24
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	40023800 	.word	0x40023800
 8005720:	40013800 	.word	0x40013800
 8005724:	40020000 	.word	0x40020000
 8005728:	40020400 	.word	0x40020400
 800572c:	40020800 	.word	0x40020800
 8005730:	40020c00 	.word	0x40020c00
 8005734:	40021000 	.word	0x40021000
 8005738:	40021400 	.word	0x40021400
 800573c:	40021800 	.word	0x40021800
 8005740:	40021c00 	.word	0x40021c00
 8005744:	40013c00 	.word	0x40013c00

08005748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	460b      	mov	r3, r1
 8005752:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	691a      	ldr	r2, [r3, #16]
 8005758:	887b      	ldrh	r3, [r7, #2]
 800575a:	4013      	ands	r3, r2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005760:	2301      	movs	r3, #1
 8005762:	73fb      	strb	r3, [r7, #15]
 8005764:	e001      	b.n	800576a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005766:	2300      	movs	r3, #0
 8005768:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800576a:	7bfb      	ldrb	r3, [r7, #15]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	807b      	strh	r3, [r7, #2]
 8005784:	4613      	mov	r3, r2
 8005786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005788:	787b      	ldrb	r3, [r7, #1]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800578e:	887a      	ldrh	r2, [r7, #2]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005794:	e003      	b.n	800579e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005796:	887b      	ldrh	r3, [r7, #2]
 8005798:	041a      	lsls	r2, r3, #16
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	619a      	str	r2, [r3, #24]
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
	...

080057ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e12b      	b.n	8005a16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d106      	bne.n	80057d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fd f9f4 	bl	8002bc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2224      	movs	r2, #36	; 0x24
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0201 	bic.w	r2, r2, #1
 80057ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800580e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005810:	f001 f8aa 	bl	8006968 <HAL_RCC_GetPCLK1Freq>
 8005814:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	4a81      	ldr	r2, [pc, #516]	; (8005a20 <HAL_I2C_Init+0x274>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d807      	bhi.n	8005830 <HAL_I2C_Init+0x84>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4a80      	ldr	r2, [pc, #512]	; (8005a24 <HAL_I2C_Init+0x278>)
 8005824:	4293      	cmp	r3, r2
 8005826:	bf94      	ite	ls
 8005828:	2301      	movls	r3, #1
 800582a:	2300      	movhi	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	e006      	b.n	800583e <HAL_I2C_Init+0x92>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4a7d      	ldr	r2, [pc, #500]	; (8005a28 <HAL_I2C_Init+0x27c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	bf94      	ite	ls
 8005838:	2301      	movls	r3, #1
 800583a:	2300      	movhi	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e0e7      	b.n	8005a16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	4a78      	ldr	r2, [pc, #480]	; (8005a2c <HAL_I2C_Init+0x280>)
 800584a:	fba2 2303 	umull	r2, r3, r2, r3
 800584e:	0c9b      	lsrs	r3, r3, #18
 8005850:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	430a      	orrs	r2, r1
 8005864:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	4a6a      	ldr	r2, [pc, #424]	; (8005a20 <HAL_I2C_Init+0x274>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d802      	bhi.n	8005880 <HAL_I2C_Init+0xd4>
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	3301      	adds	r3, #1
 800587e:	e009      	b.n	8005894 <HAL_I2C_Init+0xe8>
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005886:	fb02 f303 	mul.w	r3, r2, r3
 800588a:	4a69      	ldr	r2, [pc, #420]	; (8005a30 <HAL_I2C_Init+0x284>)
 800588c:	fba2 2303 	umull	r2, r3, r2, r3
 8005890:	099b      	lsrs	r3, r3, #6
 8005892:	3301      	adds	r3, #1
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	6812      	ldr	r2, [r2, #0]
 8005898:	430b      	orrs	r3, r1
 800589a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80058a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	495c      	ldr	r1, [pc, #368]	; (8005a20 <HAL_I2C_Init+0x274>)
 80058b0:	428b      	cmp	r3, r1
 80058b2:	d819      	bhi.n	80058e8 <HAL_I2C_Init+0x13c>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	1e59      	subs	r1, r3, #1
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	fbb1 f3f3 	udiv	r3, r1, r3
 80058c2:	1c59      	adds	r1, r3, #1
 80058c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80058c8:	400b      	ands	r3, r1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <HAL_I2C_Init+0x138>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	1e59      	subs	r1, r3, #1
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80058dc:	3301      	adds	r3, #1
 80058de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058e2:	e051      	b.n	8005988 <HAL_I2C_Init+0x1dc>
 80058e4:	2304      	movs	r3, #4
 80058e6:	e04f      	b.n	8005988 <HAL_I2C_Init+0x1dc>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d111      	bne.n	8005914 <HAL_I2C_Init+0x168>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	1e58      	subs	r0, r3, #1
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6859      	ldr	r1, [r3, #4]
 80058f8:	460b      	mov	r3, r1
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	440b      	add	r3, r1
 80058fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005902:	3301      	adds	r3, #1
 8005904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005908:	2b00      	cmp	r3, #0
 800590a:	bf0c      	ite	eq
 800590c:	2301      	moveq	r3, #1
 800590e:	2300      	movne	r3, #0
 8005910:	b2db      	uxtb	r3, r3
 8005912:	e012      	b.n	800593a <HAL_I2C_Init+0x18e>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	1e58      	subs	r0, r3, #1
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6859      	ldr	r1, [r3, #4]
 800591c:	460b      	mov	r3, r1
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	440b      	add	r3, r1
 8005922:	0099      	lsls	r1, r3, #2
 8005924:	440b      	add	r3, r1
 8005926:	fbb0 f3f3 	udiv	r3, r0, r3
 800592a:	3301      	adds	r3, #1
 800592c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005930:	2b00      	cmp	r3, #0
 8005932:	bf0c      	ite	eq
 8005934:	2301      	moveq	r3, #1
 8005936:	2300      	movne	r3, #0
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <HAL_I2C_Init+0x196>
 800593e:	2301      	movs	r3, #1
 8005940:	e022      	b.n	8005988 <HAL_I2C_Init+0x1dc>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10e      	bne.n	8005968 <HAL_I2C_Init+0x1bc>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	1e58      	subs	r0, r3, #1
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6859      	ldr	r1, [r3, #4]
 8005952:	460b      	mov	r3, r1
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	440b      	add	r3, r1
 8005958:	fbb0 f3f3 	udiv	r3, r0, r3
 800595c:	3301      	adds	r3, #1
 800595e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005966:	e00f      	b.n	8005988 <HAL_I2C_Init+0x1dc>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	1e58      	subs	r0, r3, #1
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6859      	ldr	r1, [r3, #4]
 8005970:	460b      	mov	r3, r1
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	440b      	add	r3, r1
 8005976:	0099      	lsls	r1, r3, #2
 8005978:	440b      	add	r3, r1
 800597a:	fbb0 f3f3 	udiv	r3, r0, r3
 800597e:	3301      	adds	r3, #1
 8005980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005984:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005988:	6879      	ldr	r1, [r7, #4]
 800598a:	6809      	ldr	r1, [r1, #0]
 800598c:	4313      	orrs	r3, r2
 800598e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	69da      	ldr	r2, [r3, #28]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	431a      	orrs	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80059b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	6911      	ldr	r1, [r2, #16]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	68d2      	ldr	r2, [r2, #12]
 80059c2:	4311      	orrs	r1, r2
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6812      	ldr	r2, [r2, #0]
 80059c8:	430b      	orrs	r3, r1
 80059ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	695a      	ldr	r2, [r3, #20]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0201 	orr.w	r2, r2, #1
 80059f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2220      	movs	r2, #32
 8005a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	000186a0 	.word	0x000186a0
 8005a24:	001e847f 	.word	0x001e847f
 8005a28:	003d08ff 	.word	0x003d08ff
 8005a2c:	431bde83 	.word	0x431bde83
 8005a30:	10624dd3 	.word	0x10624dd3

08005a34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b088      	sub	sp, #32
 8005a38:	af02      	add	r7, sp, #8
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	4608      	mov	r0, r1
 8005a3e:	4611      	mov	r1, r2
 8005a40:	461a      	mov	r2, r3
 8005a42:	4603      	mov	r3, r0
 8005a44:	817b      	strh	r3, [r7, #10]
 8005a46:	460b      	mov	r3, r1
 8005a48:	813b      	strh	r3, [r7, #8]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a4e:	f7ff fb6b 	bl	8005128 <HAL_GetTick>
 8005a52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b20      	cmp	r3, #32
 8005a5e:	f040 80d9 	bne.w	8005c14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	2319      	movs	r3, #25
 8005a68:	2201      	movs	r2, #1
 8005a6a:	496d      	ldr	r1, [pc, #436]	; (8005c20 <HAL_I2C_Mem_Write+0x1ec>)
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 f971 	bl	8005d54 <I2C_WaitOnFlagUntilTimeout>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e0cc      	b.n	8005c16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d101      	bne.n	8005a8a <HAL_I2C_Mem_Write+0x56>
 8005a86:	2302      	movs	r3, #2
 8005a88:	e0c5      	b.n	8005c16 <HAL_I2C_Mem_Write+0x1e2>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d007      	beq.n	8005ab0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f042 0201 	orr.w	r2, r2, #1
 8005aae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005abe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2221      	movs	r2, #33	; 0x21
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2240      	movs	r2, #64	; 0x40
 8005acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6a3a      	ldr	r2, [r7, #32]
 8005ada:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4a4d      	ldr	r2, [pc, #308]	; (8005c24 <HAL_I2C_Mem_Write+0x1f0>)
 8005af0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005af2:	88f8      	ldrh	r0, [r7, #6]
 8005af4:	893a      	ldrh	r2, [r7, #8]
 8005af6:	8979      	ldrh	r1, [r7, #10]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	9301      	str	r3, [sp, #4]
 8005afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	4603      	mov	r3, r0
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f000 f890 	bl	8005c28 <I2C_RequestMemoryWrite>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d052      	beq.n	8005bb4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e081      	b.n	8005c16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 fa36 	bl	8005f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00d      	beq.n	8005b3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d107      	bne.n	8005b3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e06b      	b.n	8005c16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	781a      	ldrb	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	1c5a      	adds	r2, r3, #1
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	3b01      	subs	r3, #1
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b04      	cmp	r3, #4
 8005b7a:	d11b      	bne.n	8005bb4 <HAL_I2C_Mem_Write+0x180>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d017      	beq.n	8005bb4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	781a      	ldrb	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	1c5a      	adds	r2, r3, #1
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	3b01      	subs	r3, #1
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1aa      	bne.n	8005b12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f000 fa29 	bl	8006018 <I2C_WaitOnBTFFlagUntilTimeout>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00d      	beq.n	8005be8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d107      	bne.n	8005be4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005be2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e016      	b.n	8005c16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	e000      	b.n	8005c16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005c14:	2302      	movs	r3, #2
  }
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3718      	adds	r7, #24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	00100002 	.word	0x00100002
 8005c24:	ffff0000 	.word	0xffff0000

08005c28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b088      	sub	sp, #32
 8005c2c:	af02      	add	r7, sp, #8
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	4608      	mov	r0, r1
 8005c32:	4611      	mov	r1, r2
 8005c34:	461a      	mov	r2, r3
 8005c36:	4603      	mov	r3, r0
 8005c38:	817b      	strh	r3, [r7, #10]
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	813b      	strh	r3, [r7, #8]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 f878 	bl	8005d54 <I2C_WaitOnFlagUntilTimeout>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00d      	beq.n	8005c86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c78:	d103      	bne.n	8005c82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e05f      	b.n	8005d46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c86:	897b      	ldrh	r3, [r7, #10]
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	6a3a      	ldr	r2, [r7, #32]
 8005c9a:	492d      	ldr	r1, [pc, #180]	; (8005d50 <I2C_RequestMemoryWrite+0x128>)
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 f8d3 	bl	8005e48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e04c      	b.n	8005d46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cac:	2300      	movs	r3, #0
 8005cae:	617b      	str	r3, [r7, #20]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	617b      	str	r3, [r7, #20]
 8005cc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc4:	6a39      	ldr	r1, [r7, #32]
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 f95e 	bl	8005f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00d      	beq.n	8005cee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d107      	bne.n	8005cea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e02b      	b.n	8005d46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cee:	88fb      	ldrh	r3, [r7, #6]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d105      	bne.n	8005d00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cf4:	893b      	ldrh	r3, [r7, #8]
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	611a      	str	r2, [r3, #16]
 8005cfe:	e021      	b.n	8005d44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d00:	893b      	ldrh	r3, [r7, #8]
 8005d02:	0a1b      	lsrs	r3, r3, #8
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d10:	6a39      	ldr	r1, [r7, #32]
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 f938 	bl	8005f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00d      	beq.n	8005d3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d107      	bne.n	8005d36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e005      	b.n	8005d46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d3a:	893b      	ldrh	r3, [r7, #8]
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	00010002 	.word	0x00010002

08005d54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	603b      	str	r3, [r7, #0]
 8005d60:	4613      	mov	r3, r2
 8005d62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d64:	e048      	b.n	8005df8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6c:	d044      	beq.n	8005df8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d6e:	f7ff f9db 	bl	8005128 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d302      	bcc.n	8005d84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d139      	bne.n	8005df8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	0c1b      	lsrs	r3, r3, #16
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d10d      	bne.n	8005daa <I2C_WaitOnFlagUntilTimeout+0x56>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	43da      	mvns	r2, r3
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	4013      	ands	r3, r2
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	bf0c      	ite	eq
 8005da0:	2301      	moveq	r3, #1
 8005da2:	2300      	movne	r3, #0
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	461a      	mov	r2, r3
 8005da8:	e00c      	b.n	8005dc4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	43da      	mvns	r2, r3
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	4013      	ands	r3, r2
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	bf0c      	ite	eq
 8005dbc:	2301      	moveq	r3, #1
 8005dbe:	2300      	movne	r3, #0
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d116      	bne.n	8005df8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de4:	f043 0220 	orr.w	r2, r3, #32
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e023      	b.n	8005e40 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	0c1b      	lsrs	r3, r3, #16
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d10d      	bne.n	8005e1e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	43da      	mvns	r2, r3
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	bf0c      	ite	eq
 8005e14:	2301      	moveq	r3, #1
 8005e16:	2300      	movne	r3, #0
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	e00c      	b.n	8005e38 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	43da      	mvns	r2, r3
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	4013      	ands	r3, r2
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	bf0c      	ite	eq
 8005e30:	2301      	moveq	r3, #1
 8005e32:	2300      	movne	r3, #0
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	461a      	mov	r2, r3
 8005e38:	79fb      	ldrb	r3, [r7, #7]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d093      	beq.n	8005d66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e56:	e071      	b.n	8005f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e66:	d123      	bne.n	8005eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e76:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9c:	f043 0204 	orr.w	r2, r3, #4
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e067      	b.n	8005f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb6:	d041      	beq.n	8005f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eb8:	f7ff f936 	bl	8005128 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d302      	bcc.n	8005ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d136      	bne.n	8005f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	0c1b      	lsrs	r3, r3, #16
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d10c      	bne.n	8005ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	43da      	mvns	r2, r3
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	bf14      	ite	ne
 8005eea:	2301      	movne	r3, #1
 8005eec:	2300      	moveq	r3, #0
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	e00b      	b.n	8005f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	43da      	mvns	r2, r3
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	4013      	ands	r3, r2
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	bf14      	ite	ne
 8005f04:	2301      	movne	r3, #1
 8005f06:	2300      	moveq	r3, #0
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d016      	beq.n	8005f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f28:	f043 0220 	orr.w	r2, r3, #32
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e021      	b.n	8005f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	0c1b      	lsrs	r3, r3, #16
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d10c      	bne.n	8005f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	43da      	mvns	r2, r3
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	4013      	ands	r3, r2
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	bf14      	ite	ne
 8005f58:	2301      	movne	r3, #1
 8005f5a:	2300      	moveq	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	e00b      	b.n	8005f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	43da      	mvns	r2, r3
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	bf14      	ite	ne
 8005f72:	2301      	movne	r3, #1
 8005f74:	2300      	moveq	r3, #0
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f47f af6d 	bne.w	8005e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f94:	e034      	b.n	8006000 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 f886 	bl	80060a8 <I2C_IsAcknowledgeFailed>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e034      	b.n	8006010 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fac:	d028      	beq.n	8006000 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fae:	f7ff f8bb 	bl	8005128 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d302      	bcc.n	8005fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d11d      	bne.n	8006000 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fce:	2b80      	cmp	r3, #128	; 0x80
 8005fd0:	d016      	beq.n	8006000 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fec:	f043 0220 	orr.w	r2, r3, #32
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e007      	b.n	8006010 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600a:	2b80      	cmp	r3, #128	; 0x80
 800600c:	d1c3      	bne.n	8005f96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006024:	e034      	b.n	8006090 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 f83e 	bl	80060a8 <I2C_IsAcknowledgeFailed>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e034      	b.n	80060a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603c:	d028      	beq.n	8006090 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800603e:	f7ff f873 	bl	8005128 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	429a      	cmp	r2, r3
 800604c:	d302      	bcc.n	8006054 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d11d      	bne.n	8006090 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	f003 0304 	and.w	r3, r3, #4
 800605e:	2b04      	cmp	r3, #4
 8006060:	d016      	beq.n	8006090 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2220      	movs	r2, #32
 800606c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607c:	f043 0220 	orr.w	r2, r3, #32
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e007      	b.n	80060a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	f003 0304 	and.w	r3, r3, #4
 800609a:	2b04      	cmp	r3, #4
 800609c:	d1c3      	bne.n	8006026 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060be:	d11b      	bne.n	80060f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2220      	movs	r2, #32
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e4:	f043 0204 	orr.w	r2, r3, #4
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e000      	b.n	80060fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
	...

08006108 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e267      	b.n	80065ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d075      	beq.n	8006212 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006126:	4b88      	ldr	r3, [pc, #544]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f003 030c 	and.w	r3, r3, #12
 800612e:	2b04      	cmp	r3, #4
 8006130:	d00c      	beq.n	800614c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006132:	4b85      	ldr	r3, [pc, #532]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800613a:	2b08      	cmp	r3, #8
 800613c:	d112      	bne.n	8006164 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800613e:	4b82      	ldr	r3, [pc, #520]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006146:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800614a:	d10b      	bne.n	8006164 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800614c:	4b7e      	ldr	r3, [pc, #504]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d05b      	beq.n	8006210 <HAL_RCC_OscConfig+0x108>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d157      	bne.n	8006210 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e242      	b.n	80065ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800616c:	d106      	bne.n	800617c <HAL_RCC_OscConfig+0x74>
 800616e:	4b76      	ldr	r3, [pc, #472]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a75      	ldr	r2, [pc, #468]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 8006174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006178:	6013      	str	r3, [r2, #0]
 800617a:	e01d      	b.n	80061b8 <HAL_RCC_OscConfig+0xb0>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006184:	d10c      	bne.n	80061a0 <HAL_RCC_OscConfig+0x98>
 8006186:	4b70      	ldr	r3, [pc, #448]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a6f      	ldr	r2, [pc, #444]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 800618c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006190:	6013      	str	r3, [r2, #0]
 8006192:	4b6d      	ldr	r3, [pc, #436]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a6c      	ldr	r2, [pc, #432]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 8006198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800619c:	6013      	str	r3, [r2, #0]
 800619e:	e00b      	b.n	80061b8 <HAL_RCC_OscConfig+0xb0>
 80061a0:	4b69      	ldr	r3, [pc, #420]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a68      	ldr	r2, [pc, #416]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 80061a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061aa:	6013      	str	r3, [r2, #0]
 80061ac:	4b66      	ldr	r3, [pc, #408]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a65      	ldr	r2, [pc, #404]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 80061b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d013      	beq.n	80061e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061c0:	f7fe ffb2 	bl	8005128 <HAL_GetTick>
 80061c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061c6:	e008      	b.n	80061da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061c8:	f7fe ffae 	bl	8005128 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	2b64      	cmp	r3, #100	; 0x64
 80061d4:	d901      	bls.n	80061da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e207      	b.n	80065ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061da:	4b5b      	ldr	r3, [pc, #364]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d0f0      	beq.n	80061c8 <HAL_RCC_OscConfig+0xc0>
 80061e6:	e014      	b.n	8006212 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e8:	f7fe ff9e 	bl	8005128 <HAL_GetTick>
 80061ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061ee:	e008      	b.n	8006202 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061f0:	f7fe ff9a 	bl	8005128 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	2b64      	cmp	r3, #100	; 0x64
 80061fc:	d901      	bls.n	8006202 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e1f3      	b.n	80065ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006202:	4b51      	ldr	r3, [pc, #324]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1f0      	bne.n	80061f0 <HAL_RCC_OscConfig+0xe8>
 800620e:	e000      	b.n	8006212 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d063      	beq.n	80062e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800621e:	4b4a      	ldr	r3, [pc, #296]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 030c 	and.w	r3, r3, #12
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00b      	beq.n	8006242 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800622a:	4b47      	ldr	r3, [pc, #284]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006232:	2b08      	cmp	r3, #8
 8006234:	d11c      	bne.n	8006270 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006236:	4b44      	ldr	r3, [pc, #272]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d116      	bne.n	8006270 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006242:	4b41      	ldr	r3, [pc, #260]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d005      	beq.n	800625a <HAL_RCC_OscConfig+0x152>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d001      	beq.n	800625a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e1c7      	b.n	80065ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800625a:	4b3b      	ldr	r3, [pc, #236]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	00db      	lsls	r3, r3, #3
 8006268:	4937      	ldr	r1, [pc, #220]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 800626a:	4313      	orrs	r3, r2
 800626c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800626e:	e03a      	b.n	80062e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d020      	beq.n	80062ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006278:	4b34      	ldr	r3, [pc, #208]	; (800634c <HAL_RCC_OscConfig+0x244>)
 800627a:	2201      	movs	r2, #1
 800627c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800627e:	f7fe ff53 	bl	8005128 <HAL_GetTick>
 8006282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006284:	e008      	b.n	8006298 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006286:	f7fe ff4f 	bl	8005128 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	2b02      	cmp	r3, #2
 8006292:	d901      	bls.n	8006298 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e1a8      	b.n	80065ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006298:	4b2b      	ldr	r3, [pc, #172]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0302 	and.w	r3, r3, #2
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d0f0      	beq.n	8006286 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062a4:	4b28      	ldr	r3, [pc, #160]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	00db      	lsls	r3, r3, #3
 80062b2:	4925      	ldr	r1, [pc, #148]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	600b      	str	r3, [r1, #0]
 80062b8:	e015      	b.n	80062e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062ba:	4b24      	ldr	r3, [pc, #144]	; (800634c <HAL_RCC_OscConfig+0x244>)
 80062bc:	2200      	movs	r2, #0
 80062be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c0:	f7fe ff32 	bl	8005128 <HAL_GetTick>
 80062c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062c6:	e008      	b.n	80062da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062c8:	f7fe ff2e 	bl	8005128 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e187      	b.n	80065ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062da:	4b1b      	ldr	r3, [pc, #108]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1f0      	bne.n	80062c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0308 	and.w	r3, r3, #8
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d036      	beq.n	8006360 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d016      	beq.n	8006328 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062fa:	4b15      	ldr	r3, [pc, #84]	; (8006350 <HAL_RCC_OscConfig+0x248>)
 80062fc:	2201      	movs	r2, #1
 80062fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006300:	f7fe ff12 	bl	8005128 <HAL_GetTick>
 8006304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006306:	e008      	b.n	800631a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006308:	f7fe ff0e 	bl	8005128 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b02      	cmp	r3, #2
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e167      	b.n	80065ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800631a:	4b0b      	ldr	r3, [pc, #44]	; (8006348 <HAL_RCC_OscConfig+0x240>)
 800631c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	2b00      	cmp	r3, #0
 8006324:	d0f0      	beq.n	8006308 <HAL_RCC_OscConfig+0x200>
 8006326:	e01b      	b.n	8006360 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006328:	4b09      	ldr	r3, [pc, #36]	; (8006350 <HAL_RCC_OscConfig+0x248>)
 800632a:	2200      	movs	r2, #0
 800632c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800632e:	f7fe fefb 	bl	8005128 <HAL_GetTick>
 8006332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006334:	e00e      	b.n	8006354 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006336:	f7fe fef7 	bl	8005128 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	2b02      	cmp	r3, #2
 8006342:	d907      	bls.n	8006354 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e150      	b.n	80065ea <HAL_RCC_OscConfig+0x4e2>
 8006348:	40023800 	.word	0x40023800
 800634c:	42470000 	.word	0x42470000
 8006350:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006354:	4b88      	ldr	r3, [pc, #544]	; (8006578 <HAL_RCC_OscConfig+0x470>)
 8006356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1ea      	bne.n	8006336 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0304 	and.w	r3, r3, #4
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 8097 	beq.w	800649c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800636e:	2300      	movs	r3, #0
 8006370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006372:	4b81      	ldr	r3, [pc, #516]	; (8006578 <HAL_RCC_OscConfig+0x470>)
 8006374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10f      	bne.n	800639e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800637e:	2300      	movs	r3, #0
 8006380:	60bb      	str	r3, [r7, #8]
 8006382:	4b7d      	ldr	r3, [pc, #500]	; (8006578 <HAL_RCC_OscConfig+0x470>)
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	4a7c      	ldr	r2, [pc, #496]	; (8006578 <HAL_RCC_OscConfig+0x470>)
 8006388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800638c:	6413      	str	r3, [r2, #64]	; 0x40
 800638e:	4b7a      	ldr	r3, [pc, #488]	; (8006578 <HAL_RCC_OscConfig+0x470>)
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006396:	60bb      	str	r3, [r7, #8]
 8006398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800639a:	2301      	movs	r3, #1
 800639c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800639e:	4b77      	ldr	r3, [pc, #476]	; (800657c <HAL_RCC_OscConfig+0x474>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d118      	bne.n	80063dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063aa:	4b74      	ldr	r3, [pc, #464]	; (800657c <HAL_RCC_OscConfig+0x474>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a73      	ldr	r2, [pc, #460]	; (800657c <HAL_RCC_OscConfig+0x474>)
 80063b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063b6:	f7fe feb7 	bl	8005128 <HAL_GetTick>
 80063ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063bc:	e008      	b.n	80063d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063be:	f7fe feb3 	bl	8005128 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e10c      	b.n	80065ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063d0:	4b6a      	ldr	r3, [pc, #424]	; (800657c <HAL_RCC_OscConfig+0x474>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0f0      	beq.n	80063be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d106      	bne.n	80063f2 <HAL_RCC_OscConfig+0x2ea>
 80063e4:	4b64      	ldr	r3, [pc, #400]	; (8006578 <HAL_RCC_OscConfig+0x470>)
 80063e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e8:	4a63      	ldr	r2, [pc, #396]	; (8006578 <HAL_RCC_OscConfig+0x470>)
 80063ea:	f043 0301 	orr.w	r3, r3, #1
 80063ee:	6713      	str	r3, [r2, #112]	; 0x70
 80063f0:	e01c      	b.n	800642c <HAL_RCC_OscConfig+0x324>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	2b05      	cmp	r3, #5
 80063f8:	d10c      	bne.n	8006414 <HAL_RCC_OscConfig+0x30c>
 80063fa:	4b5f      	ldr	r3, [pc, #380]	; (8006578 <HAL_RCC_OscConfig+0x470>)
 80063fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fe:	4a5e      	ldr	r2, [pc, #376]	; (8006578 <HAL_RCC_OscConfig+0x470>)
 8006400:	f043 0304 	orr.w	r3, r3, #4
 8006404:	6713      	str	r3, [r2, #112]	; 0x70
 8006406:	4b5c      	ldr	r3, [pc, #368]	; (8006578 <HAL_RCC_OscConfig+0x470>)
 8006408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640a:	4a5b      	ldr	r2, [pc, #364]	; (8006578 <HAL_RCC_OscConfig+0x470>)
 800640c:	f043 0301 	orr.w	r3, r3, #1
 8006410:	6713      	str	r3, [r2, #112]	; 0x70
 8006412:	e00b      	b.n	800642c <HAL_RCC_OscConfig+0x324>
 8006414:	4b58      	ldr	r3, [pc, #352]	; (8006578 <HAL_RCC_OscConfig+0x470>)
 8006416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006418:	4a57      	ldr	r2, [pc, #348]	; (8006578 <HAL_RCC_OscConfig+0x470>)
 800641a:	f023 0301 	bic.w	r3, r3, #1
 800641e:	6713      	str	r3, [r2, #112]	; 0x70
 8006420:	4b55      	ldr	r3, [pc, #340]	; (8006578 <HAL_RCC_OscConfig+0x470>)
 8006422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006424:	4a54      	ldr	r2, [pc, #336]	; (8006578 <HAL_RCC_OscConfig+0x470>)
 8006426:	f023 0304 	bic.w	r3, r3, #4
 800642a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d015      	beq.n	8006460 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006434:	f7fe fe78 	bl	8005128 <HAL_GetTick>
 8006438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800643a:	e00a      	b.n	8006452 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800643c:	f7fe fe74 	bl	8005128 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	f241 3288 	movw	r2, #5000	; 0x1388
 800644a:	4293      	cmp	r3, r2
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e0cb      	b.n	80065ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006452:	4b49      	ldr	r3, [pc, #292]	; (8006578 <HAL_RCC_OscConfig+0x470>)
 8006454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d0ee      	beq.n	800643c <HAL_RCC_OscConfig+0x334>
 800645e:	e014      	b.n	800648a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006460:	f7fe fe62 	bl	8005128 <HAL_GetTick>
 8006464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006466:	e00a      	b.n	800647e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006468:	f7fe fe5e 	bl	8005128 <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	f241 3288 	movw	r2, #5000	; 0x1388
 8006476:	4293      	cmp	r3, r2
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e0b5      	b.n	80065ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800647e:	4b3e      	ldr	r3, [pc, #248]	; (8006578 <HAL_RCC_OscConfig+0x470>)
 8006480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1ee      	bne.n	8006468 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800648a:	7dfb      	ldrb	r3, [r7, #23]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d105      	bne.n	800649c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006490:	4b39      	ldr	r3, [pc, #228]	; (8006578 <HAL_RCC_OscConfig+0x470>)
 8006492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006494:	4a38      	ldr	r2, [pc, #224]	; (8006578 <HAL_RCC_OscConfig+0x470>)
 8006496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800649a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 80a1 	beq.w	80065e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064a6:	4b34      	ldr	r3, [pc, #208]	; (8006578 <HAL_RCC_OscConfig+0x470>)
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f003 030c 	and.w	r3, r3, #12
 80064ae:	2b08      	cmp	r3, #8
 80064b0:	d05c      	beq.n	800656c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d141      	bne.n	800653e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064ba:	4b31      	ldr	r3, [pc, #196]	; (8006580 <HAL_RCC_OscConfig+0x478>)
 80064bc:	2200      	movs	r2, #0
 80064be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064c0:	f7fe fe32 	bl	8005128 <HAL_GetTick>
 80064c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064c6:	e008      	b.n	80064da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064c8:	f7fe fe2e 	bl	8005128 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d901      	bls.n	80064da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e087      	b.n	80065ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064da:	4b27      	ldr	r3, [pc, #156]	; (8006578 <HAL_RCC_OscConfig+0x470>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1f0      	bne.n	80064c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	69da      	ldr	r2, [r3, #28]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	431a      	orrs	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	019b      	lsls	r3, r3, #6
 80064f6:	431a      	orrs	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fc:	085b      	lsrs	r3, r3, #1
 80064fe:	3b01      	subs	r3, #1
 8006500:	041b      	lsls	r3, r3, #16
 8006502:	431a      	orrs	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	061b      	lsls	r3, r3, #24
 800650a:	491b      	ldr	r1, [pc, #108]	; (8006578 <HAL_RCC_OscConfig+0x470>)
 800650c:	4313      	orrs	r3, r2
 800650e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006510:	4b1b      	ldr	r3, [pc, #108]	; (8006580 <HAL_RCC_OscConfig+0x478>)
 8006512:	2201      	movs	r2, #1
 8006514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006516:	f7fe fe07 	bl	8005128 <HAL_GetTick>
 800651a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800651c:	e008      	b.n	8006530 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800651e:	f7fe fe03 	bl	8005128 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b02      	cmp	r3, #2
 800652a:	d901      	bls.n	8006530 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e05c      	b.n	80065ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006530:	4b11      	ldr	r3, [pc, #68]	; (8006578 <HAL_RCC_OscConfig+0x470>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0f0      	beq.n	800651e <HAL_RCC_OscConfig+0x416>
 800653c:	e054      	b.n	80065e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800653e:	4b10      	ldr	r3, [pc, #64]	; (8006580 <HAL_RCC_OscConfig+0x478>)
 8006540:	2200      	movs	r2, #0
 8006542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006544:	f7fe fdf0 	bl	8005128 <HAL_GetTick>
 8006548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800654a:	e008      	b.n	800655e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800654c:	f7fe fdec 	bl	8005128 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b02      	cmp	r3, #2
 8006558:	d901      	bls.n	800655e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e045      	b.n	80065ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800655e:	4b06      	ldr	r3, [pc, #24]	; (8006578 <HAL_RCC_OscConfig+0x470>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1f0      	bne.n	800654c <HAL_RCC_OscConfig+0x444>
 800656a:	e03d      	b.n	80065e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d107      	bne.n	8006584 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e038      	b.n	80065ea <HAL_RCC_OscConfig+0x4e2>
 8006578:	40023800 	.word	0x40023800
 800657c:	40007000 	.word	0x40007000
 8006580:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006584:	4b1b      	ldr	r3, [pc, #108]	; (80065f4 <HAL_RCC_OscConfig+0x4ec>)
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d028      	beq.n	80065e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800659c:	429a      	cmp	r2, r3
 800659e:	d121      	bne.n	80065e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d11a      	bne.n	80065e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80065b4:	4013      	ands	r3, r2
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80065ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065bc:	4293      	cmp	r3, r2
 80065be:	d111      	bne.n	80065e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ca:	085b      	lsrs	r3, r3, #1
 80065cc:	3b01      	subs	r3, #1
 80065ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d107      	bne.n	80065e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d001      	beq.n	80065e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e000      	b.n	80065ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3718      	adds	r7, #24
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	40023800 	.word	0x40023800

080065f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e0cc      	b.n	80067a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800660c:	4b68      	ldr	r3, [pc, #416]	; (80067b0 <HAL_RCC_ClockConfig+0x1b8>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0307 	and.w	r3, r3, #7
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	429a      	cmp	r2, r3
 8006618:	d90c      	bls.n	8006634 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800661a:	4b65      	ldr	r3, [pc, #404]	; (80067b0 <HAL_RCC_ClockConfig+0x1b8>)
 800661c:	683a      	ldr	r2, [r7, #0]
 800661e:	b2d2      	uxtb	r2, r2
 8006620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006622:	4b63      	ldr	r3, [pc, #396]	; (80067b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	429a      	cmp	r2, r3
 800662e:	d001      	beq.n	8006634 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e0b8      	b.n	80067a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d020      	beq.n	8006682 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0304 	and.w	r3, r3, #4
 8006648:	2b00      	cmp	r3, #0
 800664a:	d005      	beq.n	8006658 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800664c:	4b59      	ldr	r3, [pc, #356]	; (80067b4 <HAL_RCC_ClockConfig+0x1bc>)
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	4a58      	ldr	r2, [pc, #352]	; (80067b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006652:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006656:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0308 	and.w	r3, r3, #8
 8006660:	2b00      	cmp	r3, #0
 8006662:	d005      	beq.n	8006670 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006664:	4b53      	ldr	r3, [pc, #332]	; (80067b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	4a52      	ldr	r2, [pc, #328]	; (80067b4 <HAL_RCC_ClockConfig+0x1bc>)
 800666a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800666e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006670:	4b50      	ldr	r3, [pc, #320]	; (80067b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	494d      	ldr	r1, [pc, #308]	; (80067b4 <HAL_RCC_ClockConfig+0x1bc>)
 800667e:	4313      	orrs	r3, r2
 8006680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b00      	cmp	r3, #0
 800668c:	d044      	beq.n	8006718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d107      	bne.n	80066a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006696:	4b47      	ldr	r3, [pc, #284]	; (80067b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d119      	bne.n	80066d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e07f      	b.n	80067a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d003      	beq.n	80066b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066b2:	2b03      	cmp	r3, #3
 80066b4:	d107      	bne.n	80066c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066b6:	4b3f      	ldr	r3, [pc, #252]	; (80067b4 <HAL_RCC_ClockConfig+0x1bc>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d109      	bne.n	80066d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e06f      	b.n	80067a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066c6:	4b3b      	ldr	r3, [pc, #236]	; (80067b4 <HAL_RCC_ClockConfig+0x1bc>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e067      	b.n	80067a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066d6:	4b37      	ldr	r3, [pc, #220]	; (80067b4 <HAL_RCC_ClockConfig+0x1bc>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f023 0203 	bic.w	r2, r3, #3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	4934      	ldr	r1, [pc, #208]	; (80067b4 <HAL_RCC_ClockConfig+0x1bc>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066e8:	f7fe fd1e 	bl	8005128 <HAL_GetTick>
 80066ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066ee:	e00a      	b.n	8006706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066f0:	f7fe fd1a 	bl	8005128 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80066fe:	4293      	cmp	r3, r2
 8006700:	d901      	bls.n	8006706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e04f      	b.n	80067a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006706:	4b2b      	ldr	r3, [pc, #172]	; (80067b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f003 020c 	and.w	r2, r3, #12
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	429a      	cmp	r2, r3
 8006716:	d1eb      	bne.n	80066f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006718:	4b25      	ldr	r3, [pc, #148]	; (80067b0 <HAL_RCC_ClockConfig+0x1b8>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	429a      	cmp	r2, r3
 8006724:	d20c      	bcs.n	8006740 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006726:	4b22      	ldr	r3, [pc, #136]	; (80067b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	b2d2      	uxtb	r2, r2
 800672c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800672e:	4b20      	ldr	r3, [pc, #128]	; (80067b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0307 	and.w	r3, r3, #7
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	429a      	cmp	r2, r3
 800673a:	d001      	beq.n	8006740 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e032      	b.n	80067a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0304 	and.w	r3, r3, #4
 8006748:	2b00      	cmp	r3, #0
 800674a:	d008      	beq.n	800675e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800674c:	4b19      	ldr	r3, [pc, #100]	; (80067b4 <HAL_RCC_ClockConfig+0x1bc>)
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	4916      	ldr	r1, [pc, #88]	; (80067b4 <HAL_RCC_ClockConfig+0x1bc>)
 800675a:	4313      	orrs	r3, r2
 800675c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0308 	and.w	r3, r3, #8
 8006766:	2b00      	cmp	r3, #0
 8006768:	d009      	beq.n	800677e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800676a:	4b12      	ldr	r3, [pc, #72]	; (80067b4 <HAL_RCC_ClockConfig+0x1bc>)
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	00db      	lsls	r3, r3, #3
 8006778:	490e      	ldr	r1, [pc, #56]	; (80067b4 <HAL_RCC_ClockConfig+0x1bc>)
 800677a:	4313      	orrs	r3, r2
 800677c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800677e:	f000 f821 	bl	80067c4 <HAL_RCC_GetSysClockFreq>
 8006782:	4602      	mov	r2, r0
 8006784:	4b0b      	ldr	r3, [pc, #44]	; (80067b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	091b      	lsrs	r3, r3, #4
 800678a:	f003 030f 	and.w	r3, r3, #15
 800678e:	490a      	ldr	r1, [pc, #40]	; (80067b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006790:	5ccb      	ldrb	r3, [r1, r3]
 8006792:	fa22 f303 	lsr.w	r3, r2, r3
 8006796:	4a09      	ldr	r2, [pc, #36]	; (80067bc <HAL_RCC_ClockConfig+0x1c4>)
 8006798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800679a:	4b09      	ldr	r3, [pc, #36]	; (80067c0 <HAL_RCC_ClockConfig+0x1c8>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4618      	mov	r0, r3
 80067a0:	f7fe fc7e 	bl	80050a0 <HAL_InitTick>

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	40023c00 	.word	0x40023c00
 80067b4:	40023800 	.word	0x40023800
 80067b8:	08008e58 	.word	0x08008e58
 80067bc:	2000003c 	.word	0x2000003c
 80067c0:	2000006c 	.word	0x2000006c

080067c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067c8:	b090      	sub	sp, #64	; 0x40
 80067ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80067cc:	2300      	movs	r3, #0
 80067ce:	637b      	str	r3, [r7, #52]	; 0x34
 80067d0:	2300      	movs	r3, #0
 80067d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067d4:	2300      	movs	r3, #0
 80067d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80067d8:	2300      	movs	r3, #0
 80067da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067dc:	4b59      	ldr	r3, [pc, #356]	; (8006944 <HAL_RCC_GetSysClockFreq+0x180>)
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f003 030c 	and.w	r3, r3, #12
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d00d      	beq.n	8006804 <HAL_RCC_GetSysClockFreq+0x40>
 80067e8:	2b08      	cmp	r3, #8
 80067ea:	f200 80a1 	bhi.w	8006930 <HAL_RCC_GetSysClockFreq+0x16c>
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <HAL_RCC_GetSysClockFreq+0x34>
 80067f2:	2b04      	cmp	r3, #4
 80067f4:	d003      	beq.n	80067fe <HAL_RCC_GetSysClockFreq+0x3a>
 80067f6:	e09b      	b.n	8006930 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067f8:	4b53      	ldr	r3, [pc, #332]	; (8006948 <HAL_RCC_GetSysClockFreq+0x184>)
 80067fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80067fc:	e09b      	b.n	8006936 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067fe:	4b53      	ldr	r3, [pc, #332]	; (800694c <HAL_RCC_GetSysClockFreq+0x188>)
 8006800:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006802:	e098      	b.n	8006936 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006804:	4b4f      	ldr	r3, [pc, #316]	; (8006944 <HAL_RCC_GetSysClockFreq+0x180>)
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800680c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800680e:	4b4d      	ldr	r3, [pc, #308]	; (8006944 <HAL_RCC_GetSysClockFreq+0x180>)
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d028      	beq.n	800686c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800681a:	4b4a      	ldr	r3, [pc, #296]	; (8006944 <HAL_RCC_GetSysClockFreq+0x180>)
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	099b      	lsrs	r3, r3, #6
 8006820:	2200      	movs	r2, #0
 8006822:	623b      	str	r3, [r7, #32]
 8006824:	627a      	str	r2, [r7, #36]	; 0x24
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800682c:	2100      	movs	r1, #0
 800682e:	4b47      	ldr	r3, [pc, #284]	; (800694c <HAL_RCC_GetSysClockFreq+0x188>)
 8006830:	fb03 f201 	mul.w	r2, r3, r1
 8006834:	2300      	movs	r3, #0
 8006836:	fb00 f303 	mul.w	r3, r0, r3
 800683a:	4413      	add	r3, r2
 800683c:	4a43      	ldr	r2, [pc, #268]	; (800694c <HAL_RCC_GetSysClockFreq+0x188>)
 800683e:	fba0 1202 	umull	r1, r2, r0, r2
 8006842:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006844:	460a      	mov	r2, r1
 8006846:	62ba      	str	r2, [r7, #40]	; 0x28
 8006848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800684a:	4413      	add	r3, r2
 800684c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800684e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006850:	2200      	movs	r2, #0
 8006852:	61bb      	str	r3, [r7, #24]
 8006854:	61fa      	str	r2, [r7, #28]
 8006856:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800685a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800685e:	f7fa f967 	bl	8000b30 <__aeabi_uldivmod>
 8006862:	4602      	mov	r2, r0
 8006864:	460b      	mov	r3, r1
 8006866:	4613      	mov	r3, r2
 8006868:	63fb      	str	r3, [r7, #60]	; 0x3c
 800686a:	e053      	b.n	8006914 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800686c:	4b35      	ldr	r3, [pc, #212]	; (8006944 <HAL_RCC_GetSysClockFreq+0x180>)
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	099b      	lsrs	r3, r3, #6
 8006872:	2200      	movs	r2, #0
 8006874:	613b      	str	r3, [r7, #16]
 8006876:	617a      	str	r2, [r7, #20]
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800687e:	f04f 0b00 	mov.w	fp, #0
 8006882:	4652      	mov	r2, sl
 8006884:	465b      	mov	r3, fp
 8006886:	f04f 0000 	mov.w	r0, #0
 800688a:	f04f 0100 	mov.w	r1, #0
 800688e:	0159      	lsls	r1, r3, #5
 8006890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006894:	0150      	lsls	r0, r2, #5
 8006896:	4602      	mov	r2, r0
 8006898:	460b      	mov	r3, r1
 800689a:	ebb2 080a 	subs.w	r8, r2, sl
 800689e:	eb63 090b 	sbc.w	r9, r3, fp
 80068a2:	f04f 0200 	mov.w	r2, #0
 80068a6:	f04f 0300 	mov.w	r3, #0
 80068aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80068ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80068b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80068b6:	ebb2 0408 	subs.w	r4, r2, r8
 80068ba:	eb63 0509 	sbc.w	r5, r3, r9
 80068be:	f04f 0200 	mov.w	r2, #0
 80068c2:	f04f 0300 	mov.w	r3, #0
 80068c6:	00eb      	lsls	r3, r5, #3
 80068c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068cc:	00e2      	lsls	r2, r4, #3
 80068ce:	4614      	mov	r4, r2
 80068d0:	461d      	mov	r5, r3
 80068d2:	eb14 030a 	adds.w	r3, r4, sl
 80068d6:	603b      	str	r3, [r7, #0]
 80068d8:	eb45 030b 	adc.w	r3, r5, fp
 80068dc:	607b      	str	r3, [r7, #4]
 80068de:	f04f 0200 	mov.w	r2, #0
 80068e2:	f04f 0300 	mov.w	r3, #0
 80068e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80068ea:	4629      	mov	r1, r5
 80068ec:	028b      	lsls	r3, r1, #10
 80068ee:	4621      	mov	r1, r4
 80068f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068f4:	4621      	mov	r1, r4
 80068f6:	028a      	lsls	r2, r1, #10
 80068f8:	4610      	mov	r0, r2
 80068fa:	4619      	mov	r1, r3
 80068fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fe:	2200      	movs	r2, #0
 8006900:	60bb      	str	r3, [r7, #8]
 8006902:	60fa      	str	r2, [r7, #12]
 8006904:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006908:	f7fa f912 	bl	8000b30 <__aeabi_uldivmod>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	4613      	mov	r3, r2
 8006912:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006914:	4b0b      	ldr	r3, [pc, #44]	; (8006944 <HAL_RCC_GetSysClockFreq+0x180>)
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	0c1b      	lsrs	r3, r3, #16
 800691a:	f003 0303 	and.w	r3, r3, #3
 800691e:	3301      	adds	r3, #1
 8006920:	005b      	lsls	r3, r3, #1
 8006922:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006924:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006928:	fbb2 f3f3 	udiv	r3, r2, r3
 800692c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800692e:	e002      	b.n	8006936 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006930:	4b05      	ldr	r3, [pc, #20]	; (8006948 <HAL_RCC_GetSysClockFreq+0x184>)
 8006932:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006938:	4618      	mov	r0, r3
 800693a:	3740      	adds	r7, #64	; 0x40
 800693c:	46bd      	mov	sp, r7
 800693e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006942:	bf00      	nop
 8006944:	40023800 	.word	0x40023800
 8006948:	00f42400 	.word	0x00f42400
 800694c:	017d7840 	.word	0x017d7840

08006950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006950:	b480      	push	{r7}
 8006952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006954:	4b03      	ldr	r3, [pc, #12]	; (8006964 <HAL_RCC_GetHCLKFreq+0x14>)
 8006956:	681b      	ldr	r3, [r3, #0]
}
 8006958:	4618      	mov	r0, r3
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	2000003c 	.word	0x2000003c

08006968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800696c:	f7ff fff0 	bl	8006950 <HAL_RCC_GetHCLKFreq>
 8006970:	4602      	mov	r2, r0
 8006972:	4b05      	ldr	r3, [pc, #20]	; (8006988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	0a9b      	lsrs	r3, r3, #10
 8006978:	f003 0307 	and.w	r3, r3, #7
 800697c:	4903      	ldr	r1, [pc, #12]	; (800698c <HAL_RCC_GetPCLK1Freq+0x24>)
 800697e:	5ccb      	ldrb	r3, [r1, r3]
 8006980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006984:	4618      	mov	r0, r3
 8006986:	bd80      	pop	{r7, pc}
 8006988:	40023800 	.word	0x40023800
 800698c:	08008e68 	.word	0x08008e68

08006990 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e07b      	b.n	8006a9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d108      	bne.n	80069bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069b2:	d009      	beq.n	80069c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	61da      	str	r2, [r3, #28]
 80069ba:	e005      	b.n	80069c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d106      	bne.n	80069e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7fc f956 	bl	8002c94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a10:	431a      	orrs	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	431a      	orrs	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a38:	431a      	orrs	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a42:	431a      	orrs	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a4c:	ea42 0103 	orr.w	r1, r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a54:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	0c1b      	lsrs	r3, r3, #16
 8006a66:	f003 0104 	and.w	r1, r3, #4
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6e:	f003 0210 	and.w	r2, r3, #16
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69da      	ldr	r2, [r3, #28]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b088      	sub	sp, #32
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	603b      	str	r3, [r7, #0]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d101      	bne.n	8006ac4 <HAL_SPI_Transmit+0x22>
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	e12d      	b.n	8006d20 <HAL_SPI_Transmit+0x27e>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006acc:	f7fe fb2c 	bl	8005128 <HAL_GetTick>
 8006ad0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006ad2:	88fb      	ldrh	r3, [r7, #6]
 8006ad4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d002      	beq.n	8006ae8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ae6:	e116      	b.n	8006d16 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d002      	beq.n	8006af4 <HAL_SPI_Transmit+0x52>
 8006aee:	88fb      	ldrh	r3, [r7, #6]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d102      	bne.n	8006afa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006af8:	e10d      	b.n	8006d16 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2203      	movs	r2, #3
 8006afe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	88fa      	ldrh	r2, [r7, #6]
 8006b12:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	88fa      	ldrh	r2, [r7, #6]
 8006b18:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b40:	d10f      	bne.n	8006b62 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6c:	2b40      	cmp	r3, #64	; 0x40
 8006b6e:	d007      	beq.n	8006b80 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b88:	d14f      	bne.n	8006c2a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <HAL_SPI_Transmit+0xf6>
 8006b92:	8afb      	ldrh	r3, [r7, #22]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d142      	bne.n	8006c1e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9c:	881a      	ldrh	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba8:	1c9a      	adds	r2, r3, #2
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006bbc:	e02f      	b.n	8006c1e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f003 0302 	and.w	r3, r3, #2
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d112      	bne.n	8006bf2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd0:	881a      	ldrh	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bdc:	1c9a      	adds	r2, r3, #2
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	3b01      	subs	r3, #1
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	86da      	strh	r2, [r3, #54]	; 0x36
 8006bf0:	e015      	b.n	8006c1e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bf2:	f7fe fa99 	bl	8005128 <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d803      	bhi.n	8006c0a <HAL_SPI_Transmit+0x168>
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c08:	d102      	bne.n	8006c10 <HAL_SPI_Transmit+0x16e>
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d106      	bne.n	8006c1e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006c1c:	e07b      	b.n	8006d16 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1ca      	bne.n	8006bbe <HAL_SPI_Transmit+0x11c>
 8006c28:	e050      	b.n	8006ccc <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <HAL_SPI_Transmit+0x196>
 8006c32:	8afb      	ldrh	r3, [r7, #22]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d144      	bne.n	8006cc2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	330c      	adds	r3, #12
 8006c42:	7812      	ldrb	r2, [r2, #0]
 8006c44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4a:	1c5a      	adds	r2, r3, #1
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	3b01      	subs	r3, #1
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006c5e:	e030      	b.n	8006cc2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d113      	bne.n	8006c96 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	330c      	adds	r3, #12
 8006c78:	7812      	ldrb	r2, [r2, #0]
 8006c7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c80:	1c5a      	adds	r2, r3, #1
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	86da      	strh	r2, [r3, #54]	; 0x36
 8006c94:	e015      	b.n	8006cc2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c96:	f7fe fa47 	bl	8005128 <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	683a      	ldr	r2, [r7, #0]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d803      	bhi.n	8006cae <HAL_SPI_Transmit+0x20c>
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cac:	d102      	bne.n	8006cb4 <HAL_SPI_Transmit+0x212>
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d106      	bne.n	8006cc2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006cc0:	e029      	b.n	8006d16 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1c9      	bne.n	8006c60 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	6839      	ldr	r1, [r7, #0]
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 fbed 	bl	80074b0 <SPI_EndRxTxTransaction>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10a      	bne.n	8006d00 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cea:	2300      	movs	r3, #0
 8006cec:	613b      	str	r3, [r7, #16]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	613b      	str	r3, [r7, #16]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	613b      	str	r3, [r7, #16]
 8006cfe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	77fb      	strb	r3, [r7, #31]
 8006d0c:	e003      	b.n	8006d16 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3720      	adds	r7, #32
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b088      	sub	sp, #32
 8006d2c:	af02      	add	r7, sp, #8
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	603b      	str	r3, [r7, #0]
 8006d34:	4613      	mov	r3, r2
 8006d36:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d002      	beq.n	8006d4e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006d48:	2302      	movs	r3, #2
 8006d4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d4c:	e0fb      	b.n	8006f46 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d56:	d112      	bne.n	8006d7e <HAL_SPI_Receive+0x56>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10e      	bne.n	8006d7e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2204      	movs	r2, #4
 8006d64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006d68:	88fa      	ldrh	r2, [r7, #6]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	68b9      	ldr	r1, [r7, #8]
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f000 f8ef 	bl	8006f58 <HAL_SPI_TransmitReceive>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	e0e8      	b.n	8006f50 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d101      	bne.n	8006d8c <HAL_SPI_Receive+0x64>
 8006d88:	2302      	movs	r3, #2
 8006d8a:	e0e1      	b.n	8006f50 <HAL_SPI_Receive+0x228>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d94:	f7fe f9c8 	bl	8005128 <HAL_GetTick>
 8006d98:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <HAL_SPI_Receive+0x7e>
 8006da0:	88fb      	ldrh	r3, [r7, #6]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d102      	bne.n	8006dac <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006daa:	e0cc      	b.n	8006f46 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2204      	movs	r2, #4
 8006db0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	88fa      	ldrh	r2, [r7, #6]
 8006dc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	88fa      	ldrh	r2, [r7, #6]
 8006dca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006df2:	d10f      	bne.n	8006e14 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006e12:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e1e:	2b40      	cmp	r3, #64	; 0x40
 8006e20:	d007      	beq.n	8006e32 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e30:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d16a      	bne.n	8006f10 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006e3a:	e032      	b.n	8006ea2 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d115      	bne.n	8006e76 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f103 020c 	add.w	r2, r3, #12
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e56:	7812      	ldrb	r2, [r2, #0]
 8006e58:	b2d2      	uxtb	r2, r2
 8006e5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e60:	1c5a      	adds	r2, r3, #1
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e74:	e015      	b.n	8006ea2 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e76:	f7fe f957 	bl	8005128 <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	683a      	ldr	r2, [r7, #0]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d803      	bhi.n	8006e8e <HAL_SPI_Receive+0x166>
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e8c:	d102      	bne.n	8006e94 <HAL_SPI_Receive+0x16c>
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d106      	bne.n	8006ea2 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006ea0:	e051      	b.n	8006f46 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1c7      	bne.n	8006e3c <HAL_SPI_Receive+0x114>
 8006eac:	e035      	b.n	8006f1a <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d113      	bne.n	8006ee4 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68da      	ldr	r2, [r3, #12]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec6:	b292      	uxth	r2, r2
 8006ec8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ece:	1c9a      	adds	r2, r3, #2
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	3b01      	subs	r3, #1
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ee2:	e015      	b.n	8006f10 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ee4:	f7fe f920 	bl	8005128 <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d803      	bhi.n	8006efc <HAL_SPI_Receive+0x1d4>
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efa:	d102      	bne.n	8006f02 <HAL_SPI_Receive+0x1da>
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d106      	bne.n	8006f10 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006f0e:	e01a      	b.n	8006f46 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1c9      	bne.n	8006eae <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f000 fa60 	bl	80073e4 <SPI_EndRxTransaction>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2220      	movs	r2, #32
 8006f2e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d002      	beq.n	8006f3e <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	75fb      	strb	r3, [r7, #23]
 8006f3c:	e003      	b.n	8006f46 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3718      	adds	r7, #24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b08c      	sub	sp, #48	; 0x30
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
 8006f64:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006f66:	2301      	movs	r3, #1
 8006f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d101      	bne.n	8006f7e <HAL_SPI_TransmitReceive+0x26>
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	e198      	b.n	80072b0 <HAL_SPI_TransmitReceive+0x358>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f86:	f7fe f8cf 	bl	8005128 <HAL_GetTick>
 8006f8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006f9c:	887b      	ldrh	r3, [r7, #2]
 8006f9e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006fa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d00f      	beq.n	8006fc8 <HAL_SPI_TransmitReceive+0x70>
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fae:	d107      	bne.n	8006fc0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d103      	bne.n	8006fc0 <HAL_SPI_TransmitReceive+0x68>
 8006fb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fbc:	2b04      	cmp	r3, #4
 8006fbe:	d003      	beq.n	8006fc8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006fc6:	e16d      	b.n	80072a4 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d005      	beq.n	8006fda <HAL_SPI_TransmitReceive+0x82>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <HAL_SPI_TransmitReceive+0x82>
 8006fd4:	887b      	ldrh	r3, [r7, #2]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d103      	bne.n	8006fe2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006fe0:	e160      	b.n	80072a4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b04      	cmp	r3, #4
 8006fec:	d003      	beq.n	8006ff6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2205      	movs	r2, #5
 8006ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	887a      	ldrh	r2, [r7, #2]
 8007006:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	887a      	ldrh	r2, [r7, #2]
 800700c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	887a      	ldrh	r2, [r7, #2]
 8007018:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	887a      	ldrh	r2, [r7, #2]
 800701e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007036:	2b40      	cmp	r3, #64	; 0x40
 8007038:	d007      	beq.n	800704a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007048:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007052:	d17c      	bne.n	800714e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <HAL_SPI_TransmitReceive+0x10a>
 800705c:	8b7b      	ldrh	r3, [r7, #26]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d16a      	bne.n	8007138 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007066:	881a      	ldrh	r2, [r3, #0]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007072:	1c9a      	adds	r2, r3, #2
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800707c:	b29b      	uxth	r3, r3
 800707e:	3b01      	subs	r3, #1
 8007080:	b29a      	uxth	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007086:	e057      	b.n	8007138 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f003 0302 	and.w	r3, r3, #2
 8007092:	2b02      	cmp	r3, #2
 8007094:	d11b      	bne.n	80070ce <HAL_SPI_TransmitReceive+0x176>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800709a:	b29b      	uxth	r3, r3
 800709c:	2b00      	cmp	r3, #0
 800709e:	d016      	beq.n	80070ce <HAL_SPI_TransmitReceive+0x176>
 80070a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d113      	bne.n	80070ce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070aa:	881a      	ldrh	r2, [r3, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b6:	1c9a      	adds	r2, r3, #2
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	3b01      	subs	r3, #1
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070ca:	2300      	movs	r3, #0
 80070cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d119      	bne.n	8007110 <HAL_SPI_TransmitReceive+0x1b8>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d014      	beq.n	8007110 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68da      	ldr	r2, [r3, #12]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f0:	b292      	uxth	r2, r2
 80070f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f8:	1c9a      	adds	r2, r3, #2
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007102:	b29b      	uxth	r3, r3
 8007104:	3b01      	subs	r3, #1
 8007106:	b29a      	uxth	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800710c:	2301      	movs	r3, #1
 800710e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007110:	f7fe f80a 	bl	8005128 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800711c:	429a      	cmp	r2, r3
 800711e:	d80b      	bhi.n	8007138 <HAL_SPI_TransmitReceive+0x1e0>
 8007120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007126:	d007      	beq.n	8007138 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8007136:	e0b5      	b.n	80072a4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800713c:	b29b      	uxth	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1a2      	bne.n	8007088 <HAL_SPI_TransmitReceive+0x130>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007146:	b29b      	uxth	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	d19d      	bne.n	8007088 <HAL_SPI_TransmitReceive+0x130>
 800714c:	e080      	b.n	8007250 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d002      	beq.n	800715c <HAL_SPI_TransmitReceive+0x204>
 8007156:	8b7b      	ldrh	r3, [r7, #26]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d16f      	bne.n	800723c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	330c      	adds	r3, #12
 8007166:	7812      	ldrb	r2, [r2, #0]
 8007168:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716e:	1c5a      	adds	r2, r3, #1
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007178:	b29b      	uxth	r3, r3
 800717a:	3b01      	subs	r3, #1
 800717c:	b29a      	uxth	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007182:	e05b      	b.n	800723c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	2b02      	cmp	r3, #2
 8007190:	d11c      	bne.n	80071cc <HAL_SPI_TransmitReceive+0x274>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007196:	b29b      	uxth	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	d017      	beq.n	80071cc <HAL_SPI_TransmitReceive+0x274>
 800719c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d114      	bne.n	80071cc <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	330c      	adds	r3, #12
 80071ac:	7812      	ldrb	r2, [r2, #0]
 80071ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b4:	1c5a      	adds	r2, r3, #1
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071be:	b29b      	uxth	r3, r3
 80071c0:	3b01      	subs	r3, #1
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071c8:	2300      	movs	r3, #0
 80071ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d119      	bne.n	800720e <HAL_SPI_TransmitReceive+0x2b6>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071de:	b29b      	uxth	r3, r3
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d014      	beq.n	800720e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68da      	ldr	r2, [r3, #12]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ee:	b2d2      	uxtb	r2, r2
 80071f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007200:	b29b      	uxth	r3, r3
 8007202:	3b01      	subs	r3, #1
 8007204:	b29a      	uxth	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800720a:	2301      	movs	r3, #1
 800720c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800720e:	f7fd ff8b 	bl	8005128 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800721a:	429a      	cmp	r2, r3
 800721c:	d803      	bhi.n	8007226 <HAL_SPI_TransmitReceive+0x2ce>
 800721e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007224:	d102      	bne.n	800722c <HAL_SPI_TransmitReceive+0x2d4>
 8007226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007228:	2b00      	cmp	r3, #0
 800722a:	d107      	bne.n	800723c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800723a:	e033      	b.n	80072a4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007240:	b29b      	uxth	r3, r3
 8007242:	2b00      	cmp	r3, #0
 8007244:	d19e      	bne.n	8007184 <HAL_SPI_TransmitReceive+0x22c>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800724a:	b29b      	uxth	r3, r3
 800724c:	2b00      	cmp	r3, #0
 800724e:	d199      	bne.n	8007184 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007252:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f000 f92b 	bl	80074b0 <SPI_EndRxTxTransaction>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d006      	beq.n	800726e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2220      	movs	r2, #32
 800726a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800726c:	e01a      	b.n	80072a4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10a      	bne.n	800728c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007276:	2300      	movs	r3, #0
 8007278:	617b      	str	r3, [r7, #20]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	617b      	str	r3, [r7, #20]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	617b      	str	r3, [r7, #20]
 800728a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800729a:	e003      	b.n	80072a4 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80072ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3730      	adds	r7, #48	; 0x30
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072c6:	b2db      	uxtb	r3, r3
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b088      	sub	sp, #32
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	603b      	str	r3, [r7, #0]
 80072e0:	4613      	mov	r3, r2
 80072e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80072e4:	f7fd ff20 	bl	8005128 <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ec:	1a9b      	subs	r3, r3, r2
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	4413      	add	r3, r2
 80072f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80072f4:	f7fd ff18 	bl	8005128 <HAL_GetTick>
 80072f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80072fa:	4b39      	ldr	r3, [pc, #228]	; (80073e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	015b      	lsls	r3, r3, #5
 8007300:	0d1b      	lsrs	r3, r3, #20
 8007302:	69fa      	ldr	r2, [r7, #28]
 8007304:	fb02 f303 	mul.w	r3, r2, r3
 8007308:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800730a:	e054      	b.n	80073b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007312:	d050      	beq.n	80073b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007314:	f7fd ff08 	bl	8005128 <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	69fa      	ldr	r2, [r7, #28]
 8007320:	429a      	cmp	r2, r3
 8007322:	d902      	bls.n	800732a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d13d      	bne.n	80073a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007338:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007342:	d111      	bne.n	8007368 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800734c:	d004      	beq.n	8007358 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007356:	d107      	bne.n	8007368 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007366:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007370:	d10f      	bne.n	8007392 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007390:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e017      	b.n	80073d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d101      	bne.n	80073b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	3b01      	subs	r3, #1
 80073b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	4013      	ands	r3, r2
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	bf0c      	ite	eq
 80073c6:	2301      	moveq	r3, #1
 80073c8:	2300      	movne	r3, #0
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	461a      	mov	r2, r3
 80073ce:	79fb      	ldrb	r3, [r7, #7]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d19b      	bne.n	800730c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3720      	adds	r7, #32
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	2000003c 	.word	0x2000003c

080073e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af02      	add	r7, sp, #8
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073f8:	d111      	bne.n	800741e <SPI_EndRxTransaction+0x3a>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007402:	d004      	beq.n	800740e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800740c:	d107      	bne.n	800741e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800741c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007426:	d12a      	bne.n	800747e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007430:	d012      	beq.n	8007458 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	9300      	str	r3, [sp, #0]
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	2200      	movs	r2, #0
 800743a:	2180      	movs	r1, #128	; 0x80
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f7ff ff49 	bl	80072d4 <SPI_WaitFlagStateUntilTimeout>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d02d      	beq.n	80074a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744c:	f043 0220 	orr.w	r2, r3, #32
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e026      	b.n	80074a6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	9300      	str	r3, [sp, #0]
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	2200      	movs	r2, #0
 8007460:	2101      	movs	r1, #1
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f7ff ff36 	bl	80072d4 <SPI_WaitFlagStateUntilTimeout>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d01a      	beq.n	80074a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007472:	f043 0220 	orr.w	r2, r3, #32
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e013      	b.n	80074a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2200      	movs	r2, #0
 8007486:	2101      	movs	r1, #1
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f7ff ff23 	bl	80072d4 <SPI_WaitFlagStateUntilTimeout>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d007      	beq.n	80074a4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007498:	f043 0220 	orr.w	r2, r3, #32
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e000      	b.n	80074a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
	...

080074b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b088      	sub	sp, #32
 80074b4:	af02      	add	r7, sp, #8
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	2201      	movs	r2, #1
 80074c4:	2102      	movs	r1, #2
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f7ff ff04 	bl	80072d4 <SPI_WaitFlagStateUntilTimeout>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d007      	beq.n	80074e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d6:	f043 0220 	orr.w	r2, r3, #32
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e032      	b.n	8007548 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80074e2:	4b1b      	ldr	r3, [pc, #108]	; (8007550 <SPI_EndRxTxTransaction+0xa0>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a1b      	ldr	r2, [pc, #108]	; (8007554 <SPI_EndRxTxTransaction+0xa4>)
 80074e8:	fba2 2303 	umull	r2, r3, r2, r3
 80074ec:	0d5b      	lsrs	r3, r3, #21
 80074ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80074f2:	fb02 f303 	mul.w	r3, r2, r3
 80074f6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007500:	d112      	bne.n	8007528 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	2200      	movs	r2, #0
 800750a:	2180      	movs	r1, #128	; 0x80
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f7ff fee1 	bl	80072d4 <SPI_WaitFlagStateUntilTimeout>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d016      	beq.n	8007546 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800751c:	f043 0220 	orr.w	r2, r3, #32
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	e00f      	b.n	8007548 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00a      	beq.n	8007544 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	3b01      	subs	r3, #1
 8007532:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800753e:	2b80      	cmp	r3, #128	; 0x80
 8007540:	d0f2      	beq.n	8007528 <SPI_EndRxTxTransaction+0x78>
 8007542:	e000      	b.n	8007546 <SPI_EndRxTxTransaction+0x96>
        break;
 8007544:	bf00      	nop
  }

  return HAL_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3718      	adds	r7, #24
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	2000003c 	.word	0x2000003c
 8007554:	165e9f81 	.word	0x165e9f81

08007558 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e041      	b.n	80075ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	d106      	bne.n	8007584 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7fb fc3e 	bl	8002e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2202      	movs	r2, #2
 8007588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	3304      	adds	r3, #4
 8007594:	4619      	mov	r1, r3
 8007596:	4610      	mov	r0, r2
 8007598:	f000 f9b6 	bl	8007908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
	...

080075f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007606:	b2db      	uxtb	r3, r3
 8007608:	2b01      	cmp	r3, #1
 800760a:	d001      	beq.n	8007610 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e04e      	b.n	80076ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2202      	movs	r2, #2
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68da      	ldr	r2, [r3, #12]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0201 	orr.w	r2, r2, #1
 8007626:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a23      	ldr	r2, [pc, #140]	; (80076bc <HAL_TIM_Base_Start_IT+0xc4>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d022      	beq.n	8007678 <HAL_TIM_Base_Start_IT+0x80>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800763a:	d01d      	beq.n	8007678 <HAL_TIM_Base_Start_IT+0x80>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a1f      	ldr	r2, [pc, #124]	; (80076c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d018      	beq.n	8007678 <HAL_TIM_Base_Start_IT+0x80>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a1e      	ldr	r2, [pc, #120]	; (80076c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d013      	beq.n	8007678 <HAL_TIM_Base_Start_IT+0x80>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a1c      	ldr	r2, [pc, #112]	; (80076c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d00e      	beq.n	8007678 <HAL_TIM_Base_Start_IT+0x80>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a1b      	ldr	r2, [pc, #108]	; (80076cc <HAL_TIM_Base_Start_IT+0xd4>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d009      	beq.n	8007678 <HAL_TIM_Base_Start_IT+0x80>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a19      	ldr	r2, [pc, #100]	; (80076d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d004      	beq.n	8007678 <HAL_TIM_Base_Start_IT+0x80>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a18      	ldr	r2, [pc, #96]	; (80076d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d111      	bne.n	800769c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f003 0307 	and.w	r3, r3, #7
 8007682:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b06      	cmp	r3, #6
 8007688:	d010      	beq.n	80076ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f042 0201 	orr.w	r2, r2, #1
 8007698:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800769a:	e007      	b.n	80076ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f042 0201 	orr.w	r2, r2, #1
 80076aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	40010000 	.word	0x40010000
 80076c0:	40000400 	.word	0x40000400
 80076c4:	40000800 	.word	0x40000800
 80076c8:	40000c00 	.word	0x40000c00
 80076cc:	40010400 	.word	0x40010400
 80076d0:	40014000 	.word	0x40014000
 80076d4:	40001800 	.word	0x40001800

080076d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d020      	beq.n	800773c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f003 0302 	and.w	r3, r3, #2
 8007700:	2b00      	cmp	r3, #0
 8007702:	d01b      	beq.n	800773c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f06f 0202 	mvn.w	r2, #2
 800770c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	f003 0303 	and.w	r3, r3, #3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d003      	beq.n	800772a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f8d2 	bl	80078cc <HAL_TIM_IC_CaptureCallback>
 8007728:	e005      	b.n	8007736 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f8c4 	bl	80078b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f8d5 	bl	80078e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	f003 0304 	and.w	r3, r3, #4
 8007742:	2b00      	cmp	r3, #0
 8007744:	d020      	beq.n	8007788 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f003 0304 	and.w	r3, r3, #4
 800774c:	2b00      	cmp	r3, #0
 800774e:	d01b      	beq.n	8007788 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f06f 0204 	mvn.w	r2, #4
 8007758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2202      	movs	r2, #2
 800775e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f8ac 	bl	80078cc <HAL_TIM_IC_CaptureCallback>
 8007774:	e005      	b.n	8007782 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f89e 	bl	80078b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 f8af 	bl	80078e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	f003 0308 	and.w	r3, r3, #8
 800778e:	2b00      	cmp	r3, #0
 8007790:	d020      	beq.n	80077d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f003 0308 	and.w	r3, r3, #8
 8007798:	2b00      	cmp	r3, #0
 800779a:	d01b      	beq.n	80077d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f06f 0208 	mvn.w	r2, #8
 80077a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2204      	movs	r2, #4
 80077aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	69db      	ldr	r3, [r3, #28]
 80077b2:	f003 0303 	and.w	r3, r3, #3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d003      	beq.n	80077c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f886 	bl	80078cc <HAL_TIM_IC_CaptureCallback>
 80077c0:	e005      	b.n	80077ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f878 	bl	80078b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f889 	bl	80078e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	f003 0310 	and.w	r3, r3, #16
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d020      	beq.n	8007820 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f003 0310 	and.w	r3, r3, #16
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d01b      	beq.n	8007820 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f06f 0210 	mvn.w	r2, #16
 80077f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2208      	movs	r2, #8
 80077f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	69db      	ldr	r3, [r3, #28]
 80077fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007802:	2b00      	cmp	r3, #0
 8007804:	d003      	beq.n	800780e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f860 	bl	80078cc <HAL_TIM_IC_CaptureCallback>
 800780c:	e005      	b.n	800781a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f852 	bl	80078b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f863 	bl	80078e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00c      	beq.n	8007844 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f003 0301 	and.w	r3, r3, #1
 8007830:	2b00      	cmp	r3, #0
 8007832:	d007      	beq.n	8007844 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f06f 0201 	mvn.w	r2, #1
 800783c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7fb f972 	bl	8002b28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00c      	beq.n	8007868 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007854:	2b00      	cmp	r3, #0
 8007856:	d007      	beq.n	8007868 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f982 	bl	8007b6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00c      	beq.n	800788c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007878:	2b00      	cmp	r3, #0
 800787a:	d007      	beq.n	800788c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f834 	bl	80078f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	f003 0320 	and.w	r3, r3, #32
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00c      	beq.n	80078b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f003 0320 	and.w	r3, r3, #32
 800789c:	2b00      	cmp	r3, #0
 800789e:	d007      	beq.n	80078b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f06f 0220 	mvn.w	r2, #32
 80078a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f954 	bl	8007b58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078b0:	bf00      	nop
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a46      	ldr	r2, [pc, #280]	; (8007a34 <TIM_Base_SetConfig+0x12c>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d013      	beq.n	8007948 <TIM_Base_SetConfig+0x40>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007926:	d00f      	beq.n	8007948 <TIM_Base_SetConfig+0x40>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a43      	ldr	r2, [pc, #268]	; (8007a38 <TIM_Base_SetConfig+0x130>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d00b      	beq.n	8007948 <TIM_Base_SetConfig+0x40>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a42      	ldr	r2, [pc, #264]	; (8007a3c <TIM_Base_SetConfig+0x134>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d007      	beq.n	8007948 <TIM_Base_SetConfig+0x40>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a41      	ldr	r2, [pc, #260]	; (8007a40 <TIM_Base_SetConfig+0x138>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d003      	beq.n	8007948 <TIM_Base_SetConfig+0x40>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a40      	ldr	r2, [pc, #256]	; (8007a44 <TIM_Base_SetConfig+0x13c>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d108      	bne.n	800795a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800794e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	4313      	orrs	r3, r2
 8007958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a35      	ldr	r2, [pc, #212]	; (8007a34 <TIM_Base_SetConfig+0x12c>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d02b      	beq.n	80079ba <TIM_Base_SetConfig+0xb2>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007968:	d027      	beq.n	80079ba <TIM_Base_SetConfig+0xb2>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a32      	ldr	r2, [pc, #200]	; (8007a38 <TIM_Base_SetConfig+0x130>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d023      	beq.n	80079ba <TIM_Base_SetConfig+0xb2>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a31      	ldr	r2, [pc, #196]	; (8007a3c <TIM_Base_SetConfig+0x134>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d01f      	beq.n	80079ba <TIM_Base_SetConfig+0xb2>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a30      	ldr	r2, [pc, #192]	; (8007a40 <TIM_Base_SetConfig+0x138>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d01b      	beq.n	80079ba <TIM_Base_SetConfig+0xb2>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a2f      	ldr	r2, [pc, #188]	; (8007a44 <TIM_Base_SetConfig+0x13c>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d017      	beq.n	80079ba <TIM_Base_SetConfig+0xb2>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a2e      	ldr	r2, [pc, #184]	; (8007a48 <TIM_Base_SetConfig+0x140>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d013      	beq.n	80079ba <TIM_Base_SetConfig+0xb2>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a2d      	ldr	r2, [pc, #180]	; (8007a4c <TIM_Base_SetConfig+0x144>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d00f      	beq.n	80079ba <TIM_Base_SetConfig+0xb2>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a2c      	ldr	r2, [pc, #176]	; (8007a50 <TIM_Base_SetConfig+0x148>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d00b      	beq.n	80079ba <TIM_Base_SetConfig+0xb2>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a2b      	ldr	r2, [pc, #172]	; (8007a54 <TIM_Base_SetConfig+0x14c>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d007      	beq.n	80079ba <TIM_Base_SetConfig+0xb2>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a2a      	ldr	r2, [pc, #168]	; (8007a58 <TIM_Base_SetConfig+0x150>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d003      	beq.n	80079ba <TIM_Base_SetConfig+0xb2>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a29      	ldr	r2, [pc, #164]	; (8007a5c <TIM_Base_SetConfig+0x154>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d108      	bne.n	80079cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	689a      	ldr	r2, [r3, #8]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4a10      	ldr	r2, [pc, #64]	; (8007a34 <TIM_Base_SetConfig+0x12c>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d003      	beq.n	8007a00 <TIM_Base_SetConfig+0xf8>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a12      	ldr	r2, [pc, #72]	; (8007a44 <TIM_Base_SetConfig+0x13c>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d103      	bne.n	8007a08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	691a      	ldr	r2, [r3, #16]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	f003 0301 	and.w	r3, r3, #1
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d105      	bne.n	8007a26 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	f023 0201 	bic.w	r2, r3, #1
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	611a      	str	r2, [r3, #16]
  }
}
 8007a26:	bf00      	nop
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	40010000 	.word	0x40010000
 8007a38:	40000400 	.word	0x40000400
 8007a3c:	40000800 	.word	0x40000800
 8007a40:	40000c00 	.word	0x40000c00
 8007a44:	40010400 	.word	0x40010400
 8007a48:	40014000 	.word	0x40014000
 8007a4c:	40014400 	.word	0x40014400
 8007a50:	40014800 	.word	0x40014800
 8007a54:	40001800 	.word	0x40001800
 8007a58:	40001c00 	.word	0x40001c00
 8007a5c:	40002000 	.word	0x40002000

08007a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d101      	bne.n	8007a78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a74:	2302      	movs	r3, #2
 8007a76:	e05a      	b.n	8007b2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2202      	movs	r2, #2
 8007a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a21      	ldr	r2, [pc, #132]	; (8007b3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d022      	beq.n	8007b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ac4:	d01d      	beq.n	8007b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a1d      	ldr	r2, [pc, #116]	; (8007b40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d018      	beq.n	8007b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a1b      	ldr	r2, [pc, #108]	; (8007b44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d013      	beq.n	8007b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a1a      	ldr	r2, [pc, #104]	; (8007b48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d00e      	beq.n	8007b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a18      	ldr	r2, [pc, #96]	; (8007b4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d009      	beq.n	8007b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a17      	ldr	r2, [pc, #92]	; (8007b50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d004      	beq.n	8007b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a15      	ldr	r2, [pc, #84]	; (8007b54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d10c      	bne.n	8007b1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	40010000 	.word	0x40010000
 8007b40:	40000400 	.word	0x40000400
 8007b44:	40000800 	.word	0x40000800
 8007b48:	40000c00 	.word	0x40000c00
 8007b4c:	40010400 	.word	0x40010400
 8007b50:	40014000 	.word	0x40014000
 8007b54:	40001800 	.word	0x40001800

08007b58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <__itoa>:
 8007b80:	1e93      	subs	r3, r2, #2
 8007b82:	2b22      	cmp	r3, #34	; 0x22
 8007b84:	b510      	push	{r4, lr}
 8007b86:	460c      	mov	r4, r1
 8007b88:	d904      	bls.n	8007b94 <__itoa+0x14>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	700b      	strb	r3, [r1, #0]
 8007b8e:	461c      	mov	r4, r3
 8007b90:	4620      	mov	r0, r4
 8007b92:	bd10      	pop	{r4, pc}
 8007b94:	2a0a      	cmp	r2, #10
 8007b96:	d109      	bne.n	8007bac <__itoa+0x2c>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	da07      	bge.n	8007bac <__itoa+0x2c>
 8007b9c:	232d      	movs	r3, #45	; 0x2d
 8007b9e:	700b      	strb	r3, [r1, #0]
 8007ba0:	4240      	negs	r0, r0
 8007ba2:	2101      	movs	r1, #1
 8007ba4:	4421      	add	r1, r4
 8007ba6:	f000 f8b9 	bl	8007d1c <__utoa>
 8007baa:	e7f1      	b.n	8007b90 <__itoa+0x10>
 8007bac:	2100      	movs	r1, #0
 8007bae:	e7f9      	b.n	8007ba4 <__itoa+0x24>

08007bb0 <itoa>:
 8007bb0:	f7ff bfe6 	b.w	8007b80 <__itoa>

08007bb4 <malloc>:
 8007bb4:	4b02      	ldr	r3, [pc, #8]	; (8007bc0 <malloc+0xc>)
 8007bb6:	4601      	mov	r1, r0
 8007bb8:	6818      	ldr	r0, [r3, #0]
 8007bba:	f000 b823 	b.w	8007c04 <_malloc_r>
 8007bbe:	bf00      	nop
 8007bc0:	200000c0 	.word	0x200000c0

08007bc4 <sbrk_aligned>:
 8007bc4:	b570      	push	{r4, r5, r6, lr}
 8007bc6:	4e0e      	ldr	r6, [pc, #56]	; (8007c00 <sbrk_aligned+0x3c>)
 8007bc8:	460c      	mov	r4, r1
 8007bca:	6831      	ldr	r1, [r6, #0]
 8007bcc:	4605      	mov	r5, r0
 8007bce:	b911      	cbnz	r1, 8007bd6 <sbrk_aligned+0x12>
 8007bd0:	f000 f8ee 	bl	8007db0 <_sbrk_r>
 8007bd4:	6030      	str	r0, [r6, #0]
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	4628      	mov	r0, r5
 8007bda:	f000 f8e9 	bl	8007db0 <_sbrk_r>
 8007bde:	1c43      	adds	r3, r0, #1
 8007be0:	d00a      	beq.n	8007bf8 <sbrk_aligned+0x34>
 8007be2:	1cc4      	adds	r4, r0, #3
 8007be4:	f024 0403 	bic.w	r4, r4, #3
 8007be8:	42a0      	cmp	r0, r4
 8007bea:	d007      	beq.n	8007bfc <sbrk_aligned+0x38>
 8007bec:	1a21      	subs	r1, r4, r0
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f000 f8de 	bl	8007db0 <_sbrk_r>
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	d101      	bne.n	8007bfc <sbrk_aligned+0x38>
 8007bf8:	f04f 34ff 	mov.w	r4, #4294967295
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	bd70      	pop	{r4, r5, r6, pc}
 8007c00:	200009f8 	.word	0x200009f8

08007c04 <_malloc_r>:
 8007c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c08:	1ccd      	adds	r5, r1, #3
 8007c0a:	f025 0503 	bic.w	r5, r5, #3
 8007c0e:	3508      	adds	r5, #8
 8007c10:	2d0c      	cmp	r5, #12
 8007c12:	bf38      	it	cc
 8007c14:	250c      	movcc	r5, #12
 8007c16:	2d00      	cmp	r5, #0
 8007c18:	4607      	mov	r7, r0
 8007c1a:	db01      	blt.n	8007c20 <_malloc_r+0x1c>
 8007c1c:	42a9      	cmp	r1, r5
 8007c1e:	d905      	bls.n	8007c2c <_malloc_r+0x28>
 8007c20:	230c      	movs	r3, #12
 8007c22:	603b      	str	r3, [r7, #0]
 8007c24:	2600      	movs	r6, #0
 8007c26:	4630      	mov	r0, r6
 8007c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007d00 <_malloc_r+0xfc>
 8007c30:	f000 f868 	bl	8007d04 <__malloc_lock>
 8007c34:	f8d8 3000 	ldr.w	r3, [r8]
 8007c38:	461c      	mov	r4, r3
 8007c3a:	bb5c      	cbnz	r4, 8007c94 <_malloc_r+0x90>
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	4638      	mov	r0, r7
 8007c40:	f7ff ffc0 	bl	8007bc4 <sbrk_aligned>
 8007c44:	1c43      	adds	r3, r0, #1
 8007c46:	4604      	mov	r4, r0
 8007c48:	d155      	bne.n	8007cf6 <_malloc_r+0xf2>
 8007c4a:	f8d8 4000 	ldr.w	r4, [r8]
 8007c4e:	4626      	mov	r6, r4
 8007c50:	2e00      	cmp	r6, #0
 8007c52:	d145      	bne.n	8007ce0 <_malloc_r+0xdc>
 8007c54:	2c00      	cmp	r4, #0
 8007c56:	d048      	beq.n	8007cea <_malloc_r+0xe6>
 8007c58:	6823      	ldr	r3, [r4, #0]
 8007c5a:	4631      	mov	r1, r6
 8007c5c:	4638      	mov	r0, r7
 8007c5e:	eb04 0903 	add.w	r9, r4, r3
 8007c62:	f000 f8a5 	bl	8007db0 <_sbrk_r>
 8007c66:	4581      	cmp	r9, r0
 8007c68:	d13f      	bne.n	8007cea <_malloc_r+0xe6>
 8007c6a:	6821      	ldr	r1, [r4, #0]
 8007c6c:	1a6d      	subs	r5, r5, r1
 8007c6e:	4629      	mov	r1, r5
 8007c70:	4638      	mov	r0, r7
 8007c72:	f7ff ffa7 	bl	8007bc4 <sbrk_aligned>
 8007c76:	3001      	adds	r0, #1
 8007c78:	d037      	beq.n	8007cea <_malloc_r+0xe6>
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	442b      	add	r3, r5
 8007c7e:	6023      	str	r3, [r4, #0]
 8007c80:	f8d8 3000 	ldr.w	r3, [r8]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d038      	beq.n	8007cfa <_malloc_r+0xf6>
 8007c88:	685a      	ldr	r2, [r3, #4]
 8007c8a:	42a2      	cmp	r2, r4
 8007c8c:	d12b      	bne.n	8007ce6 <_malloc_r+0xe2>
 8007c8e:	2200      	movs	r2, #0
 8007c90:	605a      	str	r2, [r3, #4]
 8007c92:	e00f      	b.n	8007cb4 <_malloc_r+0xb0>
 8007c94:	6822      	ldr	r2, [r4, #0]
 8007c96:	1b52      	subs	r2, r2, r5
 8007c98:	d41f      	bmi.n	8007cda <_malloc_r+0xd6>
 8007c9a:	2a0b      	cmp	r2, #11
 8007c9c:	d917      	bls.n	8007cce <_malloc_r+0xca>
 8007c9e:	1961      	adds	r1, r4, r5
 8007ca0:	42a3      	cmp	r3, r4
 8007ca2:	6025      	str	r5, [r4, #0]
 8007ca4:	bf18      	it	ne
 8007ca6:	6059      	strne	r1, [r3, #4]
 8007ca8:	6863      	ldr	r3, [r4, #4]
 8007caa:	bf08      	it	eq
 8007cac:	f8c8 1000 	streq.w	r1, [r8]
 8007cb0:	5162      	str	r2, [r4, r5]
 8007cb2:	604b      	str	r3, [r1, #4]
 8007cb4:	4638      	mov	r0, r7
 8007cb6:	f104 060b 	add.w	r6, r4, #11
 8007cba:	f000 f829 	bl	8007d10 <__malloc_unlock>
 8007cbe:	f026 0607 	bic.w	r6, r6, #7
 8007cc2:	1d23      	adds	r3, r4, #4
 8007cc4:	1af2      	subs	r2, r6, r3
 8007cc6:	d0ae      	beq.n	8007c26 <_malloc_r+0x22>
 8007cc8:	1b9b      	subs	r3, r3, r6
 8007cca:	50a3      	str	r3, [r4, r2]
 8007ccc:	e7ab      	b.n	8007c26 <_malloc_r+0x22>
 8007cce:	42a3      	cmp	r3, r4
 8007cd0:	6862      	ldr	r2, [r4, #4]
 8007cd2:	d1dd      	bne.n	8007c90 <_malloc_r+0x8c>
 8007cd4:	f8c8 2000 	str.w	r2, [r8]
 8007cd8:	e7ec      	b.n	8007cb4 <_malloc_r+0xb0>
 8007cda:	4623      	mov	r3, r4
 8007cdc:	6864      	ldr	r4, [r4, #4]
 8007cde:	e7ac      	b.n	8007c3a <_malloc_r+0x36>
 8007ce0:	4634      	mov	r4, r6
 8007ce2:	6876      	ldr	r6, [r6, #4]
 8007ce4:	e7b4      	b.n	8007c50 <_malloc_r+0x4c>
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	e7cc      	b.n	8007c84 <_malloc_r+0x80>
 8007cea:	230c      	movs	r3, #12
 8007cec:	603b      	str	r3, [r7, #0]
 8007cee:	4638      	mov	r0, r7
 8007cf0:	f000 f80e 	bl	8007d10 <__malloc_unlock>
 8007cf4:	e797      	b.n	8007c26 <_malloc_r+0x22>
 8007cf6:	6025      	str	r5, [r4, #0]
 8007cf8:	e7dc      	b.n	8007cb4 <_malloc_r+0xb0>
 8007cfa:	605b      	str	r3, [r3, #4]
 8007cfc:	deff      	udf	#255	; 0xff
 8007cfe:	bf00      	nop
 8007d00:	200009f4 	.word	0x200009f4

08007d04 <__malloc_lock>:
 8007d04:	4801      	ldr	r0, [pc, #4]	; (8007d0c <__malloc_lock+0x8>)
 8007d06:	f000 b88d 	b.w	8007e24 <__retarget_lock_acquire_recursive>
 8007d0a:	bf00      	nop
 8007d0c:	20000b38 	.word	0x20000b38

08007d10 <__malloc_unlock>:
 8007d10:	4801      	ldr	r0, [pc, #4]	; (8007d18 <__malloc_unlock+0x8>)
 8007d12:	f000 b888 	b.w	8007e26 <__retarget_lock_release_recursive>
 8007d16:	bf00      	nop
 8007d18:	20000b38 	.word	0x20000b38

08007d1c <__utoa>:
 8007d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d1e:	4c1f      	ldr	r4, [pc, #124]	; (8007d9c <__utoa+0x80>)
 8007d20:	b08b      	sub	sp, #44	; 0x2c
 8007d22:	4605      	mov	r5, r0
 8007d24:	460b      	mov	r3, r1
 8007d26:	466e      	mov	r6, sp
 8007d28:	f104 0c20 	add.w	ip, r4, #32
 8007d2c:	6820      	ldr	r0, [r4, #0]
 8007d2e:	6861      	ldr	r1, [r4, #4]
 8007d30:	4637      	mov	r7, r6
 8007d32:	c703      	stmia	r7!, {r0, r1}
 8007d34:	3408      	adds	r4, #8
 8007d36:	4564      	cmp	r4, ip
 8007d38:	463e      	mov	r6, r7
 8007d3a:	d1f7      	bne.n	8007d2c <__utoa+0x10>
 8007d3c:	7921      	ldrb	r1, [r4, #4]
 8007d3e:	7139      	strb	r1, [r7, #4]
 8007d40:	1e91      	subs	r1, r2, #2
 8007d42:	6820      	ldr	r0, [r4, #0]
 8007d44:	6038      	str	r0, [r7, #0]
 8007d46:	2922      	cmp	r1, #34	; 0x22
 8007d48:	f04f 0100 	mov.w	r1, #0
 8007d4c:	d904      	bls.n	8007d58 <__utoa+0x3c>
 8007d4e:	7019      	strb	r1, [r3, #0]
 8007d50:	460b      	mov	r3, r1
 8007d52:	4618      	mov	r0, r3
 8007d54:	b00b      	add	sp, #44	; 0x2c
 8007d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d58:	1e58      	subs	r0, r3, #1
 8007d5a:	4684      	mov	ip, r0
 8007d5c:	fbb5 f7f2 	udiv	r7, r5, r2
 8007d60:	fb02 5617 	mls	r6, r2, r7, r5
 8007d64:	3628      	adds	r6, #40	; 0x28
 8007d66:	446e      	add	r6, sp
 8007d68:	460c      	mov	r4, r1
 8007d6a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007d6e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007d72:	462e      	mov	r6, r5
 8007d74:	42b2      	cmp	r2, r6
 8007d76:	f101 0101 	add.w	r1, r1, #1
 8007d7a:	463d      	mov	r5, r7
 8007d7c:	d9ee      	bls.n	8007d5c <__utoa+0x40>
 8007d7e:	2200      	movs	r2, #0
 8007d80:	545a      	strb	r2, [r3, r1]
 8007d82:	1919      	adds	r1, r3, r4
 8007d84:	1aa5      	subs	r5, r4, r2
 8007d86:	42aa      	cmp	r2, r5
 8007d88:	dae3      	bge.n	8007d52 <__utoa+0x36>
 8007d8a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007d8e:	780e      	ldrb	r6, [r1, #0]
 8007d90:	7006      	strb	r6, [r0, #0]
 8007d92:	3201      	adds	r2, #1
 8007d94:	f801 5901 	strb.w	r5, [r1], #-1
 8007d98:	e7f4      	b.n	8007d84 <__utoa+0x68>
 8007d9a:	bf00      	nop
 8007d9c:	080095ec 	.word	0x080095ec

08007da0 <memset>:
 8007da0:	4402      	add	r2, r0
 8007da2:	4603      	mov	r3, r0
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d100      	bne.n	8007daa <memset+0xa>
 8007da8:	4770      	bx	lr
 8007daa:	f803 1b01 	strb.w	r1, [r3], #1
 8007dae:	e7f9      	b.n	8007da4 <memset+0x4>

08007db0 <_sbrk_r>:
 8007db0:	b538      	push	{r3, r4, r5, lr}
 8007db2:	4d06      	ldr	r5, [pc, #24]	; (8007dcc <_sbrk_r+0x1c>)
 8007db4:	2300      	movs	r3, #0
 8007db6:	4604      	mov	r4, r0
 8007db8:	4608      	mov	r0, r1
 8007dba:	602b      	str	r3, [r5, #0]
 8007dbc:	f7fb f87c 	bl	8002eb8 <_sbrk>
 8007dc0:	1c43      	adds	r3, r0, #1
 8007dc2:	d102      	bne.n	8007dca <_sbrk_r+0x1a>
 8007dc4:	682b      	ldr	r3, [r5, #0]
 8007dc6:	b103      	cbz	r3, 8007dca <_sbrk_r+0x1a>
 8007dc8:	6023      	str	r3, [r4, #0]
 8007dca:	bd38      	pop	{r3, r4, r5, pc}
 8007dcc:	20000b34 	.word	0x20000b34

08007dd0 <__errno>:
 8007dd0:	4b01      	ldr	r3, [pc, #4]	; (8007dd8 <__errno+0x8>)
 8007dd2:	6818      	ldr	r0, [r3, #0]
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop
 8007dd8:	200000c0 	.word	0x200000c0

08007ddc <__libc_init_array>:
 8007ddc:	b570      	push	{r4, r5, r6, lr}
 8007dde:	4d0d      	ldr	r5, [pc, #52]	; (8007e14 <__libc_init_array+0x38>)
 8007de0:	4c0d      	ldr	r4, [pc, #52]	; (8007e18 <__libc_init_array+0x3c>)
 8007de2:	1b64      	subs	r4, r4, r5
 8007de4:	10a4      	asrs	r4, r4, #2
 8007de6:	2600      	movs	r6, #0
 8007de8:	42a6      	cmp	r6, r4
 8007dea:	d109      	bne.n	8007e00 <__libc_init_array+0x24>
 8007dec:	4d0b      	ldr	r5, [pc, #44]	; (8007e1c <__libc_init_array+0x40>)
 8007dee:	4c0c      	ldr	r4, [pc, #48]	; (8007e20 <__libc_init_array+0x44>)
 8007df0:	f000 fffa 	bl	8008de8 <_init>
 8007df4:	1b64      	subs	r4, r4, r5
 8007df6:	10a4      	asrs	r4, r4, #2
 8007df8:	2600      	movs	r6, #0
 8007dfa:	42a6      	cmp	r6, r4
 8007dfc:	d105      	bne.n	8007e0a <__libc_init_array+0x2e>
 8007dfe:	bd70      	pop	{r4, r5, r6, pc}
 8007e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e04:	4798      	blx	r3
 8007e06:	3601      	adds	r6, #1
 8007e08:	e7ee      	b.n	8007de8 <__libc_init_array+0xc>
 8007e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e0e:	4798      	blx	r3
 8007e10:	3601      	adds	r6, #1
 8007e12:	e7f2      	b.n	8007dfa <__libc_init_array+0x1e>
 8007e14:	08009650 	.word	0x08009650
 8007e18:	08009650 	.word	0x08009650
 8007e1c:	08009650 	.word	0x08009650
 8007e20:	08009654 	.word	0x08009654

08007e24 <__retarget_lock_acquire_recursive>:
 8007e24:	4770      	bx	lr

08007e26 <__retarget_lock_release_recursive>:
 8007e26:	4770      	bx	lr

08007e28 <memcpy>:
 8007e28:	440a      	add	r2, r1
 8007e2a:	4291      	cmp	r1, r2
 8007e2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e30:	d100      	bne.n	8007e34 <memcpy+0xc>
 8007e32:	4770      	bx	lr
 8007e34:	b510      	push	{r4, lr}
 8007e36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e3e:	4291      	cmp	r1, r2
 8007e40:	d1f9      	bne.n	8007e36 <memcpy+0xe>
 8007e42:	bd10      	pop	{r4, pc}

08007e44 <pow>:
 8007e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e46:	ed2d 8b02 	vpush	{d8}
 8007e4a:	eeb0 8a40 	vmov.f32	s16, s0
 8007e4e:	eef0 8a60 	vmov.f32	s17, s1
 8007e52:	ec55 4b11 	vmov	r4, r5, d1
 8007e56:	f000 f90b 	bl	8008070 <__ieee754_pow>
 8007e5a:	4622      	mov	r2, r4
 8007e5c:	462b      	mov	r3, r5
 8007e5e:	4620      	mov	r0, r4
 8007e60:	4629      	mov	r1, r5
 8007e62:	ec57 6b10 	vmov	r6, r7, d0
 8007e66:	f7f8 fe05 	bl	8000a74 <__aeabi_dcmpun>
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	d13b      	bne.n	8007ee6 <pow+0xa2>
 8007e6e:	ec51 0b18 	vmov	r0, r1, d8
 8007e72:	2200      	movs	r2, #0
 8007e74:	2300      	movs	r3, #0
 8007e76:	f7f8 fdcb 	bl	8000a10 <__aeabi_dcmpeq>
 8007e7a:	b1b8      	cbz	r0, 8007eac <pow+0x68>
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2300      	movs	r3, #0
 8007e80:	4620      	mov	r0, r4
 8007e82:	4629      	mov	r1, r5
 8007e84:	f7f8 fdc4 	bl	8000a10 <__aeabi_dcmpeq>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	d146      	bne.n	8007f1a <pow+0xd6>
 8007e8c:	ec45 4b10 	vmov	d0, r4, r5
 8007e90:	f000 f848 	bl	8007f24 <finite>
 8007e94:	b338      	cbz	r0, 8007ee6 <pow+0xa2>
 8007e96:	2200      	movs	r2, #0
 8007e98:	2300      	movs	r3, #0
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	4629      	mov	r1, r5
 8007e9e:	f7f8 fdc1 	bl	8000a24 <__aeabi_dcmplt>
 8007ea2:	b300      	cbz	r0, 8007ee6 <pow+0xa2>
 8007ea4:	f7ff ff94 	bl	8007dd0 <__errno>
 8007ea8:	2322      	movs	r3, #34	; 0x22
 8007eaa:	e01b      	b.n	8007ee4 <pow+0xa0>
 8007eac:	ec47 6b10 	vmov	d0, r6, r7
 8007eb0:	f000 f838 	bl	8007f24 <finite>
 8007eb4:	b9e0      	cbnz	r0, 8007ef0 <pow+0xac>
 8007eb6:	eeb0 0a48 	vmov.f32	s0, s16
 8007eba:	eef0 0a68 	vmov.f32	s1, s17
 8007ebe:	f000 f831 	bl	8007f24 <finite>
 8007ec2:	b1a8      	cbz	r0, 8007ef0 <pow+0xac>
 8007ec4:	ec45 4b10 	vmov	d0, r4, r5
 8007ec8:	f000 f82c 	bl	8007f24 <finite>
 8007ecc:	b180      	cbz	r0, 8007ef0 <pow+0xac>
 8007ece:	4632      	mov	r2, r6
 8007ed0:	463b      	mov	r3, r7
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	4639      	mov	r1, r7
 8007ed6:	f7f8 fdcd 	bl	8000a74 <__aeabi_dcmpun>
 8007eda:	2800      	cmp	r0, #0
 8007edc:	d0e2      	beq.n	8007ea4 <pow+0x60>
 8007ede:	f7ff ff77 	bl	8007dd0 <__errno>
 8007ee2:	2321      	movs	r3, #33	; 0x21
 8007ee4:	6003      	str	r3, [r0, #0]
 8007ee6:	ecbd 8b02 	vpop	{d8}
 8007eea:	ec47 6b10 	vmov	d0, r6, r7
 8007eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	4639      	mov	r1, r7
 8007ef8:	f7f8 fd8a 	bl	8000a10 <__aeabi_dcmpeq>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	d0f2      	beq.n	8007ee6 <pow+0xa2>
 8007f00:	eeb0 0a48 	vmov.f32	s0, s16
 8007f04:	eef0 0a68 	vmov.f32	s1, s17
 8007f08:	f000 f80c 	bl	8007f24 <finite>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d0ea      	beq.n	8007ee6 <pow+0xa2>
 8007f10:	ec45 4b10 	vmov	d0, r4, r5
 8007f14:	f000 f806 	bl	8007f24 <finite>
 8007f18:	e7c3      	b.n	8007ea2 <pow+0x5e>
 8007f1a:	4f01      	ldr	r7, [pc, #4]	; (8007f20 <pow+0xdc>)
 8007f1c:	2600      	movs	r6, #0
 8007f1e:	e7e2      	b.n	8007ee6 <pow+0xa2>
 8007f20:	3ff00000 	.word	0x3ff00000

08007f24 <finite>:
 8007f24:	b082      	sub	sp, #8
 8007f26:	ed8d 0b00 	vstr	d0, [sp]
 8007f2a:	9801      	ldr	r0, [sp, #4]
 8007f2c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007f30:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007f34:	0fc0      	lsrs	r0, r0, #31
 8007f36:	b002      	add	sp, #8
 8007f38:	4770      	bx	lr

08007f3a <fmin>:
 8007f3a:	b508      	push	{r3, lr}
 8007f3c:	ed2d 8b04 	vpush	{d8-d9}
 8007f40:	eeb0 8a40 	vmov.f32	s16, s0
 8007f44:	eef0 8a60 	vmov.f32	s17, s1
 8007f48:	eeb0 9a41 	vmov.f32	s18, s2
 8007f4c:	eef0 9a61 	vmov.f32	s19, s3
 8007f50:	f000 f81a 	bl	8007f88 <__fpclassifyd>
 8007f54:	b168      	cbz	r0, 8007f72 <fmin+0x38>
 8007f56:	eeb0 0a49 	vmov.f32	s0, s18
 8007f5a:	eef0 0a69 	vmov.f32	s1, s19
 8007f5e:	f000 f813 	bl	8007f88 <__fpclassifyd>
 8007f62:	b150      	cbz	r0, 8007f7a <fmin+0x40>
 8007f64:	ec53 2b19 	vmov	r2, r3, d9
 8007f68:	ec51 0b18 	vmov	r0, r1, d8
 8007f6c:	f7f8 fd5a 	bl	8000a24 <__aeabi_dcmplt>
 8007f70:	b918      	cbnz	r0, 8007f7a <fmin+0x40>
 8007f72:	eeb0 8a49 	vmov.f32	s16, s18
 8007f76:	eef0 8a69 	vmov.f32	s17, s19
 8007f7a:	eeb0 0a48 	vmov.f32	s0, s16
 8007f7e:	eef0 0a68 	vmov.f32	s1, s17
 8007f82:	ecbd 8b04 	vpop	{d8-d9}
 8007f86:	bd08      	pop	{r3, pc}

08007f88 <__fpclassifyd>:
 8007f88:	ec51 0b10 	vmov	r0, r1, d0
 8007f8c:	b510      	push	{r4, lr}
 8007f8e:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8007f92:	460b      	mov	r3, r1
 8007f94:	d019      	beq.n	8007fca <__fpclassifyd+0x42>
 8007f96:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8007f9a:	490e      	ldr	r1, [pc, #56]	; (8007fd4 <__fpclassifyd+0x4c>)
 8007f9c:	428a      	cmp	r2, r1
 8007f9e:	d90e      	bls.n	8007fbe <__fpclassifyd+0x36>
 8007fa0:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8007fa4:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8007fa8:	428a      	cmp	r2, r1
 8007faa:	d908      	bls.n	8007fbe <__fpclassifyd+0x36>
 8007fac:	4a0a      	ldr	r2, [pc, #40]	; (8007fd8 <__fpclassifyd+0x50>)
 8007fae:	4213      	tst	r3, r2
 8007fb0:	d007      	beq.n	8007fc2 <__fpclassifyd+0x3a>
 8007fb2:	4294      	cmp	r4, r2
 8007fb4:	d107      	bne.n	8007fc6 <__fpclassifyd+0x3e>
 8007fb6:	fab0 f080 	clz	r0, r0
 8007fba:	0940      	lsrs	r0, r0, #5
 8007fbc:	bd10      	pop	{r4, pc}
 8007fbe:	2004      	movs	r0, #4
 8007fc0:	e7fc      	b.n	8007fbc <__fpclassifyd+0x34>
 8007fc2:	2003      	movs	r0, #3
 8007fc4:	e7fa      	b.n	8007fbc <__fpclassifyd+0x34>
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	e7f8      	b.n	8007fbc <__fpclassifyd+0x34>
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d1ee      	bne.n	8007fac <__fpclassifyd+0x24>
 8007fce:	2002      	movs	r0, #2
 8007fd0:	e7f4      	b.n	8007fbc <__fpclassifyd+0x34>
 8007fd2:	bf00      	nop
 8007fd4:	7fdfffff 	.word	0x7fdfffff
 8007fd8:	7ff00000 	.word	0x7ff00000

08007fdc <round>:
 8007fdc:	ec53 2b10 	vmov	r2, r3, d0
 8007fe0:	b570      	push	{r4, r5, r6, lr}
 8007fe2:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8007fe6:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8007fea:	2813      	cmp	r0, #19
 8007fec:	ee10 5a10 	vmov	r5, s0
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	dc18      	bgt.n	8008026 <round+0x4a>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	da09      	bge.n	800800c <round+0x30>
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8007ffe:	d103      	bne.n	8008008 <round+0x2c>
 8008000:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8008004:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008008:	2300      	movs	r3, #0
 800800a:	e02a      	b.n	8008062 <round+0x86>
 800800c:	4c16      	ldr	r4, [pc, #88]	; (8008068 <round+0x8c>)
 800800e:	4104      	asrs	r4, r0
 8008010:	ea03 0604 	and.w	r6, r3, r4
 8008014:	4316      	orrs	r6, r2
 8008016:	d011      	beq.n	800803c <round+0x60>
 8008018:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800801c:	4103      	asrs	r3, r0
 800801e:	440b      	add	r3, r1
 8008020:	ea23 0104 	bic.w	r1, r3, r4
 8008024:	e7f0      	b.n	8008008 <round+0x2c>
 8008026:	2833      	cmp	r0, #51	; 0x33
 8008028:	dd0b      	ble.n	8008042 <round+0x66>
 800802a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800802e:	d105      	bne.n	800803c <round+0x60>
 8008030:	ee10 0a10 	vmov	r0, s0
 8008034:	f7f8 f8ce 	bl	80001d4 <__adddf3>
 8008038:	4602      	mov	r2, r0
 800803a:	460b      	mov	r3, r1
 800803c:	ec43 2b10 	vmov	d0, r2, r3
 8008040:	bd70      	pop	{r4, r5, r6, pc}
 8008042:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8008046:	f04f 34ff 	mov.w	r4, #4294967295
 800804a:	40f4      	lsrs	r4, r6
 800804c:	4214      	tst	r4, r2
 800804e:	d0f5      	beq.n	800803c <round+0x60>
 8008050:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8008054:	2301      	movs	r3, #1
 8008056:	4083      	lsls	r3, r0
 8008058:	195b      	adds	r3, r3, r5
 800805a:	bf28      	it	cs
 800805c:	3101      	addcs	r1, #1
 800805e:	ea23 0304 	bic.w	r3, r3, r4
 8008062:	461a      	mov	r2, r3
 8008064:	460b      	mov	r3, r1
 8008066:	e7e9      	b.n	800803c <round+0x60>
 8008068:	000fffff 	.word	0x000fffff
 800806c:	00000000 	.word	0x00000000

08008070 <__ieee754_pow>:
 8008070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008074:	ed2d 8b06 	vpush	{d8-d10}
 8008078:	b089      	sub	sp, #36	; 0x24
 800807a:	ed8d 1b00 	vstr	d1, [sp]
 800807e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008082:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008086:	ea58 0102 	orrs.w	r1, r8, r2
 800808a:	ec57 6b10 	vmov	r6, r7, d0
 800808e:	d115      	bne.n	80080bc <__ieee754_pow+0x4c>
 8008090:	19b3      	adds	r3, r6, r6
 8008092:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008096:	4152      	adcs	r2, r2
 8008098:	4299      	cmp	r1, r3
 800809a:	4b89      	ldr	r3, [pc, #548]	; (80082c0 <__ieee754_pow+0x250>)
 800809c:	4193      	sbcs	r3, r2
 800809e:	f080 84d1 	bcs.w	8008a44 <__ieee754_pow+0x9d4>
 80080a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080a6:	4630      	mov	r0, r6
 80080a8:	4639      	mov	r1, r7
 80080aa:	f7f8 f893 	bl	80001d4 <__adddf3>
 80080ae:	ec41 0b10 	vmov	d0, r0, r1
 80080b2:	b009      	add	sp, #36	; 0x24
 80080b4:	ecbd 8b06 	vpop	{d8-d10}
 80080b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080bc:	4b81      	ldr	r3, [pc, #516]	; (80082c4 <__ieee754_pow+0x254>)
 80080be:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80080c2:	429c      	cmp	r4, r3
 80080c4:	ee10 aa10 	vmov	sl, s0
 80080c8:	463d      	mov	r5, r7
 80080ca:	dc06      	bgt.n	80080da <__ieee754_pow+0x6a>
 80080cc:	d101      	bne.n	80080d2 <__ieee754_pow+0x62>
 80080ce:	2e00      	cmp	r6, #0
 80080d0:	d1e7      	bne.n	80080a2 <__ieee754_pow+0x32>
 80080d2:	4598      	cmp	r8, r3
 80080d4:	dc01      	bgt.n	80080da <__ieee754_pow+0x6a>
 80080d6:	d10f      	bne.n	80080f8 <__ieee754_pow+0x88>
 80080d8:	b172      	cbz	r2, 80080f8 <__ieee754_pow+0x88>
 80080da:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80080de:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80080e2:	ea55 050a 	orrs.w	r5, r5, sl
 80080e6:	d1dc      	bne.n	80080a2 <__ieee754_pow+0x32>
 80080e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80080ec:	18db      	adds	r3, r3, r3
 80080ee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80080f2:	4152      	adcs	r2, r2
 80080f4:	429d      	cmp	r5, r3
 80080f6:	e7d0      	b.n	800809a <__ieee754_pow+0x2a>
 80080f8:	2d00      	cmp	r5, #0
 80080fa:	da3b      	bge.n	8008174 <__ieee754_pow+0x104>
 80080fc:	4b72      	ldr	r3, [pc, #456]	; (80082c8 <__ieee754_pow+0x258>)
 80080fe:	4598      	cmp	r8, r3
 8008100:	dc51      	bgt.n	80081a6 <__ieee754_pow+0x136>
 8008102:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008106:	4598      	cmp	r8, r3
 8008108:	f340 84ab 	ble.w	8008a62 <__ieee754_pow+0x9f2>
 800810c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008110:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008114:	2b14      	cmp	r3, #20
 8008116:	dd0f      	ble.n	8008138 <__ieee754_pow+0xc8>
 8008118:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800811c:	fa22 f103 	lsr.w	r1, r2, r3
 8008120:	fa01 f303 	lsl.w	r3, r1, r3
 8008124:	4293      	cmp	r3, r2
 8008126:	f040 849c 	bne.w	8008a62 <__ieee754_pow+0x9f2>
 800812a:	f001 0101 	and.w	r1, r1, #1
 800812e:	f1c1 0302 	rsb	r3, r1, #2
 8008132:	9304      	str	r3, [sp, #16]
 8008134:	b182      	cbz	r2, 8008158 <__ieee754_pow+0xe8>
 8008136:	e05f      	b.n	80081f8 <__ieee754_pow+0x188>
 8008138:	2a00      	cmp	r2, #0
 800813a:	d15b      	bne.n	80081f4 <__ieee754_pow+0x184>
 800813c:	f1c3 0314 	rsb	r3, r3, #20
 8008140:	fa48 f103 	asr.w	r1, r8, r3
 8008144:	fa01 f303 	lsl.w	r3, r1, r3
 8008148:	4543      	cmp	r3, r8
 800814a:	f040 8487 	bne.w	8008a5c <__ieee754_pow+0x9ec>
 800814e:	f001 0101 	and.w	r1, r1, #1
 8008152:	f1c1 0302 	rsb	r3, r1, #2
 8008156:	9304      	str	r3, [sp, #16]
 8008158:	4b5c      	ldr	r3, [pc, #368]	; (80082cc <__ieee754_pow+0x25c>)
 800815a:	4598      	cmp	r8, r3
 800815c:	d132      	bne.n	80081c4 <__ieee754_pow+0x154>
 800815e:	f1b9 0f00 	cmp.w	r9, #0
 8008162:	f280 8477 	bge.w	8008a54 <__ieee754_pow+0x9e4>
 8008166:	4959      	ldr	r1, [pc, #356]	; (80082cc <__ieee754_pow+0x25c>)
 8008168:	4632      	mov	r2, r6
 800816a:	463b      	mov	r3, r7
 800816c:	2000      	movs	r0, #0
 800816e:	f7f8 fb11 	bl	8000794 <__aeabi_ddiv>
 8008172:	e79c      	b.n	80080ae <__ieee754_pow+0x3e>
 8008174:	2300      	movs	r3, #0
 8008176:	9304      	str	r3, [sp, #16]
 8008178:	2a00      	cmp	r2, #0
 800817a:	d13d      	bne.n	80081f8 <__ieee754_pow+0x188>
 800817c:	4b51      	ldr	r3, [pc, #324]	; (80082c4 <__ieee754_pow+0x254>)
 800817e:	4598      	cmp	r8, r3
 8008180:	d1ea      	bne.n	8008158 <__ieee754_pow+0xe8>
 8008182:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008186:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800818a:	ea53 030a 	orrs.w	r3, r3, sl
 800818e:	f000 8459 	beq.w	8008a44 <__ieee754_pow+0x9d4>
 8008192:	4b4f      	ldr	r3, [pc, #316]	; (80082d0 <__ieee754_pow+0x260>)
 8008194:	429c      	cmp	r4, r3
 8008196:	dd08      	ble.n	80081aa <__ieee754_pow+0x13a>
 8008198:	f1b9 0f00 	cmp.w	r9, #0
 800819c:	f2c0 8456 	blt.w	8008a4c <__ieee754_pow+0x9dc>
 80081a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081a4:	e783      	b.n	80080ae <__ieee754_pow+0x3e>
 80081a6:	2302      	movs	r3, #2
 80081a8:	e7e5      	b.n	8008176 <__ieee754_pow+0x106>
 80081aa:	f1b9 0f00 	cmp.w	r9, #0
 80081ae:	f04f 0000 	mov.w	r0, #0
 80081b2:	f04f 0100 	mov.w	r1, #0
 80081b6:	f6bf af7a 	bge.w	80080ae <__ieee754_pow+0x3e>
 80081ba:	e9dd 0300 	ldrd	r0, r3, [sp]
 80081be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80081c2:	e774      	b.n	80080ae <__ieee754_pow+0x3e>
 80081c4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80081c8:	d106      	bne.n	80081d8 <__ieee754_pow+0x168>
 80081ca:	4632      	mov	r2, r6
 80081cc:	463b      	mov	r3, r7
 80081ce:	4630      	mov	r0, r6
 80081d0:	4639      	mov	r1, r7
 80081d2:	f7f8 f9b5 	bl	8000540 <__aeabi_dmul>
 80081d6:	e76a      	b.n	80080ae <__ieee754_pow+0x3e>
 80081d8:	4b3e      	ldr	r3, [pc, #248]	; (80082d4 <__ieee754_pow+0x264>)
 80081da:	4599      	cmp	r9, r3
 80081dc:	d10c      	bne.n	80081f8 <__ieee754_pow+0x188>
 80081de:	2d00      	cmp	r5, #0
 80081e0:	db0a      	blt.n	80081f8 <__ieee754_pow+0x188>
 80081e2:	ec47 6b10 	vmov	d0, r6, r7
 80081e6:	b009      	add	sp, #36	; 0x24
 80081e8:	ecbd 8b06 	vpop	{d8-d10}
 80081ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f0:	f000 bd20 	b.w	8008c34 <__ieee754_sqrt>
 80081f4:	2300      	movs	r3, #0
 80081f6:	9304      	str	r3, [sp, #16]
 80081f8:	ec47 6b10 	vmov	d0, r6, r7
 80081fc:	f000 fc62 	bl	8008ac4 <fabs>
 8008200:	ec51 0b10 	vmov	r0, r1, d0
 8008204:	f1ba 0f00 	cmp.w	sl, #0
 8008208:	d129      	bne.n	800825e <__ieee754_pow+0x1ee>
 800820a:	b124      	cbz	r4, 8008216 <__ieee754_pow+0x1a6>
 800820c:	4b2f      	ldr	r3, [pc, #188]	; (80082cc <__ieee754_pow+0x25c>)
 800820e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008212:	429a      	cmp	r2, r3
 8008214:	d123      	bne.n	800825e <__ieee754_pow+0x1ee>
 8008216:	f1b9 0f00 	cmp.w	r9, #0
 800821a:	da05      	bge.n	8008228 <__ieee754_pow+0x1b8>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	2000      	movs	r0, #0
 8008222:	492a      	ldr	r1, [pc, #168]	; (80082cc <__ieee754_pow+0x25c>)
 8008224:	f7f8 fab6 	bl	8000794 <__aeabi_ddiv>
 8008228:	2d00      	cmp	r5, #0
 800822a:	f6bf af40 	bge.w	80080ae <__ieee754_pow+0x3e>
 800822e:	9b04      	ldr	r3, [sp, #16]
 8008230:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008234:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008238:	431c      	orrs	r4, r3
 800823a:	d108      	bne.n	800824e <__ieee754_pow+0x1de>
 800823c:	4602      	mov	r2, r0
 800823e:	460b      	mov	r3, r1
 8008240:	4610      	mov	r0, r2
 8008242:	4619      	mov	r1, r3
 8008244:	f7f7 ffc4 	bl	80001d0 <__aeabi_dsub>
 8008248:	4602      	mov	r2, r0
 800824a:	460b      	mov	r3, r1
 800824c:	e78f      	b.n	800816e <__ieee754_pow+0xfe>
 800824e:	9b04      	ldr	r3, [sp, #16]
 8008250:	2b01      	cmp	r3, #1
 8008252:	f47f af2c 	bne.w	80080ae <__ieee754_pow+0x3e>
 8008256:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800825a:	4619      	mov	r1, r3
 800825c:	e727      	b.n	80080ae <__ieee754_pow+0x3e>
 800825e:	0feb      	lsrs	r3, r5, #31
 8008260:	3b01      	subs	r3, #1
 8008262:	9306      	str	r3, [sp, #24]
 8008264:	9a06      	ldr	r2, [sp, #24]
 8008266:	9b04      	ldr	r3, [sp, #16]
 8008268:	4313      	orrs	r3, r2
 800826a:	d102      	bne.n	8008272 <__ieee754_pow+0x202>
 800826c:	4632      	mov	r2, r6
 800826e:	463b      	mov	r3, r7
 8008270:	e7e6      	b.n	8008240 <__ieee754_pow+0x1d0>
 8008272:	4b19      	ldr	r3, [pc, #100]	; (80082d8 <__ieee754_pow+0x268>)
 8008274:	4598      	cmp	r8, r3
 8008276:	f340 80fb 	ble.w	8008470 <__ieee754_pow+0x400>
 800827a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800827e:	4598      	cmp	r8, r3
 8008280:	4b13      	ldr	r3, [pc, #76]	; (80082d0 <__ieee754_pow+0x260>)
 8008282:	dd0c      	ble.n	800829e <__ieee754_pow+0x22e>
 8008284:	429c      	cmp	r4, r3
 8008286:	dc0f      	bgt.n	80082a8 <__ieee754_pow+0x238>
 8008288:	f1b9 0f00 	cmp.w	r9, #0
 800828c:	da0f      	bge.n	80082ae <__ieee754_pow+0x23e>
 800828e:	2000      	movs	r0, #0
 8008290:	b009      	add	sp, #36	; 0x24
 8008292:	ecbd 8b06 	vpop	{d8-d10}
 8008296:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800829a:	f000 bcc2 	b.w	8008c22 <__math_oflow>
 800829e:	429c      	cmp	r4, r3
 80082a0:	dbf2      	blt.n	8008288 <__ieee754_pow+0x218>
 80082a2:	4b0a      	ldr	r3, [pc, #40]	; (80082cc <__ieee754_pow+0x25c>)
 80082a4:	429c      	cmp	r4, r3
 80082a6:	dd19      	ble.n	80082dc <__ieee754_pow+0x26c>
 80082a8:	f1b9 0f00 	cmp.w	r9, #0
 80082ac:	dcef      	bgt.n	800828e <__ieee754_pow+0x21e>
 80082ae:	2000      	movs	r0, #0
 80082b0:	b009      	add	sp, #36	; 0x24
 80082b2:	ecbd 8b06 	vpop	{d8-d10}
 80082b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ba:	f000 bca9 	b.w	8008c10 <__math_uflow>
 80082be:	bf00      	nop
 80082c0:	fff00000 	.word	0xfff00000
 80082c4:	7ff00000 	.word	0x7ff00000
 80082c8:	433fffff 	.word	0x433fffff
 80082cc:	3ff00000 	.word	0x3ff00000
 80082d0:	3fefffff 	.word	0x3fefffff
 80082d4:	3fe00000 	.word	0x3fe00000
 80082d8:	41e00000 	.word	0x41e00000
 80082dc:	4b60      	ldr	r3, [pc, #384]	; (8008460 <__ieee754_pow+0x3f0>)
 80082de:	2200      	movs	r2, #0
 80082e0:	f7f7 ff76 	bl	80001d0 <__aeabi_dsub>
 80082e4:	a354      	add	r3, pc, #336	; (adr r3, 8008438 <__ieee754_pow+0x3c8>)
 80082e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ea:	4604      	mov	r4, r0
 80082ec:	460d      	mov	r5, r1
 80082ee:	f7f8 f927 	bl	8000540 <__aeabi_dmul>
 80082f2:	a353      	add	r3, pc, #332	; (adr r3, 8008440 <__ieee754_pow+0x3d0>)
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	4606      	mov	r6, r0
 80082fa:	460f      	mov	r7, r1
 80082fc:	4620      	mov	r0, r4
 80082fe:	4629      	mov	r1, r5
 8008300:	f7f8 f91e 	bl	8000540 <__aeabi_dmul>
 8008304:	4b57      	ldr	r3, [pc, #348]	; (8008464 <__ieee754_pow+0x3f4>)
 8008306:	4682      	mov	sl, r0
 8008308:	468b      	mov	fp, r1
 800830a:	2200      	movs	r2, #0
 800830c:	4620      	mov	r0, r4
 800830e:	4629      	mov	r1, r5
 8008310:	f7f8 f916 	bl	8000540 <__aeabi_dmul>
 8008314:	4602      	mov	r2, r0
 8008316:	460b      	mov	r3, r1
 8008318:	a14b      	add	r1, pc, #300	; (adr r1, 8008448 <__ieee754_pow+0x3d8>)
 800831a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800831e:	f7f7 ff57 	bl	80001d0 <__aeabi_dsub>
 8008322:	4622      	mov	r2, r4
 8008324:	462b      	mov	r3, r5
 8008326:	f7f8 f90b 	bl	8000540 <__aeabi_dmul>
 800832a:	4602      	mov	r2, r0
 800832c:	460b      	mov	r3, r1
 800832e:	2000      	movs	r0, #0
 8008330:	494d      	ldr	r1, [pc, #308]	; (8008468 <__ieee754_pow+0x3f8>)
 8008332:	f7f7 ff4d 	bl	80001d0 <__aeabi_dsub>
 8008336:	4622      	mov	r2, r4
 8008338:	4680      	mov	r8, r0
 800833a:	4689      	mov	r9, r1
 800833c:	462b      	mov	r3, r5
 800833e:	4620      	mov	r0, r4
 8008340:	4629      	mov	r1, r5
 8008342:	f7f8 f8fd 	bl	8000540 <__aeabi_dmul>
 8008346:	4602      	mov	r2, r0
 8008348:	460b      	mov	r3, r1
 800834a:	4640      	mov	r0, r8
 800834c:	4649      	mov	r1, r9
 800834e:	f7f8 f8f7 	bl	8000540 <__aeabi_dmul>
 8008352:	a33f      	add	r3, pc, #252	; (adr r3, 8008450 <__ieee754_pow+0x3e0>)
 8008354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008358:	f7f8 f8f2 	bl	8000540 <__aeabi_dmul>
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	4650      	mov	r0, sl
 8008362:	4659      	mov	r1, fp
 8008364:	f7f7 ff34 	bl	80001d0 <__aeabi_dsub>
 8008368:	4602      	mov	r2, r0
 800836a:	460b      	mov	r3, r1
 800836c:	4680      	mov	r8, r0
 800836e:	4689      	mov	r9, r1
 8008370:	4630      	mov	r0, r6
 8008372:	4639      	mov	r1, r7
 8008374:	f7f7 ff2e 	bl	80001d4 <__adddf3>
 8008378:	2000      	movs	r0, #0
 800837a:	4632      	mov	r2, r6
 800837c:	463b      	mov	r3, r7
 800837e:	4604      	mov	r4, r0
 8008380:	460d      	mov	r5, r1
 8008382:	f7f7 ff25 	bl	80001d0 <__aeabi_dsub>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	4640      	mov	r0, r8
 800838c:	4649      	mov	r1, r9
 800838e:	f7f7 ff1f 	bl	80001d0 <__aeabi_dsub>
 8008392:	9b04      	ldr	r3, [sp, #16]
 8008394:	9a06      	ldr	r2, [sp, #24]
 8008396:	3b01      	subs	r3, #1
 8008398:	4313      	orrs	r3, r2
 800839a:	4682      	mov	sl, r0
 800839c:	468b      	mov	fp, r1
 800839e:	f040 81e7 	bne.w	8008770 <__ieee754_pow+0x700>
 80083a2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008458 <__ieee754_pow+0x3e8>
 80083a6:	eeb0 8a47 	vmov.f32	s16, s14
 80083aa:	eef0 8a67 	vmov.f32	s17, s15
 80083ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 80083b2:	2600      	movs	r6, #0
 80083b4:	4632      	mov	r2, r6
 80083b6:	463b      	mov	r3, r7
 80083b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083bc:	f7f7 ff08 	bl	80001d0 <__aeabi_dsub>
 80083c0:	4622      	mov	r2, r4
 80083c2:	462b      	mov	r3, r5
 80083c4:	f7f8 f8bc 	bl	8000540 <__aeabi_dmul>
 80083c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083cc:	4680      	mov	r8, r0
 80083ce:	4689      	mov	r9, r1
 80083d0:	4650      	mov	r0, sl
 80083d2:	4659      	mov	r1, fp
 80083d4:	f7f8 f8b4 	bl	8000540 <__aeabi_dmul>
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	4640      	mov	r0, r8
 80083de:	4649      	mov	r1, r9
 80083e0:	f7f7 fef8 	bl	80001d4 <__adddf3>
 80083e4:	4632      	mov	r2, r6
 80083e6:	463b      	mov	r3, r7
 80083e8:	4680      	mov	r8, r0
 80083ea:	4689      	mov	r9, r1
 80083ec:	4620      	mov	r0, r4
 80083ee:	4629      	mov	r1, r5
 80083f0:	f7f8 f8a6 	bl	8000540 <__aeabi_dmul>
 80083f4:	460b      	mov	r3, r1
 80083f6:	4604      	mov	r4, r0
 80083f8:	460d      	mov	r5, r1
 80083fa:	4602      	mov	r2, r0
 80083fc:	4649      	mov	r1, r9
 80083fe:	4640      	mov	r0, r8
 8008400:	f7f7 fee8 	bl	80001d4 <__adddf3>
 8008404:	4b19      	ldr	r3, [pc, #100]	; (800846c <__ieee754_pow+0x3fc>)
 8008406:	4299      	cmp	r1, r3
 8008408:	ec45 4b19 	vmov	d9, r4, r5
 800840c:	4606      	mov	r6, r0
 800840e:	460f      	mov	r7, r1
 8008410:	468b      	mov	fp, r1
 8008412:	f340 82f0 	ble.w	80089f6 <__ieee754_pow+0x986>
 8008416:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800841a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800841e:	4303      	orrs	r3, r0
 8008420:	f000 81e4 	beq.w	80087ec <__ieee754_pow+0x77c>
 8008424:	ec51 0b18 	vmov	r0, r1, d8
 8008428:	2200      	movs	r2, #0
 800842a:	2300      	movs	r3, #0
 800842c:	f7f8 fafa 	bl	8000a24 <__aeabi_dcmplt>
 8008430:	3800      	subs	r0, #0
 8008432:	bf18      	it	ne
 8008434:	2001      	movne	r0, #1
 8008436:	e72b      	b.n	8008290 <__ieee754_pow+0x220>
 8008438:	60000000 	.word	0x60000000
 800843c:	3ff71547 	.word	0x3ff71547
 8008440:	f85ddf44 	.word	0xf85ddf44
 8008444:	3e54ae0b 	.word	0x3e54ae0b
 8008448:	55555555 	.word	0x55555555
 800844c:	3fd55555 	.word	0x3fd55555
 8008450:	652b82fe 	.word	0x652b82fe
 8008454:	3ff71547 	.word	0x3ff71547
 8008458:	00000000 	.word	0x00000000
 800845c:	bff00000 	.word	0xbff00000
 8008460:	3ff00000 	.word	0x3ff00000
 8008464:	3fd00000 	.word	0x3fd00000
 8008468:	3fe00000 	.word	0x3fe00000
 800846c:	408fffff 	.word	0x408fffff
 8008470:	4bd5      	ldr	r3, [pc, #852]	; (80087c8 <__ieee754_pow+0x758>)
 8008472:	402b      	ands	r3, r5
 8008474:	2200      	movs	r2, #0
 8008476:	b92b      	cbnz	r3, 8008484 <__ieee754_pow+0x414>
 8008478:	4bd4      	ldr	r3, [pc, #848]	; (80087cc <__ieee754_pow+0x75c>)
 800847a:	f7f8 f861 	bl	8000540 <__aeabi_dmul>
 800847e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008482:	460c      	mov	r4, r1
 8008484:	1523      	asrs	r3, r4, #20
 8008486:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800848a:	4413      	add	r3, r2
 800848c:	9305      	str	r3, [sp, #20]
 800848e:	4bd0      	ldr	r3, [pc, #832]	; (80087d0 <__ieee754_pow+0x760>)
 8008490:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008494:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008498:	429c      	cmp	r4, r3
 800849a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800849e:	dd08      	ble.n	80084b2 <__ieee754_pow+0x442>
 80084a0:	4bcc      	ldr	r3, [pc, #816]	; (80087d4 <__ieee754_pow+0x764>)
 80084a2:	429c      	cmp	r4, r3
 80084a4:	f340 8162 	ble.w	800876c <__ieee754_pow+0x6fc>
 80084a8:	9b05      	ldr	r3, [sp, #20]
 80084aa:	3301      	adds	r3, #1
 80084ac:	9305      	str	r3, [sp, #20]
 80084ae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80084b2:	2400      	movs	r4, #0
 80084b4:	00e3      	lsls	r3, r4, #3
 80084b6:	9307      	str	r3, [sp, #28]
 80084b8:	4bc7      	ldr	r3, [pc, #796]	; (80087d8 <__ieee754_pow+0x768>)
 80084ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80084be:	ed93 7b00 	vldr	d7, [r3]
 80084c2:	4629      	mov	r1, r5
 80084c4:	ec53 2b17 	vmov	r2, r3, d7
 80084c8:	eeb0 9a47 	vmov.f32	s18, s14
 80084cc:	eef0 9a67 	vmov.f32	s19, s15
 80084d0:	4682      	mov	sl, r0
 80084d2:	f7f7 fe7d 	bl	80001d0 <__aeabi_dsub>
 80084d6:	4652      	mov	r2, sl
 80084d8:	4606      	mov	r6, r0
 80084da:	460f      	mov	r7, r1
 80084dc:	462b      	mov	r3, r5
 80084de:	ec51 0b19 	vmov	r0, r1, d9
 80084e2:	f7f7 fe77 	bl	80001d4 <__adddf3>
 80084e6:	4602      	mov	r2, r0
 80084e8:	460b      	mov	r3, r1
 80084ea:	2000      	movs	r0, #0
 80084ec:	49bb      	ldr	r1, [pc, #748]	; (80087dc <__ieee754_pow+0x76c>)
 80084ee:	f7f8 f951 	bl	8000794 <__aeabi_ddiv>
 80084f2:	ec41 0b1a 	vmov	d10, r0, r1
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	4630      	mov	r0, r6
 80084fc:	4639      	mov	r1, r7
 80084fe:	f7f8 f81f 	bl	8000540 <__aeabi_dmul>
 8008502:	2300      	movs	r3, #0
 8008504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008508:	9302      	str	r3, [sp, #8]
 800850a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800850e:	46ab      	mov	fp, r5
 8008510:	106d      	asrs	r5, r5, #1
 8008512:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008516:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800851a:	ec41 0b18 	vmov	d8, r0, r1
 800851e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008522:	2200      	movs	r2, #0
 8008524:	4640      	mov	r0, r8
 8008526:	4649      	mov	r1, r9
 8008528:	4614      	mov	r4, r2
 800852a:	461d      	mov	r5, r3
 800852c:	f7f8 f808 	bl	8000540 <__aeabi_dmul>
 8008530:	4602      	mov	r2, r0
 8008532:	460b      	mov	r3, r1
 8008534:	4630      	mov	r0, r6
 8008536:	4639      	mov	r1, r7
 8008538:	f7f7 fe4a 	bl	80001d0 <__aeabi_dsub>
 800853c:	ec53 2b19 	vmov	r2, r3, d9
 8008540:	4606      	mov	r6, r0
 8008542:	460f      	mov	r7, r1
 8008544:	4620      	mov	r0, r4
 8008546:	4629      	mov	r1, r5
 8008548:	f7f7 fe42 	bl	80001d0 <__aeabi_dsub>
 800854c:	4602      	mov	r2, r0
 800854e:	460b      	mov	r3, r1
 8008550:	4650      	mov	r0, sl
 8008552:	4659      	mov	r1, fp
 8008554:	f7f7 fe3c 	bl	80001d0 <__aeabi_dsub>
 8008558:	4642      	mov	r2, r8
 800855a:	464b      	mov	r3, r9
 800855c:	f7f7 fff0 	bl	8000540 <__aeabi_dmul>
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	4630      	mov	r0, r6
 8008566:	4639      	mov	r1, r7
 8008568:	f7f7 fe32 	bl	80001d0 <__aeabi_dsub>
 800856c:	ec53 2b1a 	vmov	r2, r3, d10
 8008570:	f7f7 ffe6 	bl	8000540 <__aeabi_dmul>
 8008574:	ec53 2b18 	vmov	r2, r3, d8
 8008578:	ec41 0b19 	vmov	d9, r0, r1
 800857c:	ec51 0b18 	vmov	r0, r1, d8
 8008580:	f7f7 ffde 	bl	8000540 <__aeabi_dmul>
 8008584:	a37c      	add	r3, pc, #496	; (adr r3, 8008778 <__ieee754_pow+0x708>)
 8008586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858a:	4604      	mov	r4, r0
 800858c:	460d      	mov	r5, r1
 800858e:	f7f7 ffd7 	bl	8000540 <__aeabi_dmul>
 8008592:	a37b      	add	r3, pc, #492	; (adr r3, 8008780 <__ieee754_pow+0x710>)
 8008594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008598:	f7f7 fe1c 	bl	80001d4 <__adddf3>
 800859c:	4622      	mov	r2, r4
 800859e:	462b      	mov	r3, r5
 80085a0:	f7f7 ffce 	bl	8000540 <__aeabi_dmul>
 80085a4:	a378      	add	r3, pc, #480	; (adr r3, 8008788 <__ieee754_pow+0x718>)
 80085a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085aa:	f7f7 fe13 	bl	80001d4 <__adddf3>
 80085ae:	4622      	mov	r2, r4
 80085b0:	462b      	mov	r3, r5
 80085b2:	f7f7 ffc5 	bl	8000540 <__aeabi_dmul>
 80085b6:	a376      	add	r3, pc, #472	; (adr r3, 8008790 <__ieee754_pow+0x720>)
 80085b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085bc:	f7f7 fe0a 	bl	80001d4 <__adddf3>
 80085c0:	4622      	mov	r2, r4
 80085c2:	462b      	mov	r3, r5
 80085c4:	f7f7 ffbc 	bl	8000540 <__aeabi_dmul>
 80085c8:	a373      	add	r3, pc, #460	; (adr r3, 8008798 <__ieee754_pow+0x728>)
 80085ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ce:	f7f7 fe01 	bl	80001d4 <__adddf3>
 80085d2:	4622      	mov	r2, r4
 80085d4:	462b      	mov	r3, r5
 80085d6:	f7f7 ffb3 	bl	8000540 <__aeabi_dmul>
 80085da:	a371      	add	r3, pc, #452	; (adr r3, 80087a0 <__ieee754_pow+0x730>)
 80085dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e0:	f7f7 fdf8 	bl	80001d4 <__adddf3>
 80085e4:	4622      	mov	r2, r4
 80085e6:	4606      	mov	r6, r0
 80085e8:	460f      	mov	r7, r1
 80085ea:	462b      	mov	r3, r5
 80085ec:	4620      	mov	r0, r4
 80085ee:	4629      	mov	r1, r5
 80085f0:	f7f7 ffa6 	bl	8000540 <__aeabi_dmul>
 80085f4:	4602      	mov	r2, r0
 80085f6:	460b      	mov	r3, r1
 80085f8:	4630      	mov	r0, r6
 80085fa:	4639      	mov	r1, r7
 80085fc:	f7f7 ffa0 	bl	8000540 <__aeabi_dmul>
 8008600:	4642      	mov	r2, r8
 8008602:	4604      	mov	r4, r0
 8008604:	460d      	mov	r5, r1
 8008606:	464b      	mov	r3, r9
 8008608:	ec51 0b18 	vmov	r0, r1, d8
 800860c:	f7f7 fde2 	bl	80001d4 <__adddf3>
 8008610:	ec53 2b19 	vmov	r2, r3, d9
 8008614:	f7f7 ff94 	bl	8000540 <__aeabi_dmul>
 8008618:	4622      	mov	r2, r4
 800861a:	462b      	mov	r3, r5
 800861c:	f7f7 fdda 	bl	80001d4 <__adddf3>
 8008620:	4642      	mov	r2, r8
 8008622:	4682      	mov	sl, r0
 8008624:	468b      	mov	fp, r1
 8008626:	464b      	mov	r3, r9
 8008628:	4640      	mov	r0, r8
 800862a:	4649      	mov	r1, r9
 800862c:	f7f7 ff88 	bl	8000540 <__aeabi_dmul>
 8008630:	4b6b      	ldr	r3, [pc, #428]	; (80087e0 <__ieee754_pow+0x770>)
 8008632:	2200      	movs	r2, #0
 8008634:	4606      	mov	r6, r0
 8008636:	460f      	mov	r7, r1
 8008638:	f7f7 fdcc 	bl	80001d4 <__adddf3>
 800863c:	4652      	mov	r2, sl
 800863e:	465b      	mov	r3, fp
 8008640:	f7f7 fdc8 	bl	80001d4 <__adddf3>
 8008644:	2000      	movs	r0, #0
 8008646:	4604      	mov	r4, r0
 8008648:	460d      	mov	r5, r1
 800864a:	4602      	mov	r2, r0
 800864c:	460b      	mov	r3, r1
 800864e:	4640      	mov	r0, r8
 8008650:	4649      	mov	r1, r9
 8008652:	f7f7 ff75 	bl	8000540 <__aeabi_dmul>
 8008656:	4b62      	ldr	r3, [pc, #392]	; (80087e0 <__ieee754_pow+0x770>)
 8008658:	4680      	mov	r8, r0
 800865a:	4689      	mov	r9, r1
 800865c:	2200      	movs	r2, #0
 800865e:	4620      	mov	r0, r4
 8008660:	4629      	mov	r1, r5
 8008662:	f7f7 fdb5 	bl	80001d0 <__aeabi_dsub>
 8008666:	4632      	mov	r2, r6
 8008668:	463b      	mov	r3, r7
 800866a:	f7f7 fdb1 	bl	80001d0 <__aeabi_dsub>
 800866e:	4602      	mov	r2, r0
 8008670:	460b      	mov	r3, r1
 8008672:	4650      	mov	r0, sl
 8008674:	4659      	mov	r1, fp
 8008676:	f7f7 fdab 	bl	80001d0 <__aeabi_dsub>
 800867a:	ec53 2b18 	vmov	r2, r3, d8
 800867e:	f7f7 ff5f 	bl	8000540 <__aeabi_dmul>
 8008682:	4622      	mov	r2, r4
 8008684:	4606      	mov	r6, r0
 8008686:	460f      	mov	r7, r1
 8008688:	462b      	mov	r3, r5
 800868a:	ec51 0b19 	vmov	r0, r1, d9
 800868e:	f7f7 ff57 	bl	8000540 <__aeabi_dmul>
 8008692:	4602      	mov	r2, r0
 8008694:	460b      	mov	r3, r1
 8008696:	4630      	mov	r0, r6
 8008698:	4639      	mov	r1, r7
 800869a:	f7f7 fd9b 	bl	80001d4 <__adddf3>
 800869e:	4606      	mov	r6, r0
 80086a0:	460f      	mov	r7, r1
 80086a2:	4602      	mov	r2, r0
 80086a4:	460b      	mov	r3, r1
 80086a6:	4640      	mov	r0, r8
 80086a8:	4649      	mov	r1, r9
 80086aa:	f7f7 fd93 	bl	80001d4 <__adddf3>
 80086ae:	a33e      	add	r3, pc, #248	; (adr r3, 80087a8 <__ieee754_pow+0x738>)
 80086b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b4:	2000      	movs	r0, #0
 80086b6:	4604      	mov	r4, r0
 80086b8:	460d      	mov	r5, r1
 80086ba:	f7f7 ff41 	bl	8000540 <__aeabi_dmul>
 80086be:	4642      	mov	r2, r8
 80086c0:	ec41 0b18 	vmov	d8, r0, r1
 80086c4:	464b      	mov	r3, r9
 80086c6:	4620      	mov	r0, r4
 80086c8:	4629      	mov	r1, r5
 80086ca:	f7f7 fd81 	bl	80001d0 <__aeabi_dsub>
 80086ce:	4602      	mov	r2, r0
 80086d0:	460b      	mov	r3, r1
 80086d2:	4630      	mov	r0, r6
 80086d4:	4639      	mov	r1, r7
 80086d6:	f7f7 fd7b 	bl	80001d0 <__aeabi_dsub>
 80086da:	a335      	add	r3, pc, #212	; (adr r3, 80087b0 <__ieee754_pow+0x740>)
 80086dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e0:	f7f7 ff2e 	bl	8000540 <__aeabi_dmul>
 80086e4:	a334      	add	r3, pc, #208	; (adr r3, 80087b8 <__ieee754_pow+0x748>)
 80086e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ea:	4606      	mov	r6, r0
 80086ec:	460f      	mov	r7, r1
 80086ee:	4620      	mov	r0, r4
 80086f0:	4629      	mov	r1, r5
 80086f2:	f7f7 ff25 	bl	8000540 <__aeabi_dmul>
 80086f6:	4602      	mov	r2, r0
 80086f8:	460b      	mov	r3, r1
 80086fa:	4630      	mov	r0, r6
 80086fc:	4639      	mov	r1, r7
 80086fe:	f7f7 fd69 	bl	80001d4 <__adddf3>
 8008702:	9a07      	ldr	r2, [sp, #28]
 8008704:	4b37      	ldr	r3, [pc, #220]	; (80087e4 <__ieee754_pow+0x774>)
 8008706:	4413      	add	r3, r2
 8008708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870c:	f7f7 fd62 	bl	80001d4 <__adddf3>
 8008710:	4682      	mov	sl, r0
 8008712:	9805      	ldr	r0, [sp, #20]
 8008714:	468b      	mov	fp, r1
 8008716:	f7f7 fea9 	bl	800046c <__aeabi_i2d>
 800871a:	9a07      	ldr	r2, [sp, #28]
 800871c:	4b32      	ldr	r3, [pc, #200]	; (80087e8 <__ieee754_pow+0x778>)
 800871e:	4413      	add	r3, r2
 8008720:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008724:	4606      	mov	r6, r0
 8008726:	460f      	mov	r7, r1
 8008728:	4652      	mov	r2, sl
 800872a:	465b      	mov	r3, fp
 800872c:	ec51 0b18 	vmov	r0, r1, d8
 8008730:	f7f7 fd50 	bl	80001d4 <__adddf3>
 8008734:	4642      	mov	r2, r8
 8008736:	464b      	mov	r3, r9
 8008738:	f7f7 fd4c 	bl	80001d4 <__adddf3>
 800873c:	4632      	mov	r2, r6
 800873e:	463b      	mov	r3, r7
 8008740:	f7f7 fd48 	bl	80001d4 <__adddf3>
 8008744:	2000      	movs	r0, #0
 8008746:	4632      	mov	r2, r6
 8008748:	463b      	mov	r3, r7
 800874a:	4604      	mov	r4, r0
 800874c:	460d      	mov	r5, r1
 800874e:	f7f7 fd3f 	bl	80001d0 <__aeabi_dsub>
 8008752:	4642      	mov	r2, r8
 8008754:	464b      	mov	r3, r9
 8008756:	f7f7 fd3b 	bl	80001d0 <__aeabi_dsub>
 800875a:	ec53 2b18 	vmov	r2, r3, d8
 800875e:	f7f7 fd37 	bl	80001d0 <__aeabi_dsub>
 8008762:	4602      	mov	r2, r0
 8008764:	460b      	mov	r3, r1
 8008766:	4650      	mov	r0, sl
 8008768:	4659      	mov	r1, fp
 800876a:	e610      	b.n	800838e <__ieee754_pow+0x31e>
 800876c:	2401      	movs	r4, #1
 800876e:	e6a1      	b.n	80084b4 <__ieee754_pow+0x444>
 8008770:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80087c0 <__ieee754_pow+0x750>
 8008774:	e617      	b.n	80083a6 <__ieee754_pow+0x336>
 8008776:	bf00      	nop
 8008778:	4a454eef 	.word	0x4a454eef
 800877c:	3fca7e28 	.word	0x3fca7e28
 8008780:	93c9db65 	.word	0x93c9db65
 8008784:	3fcd864a 	.word	0x3fcd864a
 8008788:	a91d4101 	.word	0xa91d4101
 800878c:	3fd17460 	.word	0x3fd17460
 8008790:	518f264d 	.word	0x518f264d
 8008794:	3fd55555 	.word	0x3fd55555
 8008798:	db6fabff 	.word	0xdb6fabff
 800879c:	3fdb6db6 	.word	0x3fdb6db6
 80087a0:	33333303 	.word	0x33333303
 80087a4:	3fe33333 	.word	0x3fe33333
 80087a8:	e0000000 	.word	0xe0000000
 80087ac:	3feec709 	.word	0x3feec709
 80087b0:	dc3a03fd 	.word	0xdc3a03fd
 80087b4:	3feec709 	.word	0x3feec709
 80087b8:	145b01f5 	.word	0x145b01f5
 80087bc:	be3e2fe0 	.word	0xbe3e2fe0
 80087c0:	00000000 	.word	0x00000000
 80087c4:	3ff00000 	.word	0x3ff00000
 80087c8:	7ff00000 	.word	0x7ff00000
 80087cc:	43400000 	.word	0x43400000
 80087d0:	0003988e 	.word	0x0003988e
 80087d4:	000bb679 	.word	0x000bb679
 80087d8:	08009618 	.word	0x08009618
 80087dc:	3ff00000 	.word	0x3ff00000
 80087e0:	40080000 	.word	0x40080000
 80087e4:	08009638 	.word	0x08009638
 80087e8:	08009628 	.word	0x08009628
 80087ec:	a3b3      	add	r3, pc, #716	; (adr r3, 8008abc <__ieee754_pow+0xa4c>)
 80087ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f2:	4640      	mov	r0, r8
 80087f4:	4649      	mov	r1, r9
 80087f6:	f7f7 fced 	bl	80001d4 <__adddf3>
 80087fa:	4622      	mov	r2, r4
 80087fc:	ec41 0b1a 	vmov	d10, r0, r1
 8008800:	462b      	mov	r3, r5
 8008802:	4630      	mov	r0, r6
 8008804:	4639      	mov	r1, r7
 8008806:	f7f7 fce3 	bl	80001d0 <__aeabi_dsub>
 800880a:	4602      	mov	r2, r0
 800880c:	460b      	mov	r3, r1
 800880e:	ec51 0b1a 	vmov	r0, r1, d10
 8008812:	f7f8 f925 	bl	8000a60 <__aeabi_dcmpgt>
 8008816:	2800      	cmp	r0, #0
 8008818:	f47f ae04 	bne.w	8008424 <__ieee754_pow+0x3b4>
 800881c:	4aa2      	ldr	r2, [pc, #648]	; (8008aa8 <__ieee754_pow+0xa38>)
 800881e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008822:	4293      	cmp	r3, r2
 8008824:	f340 8107 	ble.w	8008a36 <__ieee754_pow+0x9c6>
 8008828:	151b      	asrs	r3, r3, #20
 800882a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800882e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008832:	fa4a fa03 	asr.w	sl, sl, r3
 8008836:	44da      	add	sl, fp
 8008838:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800883c:	489b      	ldr	r0, [pc, #620]	; (8008aac <__ieee754_pow+0xa3c>)
 800883e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008842:	4108      	asrs	r0, r1
 8008844:	ea00 030a 	and.w	r3, r0, sl
 8008848:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800884c:	f1c1 0114 	rsb	r1, r1, #20
 8008850:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008854:	fa4a fa01 	asr.w	sl, sl, r1
 8008858:	f1bb 0f00 	cmp.w	fp, #0
 800885c:	f04f 0200 	mov.w	r2, #0
 8008860:	4620      	mov	r0, r4
 8008862:	4629      	mov	r1, r5
 8008864:	bfb8      	it	lt
 8008866:	f1ca 0a00 	rsblt	sl, sl, #0
 800886a:	f7f7 fcb1 	bl	80001d0 <__aeabi_dsub>
 800886e:	ec41 0b19 	vmov	d9, r0, r1
 8008872:	4642      	mov	r2, r8
 8008874:	464b      	mov	r3, r9
 8008876:	ec51 0b19 	vmov	r0, r1, d9
 800887a:	f7f7 fcab 	bl	80001d4 <__adddf3>
 800887e:	a37a      	add	r3, pc, #488	; (adr r3, 8008a68 <__ieee754_pow+0x9f8>)
 8008880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008884:	2000      	movs	r0, #0
 8008886:	4604      	mov	r4, r0
 8008888:	460d      	mov	r5, r1
 800888a:	f7f7 fe59 	bl	8000540 <__aeabi_dmul>
 800888e:	ec53 2b19 	vmov	r2, r3, d9
 8008892:	4606      	mov	r6, r0
 8008894:	460f      	mov	r7, r1
 8008896:	4620      	mov	r0, r4
 8008898:	4629      	mov	r1, r5
 800889a:	f7f7 fc99 	bl	80001d0 <__aeabi_dsub>
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	4640      	mov	r0, r8
 80088a4:	4649      	mov	r1, r9
 80088a6:	f7f7 fc93 	bl	80001d0 <__aeabi_dsub>
 80088aa:	a371      	add	r3, pc, #452	; (adr r3, 8008a70 <__ieee754_pow+0xa00>)
 80088ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b0:	f7f7 fe46 	bl	8000540 <__aeabi_dmul>
 80088b4:	a370      	add	r3, pc, #448	; (adr r3, 8008a78 <__ieee754_pow+0xa08>)
 80088b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ba:	4680      	mov	r8, r0
 80088bc:	4689      	mov	r9, r1
 80088be:	4620      	mov	r0, r4
 80088c0:	4629      	mov	r1, r5
 80088c2:	f7f7 fe3d 	bl	8000540 <__aeabi_dmul>
 80088c6:	4602      	mov	r2, r0
 80088c8:	460b      	mov	r3, r1
 80088ca:	4640      	mov	r0, r8
 80088cc:	4649      	mov	r1, r9
 80088ce:	f7f7 fc81 	bl	80001d4 <__adddf3>
 80088d2:	4604      	mov	r4, r0
 80088d4:	460d      	mov	r5, r1
 80088d6:	4602      	mov	r2, r0
 80088d8:	460b      	mov	r3, r1
 80088da:	4630      	mov	r0, r6
 80088dc:	4639      	mov	r1, r7
 80088de:	f7f7 fc79 	bl	80001d4 <__adddf3>
 80088e2:	4632      	mov	r2, r6
 80088e4:	463b      	mov	r3, r7
 80088e6:	4680      	mov	r8, r0
 80088e8:	4689      	mov	r9, r1
 80088ea:	f7f7 fc71 	bl	80001d0 <__aeabi_dsub>
 80088ee:	4602      	mov	r2, r0
 80088f0:	460b      	mov	r3, r1
 80088f2:	4620      	mov	r0, r4
 80088f4:	4629      	mov	r1, r5
 80088f6:	f7f7 fc6b 	bl	80001d0 <__aeabi_dsub>
 80088fa:	4642      	mov	r2, r8
 80088fc:	4606      	mov	r6, r0
 80088fe:	460f      	mov	r7, r1
 8008900:	464b      	mov	r3, r9
 8008902:	4640      	mov	r0, r8
 8008904:	4649      	mov	r1, r9
 8008906:	f7f7 fe1b 	bl	8000540 <__aeabi_dmul>
 800890a:	a35d      	add	r3, pc, #372	; (adr r3, 8008a80 <__ieee754_pow+0xa10>)
 800890c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008910:	4604      	mov	r4, r0
 8008912:	460d      	mov	r5, r1
 8008914:	f7f7 fe14 	bl	8000540 <__aeabi_dmul>
 8008918:	a35b      	add	r3, pc, #364	; (adr r3, 8008a88 <__ieee754_pow+0xa18>)
 800891a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891e:	f7f7 fc57 	bl	80001d0 <__aeabi_dsub>
 8008922:	4622      	mov	r2, r4
 8008924:	462b      	mov	r3, r5
 8008926:	f7f7 fe0b 	bl	8000540 <__aeabi_dmul>
 800892a:	a359      	add	r3, pc, #356	; (adr r3, 8008a90 <__ieee754_pow+0xa20>)
 800892c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008930:	f7f7 fc50 	bl	80001d4 <__adddf3>
 8008934:	4622      	mov	r2, r4
 8008936:	462b      	mov	r3, r5
 8008938:	f7f7 fe02 	bl	8000540 <__aeabi_dmul>
 800893c:	a356      	add	r3, pc, #344	; (adr r3, 8008a98 <__ieee754_pow+0xa28>)
 800893e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008942:	f7f7 fc45 	bl	80001d0 <__aeabi_dsub>
 8008946:	4622      	mov	r2, r4
 8008948:	462b      	mov	r3, r5
 800894a:	f7f7 fdf9 	bl	8000540 <__aeabi_dmul>
 800894e:	a354      	add	r3, pc, #336	; (adr r3, 8008aa0 <__ieee754_pow+0xa30>)
 8008950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008954:	f7f7 fc3e 	bl	80001d4 <__adddf3>
 8008958:	4622      	mov	r2, r4
 800895a:	462b      	mov	r3, r5
 800895c:	f7f7 fdf0 	bl	8000540 <__aeabi_dmul>
 8008960:	4602      	mov	r2, r0
 8008962:	460b      	mov	r3, r1
 8008964:	4640      	mov	r0, r8
 8008966:	4649      	mov	r1, r9
 8008968:	f7f7 fc32 	bl	80001d0 <__aeabi_dsub>
 800896c:	4604      	mov	r4, r0
 800896e:	460d      	mov	r5, r1
 8008970:	4602      	mov	r2, r0
 8008972:	460b      	mov	r3, r1
 8008974:	4640      	mov	r0, r8
 8008976:	4649      	mov	r1, r9
 8008978:	f7f7 fde2 	bl	8000540 <__aeabi_dmul>
 800897c:	2200      	movs	r2, #0
 800897e:	ec41 0b19 	vmov	d9, r0, r1
 8008982:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008986:	4620      	mov	r0, r4
 8008988:	4629      	mov	r1, r5
 800898a:	f7f7 fc21 	bl	80001d0 <__aeabi_dsub>
 800898e:	4602      	mov	r2, r0
 8008990:	460b      	mov	r3, r1
 8008992:	ec51 0b19 	vmov	r0, r1, d9
 8008996:	f7f7 fefd 	bl	8000794 <__aeabi_ddiv>
 800899a:	4632      	mov	r2, r6
 800899c:	4604      	mov	r4, r0
 800899e:	460d      	mov	r5, r1
 80089a0:	463b      	mov	r3, r7
 80089a2:	4640      	mov	r0, r8
 80089a4:	4649      	mov	r1, r9
 80089a6:	f7f7 fdcb 	bl	8000540 <__aeabi_dmul>
 80089aa:	4632      	mov	r2, r6
 80089ac:	463b      	mov	r3, r7
 80089ae:	f7f7 fc11 	bl	80001d4 <__adddf3>
 80089b2:	4602      	mov	r2, r0
 80089b4:	460b      	mov	r3, r1
 80089b6:	4620      	mov	r0, r4
 80089b8:	4629      	mov	r1, r5
 80089ba:	f7f7 fc09 	bl	80001d0 <__aeabi_dsub>
 80089be:	4642      	mov	r2, r8
 80089c0:	464b      	mov	r3, r9
 80089c2:	f7f7 fc05 	bl	80001d0 <__aeabi_dsub>
 80089c6:	460b      	mov	r3, r1
 80089c8:	4602      	mov	r2, r0
 80089ca:	4939      	ldr	r1, [pc, #228]	; (8008ab0 <__ieee754_pow+0xa40>)
 80089cc:	2000      	movs	r0, #0
 80089ce:	f7f7 fbff 	bl	80001d0 <__aeabi_dsub>
 80089d2:	ec41 0b10 	vmov	d0, r0, r1
 80089d6:	ee10 3a90 	vmov	r3, s1
 80089da:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80089de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089e2:	da2b      	bge.n	8008a3c <__ieee754_pow+0x9cc>
 80089e4:	4650      	mov	r0, sl
 80089e6:	f000 f877 	bl	8008ad8 <scalbn>
 80089ea:	ec51 0b10 	vmov	r0, r1, d0
 80089ee:	ec53 2b18 	vmov	r2, r3, d8
 80089f2:	f7ff bbee 	b.w	80081d2 <__ieee754_pow+0x162>
 80089f6:	4b2f      	ldr	r3, [pc, #188]	; (8008ab4 <__ieee754_pow+0xa44>)
 80089f8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80089fc:	429e      	cmp	r6, r3
 80089fe:	f77f af0d 	ble.w	800881c <__ieee754_pow+0x7ac>
 8008a02:	4b2d      	ldr	r3, [pc, #180]	; (8008ab8 <__ieee754_pow+0xa48>)
 8008a04:	440b      	add	r3, r1
 8008a06:	4303      	orrs	r3, r0
 8008a08:	d009      	beq.n	8008a1e <__ieee754_pow+0x9ae>
 8008a0a:	ec51 0b18 	vmov	r0, r1, d8
 8008a0e:	2200      	movs	r2, #0
 8008a10:	2300      	movs	r3, #0
 8008a12:	f7f8 f807 	bl	8000a24 <__aeabi_dcmplt>
 8008a16:	3800      	subs	r0, #0
 8008a18:	bf18      	it	ne
 8008a1a:	2001      	movne	r0, #1
 8008a1c:	e448      	b.n	80082b0 <__ieee754_pow+0x240>
 8008a1e:	4622      	mov	r2, r4
 8008a20:	462b      	mov	r3, r5
 8008a22:	f7f7 fbd5 	bl	80001d0 <__aeabi_dsub>
 8008a26:	4642      	mov	r2, r8
 8008a28:	464b      	mov	r3, r9
 8008a2a:	f7f8 f80f 	bl	8000a4c <__aeabi_dcmpge>
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	f43f aef4 	beq.w	800881c <__ieee754_pow+0x7ac>
 8008a34:	e7e9      	b.n	8008a0a <__ieee754_pow+0x99a>
 8008a36:	f04f 0a00 	mov.w	sl, #0
 8008a3a:	e71a      	b.n	8008872 <__ieee754_pow+0x802>
 8008a3c:	ec51 0b10 	vmov	r0, r1, d0
 8008a40:	4619      	mov	r1, r3
 8008a42:	e7d4      	b.n	80089ee <__ieee754_pow+0x97e>
 8008a44:	491a      	ldr	r1, [pc, #104]	; (8008ab0 <__ieee754_pow+0xa40>)
 8008a46:	2000      	movs	r0, #0
 8008a48:	f7ff bb31 	b.w	80080ae <__ieee754_pow+0x3e>
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	2100      	movs	r1, #0
 8008a50:	f7ff bb2d 	b.w	80080ae <__ieee754_pow+0x3e>
 8008a54:	4630      	mov	r0, r6
 8008a56:	4639      	mov	r1, r7
 8008a58:	f7ff bb29 	b.w	80080ae <__ieee754_pow+0x3e>
 8008a5c:	9204      	str	r2, [sp, #16]
 8008a5e:	f7ff bb7b 	b.w	8008158 <__ieee754_pow+0xe8>
 8008a62:	2300      	movs	r3, #0
 8008a64:	f7ff bb65 	b.w	8008132 <__ieee754_pow+0xc2>
 8008a68:	00000000 	.word	0x00000000
 8008a6c:	3fe62e43 	.word	0x3fe62e43
 8008a70:	fefa39ef 	.word	0xfefa39ef
 8008a74:	3fe62e42 	.word	0x3fe62e42
 8008a78:	0ca86c39 	.word	0x0ca86c39
 8008a7c:	be205c61 	.word	0xbe205c61
 8008a80:	72bea4d0 	.word	0x72bea4d0
 8008a84:	3e663769 	.word	0x3e663769
 8008a88:	c5d26bf1 	.word	0xc5d26bf1
 8008a8c:	3ebbbd41 	.word	0x3ebbbd41
 8008a90:	af25de2c 	.word	0xaf25de2c
 8008a94:	3f11566a 	.word	0x3f11566a
 8008a98:	16bebd93 	.word	0x16bebd93
 8008a9c:	3f66c16c 	.word	0x3f66c16c
 8008aa0:	5555553e 	.word	0x5555553e
 8008aa4:	3fc55555 	.word	0x3fc55555
 8008aa8:	3fe00000 	.word	0x3fe00000
 8008aac:	fff00000 	.word	0xfff00000
 8008ab0:	3ff00000 	.word	0x3ff00000
 8008ab4:	4090cbff 	.word	0x4090cbff
 8008ab8:	3f6f3400 	.word	0x3f6f3400
 8008abc:	652b82fe 	.word	0x652b82fe
 8008ac0:	3c971547 	.word	0x3c971547

08008ac4 <fabs>:
 8008ac4:	ec51 0b10 	vmov	r0, r1, d0
 8008ac8:	ee10 2a10 	vmov	r2, s0
 8008acc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008ad0:	ec43 2b10 	vmov	d0, r2, r3
 8008ad4:	4770      	bx	lr
	...

08008ad8 <scalbn>:
 8008ad8:	b570      	push	{r4, r5, r6, lr}
 8008ada:	ec55 4b10 	vmov	r4, r5, d0
 8008ade:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008ae2:	4606      	mov	r6, r0
 8008ae4:	462b      	mov	r3, r5
 8008ae6:	b999      	cbnz	r1, 8008b10 <scalbn+0x38>
 8008ae8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008aec:	4323      	orrs	r3, r4
 8008aee:	d03f      	beq.n	8008b70 <scalbn+0x98>
 8008af0:	4b35      	ldr	r3, [pc, #212]	; (8008bc8 <scalbn+0xf0>)
 8008af2:	4629      	mov	r1, r5
 8008af4:	ee10 0a10 	vmov	r0, s0
 8008af8:	2200      	movs	r2, #0
 8008afa:	f7f7 fd21 	bl	8000540 <__aeabi_dmul>
 8008afe:	4b33      	ldr	r3, [pc, #204]	; (8008bcc <scalbn+0xf4>)
 8008b00:	429e      	cmp	r6, r3
 8008b02:	4604      	mov	r4, r0
 8008b04:	460d      	mov	r5, r1
 8008b06:	da10      	bge.n	8008b2a <scalbn+0x52>
 8008b08:	a327      	add	r3, pc, #156	; (adr r3, 8008ba8 <scalbn+0xd0>)
 8008b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0e:	e01f      	b.n	8008b50 <scalbn+0x78>
 8008b10:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008b14:	4291      	cmp	r1, r2
 8008b16:	d10c      	bne.n	8008b32 <scalbn+0x5a>
 8008b18:	ee10 2a10 	vmov	r2, s0
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	4629      	mov	r1, r5
 8008b20:	f7f7 fb58 	bl	80001d4 <__adddf3>
 8008b24:	4604      	mov	r4, r0
 8008b26:	460d      	mov	r5, r1
 8008b28:	e022      	b.n	8008b70 <scalbn+0x98>
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008b30:	3936      	subs	r1, #54	; 0x36
 8008b32:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008b36:	4296      	cmp	r6, r2
 8008b38:	dd0d      	ble.n	8008b56 <scalbn+0x7e>
 8008b3a:	2d00      	cmp	r5, #0
 8008b3c:	a11c      	add	r1, pc, #112	; (adr r1, 8008bb0 <scalbn+0xd8>)
 8008b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b42:	da02      	bge.n	8008b4a <scalbn+0x72>
 8008b44:	a11c      	add	r1, pc, #112	; (adr r1, 8008bb8 <scalbn+0xe0>)
 8008b46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b4a:	a319      	add	r3, pc, #100	; (adr r3, 8008bb0 <scalbn+0xd8>)
 8008b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b50:	f7f7 fcf6 	bl	8000540 <__aeabi_dmul>
 8008b54:	e7e6      	b.n	8008b24 <scalbn+0x4c>
 8008b56:	1872      	adds	r2, r6, r1
 8008b58:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008b5c:	428a      	cmp	r2, r1
 8008b5e:	dcec      	bgt.n	8008b3a <scalbn+0x62>
 8008b60:	2a00      	cmp	r2, #0
 8008b62:	dd08      	ble.n	8008b76 <scalbn+0x9e>
 8008b64:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b68:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008b6c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008b70:	ec45 4b10 	vmov	d0, r4, r5
 8008b74:	bd70      	pop	{r4, r5, r6, pc}
 8008b76:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008b7a:	da08      	bge.n	8008b8e <scalbn+0xb6>
 8008b7c:	2d00      	cmp	r5, #0
 8008b7e:	a10a      	add	r1, pc, #40	; (adr r1, 8008ba8 <scalbn+0xd0>)
 8008b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b84:	dac0      	bge.n	8008b08 <scalbn+0x30>
 8008b86:	a10e      	add	r1, pc, #56	; (adr r1, 8008bc0 <scalbn+0xe8>)
 8008b88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b8c:	e7bc      	b.n	8008b08 <scalbn+0x30>
 8008b8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b92:	3236      	adds	r2, #54	; 0x36
 8008b94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008b98:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	4b0c      	ldr	r3, [pc, #48]	; (8008bd0 <scalbn+0xf8>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	e7d5      	b.n	8008b50 <scalbn+0x78>
 8008ba4:	f3af 8000 	nop.w
 8008ba8:	c2f8f359 	.word	0xc2f8f359
 8008bac:	01a56e1f 	.word	0x01a56e1f
 8008bb0:	8800759c 	.word	0x8800759c
 8008bb4:	7e37e43c 	.word	0x7e37e43c
 8008bb8:	8800759c 	.word	0x8800759c
 8008bbc:	fe37e43c 	.word	0xfe37e43c
 8008bc0:	c2f8f359 	.word	0xc2f8f359
 8008bc4:	81a56e1f 	.word	0x81a56e1f
 8008bc8:	43500000 	.word	0x43500000
 8008bcc:	ffff3cb0 	.word	0xffff3cb0
 8008bd0:	3c900000 	.word	0x3c900000

08008bd4 <with_errno>:
 8008bd4:	b570      	push	{r4, r5, r6, lr}
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	460d      	mov	r5, r1
 8008bda:	4616      	mov	r6, r2
 8008bdc:	f7ff f8f8 	bl	8007dd0 <__errno>
 8008be0:	4629      	mov	r1, r5
 8008be2:	6006      	str	r6, [r0, #0]
 8008be4:	4620      	mov	r0, r4
 8008be6:	bd70      	pop	{r4, r5, r6, pc}

08008be8 <xflow>:
 8008be8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bea:	4614      	mov	r4, r2
 8008bec:	461d      	mov	r5, r3
 8008bee:	b108      	cbz	r0, 8008bf4 <xflow+0xc>
 8008bf0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008bf4:	e9cd 2300 	strd	r2, r3, [sp]
 8008bf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	4629      	mov	r1, r5
 8008c00:	f7f7 fc9e 	bl	8000540 <__aeabi_dmul>
 8008c04:	2222      	movs	r2, #34	; 0x22
 8008c06:	b003      	add	sp, #12
 8008c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c0c:	f7ff bfe2 	b.w	8008bd4 <with_errno>

08008c10 <__math_uflow>:
 8008c10:	b508      	push	{r3, lr}
 8008c12:	2200      	movs	r2, #0
 8008c14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008c18:	f7ff ffe6 	bl	8008be8 <xflow>
 8008c1c:	ec41 0b10 	vmov	d0, r0, r1
 8008c20:	bd08      	pop	{r3, pc}

08008c22 <__math_oflow>:
 8008c22:	b508      	push	{r3, lr}
 8008c24:	2200      	movs	r2, #0
 8008c26:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008c2a:	f7ff ffdd 	bl	8008be8 <xflow>
 8008c2e:	ec41 0b10 	vmov	d0, r0, r1
 8008c32:	bd08      	pop	{r3, pc}

08008c34 <__ieee754_sqrt>:
 8008c34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c38:	ec55 4b10 	vmov	r4, r5, d0
 8008c3c:	4e67      	ldr	r6, [pc, #412]	; (8008ddc <__ieee754_sqrt+0x1a8>)
 8008c3e:	43ae      	bics	r6, r5
 8008c40:	ee10 0a10 	vmov	r0, s0
 8008c44:	ee10 2a10 	vmov	r2, s0
 8008c48:	4629      	mov	r1, r5
 8008c4a:	462b      	mov	r3, r5
 8008c4c:	d10d      	bne.n	8008c6a <__ieee754_sqrt+0x36>
 8008c4e:	f7f7 fc77 	bl	8000540 <__aeabi_dmul>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	4620      	mov	r0, r4
 8008c58:	4629      	mov	r1, r5
 8008c5a:	f7f7 fabb 	bl	80001d4 <__adddf3>
 8008c5e:	4604      	mov	r4, r0
 8008c60:	460d      	mov	r5, r1
 8008c62:	ec45 4b10 	vmov	d0, r4, r5
 8008c66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c6a:	2d00      	cmp	r5, #0
 8008c6c:	dc0b      	bgt.n	8008c86 <__ieee754_sqrt+0x52>
 8008c6e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008c72:	4326      	orrs	r6, r4
 8008c74:	d0f5      	beq.n	8008c62 <__ieee754_sqrt+0x2e>
 8008c76:	b135      	cbz	r5, 8008c86 <__ieee754_sqrt+0x52>
 8008c78:	f7f7 faaa 	bl	80001d0 <__aeabi_dsub>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	460b      	mov	r3, r1
 8008c80:	f7f7 fd88 	bl	8000794 <__aeabi_ddiv>
 8008c84:	e7eb      	b.n	8008c5e <__ieee754_sqrt+0x2a>
 8008c86:	1509      	asrs	r1, r1, #20
 8008c88:	f000 808d 	beq.w	8008da6 <__ieee754_sqrt+0x172>
 8008c8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c90:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8008c94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c98:	07c9      	lsls	r1, r1, #31
 8008c9a:	bf5c      	itt	pl
 8008c9c:	005b      	lslpl	r3, r3, #1
 8008c9e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8008ca2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ca6:	bf58      	it	pl
 8008ca8:	0052      	lslpl	r2, r2, #1
 8008caa:	2500      	movs	r5, #0
 8008cac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008cb0:	1076      	asrs	r6, r6, #1
 8008cb2:	0052      	lsls	r2, r2, #1
 8008cb4:	f04f 0e16 	mov.w	lr, #22
 8008cb8:	46ac      	mov	ip, r5
 8008cba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008cbe:	eb0c 0001 	add.w	r0, ip, r1
 8008cc2:	4298      	cmp	r0, r3
 8008cc4:	bfde      	ittt	le
 8008cc6:	1a1b      	suble	r3, r3, r0
 8008cc8:	eb00 0c01 	addle.w	ip, r0, r1
 8008ccc:	186d      	addle	r5, r5, r1
 8008cce:	005b      	lsls	r3, r3, #1
 8008cd0:	f1be 0e01 	subs.w	lr, lr, #1
 8008cd4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008cd8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008cdc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008ce0:	d1ed      	bne.n	8008cbe <__ieee754_sqrt+0x8a>
 8008ce2:	4674      	mov	r4, lr
 8008ce4:	2720      	movs	r7, #32
 8008ce6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008cea:	4563      	cmp	r3, ip
 8008cec:	eb01 000e 	add.w	r0, r1, lr
 8008cf0:	dc02      	bgt.n	8008cf8 <__ieee754_sqrt+0xc4>
 8008cf2:	d113      	bne.n	8008d1c <__ieee754_sqrt+0xe8>
 8008cf4:	4290      	cmp	r0, r2
 8008cf6:	d811      	bhi.n	8008d1c <__ieee754_sqrt+0xe8>
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	eb00 0e01 	add.w	lr, r0, r1
 8008cfe:	da57      	bge.n	8008db0 <__ieee754_sqrt+0x17c>
 8008d00:	f1be 0f00 	cmp.w	lr, #0
 8008d04:	db54      	blt.n	8008db0 <__ieee754_sqrt+0x17c>
 8008d06:	f10c 0801 	add.w	r8, ip, #1
 8008d0a:	eba3 030c 	sub.w	r3, r3, ip
 8008d0e:	4290      	cmp	r0, r2
 8008d10:	bf88      	it	hi
 8008d12:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008d16:	1a12      	subs	r2, r2, r0
 8008d18:	440c      	add	r4, r1
 8008d1a:	46c4      	mov	ip, r8
 8008d1c:	005b      	lsls	r3, r3, #1
 8008d1e:	3f01      	subs	r7, #1
 8008d20:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008d24:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008d28:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008d2c:	d1dd      	bne.n	8008cea <__ieee754_sqrt+0xb6>
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	d01b      	beq.n	8008d6a <__ieee754_sqrt+0x136>
 8008d32:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008de0 <__ieee754_sqrt+0x1ac>
 8008d36:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008de4 <__ieee754_sqrt+0x1b0>
 8008d3a:	e9da 0100 	ldrd	r0, r1, [sl]
 8008d3e:	e9db 2300 	ldrd	r2, r3, [fp]
 8008d42:	f7f7 fa45 	bl	80001d0 <__aeabi_dsub>
 8008d46:	e9da 8900 	ldrd	r8, r9, [sl]
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	4640      	mov	r0, r8
 8008d50:	4649      	mov	r1, r9
 8008d52:	f7f7 fe71 	bl	8000a38 <__aeabi_dcmple>
 8008d56:	b140      	cbz	r0, 8008d6a <__ieee754_sqrt+0x136>
 8008d58:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008d5c:	e9da 0100 	ldrd	r0, r1, [sl]
 8008d60:	e9db 2300 	ldrd	r2, r3, [fp]
 8008d64:	d126      	bne.n	8008db4 <__ieee754_sqrt+0x180>
 8008d66:	3501      	adds	r5, #1
 8008d68:	463c      	mov	r4, r7
 8008d6a:	106a      	asrs	r2, r5, #1
 8008d6c:	0863      	lsrs	r3, r4, #1
 8008d6e:	07e9      	lsls	r1, r5, #31
 8008d70:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008d74:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008d78:	bf48      	it	mi
 8008d7a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008d7e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8008d82:	461c      	mov	r4, r3
 8008d84:	e76d      	b.n	8008c62 <__ieee754_sqrt+0x2e>
 8008d86:	0ad3      	lsrs	r3, r2, #11
 8008d88:	3815      	subs	r0, #21
 8008d8a:	0552      	lsls	r2, r2, #21
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d0fa      	beq.n	8008d86 <__ieee754_sqrt+0x152>
 8008d90:	02dc      	lsls	r4, r3, #11
 8008d92:	d50a      	bpl.n	8008daa <__ieee754_sqrt+0x176>
 8008d94:	f1c1 0420 	rsb	r4, r1, #32
 8008d98:	fa22 f404 	lsr.w	r4, r2, r4
 8008d9c:	1e4d      	subs	r5, r1, #1
 8008d9e:	408a      	lsls	r2, r1
 8008da0:	4323      	orrs	r3, r4
 8008da2:	1b41      	subs	r1, r0, r5
 8008da4:	e772      	b.n	8008c8c <__ieee754_sqrt+0x58>
 8008da6:	4608      	mov	r0, r1
 8008da8:	e7f0      	b.n	8008d8c <__ieee754_sqrt+0x158>
 8008daa:	005b      	lsls	r3, r3, #1
 8008dac:	3101      	adds	r1, #1
 8008dae:	e7ef      	b.n	8008d90 <__ieee754_sqrt+0x15c>
 8008db0:	46e0      	mov	r8, ip
 8008db2:	e7aa      	b.n	8008d0a <__ieee754_sqrt+0xd6>
 8008db4:	f7f7 fa0e 	bl	80001d4 <__adddf3>
 8008db8:	e9da 8900 	ldrd	r8, r9, [sl]
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	4640      	mov	r0, r8
 8008dc2:	4649      	mov	r1, r9
 8008dc4:	f7f7 fe2e 	bl	8000a24 <__aeabi_dcmplt>
 8008dc8:	b120      	cbz	r0, 8008dd4 <__ieee754_sqrt+0x1a0>
 8008dca:	1ca0      	adds	r0, r4, #2
 8008dcc:	bf08      	it	eq
 8008dce:	3501      	addeq	r5, #1
 8008dd0:	3402      	adds	r4, #2
 8008dd2:	e7ca      	b.n	8008d6a <__ieee754_sqrt+0x136>
 8008dd4:	3401      	adds	r4, #1
 8008dd6:	f024 0401 	bic.w	r4, r4, #1
 8008dda:	e7c6      	b.n	8008d6a <__ieee754_sqrt+0x136>
 8008ddc:	7ff00000 	.word	0x7ff00000
 8008de0:	200000c8 	.word	0x200000c8
 8008de4:	200000d0 	.word	0x200000d0

08008de8 <_init>:
 8008de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dea:	bf00      	nop
 8008dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dee:	bc08      	pop	{r3}
 8008df0:	469e      	mov	lr, r3
 8008df2:	4770      	bx	lr

08008df4 <_fini>:
 8008df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df6:	bf00      	nop
 8008df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dfa:	bc08      	pop	{r3}
 8008dfc:	469e      	mov	lr, r3
 8008dfe:	4770      	bx	lr
