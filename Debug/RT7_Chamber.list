
RT7_Chamber.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1e0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cd8  0800d368  0800d368  0001d368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e040  0800e040  000200e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e040  0800e040  0001e040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e048  0800e048  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e048  0800e048  0001e048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e04c  0800e04c  0001e04c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  0800e050  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200e8  2**0
                  CONTENTS
 10 .bss          0000320c  200000e8  200000e8  000200e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200032f4  200032f4  000200e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ff75  00000000  00000000  0002015b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000057cb  00000000  00000000  000400d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b38  00000000  00000000  000458a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000014c7  00000000  00000000  000473d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027b95  00000000  00000000  0004889f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000280b7  00000000  00000000  00070434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5ded  00000000  00000000  000984eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000077a0  00000000  00000000  0016e2d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00175a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000e8 	.word	0x200000e8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d350 	.word	0x0800d350

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000ec 	.word	0x200000ec
 80001c4:	0800d350 	.word	0x0800d350

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_uldivmod>:
 8000b30:	b953      	cbnz	r3, 8000b48 <__aeabi_uldivmod+0x18>
 8000b32:	b94a      	cbnz	r2, 8000b48 <__aeabi_uldivmod+0x18>
 8000b34:	2900      	cmp	r1, #0
 8000b36:	bf08      	it	eq
 8000b38:	2800      	cmpeq	r0, #0
 8000b3a:	bf1c      	itt	ne
 8000b3c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b40:	f04f 30ff 	movne.w	r0, #4294967295
 8000b44:	f000 b9a6 	b.w	8000e94 <__aeabi_idiv0>
 8000b48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b50:	f000 f83c 	bl	8000bcc <__udivmoddi4>
 8000b54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b5c:	b004      	add	sp, #16
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2lz>:
 8000b60:	b538      	push	{r3, r4, r5, lr}
 8000b62:	2200      	movs	r2, #0
 8000b64:	2300      	movs	r3, #0
 8000b66:	4604      	mov	r4, r0
 8000b68:	460d      	mov	r5, r1
 8000b6a:	f7ff ff5b 	bl	8000a24 <__aeabi_dcmplt>
 8000b6e:	b928      	cbnz	r0, 8000b7c <__aeabi_d2lz+0x1c>
 8000b70:	4620      	mov	r0, r4
 8000b72:	4629      	mov	r1, r5
 8000b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b78:	f000 b80a 	b.w	8000b90 <__aeabi_d2ulz>
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000b82:	f000 f805 	bl	8000b90 <__aeabi_d2ulz>
 8000b86:	4240      	negs	r0, r0
 8000b88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b8c:	bd38      	pop	{r3, r4, r5, pc}
 8000b8e:	bf00      	nop

08000b90 <__aeabi_d2ulz>:
 8000b90:	b5d0      	push	{r4, r6, r7, lr}
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <__aeabi_d2ulz+0x34>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	4606      	mov	r6, r0
 8000b98:	460f      	mov	r7, r1
 8000b9a:	f7ff fcd1 	bl	8000540 <__aeabi_dmul>
 8000b9e:	f7ff ffa7 	bl	8000af0 <__aeabi_d2uiz>
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	f7ff fc52 	bl	800044c <__aeabi_ui2d>
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <__aeabi_d2ulz+0x38>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	f7ff fcc8 	bl	8000540 <__aeabi_dmul>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	4630      	mov	r0, r6
 8000bb6:	4639      	mov	r1, r7
 8000bb8:	f7ff fb0a 	bl	80001d0 <__aeabi_dsub>
 8000bbc:	f7ff ff98 	bl	8000af0 <__aeabi_d2uiz>
 8000bc0:	4621      	mov	r1, r4
 8000bc2:	bdd0      	pop	{r4, r6, r7, pc}
 8000bc4:	3df00000 	.word	0x3df00000
 8000bc8:	41f00000 	.word	0x41f00000

08000bcc <__udivmoddi4>:
 8000bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd0:	9e08      	ldr	r6, [sp, #32]
 8000bd2:	460d      	mov	r5, r1
 8000bd4:	4604      	mov	r4, r0
 8000bd6:	460f      	mov	r7, r1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d14a      	bne.n	8000c72 <__udivmoddi4+0xa6>
 8000bdc:	428a      	cmp	r2, r1
 8000bde:	4694      	mov	ip, r2
 8000be0:	d965      	bls.n	8000cae <__udivmoddi4+0xe2>
 8000be2:	fab2 f382 	clz	r3, r2
 8000be6:	b143      	cbz	r3, 8000bfa <__udivmoddi4+0x2e>
 8000be8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bec:	f1c3 0220 	rsb	r2, r3, #32
 8000bf0:	409f      	lsls	r7, r3
 8000bf2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bf6:	4317      	orrs	r7, r2
 8000bf8:	409c      	lsls	r4, r3
 8000bfa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bfe:	fa1f f58c 	uxth.w	r5, ip
 8000c02:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c06:	0c22      	lsrs	r2, r4, #16
 8000c08:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c0c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c10:	fb01 f005 	mul.w	r0, r1, r5
 8000c14:	4290      	cmp	r0, r2
 8000c16:	d90a      	bls.n	8000c2e <__udivmoddi4+0x62>
 8000c18:	eb1c 0202 	adds.w	r2, ip, r2
 8000c1c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c20:	f080 811c 	bcs.w	8000e5c <__udivmoddi4+0x290>
 8000c24:	4290      	cmp	r0, r2
 8000c26:	f240 8119 	bls.w	8000e5c <__udivmoddi4+0x290>
 8000c2a:	3902      	subs	r1, #2
 8000c2c:	4462      	add	r2, ip
 8000c2e:	1a12      	subs	r2, r2, r0
 8000c30:	b2a4      	uxth	r4, r4
 8000c32:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c36:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c3a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c3e:	fb00 f505 	mul.w	r5, r0, r5
 8000c42:	42a5      	cmp	r5, r4
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x90>
 8000c46:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c4e:	f080 8107 	bcs.w	8000e60 <__udivmoddi4+0x294>
 8000c52:	42a5      	cmp	r5, r4
 8000c54:	f240 8104 	bls.w	8000e60 <__udivmoddi4+0x294>
 8000c58:	4464      	add	r4, ip
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c60:	1b64      	subs	r4, r4, r5
 8000c62:	2100      	movs	r1, #0
 8000c64:	b11e      	cbz	r6, 8000c6e <__udivmoddi4+0xa2>
 8000c66:	40dc      	lsrs	r4, r3
 8000c68:	2300      	movs	r3, #0
 8000c6a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0xbc>
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	f000 80ed 	beq.w	8000e56 <__udivmoddi4+0x28a>
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c82:	4608      	mov	r0, r1
 8000c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c88:	fab3 f183 	clz	r1, r3
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	d149      	bne.n	8000d24 <__udivmoddi4+0x158>
 8000c90:	42ab      	cmp	r3, r5
 8000c92:	d302      	bcc.n	8000c9a <__udivmoddi4+0xce>
 8000c94:	4282      	cmp	r2, r0
 8000c96:	f200 80f8 	bhi.w	8000e8a <__udivmoddi4+0x2be>
 8000c9a:	1a84      	subs	r4, r0, r2
 8000c9c:	eb65 0203 	sbc.w	r2, r5, r3
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	4617      	mov	r7, r2
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	d0e2      	beq.n	8000c6e <__udivmoddi4+0xa2>
 8000ca8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cac:	e7df      	b.n	8000c6e <__udivmoddi4+0xa2>
 8000cae:	b902      	cbnz	r2, 8000cb2 <__udivmoddi4+0xe6>
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	fab2 f382 	clz	r3, r2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x210>
 8000cbc:	1a8a      	subs	r2, r1, r2
 8000cbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc2:	fa1f fe8c 	uxth.w	lr, ip
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ccc:	fb07 2015 	mls	r0, r7, r5, r2
 8000cd0:	0c22      	lsrs	r2, r4, #16
 8000cd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cd6:	fb0e f005 	mul.w	r0, lr, r5
 8000cda:	4290      	cmp	r0, r2
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x124>
 8000cde:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x122>
 8000ce8:	4290      	cmp	r0, r2
 8000cea:	f200 80cb 	bhi.w	8000e84 <__udivmoddi4+0x2b8>
 8000cee:	4645      	mov	r5, r8
 8000cf0:	1a12      	subs	r2, r2, r0
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cf8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d00:	fb0e fe00 	mul.w	lr, lr, r0
 8000d04:	45a6      	cmp	lr, r4
 8000d06:	d908      	bls.n	8000d1a <__udivmoddi4+0x14e>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d10:	d202      	bcs.n	8000d18 <__udivmoddi4+0x14c>
 8000d12:	45a6      	cmp	lr, r4
 8000d14:	f200 80bb 	bhi.w	8000e8e <__udivmoddi4+0x2c2>
 8000d18:	4610      	mov	r0, r2
 8000d1a:	eba4 040e 	sub.w	r4, r4, lr
 8000d1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d22:	e79f      	b.n	8000c64 <__udivmoddi4+0x98>
 8000d24:	f1c1 0720 	rsb	r7, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d32:	fa05 f401 	lsl.w	r4, r5, r1
 8000d36:	fa20 f307 	lsr.w	r3, r0, r7
 8000d3a:	40fd      	lsrs	r5, r7
 8000d3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d54:	fb08 f50e 	mul.w	r5, r8, lr
 8000d58:	42a5      	cmp	r5, r4
 8000d5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d62:	d90b      	bls.n	8000d7c <__udivmoddi4+0x1b0>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d6c:	f080 8088 	bcs.w	8000e80 <__udivmoddi4+0x2b4>
 8000d70:	42a5      	cmp	r5, r4
 8000d72:	f240 8085 	bls.w	8000e80 <__udivmoddi4+0x2b4>
 8000d76:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7a:	4464      	add	r4, ip
 8000d7c:	1b64      	subs	r4, r4, r5
 8000d7e:	b29d      	uxth	r5, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1da>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d9c:	d26c      	bcs.n	8000e78 <__udivmoddi4+0x2ac>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	d96a      	bls.n	8000e78 <__udivmoddi4+0x2ac>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	4464      	add	r4, ip
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fba3 9502 	umull	r9, r5, r3, r2
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	42ac      	cmp	r4, r5
 8000db4:	46c8      	mov	r8, r9
 8000db6:	46ae      	mov	lr, r5
 8000db8:	d356      	bcc.n	8000e68 <__udivmoddi4+0x29c>
 8000dba:	d053      	beq.n	8000e64 <__udivmoddi4+0x298>
 8000dbc:	b156      	cbz	r6, 8000dd4 <__udivmoddi4+0x208>
 8000dbe:	ebb0 0208 	subs.w	r2, r0, r8
 8000dc2:	eb64 040e 	sbc.w	r4, r4, lr
 8000dc6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dca:	40ca      	lsrs	r2, r1
 8000dcc:	40cc      	lsrs	r4, r1
 8000dce:	4317      	orrs	r7, r2
 8000dd0:	e9c6 7400 	strd	r7, r4, [r6]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ddc:	f1c3 0120 	rsb	r1, r3, #32
 8000de0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000de4:	fa20 f201 	lsr.w	r2, r0, r1
 8000de8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dec:	409d      	lsls	r5, r3
 8000dee:	432a      	orrs	r2, r5
 8000df0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df4:	fa1f fe8c 	uxth.w	lr, ip
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1510 	mls	r5, r7, r0, r1
 8000e00:	0c11      	lsrs	r1, r2, #16
 8000e02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e06:	fb00 f50e 	mul.w	r5, r0, lr
 8000e0a:	428d      	cmp	r5, r1
 8000e0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x258>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e1a:	d22f      	bcs.n	8000e7c <__udivmoddi4+0x2b0>
 8000e1c:	428d      	cmp	r5, r1
 8000e1e:	d92d      	bls.n	8000e7c <__udivmoddi4+0x2b0>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4461      	add	r1, ip
 8000e24:	1b49      	subs	r1, r1, r5
 8000e26:	b292      	uxth	r2, r2
 8000e28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e34:	fb05 f10e 	mul.w	r1, r5, lr
 8000e38:	4291      	cmp	r1, r2
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x282>
 8000e3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e40:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e44:	d216      	bcs.n	8000e74 <__udivmoddi4+0x2a8>
 8000e46:	4291      	cmp	r1, r2
 8000e48:	d914      	bls.n	8000e74 <__udivmoddi4+0x2a8>
 8000e4a:	3d02      	subs	r5, #2
 8000e4c:	4462      	add	r2, ip
 8000e4e:	1a52      	subs	r2, r2, r1
 8000e50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e54:	e738      	b.n	8000cc8 <__udivmoddi4+0xfc>
 8000e56:	4631      	mov	r1, r6
 8000e58:	4630      	mov	r0, r6
 8000e5a:	e708      	b.n	8000c6e <__udivmoddi4+0xa2>
 8000e5c:	4639      	mov	r1, r7
 8000e5e:	e6e6      	b.n	8000c2e <__udivmoddi4+0x62>
 8000e60:	4610      	mov	r0, r2
 8000e62:	e6fb      	b.n	8000c5c <__udivmoddi4+0x90>
 8000e64:	4548      	cmp	r0, r9
 8000e66:	d2a9      	bcs.n	8000dbc <__udivmoddi4+0x1f0>
 8000e68:	ebb9 0802 	subs.w	r8, r9, r2
 8000e6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e70:	3b01      	subs	r3, #1
 8000e72:	e7a3      	b.n	8000dbc <__udivmoddi4+0x1f0>
 8000e74:	4645      	mov	r5, r8
 8000e76:	e7ea      	b.n	8000e4e <__udivmoddi4+0x282>
 8000e78:	462b      	mov	r3, r5
 8000e7a:	e794      	b.n	8000da6 <__udivmoddi4+0x1da>
 8000e7c:	4640      	mov	r0, r8
 8000e7e:	e7d1      	b.n	8000e24 <__udivmoddi4+0x258>
 8000e80:	46d0      	mov	r8, sl
 8000e82:	e77b      	b.n	8000d7c <__udivmoddi4+0x1b0>
 8000e84:	3d02      	subs	r5, #2
 8000e86:	4462      	add	r2, ip
 8000e88:	e732      	b.n	8000cf0 <__udivmoddi4+0x124>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e70a      	b.n	8000ca4 <__udivmoddi4+0xd8>
 8000e8e:	4464      	add	r4, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e742      	b.n	8000d1a <__udivmoddi4+0x14e>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <adc_init>:


#include "adc.h"

void adc_init(adc_t* self)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	self->vtable->init(self);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	4798      	blx	r3
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <adc_update>:

void adc_update(adc_t* self, void* option)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	6039      	str	r1, [r7, #0]
	self->vtable->update(self, option);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	6839      	ldr	r1, [r7, #0]
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	4798      	blx	r3
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <adc_get_cnt>:

uint32_t adc_get_cnt(adc_t* self)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	return self->vtable->get_cnt(self);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	4798      	blx	r3
 8000ee2:	4603      	mov	r3, r0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <adc_get_vout>:

double adc_get_vout(adc_t* self)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	return self->vtable->get_vout(self);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	4798      	blx	r3
 8000efe:	eeb0 7a40 	vmov.f32	s14, s0
 8000f02:	eef0 7a60 	vmov.f32	s15, s1
}
 8000f06:	eeb0 0a47 	vmov.f32	s0, s14
 8000f0a:	eef0 0a67 	vmov.f32	s1, s15
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <init>:

	AD7791_state_t state;
};

static void init(adc_t* self)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <update>:

static void update(adc_t* self, void* option)
{
 8000f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f2c:	b087      	sub	sp, #28
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	6039      	str	r1, [r7, #0]
	switch(self->data->state)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f3c:	2b03      	cmp	r3, #3
 8000f3e:	f200 80e7 	bhi.w	8001110 <update+0x1e8>
 8000f42:	a201      	add	r2, pc, #4	; (adr r2, 8000f48 <update+0x20>)
 8000f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f48:	08000f59 	.word	0x08000f59
 8000f4c:	08000f81 	.word	0x08000f81
 8000f50:	08000fe3 	.word	0x08000fe3
 8000f54:	08001045 	.word	0x08001045
	{
	case AD7791_WAIT: // wait several cycles
		spi_deselect(self);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 f9a1 	bl	80012a0 <spi_deselect>
		self->data->waitCycles--;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f64:	3a01      	subs	r2, #1
 8000f66:	625a      	str	r2, [r3, #36]	; 0x24
		if(!self->data->waitCycles)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f040 80cd 	bne.w	800110e <update+0x1e6>
		{
			self->data->state = AD7791_SETUP_FR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		break;
 8000f7e:	e0c6      	b.n	800110e <update+0x1e6>
	case AD7791_SETUP_FR: // write to filter register
		if(self->data->setupWaitCycles == self->data->setupWaitCyclesMax)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d111      	bne.n	8000fb4 <update+0x8c>
		{
			spi_select(self);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 f973 	bl	800127c <spi_select>
			//delay_us(1); // delay
			spi_hw_command(self, 0x20);
 8000f96:	2120      	movs	r1, #32
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 f993 	bl	80012c4 <spi_hw_command>
			spi_hw_command(self, self->data->FR_word);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 f98b 	bl	80012c4 <spi_hw_command>
			//delay_us(1); // delay
			spi_deselect(self);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 f976 	bl	80012a0 <spi_deselect>
		}
		if(!self->data->setupWaitCycles)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d10b      	bne.n	8000fd6 <update+0xae>
		{
			self->data->setupWaitCycles = self->data->setupWaitCyclesMax; // RESET COUNTER
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000fc8:	629a      	str	r2, [r3, #40]	; 0x28
			self->data->state = AD7791_SETUP_MR; // NEXT STATE
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2202      	movs	r2, #2
 8000fd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		else
		{
			self->data->setupWaitCycles--;
		}
		break;
 8000fd4:	e09c      	b.n	8001110 <update+0x1e8>
			self->data->setupWaitCycles--;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fdc:	3a01      	subs	r2, #1
 8000fde:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8000fe0:	e096      	b.n	8001110 <update+0x1e8>
	case AD7791_SETUP_MR: // write to mode register
		if(self->data->setupWaitCycles == self->data->setupWaitCyclesMax)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d111      	bne.n	8001016 <update+0xee>
		{
			spi_select(self);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 f942 	bl	800127c <spi_select>
			//delay_us(1); // delay
			spi_hw_command(self, 0x10);
 8000ff8:	2110      	movs	r1, #16
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 f962 	bl	80012c4 <spi_hw_command>
			spi_hw_command(self, self->data->MR_word);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001008:	4619      	mov	r1, r3
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f95a 	bl	80012c4 <spi_hw_command>
			//delay_us(1); // delay
			spi_deselect(self);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 f945 	bl	80012a0 <spi_deselect>
		}
		if(!self->data->setupWaitCycles)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101c:	2b00      	cmp	r3, #0
 800101e:	d10b      	bne.n	8001038 <update+0x110>
		{
			self->data->setupWaitCycles = self->data->setupWaitCyclesMax; // RESET COUNTER
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800102a:	629a      	str	r2, [r3, #40]	; 0x28
			self->data->state = AD7791_MEASURE;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2203      	movs	r2, #3
 8001032:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		else
		{
			self->data->setupWaitCycles--;
		}
		break;
 8001036:	e06b      	b.n	8001110 <update+0x1e8>
			self->data->setupWaitCycles--;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800103e:	3a01      	subs	r2, #1
 8001040:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8001042:	e065      	b.n	8001110 <update+0x1e8>
	case AD7791_MEASURE:  // measure
		const uint8_t kDataSizeBytes = 3;
 8001044:	2303      	movs	r3, #3
 8001046:	74fb      	strb	r3, [r7, #19]
		const uint8_t kBufferSizeBytes = 4;
 8001048:	2304      	movs	r3, #4
 800104a:	74bb      	strb	r3, [r7, #18]
		uint8_t rxBytes [kBufferSizeBytes];
 800104c:	466b      	mov	r3, sp
 800104e:	461e      	mov	r6, r3
 8001050:	7cbb      	ldrb	r3, [r7, #18]
 8001052:	3b01      	subs	r3, #1
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	7cbb      	ldrb	r3, [r7, #18]
 8001058:	2200      	movs	r2, #0
 800105a:	4698      	mov	r8, r3
 800105c:	4691      	mov	r9, r2
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800106a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800106e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001072:	7cbb      	ldrb	r3, [r7, #18]
 8001074:	2200      	movs	r2, #0
 8001076:	461c      	mov	r4, r3
 8001078:	4615      	mov	r5, r2
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	f04f 0300 	mov.w	r3, #0
 8001082:	00eb      	lsls	r3, r5, #3
 8001084:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001088:	00e2      	lsls	r2, r4, #3
 800108a:	7cbb      	ldrb	r3, [r7, #18]
 800108c:	3307      	adds	r3, #7
 800108e:	08db      	lsrs	r3, r3, #3
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	ebad 0d03 	sub.w	sp, sp, r3
 8001096:	466b      	mov	r3, sp
 8001098:	3300      	adds	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
		memset(rxBytes, 0, kBufferSizeBytes);
 800109c:	7cbb      	ldrb	r3, [r7, #18]
 800109e:	461a      	mov	r2, r3
 80010a0:	2100      	movs	r1, #0
 80010a2:	68b8      	ldr	r0, [r7, #8]
 80010a4:	f00b f932 	bl	800c30c <memset>
		spi_select(self);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 f8e7 	bl	800127c <spi_select>
		//delay_us(1); // delay
		spi_hw_command(self, 0x38); // read data register
 80010ae:	2138      	movs	r1, #56	; 0x38
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 f907 	bl	80012c4 <spi_hw_command>
		int i;
		for(i = 0; i < kDataSizeBytes; ++i)
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	e019      	b.n	80010f0 <update+0x1c8>
		{
			HAL_SPI_Receive(self->data->hspi, rxBytes + kDataSizeBytes - i - 1, 1, SPI_TIMEOUT);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	7cfa      	ldrb	r2, [r7, #19]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	3b01      	subs	r3, #1
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	18d1      	adds	r1, r2, r3
 80010ce:	230a      	movs	r3, #10
 80010d0:	2201      	movs	r2, #1
 80010d2:	f006 fb0f 	bl	80076f4 <HAL_SPI_Receive>
			while(HAL_SPI_GetState(self->data->hspi) != HAL_SPI_STATE_READY)
 80010d6:	bf00      	nop
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f006 fdd0 	bl	8007c84 <HAL_SPI_GetState>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d1f6      	bne.n	80010d8 <update+0x1b0>
		for(i = 0; i < kDataSizeBytes; ++i)
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	3301      	adds	r3, #1
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	7cfb      	ldrb	r3, [r7, #19]
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	dbe1      	blt.n	80010bc <update+0x194>
				;
		}
		//delay_us(1); // delay
		spi_deselect(self);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f000 f8d1 	bl	80012a0 <spi_deselect>
		self->data->lastOutputValue = *(int32_t*)rxBytes;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	6812      	ldr	r2, [r2, #0]
 8001106:	619a      	str	r2, [r3, #24]

		//self->data->state = AD7791_SETUP_FR;
		break;
 8001108:	bf00      	nop
 800110a:	46b5      	mov	sp, r6
	}
}
 800110c:	e000      	b.n	8001110 <update+0x1e8>
		break;
 800110e:	bf00      	nop
}
 8001110:	bf00      	nop
 8001112:	371c      	adds	r7, #28
 8001114:	46bd      	mov	sp, r7
 8001116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800111a:	bf00      	nop

0800111c <get_cnt>:

static uint32_t get_cnt(adc_t* self)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	return self->data->lastOutputValue;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	699b      	ldr	r3, [r3, #24]
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <get_vout>:

static double get_vout(adc_t* self)
{
 8001136:	b5b0      	push	{r4, r5, r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
	return self->data->Vref * get_cnt(self) / self->data->maxOutputValue;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffe8 	bl	800111c <get_cnt>
 800114c:	4603      	mov	r3, r0
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f97c 	bl	800044c <__aeabi_ui2d>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4620      	mov	r0, r4
 800115a:	4629      	mov	r1, r5
 800115c:	f7ff f9f0 	bl	8000540 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4614      	mov	r4, r2
 8001166:	461d      	mov	r5, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f97c 	bl	800046c <__aeabi_i2d>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4620      	mov	r0, r4
 800117a:	4629      	mov	r1, r5
 800117c:	f7ff fb0a 	bl	8000794 <__aeabi_ddiv>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	ec43 2b17 	vmov	d7, r2, r3
}
 8001188:	eeb0 0a47 	vmov.f32	s0, s14
 800118c:	eef0 0a67 	vmov.f32	s1, s15
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001198 <adc_AD7791_create>:
		double Vref,
		uint8_t FR_word,
		uint8_t MR_word,
		uint32_t waitCycles
		)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6178      	str	r0, [r7, #20]
 80011a0:	6139      	str	r1, [r7, #16]
 80011a2:	60fa      	str	r2, [r7, #12]
 80011a4:	ed87 0b00 	vstr	d0, [r7]
 80011a8:	817b      	strh	r3, [r7, #10]
	adc_t adc;
	adc.vtable = &methods;
 80011aa:	4b33      	ldr	r3, [pc, #204]	; (8001278 <adc_AD7791_create+0xe0>)
 80011ac:	61fb      	str	r3, [r7, #28]
	struct adc_data_t* pdata =
			(struct adc_data_t*)malloc(sizeof(struct adc_data_t));
 80011ae:	2038      	movs	r0, #56	; 0x38
 80011b0:	f00a ffb6 	bl	800c120 <malloc>
 80011b4:	4603      	mov	r3, r0
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
	if(pdata)
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d049      	beq.n	8001252 <adc_AD7791_create+0xba>
	{
		memset(pdata, 0, sizeof(*pdata));
 80011be:	2238      	movs	r2, #56	; 0x38
 80011c0:	2100      	movs	r1, #0
 80011c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011c4:	f00b f8a2 	bl	800c30c <memset>
		pdata->hspi = hspi;
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	601a      	str	r2, [r3, #0]
		pdata->portCS = portCS;
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	605a      	str	r2, [r3, #4]
		pdata->pinCS = pinCS;
 80011d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d6:	897a      	ldrh	r2, [r7, #10]
 80011d8:	811a      	strh	r2, [r3, #8]
		pdata->Vref = Vref;
 80011da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011e0:	e9c1 2304 	strd	r2, r3, [r1, #16]
		pdata->lastOutputValue = 0;
 80011e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
		pdata->bitResolution = 24;
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	2218      	movs	r2, #24
 80011ee:	729a      	strb	r2, [r3, #10]
		pdata->maxOutputValue = (uint32_t)pow(2, pdata->bitResolution);
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	7a9b      	ldrb	r3, [r3, #10]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f929 	bl	800044c <__aeabi_ui2d>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	ec43 2b11 	vmov	d1, r2, r3
 8001202:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8001270 <adc_AD7791_create+0xd8>
 8001206:	f00b f8d3 	bl	800c3b0 <pow>
 800120a:	ec53 2b10 	vmov	r2, r3, d0
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f7ff fc6d 	bl	8000af0 <__aeabi_d2uiz>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121c:	61da      	str	r2, [r3, #28]
		pdata->FR_word = FR_word;
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001224:	f883 2020 	strb.w	r2, [r3, #32]
		pdata->MR_word = MR_word;
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800122e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		pdata->waitCycles = waitCycles;
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001236:	625a      	str	r2, [r3, #36]	; 0x24
		pdata->setupWaitCyclesMax = 5;
 8001238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123a:	2205      	movs	r2, #5
 800123c:	62da      	str	r2, [r3, #44]	; 0x2c
		pdata->setupWaitCycles = pdata->setupWaitCycles;
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	629a      	str	r2, [r3, #40]	; 0x28
		pdata->state = AD7791_WAIT;
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		adc.data = pdata;
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	623b      	str	r3, [r7, #32]
	}
	// init
	return adc;
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	461a      	mov	r2, r3
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800125e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	3728      	adds	r7, #40	; 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	f3af 8000 	nop.w
 8001270:	00000000 	.word	0x00000000
 8001274:	40000000 	.word	0x40000000
 8001278:	20000000 	.word	0x20000000

0800127c <spi_select>:

static void spi_select(adc_t* self)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
			self->data->portCS,
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 8001288:	6858      	ldr	r0, [r3, #4]
			self->data->pinCS,
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 800128e:	891b      	ldrh	r3, [r3, #8]
 8001290:	2200      	movs	r2, #0
 8001292:	4619      	mov	r1, r3
 8001294:	f004 ff56 	bl	8006144 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET
			);
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <spi_deselect>:
static void spi_deselect(adc_t* self)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
			self->data->portCS,
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 80012ac:	6858      	ldr	r0, [r3, #4]
			self->data->pinCS,
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 80012b2:	891b      	ldrh	r3, [r3, #8]
 80012b4:	2201      	movs	r2, #1
 80012b6:	4619      	mov	r1, r3
 80012b8:	f004 ff44 	bl	8006144 <HAL_GPIO_WritePin>
			GPIO_PIN_SET
			);
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <spi_hw_command>:

static void spi_hw_command(adc_t *self, uint8_t cmd)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(self->data->hspi, &cmd, 1, SPI_TIMEOUT);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	6818      	ldr	r0, [r3, #0]
 80012d6:	1cf9      	adds	r1, r7, #3
 80012d8:	230a      	movs	r3, #10
 80012da:	2201      	movs	r2, #1
 80012dc:	f006 f8c7 	bl	800746e <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(self->data->hspi) != HAL_SPI_STATE_READY)
 80012e0:	bf00      	nop
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f006 fccb 	bl	8007c84 <HAL_SPI_GetState>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d1f6      	bne.n	80012e2 <spi_hw_command+0x1e>
		;
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <adc_monitor_init>:
#include <string.h>
#include <math.h>


void adc_monitor_init(adc_monitor_t* self, adc_t* adc, IRQn_Type IRQn)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b084      	sub	sp, #16
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	4613      	mov	r3, r2
 800130a:	71fb      	strb	r3, [r7, #7]
	memset(self, 0, sizeof(*self));
 800130c:	2228      	movs	r2, #40	; 0x28
 800130e:	2100      	movs	r1, #0
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	f00a fffb 	bl	800c30c <memset>
	self->adc = adc;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	68ba      	ldr	r2, [r7, #8]
 800131a:	601a      	str	r2, [r3, #0]
	self->IRQn = IRQn;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	79fa      	ldrb	r2, [r7, #7]
 8001320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	self->state = ADC_STANDBY;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2200      	movs	r2, #0
 8001328:	761a      	strb	r2, [r3, #24]
}
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <adc_monitor_update>:

void adc_monitor_update(adc_monitor_t* self)
{
 8001334:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
	self->currValue = adc_get_vout(self->adc);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fdd2 	bl	8000eec <adc_get_vout>
 8001348:	eeb0 7a40 	vmov.f32	s14, s0
 800134c:	eef0 7a60 	vmov.f32	s15, s1
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	ed83 7b02 	vstr	d7, [r3, #8]
	switch(self->state)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	7e1b      	ldrb	r3, [r3, #24]
 800135a:	2b02      	cmp	r3, #2
 800135c:	d062      	beq.n	8001424 <adc_monitor_update+0xf0>
 800135e:	2b02      	cmp	r3, #2
 8001360:	dc63      	bgt.n	800142a <adc_monitor_update+0xf6>
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <adc_monitor_update+0x38>
 8001366:	2b01      	cmp	r3, #1
 8001368:	d00e      	beq.n	8001388 <adc_monitor_update+0x54>
		}
		break;
	case ADC_COMPLETED:
		break;
	}
}
 800136a:	e05e      	b.n	800142a <adc_monitor_update+0xf6>
		self->averageValue 			= 0;
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	f04f 0300 	mov.w	r3, #0
 8001376:	e9c1 2304 	strd	r2, r3, [r1, #16]
		self->measurementCycles 	= 0;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	61da      	str	r2, [r3, #28]
		self->measurementCyclesMax	= 0;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	621a      	str	r2, [r3, #32]
		break;
 8001386:	e050      	b.n	800142a <adc_monitor_update+0xf6>
		self->measurementCycles++;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	1c5a      	adds	r2, r3, #1
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	61da      	str	r2, [r3, #28]
				((double)self->measurementCycles - 1) / self->measurementCycles * self->averageValue +
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f858 	bl	800044c <__aeabi_ui2d>
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	4b24      	ldr	r3, [pc, #144]	; (8001434 <adc_monitor_update+0x100>)
 80013a2:	f7fe ff15 	bl	80001d0 <__aeabi_dsub>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4614      	mov	r4, r2
 80013ac:	461d      	mov	r5, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f84a 	bl	800044c <__aeabi_ui2d>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4620      	mov	r0, r4
 80013be:	4629      	mov	r1, r5
 80013c0:	f7ff f9e8 	bl	8000794 <__aeabi_ddiv>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4610      	mov	r0, r2
 80013ca:	4619      	mov	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80013d2:	f7ff f8b5 	bl	8000540 <__aeabi_dmul>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4690      	mov	r8, r2
 80013dc:	4699      	mov	r9, r3
				self->currValue / self->measurementCycles;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f82f 	bl	800044c <__aeabi_ui2d>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4620      	mov	r0, r4
 80013f4:	4629      	mov	r1, r5
 80013f6:	f7ff f9cd 	bl	8000794 <__aeabi_ddiv>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
				((double)self->measurementCycles - 1) / self->measurementCycles * self->averageValue +
 80013fe:	4640      	mov	r0, r8
 8001400:	4649      	mov	r1, r9
 8001402:	f7fe fee7 	bl	80001d4 <__adddf3>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
		self->averageValue =
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		if(self->measurementCycles >= self->measurementCyclesMax)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69da      	ldr	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	429a      	cmp	r2, r3
 800141a:	d305      	bcc.n	8001428 <adc_monitor_update+0xf4>
			self->state = ADC_COMPLETED;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2202      	movs	r2, #2
 8001420:	761a      	strb	r2, [r3, #24]
		break;
 8001422:	e001      	b.n	8001428 <adc_monitor_update+0xf4>
		break;
 8001424:	bf00      	nop
 8001426:	e000      	b.n	800142a <adc_monitor_update+0xf6>
		break;
 8001428:	bf00      	nop
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001434:	3ff00000 	.word	0x3ff00000

08001438 <adc_monitor_start_measurement>:

void adc_monitor_start_measurement(adc_monitor_t* self, uint32_t cycles)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
	HAL_NVIC_DisableIRQ(self->IRQn);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8001448:	4618      	mov	r0, r3
 800144a:	f004 f9c2 	bl	80057d2 <HAL_NVIC_DisableIRQ>
	if(self->state == ADC_STANDBY)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	7e1b      	ldrb	r3, [r3, #24]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d108      	bne.n	8001468 <adc_monitor_start_measurement+0x30>
	{
		self->measurementCycles = 0;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	61da      	str	r2, [r3, #28]
		self->measurementCyclesMax = cycles;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	621a      	str	r2, [r3, #32]
		self->state = ADC_PROCESS;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	761a      	strb	r2, [r3, #24]
	}
	HAL_NVIC_EnableIRQ(self->IRQn);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800146e:	4618      	mov	r0, r3
 8001470:	f004 f9a1 	bl	80057b6 <HAL_NVIC_EnableIRQ>
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <adc_monitor_reset_measurement>:

void adc_monitor_reset_measurement(adc_monitor_t* self)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(self->IRQn);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800148a:	4618      	mov	r0, r3
 800148c:	f004 f9a1 	bl	80057d2 <HAL_NVIC_DisableIRQ>
	self->state = ADC_STANDBY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	761a      	strb	r2, [r3, #24]
	HAL_NVIC_EnableIRQ(self->IRQn);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800149c:	4618      	mov	r0, r3
 800149e:	f004 f98a 	bl	80057b6 <HAL_NVIC_EnableIRQ>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <adc_monitor_get_average_signal_value>:

double adc_monitor_get_average_signal_value(adc_monitor_t* self)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
	return self->averageValue;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80014b8:	ec43 2b17 	vmov	d7, r2, r3
}
 80014bc:	eeb0 0a47 	vmov.f32	s0, s14
 80014c0:	eef0 0a67 	vmov.f32	s1, s15
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <adc_monitor_get_measurement_cycle_no>:

uint32_t adc_monitor_get_measurement_cycle_no(adc_monitor_t* self)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
	return self->measurementCycles;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69db      	ldr	r3, [r3, #28]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <adc_monitor_get_measurement_state>:

int8_t adc_monitor_get_measurement_state(adc_monitor_t* self)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
	return self->state;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	7e1b      	ldrb	r3, [r3, #24]
 80014f2:	b25b      	sxtb	r3, r3
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <set_adc_dose_range_select_pin>:

static const int BROAD_RANGE_PIN_STATE = 0;
static const int NARROW_RANGE_PIN_STATE = 1;

void set_adc_dose_range_select_pin(GPIO_TypeDef* port, uint16_t pin)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	807b      	strh	r3, [r7, #2]
	rangeSelectPort = port;
 800150c:	4a05      	ldr	r2, [pc, #20]	; (8001524 <set_adc_dose_range_select_pin+0x24>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
	rangeSelectPin = pin;
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <set_adc_dose_range_select_pin+0x28>)
 8001514:	887b      	ldrh	r3, [r7, #2]
 8001516:	8013      	strh	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	20000104 	.word	0x20000104
 8001528:	20000108 	.word	0x20000108

0800152c <select_broad_adc_dose_range>:

void select_broad_adc_dose_range()
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
	if(rangeSelectPort)
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <select_broad_adc_dose_range+0x24>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d008      	beq.n	800154a <select_broad_adc_dose_range+0x1e>
	{
		HAL_GPIO_WritePin(rangeSelectPort, rangeSelectPin, BROAD_RANGE_PIN_STATE);
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <select_broad_adc_dose_range+0x24>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a05      	ldr	r2, [pc, #20]	; (8001554 <select_broad_adc_dose_range+0x28>)
 800153e:	8811      	ldrh	r1, [r2, #0]
 8001540:	2200      	movs	r2, #0
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f004 fdfd 	bl	8006144 <HAL_GPIO_WritePin>
	}
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000104 	.word	0x20000104
 8001554:	20000108 	.word	0x20000108

08001558 <select_narrow_adc_dose_range>:

void select_narrow_adc_dose_range()
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	if(rangeSelectPort)
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <select_narrow_adc_dose_range+0x24>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d008      	beq.n	8001576 <select_narrow_adc_dose_range+0x1e>
	{
		HAL_GPIO_WritePin(rangeSelectPort, rangeSelectPin, NARROW_RANGE_PIN_STATE);
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <select_narrow_adc_dose_range+0x24>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a05      	ldr	r2, [pc, #20]	; (8001580 <select_narrow_adc_dose_range+0x28>)
 800156a:	8811      	ldrh	r1, [r2, #0]
 800156c:	2201      	movs	r2, #1
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f004 fde7 	bl	8006144 <HAL_GPIO_WritePin>
	}
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000104 	.word	0x20000104
 8001580:	20000108 	.word	0x20000108

08001584 <dac_init>:
 */

#include "dac.h"

void dac_init(dac_t* self)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	self->vtable->init(self);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	4798      	blx	r3
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <dac_set_input_value>:

void dac_set_input_value(dac_t* self, uint32_t digital_value)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	6039      	str	r1, [r7, #0]
	self->vtable->set_input_value(self, digital_value);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	6839      	ldr	r1, [r7, #0]
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	4798      	blx	r3
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	0000      	movs	r0, r0
	...

080015c0 <init>:
	double Vref;
	uint32_t maxInputValue;
};

static void init(dac_t* self)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	spi_deselect(self);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 f8f5 	bl	80017b8 <spi_deselect>
	HAL_Delay(10);
 80015ce:	200a      	movs	r0, #10
 80015d0:	f003 ffb2 	bl	8005538 <HAL_Delay>

	if(self->data->portLDAC)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d009      	beq.n	80015f2 <init+0x32>
	{
		HAL_GPIO_WritePin(self->data->portLDAC, self->data->pinLDAC, 0);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	68d8      	ldr	r0, [r3, #12]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	8a1b      	ldrh	r3, [r3, #16]
 80015ea:	2200      	movs	r2, #0
 80015ec:	4619      	mov	r1, r3
 80015ee:	f004 fda9 	bl	8006144 <HAL_GPIO_WritePin>
	}

	if(self->data->portSHDW)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d009      	beq.n	8001610 <init+0x50>
	{
		HAL_GPIO_WritePin(self->data->portSHDW, self->data->pinSHDW, 1);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	6958      	ldr	r0, [r3, #20]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	8b1b      	ldrh	r3, [r3, #24]
 8001608:	2201      	movs	r2, #1
 800160a:	4619      	mov	r1, r3
 800160c:	f004 fd9a 	bl	8006144 <HAL_GPIO_WritePin>
	// SPI config begin
	//spi_select(self);
	//spi_deselect(self);

	// SPI config end
	self->data->Vref = 2.048;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6859      	ldr	r1, [r3, #4]
 8001614:	a306      	add	r3, pc, #24	; (adr r3, 8001630 <init+0x70>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	e9c1 2308 	strd	r2, r3, [r1, #32]

	// always send zero after init
	set_digital_value(self, 0);
 800161e:	2100      	movs	r1, #0
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 f809 	bl	8001638 <set_digital_value>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	d2f1a9fc 	.word	0xd2f1a9fc
 8001634:	4000624d 	.word	0x4000624d

08001638 <set_digital_value>:

static void set_digital_value(dac_t* self, uint32_t digital_value)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
	if(digital_value < self->data->maxInputValue)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d230      	bcs.n	80016b0 <set_digital_value+0x78>
	{
	    uint16_t shdw = 1;
 800164e:	2301      	movs	r3, #1
 8001650:	81fb      	strh	r3, [r7, #14]
	    uint16_t gain = 1;
 8001652:	2301      	movs	r3, #1
 8001654:	81bb      	strh	r3, [r7, #12]
	    uint16_t x = digital_value;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	817b      	strh	r3, [r7, #10]
	    uint16_t val = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	813b      	strh	r3, [r7, #8]
	    val += (shdw <<= 12);
 800165e:	89fb      	ldrh	r3, [r7, #14]
 8001660:	031b      	lsls	r3, r3, #12
 8001662:	81fb      	strh	r3, [r7, #14]
 8001664:	89fa      	ldrh	r2, [r7, #14]
 8001666:	893b      	ldrh	r3, [r7, #8]
 8001668:	4413      	add	r3, r2
 800166a:	813b      	strh	r3, [r7, #8]
	    val += (gain <<= 13);
 800166c:	89bb      	ldrh	r3, [r7, #12]
 800166e:	035b      	lsls	r3, r3, #13
 8001670:	81bb      	strh	r3, [r7, #12]
 8001672:	89ba      	ldrh	r2, [r7, #12]
 8001674:	893b      	ldrh	r3, [r7, #8]
 8001676:	4413      	add	r3, r2
 8001678:	813b      	strh	r3, [r7, #8]
	    val += (x <<= 2);
 800167a:	897b      	ldrh	r3, [r7, #10]
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	817b      	strh	r3, [r7, #10]
 8001680:	897a      	ldrh	r2, [r7, #10]
 8001682:	893b      	ldrh	r3, [r7, #8]
 8001684:	4413      	add	r3, r2
 8001686:	813b      	strh	r3, [r7, #8]

		// SPI Transmit digital value begin
		spi_select(self);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f883 	bl	8001794 <spi_select>
		//spi_hw_command(self, (uint8_t)val);
		spi_hw_command(self, (uint8_t)(val >> 8));
 800168e:	893b      	ldrh	r3, [r7, #8]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	b29b      	uxth	r3, r3
 8001694:	b2db      	uxtb	r3, r3
 8001696:	4619      	mov	r1, r3
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 f89f 	bl	80017dc <spi_hw_command>
		spi_hw_command(self, (uint8_t)val);
 800169e:	893b      	ldrh	r3, [r7, #8]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	4619      	mov	r1, r3
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f899 	bl	80017dc <spi_hw_command>
		spi_deselect(self);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f884 	bl	80017b8 <spi_deselect>
		// SPI Transmit digital value end

	}
}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <get_reference_voltage>:

static double get_reference_voltage(dac_t* self)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	return self->data->Vref;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80016c8:	ec43 2b17 	vmov	d7, r2, r3
}
 80016cc:	eeb0 0a47 	vmov.f32	s0, s14
 80016d0:	eef0 0a67 	vmov.f32	s1, s15
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <dac_MCP4811EP_create>:
		GPIO_TypeDef* portLDAC,
		uint16_t pinLDAC,
		GPIO_TypeDef* portSHDW,
		uint16_t pinSHDW
		)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
 80016ec:	807b      	strh	r3, [r7, #2]
	dac_t dac;
	dac.vtable = &methods;
 80016ee:	4b28      	ldr	r3, [pc, #160]	; (8001790 <dac_MCP4811EP_create+0xb0>)
 80016f0:	617b      	str	r3, [r7, #20]
	struct dac_data_t* pdata =
			(struct dac_data_t*)malloc(sizeof(struct dac_data_t));
 80016f2:	2030      	movs	r0, #48	; 0x30
 80016f4:	f00a fd14 	bl	800c120 <malloc>
 80016f8:	4603      	mov	r3, r0
 80016fa:	61fb      	str	r3, [r7, #28]
	if(pdata)
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d034      	beq.n	800176c <dac_MCP4811EP_create+0x8c>
	{
		memset(pdata, 0, sizeof(*pdata));
 8001702:	2230      	movs	r2, #48	; 0x30
 8001704:	2100      	movs	r1, #0
 8001706:	69f8      	ldr	r0, [r7, #28]
 8001708:	f00a fe00 	bl	800c30c <memset>
		// fill data structure
		pdata->hspi = hspi;
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	601a      	str	r2, [r3, #0]
		pdata->portCS = portCS;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	605a      	str	r2, [r3, #4]
		pdata->pinCS = pinCS;
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	887a      	ldrh	r2, [r7, #2]
 800171c:	811a      	strh	r2, [r3, #8]
		pdata->portLDAC = portLDAC;
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001722:	60da      	str	r2, [r3, #12]
		pdata->pinLDAC = pinLDAC;
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001728:	821a      	strh	r2, [r3, #16]
		pdata->portSHDW = portSHDW;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800172e:	615a      	str	r2, [r3, #20]
		pdata->pinSHDW = pinSHDW;
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001734:	831a      	strh	r2, [r3, #24]
		pdata->bitResolution = 10;
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	220a      	movs	r2, #10
 800173a:	769a      	strb	r2, [r3, #26]
		pdata->maxInputValue = (uint32_t)pow(2, pdata->bitResolution);
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	7e9b      	ldrb	r3, [r3, #26]
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe fe83 	bl	800044c <__aeabi_ui2d>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	ec43 2b11 	vmov	d1, r2, r3
 800174e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8001788 <dac_MCP4811EP_create+0xa8>
 8001752:	f00a fe2d 	bl	800c3b0 <pow>
 8001756:	ec53 2b10 	vmov	r2, r3, d0
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	f7ff f9c7 	bl	8000af0 <__aeabi_d2uiz>
 8001762:	4602      	mov	r2, r0
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	629a      	str	r2, [r3, #40]	; 0x28
		dac.data = pdata;
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	61bb      	str	r3, [r7, #24]
	}
	return dac;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	461a      	mov	r2, r3
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001778:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	3720      	adds	r7, #32
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	f3af 8000 	nop.w
 8001788:	00000000 	.word	0x00000000
 800178c:	40000000 	.word	0x40000000
 8001790:	20000010 	.word	0x20000010

08001794 <spi_select>:

static void spi_select(dac_t* self)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
			self->data->portCS,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 80017a0:	6858      	ldr	r0, [r3, #4]
			self->data->pinCS,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 80017a6:	891b      	ldrh	r3, [r3, #8]
 80017a8:	2200      	movs	r2, #0
 80017aa:	4619      	mov	r1, r3
 80017ac:	f004 fcca 	bl	8006144 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET
			);
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <spi_deselect>:

static void spi_deselect(dac_t* self)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
			self->data->portCS,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 80017c4:	6858      	ldr	r0, [r3, #4]
			self->data->pinCS,
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 80017ca:	891b      	ldrh	r3, [r3, #8]
 80017cc:	2201      	movs	r2, #1
 80017ce:	4619      	mov	r1, r3
 80017d0:	f004 fcb8 	bl	8006144 <HAL_GPIO_WritePin>
			GPIO_PIN_SET
			);
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <spi_hw_command>:

static void spi_hw_command(dac_t *self, uint8_t cmd)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(self->data->hspi, &cmd, 1, SPI_TIMEOUT);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	6818      	ldr	r0, [r3, #0]
 80017ee:	1cf9      	adds	r1, r7, #3
 80017f0:	230a      	movs	r3, #10
 80017f2:	2201      	movs	r2, #1
 80017f4:	f005 fe3b 	bl	800746e <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(self->data->hspi) != HAL_SPI_STATE_READY)
 80017f8:	bf00      	nop
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f006 fa3f 	bl	8007c84 <HAL_SPI_GetState>
 8001806:	4603      	mov	r3, r0
 8001808:	2b01      	cmp	r3, #1
 800180a:	d1f6      	bne.n	80017fa <spi_hw_command+0x1e>
		;
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <screen_init>:
 */

#include "screen.h"

void screen_init(screen_t* self)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
	self->vtable_->init(self);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	4798      	blx	r3
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <screen_draw>:

void screen_draw(screen_t* self)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	self->vtable_->draw(self);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	4798      	blx	r3
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <screen_update>:

void screen_update(screen_t* self)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
	self->vtable_->update(self);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	4798      	blx	r3
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <init_>:
};

static struct screen_data_t data;

static void init_(screen_t* self)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	memset(&data, 0, sizeof(data));
 800186c:	2250      	movs	r2, #80	; 0x50
 800186e:	2100      	movs	r1, #0
 8001870:	4813      	ldr	r0, [pc, #76]	; (80018c0 <init_+0x5c>)
 8001872:	f00a fd4b 	bl	800c30c <memset>

	self->data->adcDRValueCurr = 0;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6859      	ldr	r1, [r3, #4]
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	e9c1 2302 	strd	r2, r3, [r1, #8]
	self->data->adcDRValuePrev = 0;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6859      	ldr	r1, [r3, #4]
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	e9c1 2304 	strd	r2, r3, [r1, #16]
	self->data->adcHVValueCurr = 0;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6859      	ldr	r1, [r3, #4]
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	self->data->adcHVValuePrev = 0;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6859      	ldr	r1, [r3, #4]
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000110 	.word	0x20000110
 80018c4:	00000000 	.word	0x00000000

080018c8 <update_>:

static void update_(screen_t* self)
{
 80018c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af02      	add	r7, sp, #8
 80018d0:	6078      	str	r0, [r7, #4]

	self->data->adcDRValueCurr = adc_get_cnt(&task.adcDoseRate);
 80018d2:	48ad      	ldr	r0, [pc, #692]	; (8001b88 <update_+0x2c0>)
 80018d4:	f7ff fafc 	bl	8000ed0 <adc_get_cnt>
 80018d8:	4602      	mov	r2, r0
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2100      	movs	r1, #0
 80018e0:	4692      	mov	sl, r2
 80018e2:	468b      	mov	fp, r1
 80018e4:	e9c3 ab02 	strd	sl, fp, [r3, #8]
	self->data->adcHVValueCurr = adc_get_cnt(&task.adcHV);
 80018e8:	48a8      	ldr	r0, [pc, #672]	; (8001b8c <update_+0x2c4>)
 80018ea:	f7ff faf1 	bl	8000ed0 <adc_get_cnt>
 80018ee:	4602      	mov	r2, r0
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2100      	movs	r1, #0
 80018f6:	4690      	mov	r8, r2
 80018f8:	4689      	mov	r9, r1
 80018fa:	e9c3 8906 	strd	r8, r9, [r3, #24]
	self->data->adcPRValueCurr = adc_get_cnt(&task.adcPressure);
 80018fe:	48a4      	ldr	r0, [pc, #656]	; (8001b90 <update_+0x2c8>)
 8001900:	f7ff fae6 	bl	8000ed0 <adc_get_cnt>
 8001904:	4602      	mov	r2, r0
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2100      	movs	r1, #0
 800190c:	4614      	mov	r4, r2
 800190e:	460d      	mov	r5, r1
 8001910:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28

	self->data->adcDRAverValueCurr = adc_monitor_get_average_signal_value(&task.adcDRMonitor) * 1e+6;
 8001914:	489f      	ldr	r0, [pc, #636]	; (8001b94 <update_+0x2cc>)
 8001916:	f7ff fdc8 	bl	80014aa <adc_monitor_get_average_signal_value>
 800191a:	ec51 0b10 	vmov	r0, r1, d0
 800191e:	a398      	add	r3, pc, #608	; (adr r3, 8001b80 <update_+0x2b8>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	f7fe fe0c 	bl	8000540 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685c      	ldr	r4, [r3, #4]
 8001934:	f7ff f914 	bl	8000b60 <__aeabi_d2lz>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38

	if(self->data->adcPRValuePrev != self->data->adcPRValueCurr)
	{
	}*/

	ssd1306_Fill(Black);
 8001940:	2000      	movs	r0, #0
 8001942:	f001 fda1 	bl	8003488 <ssd1306_Fill>
	// HEAD
	//ssd1306_SetCursor(HEAD_X, HEAD_Y);
	//ssd1306_WriteInt(self->data->counter++,*TEXT_FONT, White);//("________________", *TEXT_FONT, White);

	/* file */
	ssd1306_SetCursor(HEAD_X, HEAD_Y);
 8001946:	2303      	movs	r3, #3
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2203      	movs	r2, #3
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f001 fee5 	bl	8003720 <ssd1306_SetCursor>
	ssd1306_WriteInt(task.sd_mount,*TEXT_FONT, White);
 8001956:	4b90      	ldr	r3, [pc, #576]	; (8001b98 <update_+0x2d0>)
 8001958:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800195c:	f8d3 072c 	ldr.w	r0, [r3, #1836]	; 0x72c
 8001960:	4b8e      	ldr	r3, [pc, #568]	; (8001b9c <update_+0x2d4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2201      	movs	r2, #1
 8001966:	9200      	str	r2, [sp, #0]
 8001968:	cb0e      	ldmia	r3, {r1, r2, r3}
 800196a:	f001 ff23 	bl	80037b4 <ssd1306_WriteInt>
	ssd1306_SetCursor(HEAD_X + 15, HEAD_Y);
 800196e:	2303      	movs	r3, #3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	330f      	adds	r3, #15
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2203      	movs	r2, #3
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f001 fecf 	bl	8003720 <ssd1306_SetCursor>
	ssd1306_WriteInt(task.sd_open,*TEXT_FONT, White);
 8001982:	4b85      	ldr	r3, [pc, #532]	; (8001b98 <update_+0x2d0>)
 8001984:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001988:	f8d3 0730 	ldr.w	r0, [r3, #1840]	; 0x730
 800198c:	4b83      	ldr	r3, [pc, #524]	; (8001b9c <update_+0x2d4>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2201      	movs	r2, #1
 8001992:	9200      	str	r2, [sp, #0]
 8001994:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001996:	f001 ff0d 	bl	80037b4 <ssd1306_WriteInt>
	ssd1306_SetCursor(HEAD_X + 30, HEAD_Y);
 800199a:	2303      	movs	r3, #3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	331e      	adds	r3, #30
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2203      	movs	r2, #3
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f001 feb9 	bl	8003720 <ssd1306_SetCursor>
	ssd1306_WriteInt(task.sd_puts,*TEXT_FONT, White);
 80019ae:	4b7a      	ldr	r3, [pc, #488]	; (8001b98 <update_+0x2d0>)
 80019b0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80019b4:	f8d3 0734 	ldr.w	r0, [r3, #1844]	; 0x734
 80019b8:	4b78      	ldr	r3, [pc, #480]	; (8001b9c <update_+0x2d4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2201      	movs	r2, #1
 80019be:	9200      	str	r2, [sp, #0]
 80019c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019c2:	f001 fef7 	bl	80037b4 <ssd1306_WriteInt>
	ssd1306_SetCursor(HEAD_X + 45, HEAD_Y);
 80019c6:	2303      	movs	r3, #3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	332d      	adds	r3, #45	; 0x2d
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2203      	movs	r2, #3
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f001 fea3 	bl	8003720 <ssd1306_SetCursor>
	ssd1306_WriteInt(task.sd_close,*TEXT_FONT, White);
 80019da:	4b6f      	ldr	r3, [pc, #444]	; (8001b98 <update_+0x2d0>)
 80019dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80019e0:	f8d3 0738 	ldr.w	r0, [r3, #1848]	; 0x738
 80019e4:	4b6d      	ldr	r3, [pc, #436]	; (8001b9c <update_+0x2d4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2201      	movs	r2, #1
 80019ea:	9200      	str	r2, [sp, #0]
 80019ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019ee:	f001 fee1 	bl	80037b4 <ssd1306_WriteInt>

	// DR
	ssd1306_SetCursor(DR_DESC_X, DR_DESC_Y);
 80019f2:	2303      	movs	r3, #3
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	221a      	movs	r2, #26
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f001 fe8f 	bl	8003720 <ssd1306_SetCursor>
	ssd1306_WriteString("DR:", *TEXT_FONT, White);
 8001a02:	4b66      	ldr	r3, [pc, #408]	; (8001b9c <update_+0x2d4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2201      	movs	r2, #1
 8001a08:	9200      	str	r2, [sp, #0]
 8001a0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a0c:	4864      	ldr	r0, [pc, #400]	; (8001ba0 <update_+0x2d8>)
 8001a0e:	f001 fe61 	bl	80036d4 <ssd1306_WriteString>
	ssd1306_SetCursor(DR_VAL_X, DR_VAL_Y);
 8001a12:	231e      	movs	r3, #30
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	221a      	movs	r2, #26
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f001 fe7f 	bl	8003720 <ssd1306_SetCursor>
	//ssd1306_WriteInt((int)adc_get_vout(&task.adcDoseRate) * 1e+6, *TEXT_FONT, White);
	ssd1306_WriteInt(adc_get_cnt(&task.adcDoseRate), *TEXT_FONT, White);
 8001a22:	4859      	ldr	r0, [pc, #356]	; (8001b88 <update_+0x2c0>)
 8001a24:	f7ff fa54 	bl	8000ed0 <adc_get_cnt>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	4b5b      	ldr	r3, [pc, #364]	; (8001b9c <update_+0x2d4>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2201      	movs	r2, #1
 8001a32:	9200      	str	r2, [sp, #0]
 8001a34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a36:	f001 febd 	bl	80037b4 <ssd1306_WriteInt>
	ssd1306_SetCursor(DR_UNIT_X, DR_UNIT_Y);
 8001a3a:	235a      	movs	r3, #90	; 0x5a
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	221a      	movs	r2, #26
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	4611      	mov	r1, r2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f001 fe6b 	bl	8003720 <ssd1306_SetCursor>
	ssd1306_WriteString("uV", *TEXT_FONT, White);
 8001a4a:	4b54      	ldr	r3, [pc, #336]	; (8001b9c <update_+0x2d4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	9200      	str	r2, [sp, #0]
 8001a52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a54:	4853      	ldr	r0, [pc, #332]	; (8001ba4 <update_+0x2dc>)
 8001a56:	f001 fe3d 	bl	80036d4 <ssd1306_WriteString>

	// HV
	ssd1306_SetCursor(HV_DESC_X, HV_DESC_Y);
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2228      	movs	r2, #40	; 0x28
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	4611      	mov	r1, r2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f001 fe5b 	bl	8003720 <ssd1306_SetCursor>
	ssd1306_WriteString("HV:", *TEXT_FONT, White);
 8001a6a:	4b4c      	ldr	r3, [pc, #304]	; (8001b9c <update_+0x2d4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	9200      	str	r2, [sp, #0]
 8001a72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a74:	484c      	ldr	r0, [pc, #304]	; (8001ba8 <update_+0x2e0>)
 8001a76:	f001 fe2d 	bl	80036d4 <ssd1306_WriteString>
	ssd1306_SetCursor(HV_VAL_X, HV_VAL_Y);
 8001a7a:	231e      	movs	r3, #30
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2228      	movs	r2, #40	; 0x28
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f001 fe4b 	bl	8003720 <ssd1306_SetCursor>
	ssd1306_WriteInt((int)(hv_get_output_voltage_V(&task.hv_system)), *TEXT_FONT, White);
 8001a8a:	4848      	ldr	r0, [pc, #288]	; (8001bac <update_+0x2e4>)
 8001a8c:	f000 fdae 	bl	80025ec <hv_get_output_voltage_V>
 8001a90:	ec53 2b10 	vmov	r2, r3, d0
 8001a94:	4610      	mov	r0, r2
 8001a96:	4619      	mov	r1, r3
 8001a98:	f7ff f802 	bl	8000aa0 <__aeabi_d2iz>
 8001a9c:	4b3f      	ldr	r3, [pc, #252]	; (8001b9c <update_+0x2d4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	9200      	str	r2, [sp, #0]
 8001aa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aa6:	f001 fe85 	bl	80037b4 <ssd1306_WriteInt>
	//ssd1306_WriteInt(adc_get_cnt(&task.adcHV), *TEXT_FONT, White);
	ssd1306_SetCursor(HV_UNIT_X, HV_UNIT_Y);
 8001aaa:	235a      	movs	r3, #90	; 0x5a
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2228      	movs	r2, #40	; 0x28
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f001 fe33 	bl	8003720 <ssd1306_SetCursor>
	ssd1306_WriteString("V", *TEXT_FONT, White);
 8001aba:	4b38      	ldr	r3, [pc, #224]	; (8001b9c <update_+0x2d4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	9200      	str	r2, [sp, #0]
 8001ac2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ac4:	483a      	ldr	r0, [pc, #232]	; (8001bb0 <update_+0x2e8>)
 8001ac6:	f001 fe05 	bl	80036d4 <ssd1306_WriteString>

	// Pressure
	ssd1306_SetCursor(PRESS_DESC_X, PRESS_DESC_Y);
 8001aca:	2303      	movs	r3, #3
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2236      	movs	r2, #54	; 0x36
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f001 fe23 	bl	8003720 <ssd1306_SetCursor>
	ssd1306_WriteString("PR:", *TEXT_FONT, White);
 8001ada:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <update_+0x2d4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	9200      	str	r2, [sp, #0]
 8001ae2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ae4:	4833      	ldr	r0, [pc, #204]	; (8001bb4 <update_+0x2ec>)
 8001ae6:	f001 fdf5 	bl	80036d4 <ssd1306_WriteString>
	ssd1306_SetCursor(PRESS_VAL_X, PRESS_VAL_Y);
 8001aea:	231e      	movs	r3, #30
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2236      	movs	r2, #54	; 0x36
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f001 fe13 	bl	8003720 <ssd1306_SetCursor>
	//ssd1306_WriteInt(adc_get_vout(&task.adcPressure) * task.pressureCoeff, *TEXT_FONT, White);
	ssd1306_WriteInt(adc_get_cnt(&task.adcPressure), *TEXT_FONT, White);
 8001afa:	4825      	ldr	r0, [pc, #148]	; (8001b90 <update_+0x2c8>)
 8001afc:	f7ff f9e8 	bl	8000ed0 <adc_get_cnt>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4618      	mov	r0, r3
 8001b04:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <update_+0x2d4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	9200      	str	r2, [sp, #0]
 8001b0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b0e:	f001 fe51 	bl	80037b4 <ssd1306_WriteInt>
	ssd1306_SetCursor(PRESS_UNIT_X, PRESS_UNIT_Y);
 8001b12:	235a      	movs	r3, #90	; 0x5a
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2236      	movs	r2, #54	; 0x36
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f001 fdff 	bl	8003720 <ssd1306_SetCursor>
	ssd1306_WriteString("Pa", *TEXT_FONT, White);
 8001b22:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <update_+0x2d4>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2201      	movs	r2, #1
 8001b28:	9200      	str	r2, [sp, #0]
 8001b2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b2c:	4822      	ldr	r0, [pc, #136]	; (8001bb8 <update_+0x2f0>)
 8001b2e:	f001 fdd1 	bl	80036d4 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8001b32:	f001 fcc1 	bl	80034b8 <ssd1306_UpdateScreen>
	/*if(self->data->adcDRAverValuePrev != self->data->adcDRAverValueCurr)
	{
	} */


	self->data->adcDRValuePrev = self->data->adcDRValueCurr;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6851      	ldr	r1, [r2, #4]
 8001b3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b42:	e9c1 2304 	strd	r2, r3, [r1, #16]
	self->data->adcHVValuePrev = self->data->adcHVValueCurr;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6851      	ldr	r1, [r2, #4]
 8001b4e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b52:	e9c1 2308 	strd	r2, r3, [r1, #32]
	self->data->adcPRValuePrev = self->data->adcPRValueCurr;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6851      	ldr	r1, [r2, #4]
 8001b5e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001b62:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	self->data->adcDRAverValuePrev = self->data->adcDRAverValueCurr;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6851      	ldr	r1, [r2, #4]
 8001b6e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001b72:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b80:	00000000 	.word	0x00000000
 8001b84:	412e8480 	.word	0x412e8480
 8001b88:	20000584 	.word	0x20000584
 8001b8c:	2000058c 	.word	0x2000058c
 8001b90:	20000594 	.word	0x20000594
 8001b94:	200005a0 	.word	0x200005a0
 8001b98:	200003c8 	.word	0x200003c8
 8001b9c:	2000001c 	.word	0x2000001c
 8001ba0:	0800d368 	.word	0x0800d368
 8001ba4:	0800d36c 	.word	0x0800d36c
 8001ba8:	0800d370 	.word	0x0800d370
 8001bac:	20000620 	.word	0x20000620
 8001bb0:	0800d374 	.word	0x0800d374
 8001bb4:	0800d378 	.word	0x0800d378
 8001bb8:	0800d37c 	.word	0x0800d37c

08001bbc <draw_>:

static void draw_(screen_t* self)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af02      	add	r7, sp, #8
 8001bc2:	6078      	str	r0, [r7, #4]
	ssd1306_Fill(Black);
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f001 fc5f 	bl	8003488 <ssd1306_Fill>
	ssd1306_SetCursor(3, 3);
 8001bca:	2103      	movs	r1, #3
 8001bcc:	2003      	movs	r0, #3
 8001bce:	f001 fda7 	bl	8003720 <ssd1306_SetCursor>
	ssd1306_WriteString("Loading...", *TEXT_FONT, White);
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <draw_+0x34>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	9200      	str	r2, [sp, #0]
 8001bda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bdc:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <draw_+0x38>)
 8001bde:	f001 fd79 	bl	80036d4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001be2:	f001 fc69 	bl	80034b8 <ssd1306_UpdateScreen>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	2000001c 	.word	0x2000001c
 8001bf4:	0800d380 	.word	0x0800d380

08001bf8 <reg_keyboard_cbs_>:

static void reg_keyboard_cbs_(screen_t* self, keyboard_t* keyboard)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
	if(keyboard)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <reg_keyboard_cbs_+0x16>
	{
		keyboard_reset_cbs(keyboard);
 8001c08:	6838      	ldr	r0, [r7, #0]
 8001c0a:	f000 fe0c 	bl	8002826 <keyboard_reset_cbs>
	}
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <screen_1_instance>:
	&methods,
	&data
};

screen_t* screen_1_instance()
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
	if(!initialized)
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <screen_1_instance+0x20>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d105      	bne.n	8001c30 <screen_1_instance+0x18>
	{
		screen_init(&single_screen);
 8001c24:	4805      	ldr	r0, [pc, #20]	; (8001c3c <screen_1_instance+0x24>)
 8001c26:	f7ff fdf6 	bl	8001816 <screen_init>
		initialized = 1;
 8001c2a:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <screen_1_instance+0x20>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	701a      	strb	r2, [r3, #0]
	}
	return &single_screen;
 8001c30:	4b02      	ldr	r3, [pc, #8]	; (8001c3c <screen_1_instance+0x24>)
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	2000010a 	.word	0x2000010a
 8001c3c:	20000030 	.word	0x20000030

08001c40 <general_task_init>:
#define TIMER_FREQUENCY (uint32_t)84000000

//extern TIM_HandleTypeDef htim7;

void general_task_init(general_task_t* self)
{
 8001c40:	b5b0      	push	{r4, r5, r7, lr}
 8001c42:	b0a0      	sub	sp, #128	; 0x80
 8001c44:	af04      	add	r7, sp, #16
 8001c46:	60f8      	str	r0, [r7, #12]
	HAL_Delay(100);
 8001c48:	2064      	movs	r0, #100	; 0x64
 8001c4a:	f003 fc75 	bl	8005538 <HAL_Delay>
	memset(self, 0, sizeof(*self));
 8001c4e:	f242 7248 	movw	r2, #10056	; 0x2748
 8001c52:	2100      	movs	r1, #0
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f00a fb59 	bl	800c30c <memset>

	self->loopPeriod_ms = 50;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2232      	movs	r2, #50	; 0x32
 8001c5e:	801a      	strh	r2, [r3, #0]
	self->freqIT = TIMER_FREQUENCY / (adctim->Init.Period + 1) / (adctim->Init.Prescaler + 1);
 8001c60:	4bd7      	ldr	r3, [pc, #860]	; (8001fc0 <general_task_init+0x380>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	3301      	adds	r3, #1
 8001c68:	4ad6      	ldr	r2, [pc, #856]	; (8001fc4 <general_task_init+0x384>)
 8001c6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c6e:	4bd4      	ldr	r3, [pc, #848]	; (8001fc0 <general_task_init+0x380>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	3301      	adds	r3, #1
 8001c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	805a      	strh	r2, [r3, #2]
	self->adcNoCnt = 0;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8

	self->pressureCoeff = 1e+6; // Pa per volt
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4acf      	ldr	r2, [pc, #828]	; (8001fc8 <general_task_init+0x388>)
 8001c8c:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

	/* ADC */
	uint32_t adcWaitCycles = 20;
 8001c90:	2314      	movs	r3, #20
 8001c92:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint8_t MR_word, BUF, UnB, BO, MD; // mode register options
	uint8_t FR_word, FS, CDIV; // filter register options
	double Vref_dose = 0;
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double Vref_hv = 0;
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double Vref_press = 0;
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	/* ADC Dose Rate - bipolar */
	// Filter register mode
	FR_word = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FS = 0b011;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	CDIV = 0b00;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	FR_word = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FR_word += (FS << 0);
 8001cd0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001cd4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001cd8:	4413      	add	r3, r2
 8001cda:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FR_word += (CDIV << 4);
 8001cde:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ce2:	011b      	lsls	r3, r3, #4
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001cea:	4413      	add	r3, r2
 8001cec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	// Mode register word
	BUF 	= 0b1;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	UnB 	= 0b0; // 0 - bipolar, 1 - unipolar
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	BO 		= 0b0; // 0 - disable / 1 - enable burnout current
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	MD 		= 0b00; // single - 0b10, cont - 0b00
 8001d02:	2300      	movs	r3, #0
 8001d04:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	MR_word = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (BUF << 1);
 8001d0e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (UnB << 2);
 8001d20:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (BO << 3);
 8001d32:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001d3e:	4413      	add	r3, r2
 8001d40:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (MD << 6);
 8001d44:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001d48:	019b      	lsls	r3, r3, #6
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001d50:	4413      	add	r3, r2
 8001d52:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

	Vref_dose = 2.5;
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	4b9c      	ldr	r3, [pc, #624]	; (8001fcc <general_task_init+0x38c>)
 8001d5c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	self->adcDoseRate = adc_AD7791_create(&hspi3, ADC_DOSE_SPI_CS_GPIO_Port, ADC_DOSE_SPI_CS_Pin, Vref_dose, FR_word, MR_word, adcWaitCycles);
 8001d60:	68fc      	ldr	r4, [r7, #12]
 8001d62:	4638      	mov	r0, r7
 8001d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d66:	9302      	str	r3, [sp, #8]
 8001d68:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001d78:	2304      	movs	r3, #4
 8001d7a:	4a95      	ldr	r2, [pc, #596]	; (8001fd0 <general_task_init+0x390>)
 8001d7c:	4995      	ldr	r1, [pc, #596]	; (8001fd4 <general_task_init+0x394>)
 8001d7e:	f7ff fa0b 	bl	8001198 <adc_AD7791_create>
 8001d82:	f504 73de 	add.w	r3, r4, #444	; 0x1bc
 8001d86:	463a      	mov	r2, r7
 8001d88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d8c:	e883 0003 	stmia.w	r3, {r0, r1}
	adc_init(&self->adcDoseRate);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff f87e 	bl	8000e98 <adc_init>
	HAL_Delay(5);
 8001d9c:	2005      	movs	r0, #5
 8001d9e:	f003 fbcb 	bl	8005538 <HAL_Delay>

	/* ADC HV - bipolar */
	// Filter register mode
	FR_word = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FS = 0b011;
 8001da8:	2303      	movs	r3, #3
 8001daa:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	CDIV = 0b00;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	FR_word = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FR_word += (FS << 0);
 8001dba:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001dbe:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FR_word += (CDIV << 4);
 8001dc8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	// Mode register word
	BUF 	= 0b1;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	UnB 	= 0b0; // 0 - bipolar, 1 - unipolar
 8001de0:	2300      	movs	r3, #0
 8001de2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	BO 		= 0b0; // 0 - disable / 1 - enable burnout current
 8001de6:	2300      	movs	r3, #0
 8001de8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	MD 		= 0b00; // single - 0b10, cont - 0b00
 8001dec:	2300      	movs	r3, #0
 8001dee:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	MR_word = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (BUF << 1);
 8001df8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001e04:	4413      	add	r3, r2
 8001e06:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (UnB << 2);
 8001e0a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001e16:	4413      	add	r3, r2
 8001e18:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (BO << 3);
 8001e1c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001e28:	4413      	add	r3, r2
 8001e2a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (MD << 6);
 8001e2e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001e32:	019b      	lsls	r3, r3, #6
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

	Vref_hv = 2.5;
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	4b61      	ldr	r3, [pc, #388]	; (8001fcc <general_task_init+0x38c>)
 8001e46:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	self->adcHV = adc_AD7791_create(&hspi1, ADC_HV_SPI_CS_GPIO_Port, ADC_HV_SPI_CS_Pin, Vref_hv, FR_word, MR_word, adcWaitCycles + 10);
 8001e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e4c:	330a      	adds	r3, #10
 8001e4e:	68fc      	ldr	r4, [r7, #12]
 8001e50:	4638      	mov	r0, r7
 8001e52:	9302      	str	r3, [sp, #8]
 8001e54:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001e58:	9301      	str	r3, [sp, #4]
 8001e5a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 8001e64:	2308      	movs	r3, #8
 8001e66:	4a5a      	ldr	r2, [pc, #360]	; (8001fd0 <general_task_init+0x390>)
 8001e68:	495b      	ldr	r1, [pc, #364]	; (8001fd8 <general_task_init+0x398>)
 8001e6a:	f7ff f995 	bl	8001198 <adc_AD7791_create>
 8001e6e:	f504 73e2 	add.w	r3, r4, #452	; 0x1c4
 8001e72:	463a      	mov	r2, r7
 8001e74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e78:	e883 0003 	stmia.w	r3, {r0, r1}
	adc_init(&self->adcHV);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff f808 	bl	8000e98 <adc_init>
	HAL_Delay(5);
 8001e88:	2005      	movs	r0, #5
 8001e8a:	f003 fb55 	bl	8005538 <HAL_Delay>

	/* ADC Pressure - unipolar */
	// Filter register mode
	FR_word = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FS = 0b011;
 8001e94:	2303      	movs	r3, #3
 8001e96:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	CDIV = 0b00;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	FR_word = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FR_word += (FS << 0);
 8001ea6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001eaa:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001eae:	4413      	add	r3, r2
 8001eb0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	FR_word += (CDIV << 4);
 8001eb4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001eb8:	011b      	lsls	r3, r3, #4
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	// Mode register word
	BUF 	= 0b1;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	UnB 	= 0b1; // 0 - bipolar, 1 - unipolar
 8001ecc:	2301      	movs	r3, #1
 8001ece:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	BO 		= 0b0; // 0 - disable / 1 - enable burnout current
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	MD 		= 0b00; // single - 0b10, cont - 0b00
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	MR_word = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (BUF << 1);
 8001ee4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (UnB << 2);
 8001ef6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001f02:	4413      	add	r3, r2
 8001f04:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (BO << 3);
 8001f08:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001f14:	4413      	add	r3, r2
 8001f16:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MR_word += (MD << 6);
 8001f1a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001f1e:	019b      	lsls	r3, r3, #6
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001f26:	4413      	add	r3, r2
 8001f28:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

	Vref_press = 2.5;
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <general_task_init+0x38c>)
 8001f32:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	self->adcPressure = adc_AD7791_create(&hspi1, ADC_PRESS_SPI_CS_GPIO_Port, ADC_PRESS_SPI_CS_Pin, Vref_press, FR_word, MR_word, adcWaitCycles + 20);
 8001f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f38:	3314      	adds	r3, #20
 8001f3a:	68fc      	ldr	r4, [r7, #12]
 8001f3c:	4638      	mov	r0, r7
 8001f3e:	9302      	str	r3, [sp, #8]
 8001f40:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8001f50:	2302      	movs	r3, #2
 8001f52:	4a1f      	ldr	r2, [pc, #124]	; (8001fd0 <general_task_init+0x390>)
 8001f54:	4920      	ldr	r1, [pc, #128]	; (8001fd8 <general_task_init+0x398>)
 8001f56:	f7ff f91f 	bl	8001198 <adc_AD7791_create>
 8001f5a:	f504 73e6 	add.w	r3, r4, #460	; 0x1cc
 8001f5e:	463a      	mov	r2, r7
 8001f60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f64:	e883 0003 	stmia.w	r3, {r0, r1}
	adc_init(&self->adcPressure);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe ff92 	bl	8000e98 <adc_init>
	HAL_Delay(5);
 8001f74:	2005      	movs	r0, #5
 8001f76:	f003 fadf 	bl	8005538 <HAL_Delay>

	/* ADC Dose Rate monitor */
	adc_monitor_init(&self->adcDRMonitor, &self->adcDoseRate, USR_ADC_TIM_IRQn);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f86:	2236      	movs	r2, #54	; 0x36
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f7ff f9b8 	bl	80012fe <adc_monitor_init>

	/* ADC HV monitor */
	adc_monitor_init(&self->adcHVMonitor, &self->adcHV, USR_ADC_TIM_IRQn);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f503 7000 	add.w	r0, r3, #512	; 0x200
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8001f9a:	2236      	movs	r2, #54	; 0x36
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f7ff f9ae 	bl	80012fe <adc_monitor_init>

	/* ADC Pressure monitor */
	adc_monitor_init(&self->adcPRMonitor, &self->adcPressure, USR_ADC_TIM_IRQn);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f503 700a 	add.w	r0, r3, #552	; 0x228
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8001fae:	2236      	movs	r2, #54	; 0x36
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f7ff f9a4 	bl	80012fe <adc_monitor_init>

	/* DAC HV Input */
	//self->dacInputHV = dac_emulator_create(); // emulator
	self->dacInputHV = dac_MCP4811EP_create(&hspi2,
 8001fb6:	68fc      	ldr	r4, [r7, #12]
 8001fb8:	4638      	mov	r0, r7
 8001fba:	2300      	movs	r3, #0
 8001fbc:	e00e      	b.n	8001fdc <general_task_init+0x39c>
 8001fbe:	bf00      	nop
 8001fc0:	20000038 	.word	0x20000038
 8001fc4:	0501bd00 	.word	0x0501bd00
 8001fc8:	49742400 	.word	0x49742400
 8001fcc:	40040000 	.word	0x40040000
 8001fd0:	40020000 	.word	0x40020000
 8001fd4:	20000264 	.word	0x20000264
 8001fd8:	200001b4 	.word	0x200001b4
 8001fdc:	9303      	str	r3, [sp, #12]
 8001fde:	2300      	movs	r3, #0
 8001fe0:	9302      	str	r3, [sp, #8]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	9301      	str	r3, [sp, #4]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2302      	movs	r3, #2
 8001fec:	4a74      	ldr	r2, [pc, #464]	; (80021c0 <general_task_init+0x580>)
 8001fee:	4975      	ldr	r1, [pc, #468]	; (80021c4 <general_task_init+0x584>)
 8001ff0:	f7ff fb76 	bl	80016e0 <dac_MCP4811EP_create>
 8001ff4:	f504 7314 	add.w	r3, r4, #592	; 0x250
 8001ff8:	463a      	mov	r2, r7
 8001ffa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ffe:	e883 0003 	stmia.w	r3, {r0, r1}
			DAC_SPI_CS_GPIO_Port, DAC_SPI_CS_Pin,
			NULL, 0,
			NULL, 0
			); // real

	dac_init(&self->dacInputHV);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fabb 	bl	8001584 <dac_init>

	/* HV System */
	hv_init(&self->hv_system,
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f503 7016 	add.w	r0, r3, #600	; 0x258
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f503 7114 	add.w	r1, r3, #592	; 0x250
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f503 72e2 	add.w	r2, r3, #452	; 0x1c4
 8002020:	2308      	movs	r3, #8
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	ed9f 2b60 	vldr	d2, [pc, #384]	; 80021a8 <general_task_init+0x568>
 8002028:	ed9f 1b61 	vldr	d1, [pc, #388]	; 80021b0 <general_task_init+0x570>
 800202c:	ed9f 0b62 	vldr	d0, [pc, #392]	; 80021b8 <general_task_init+0x578>
 8002030:	4b65      	ldr	r3, [pc, #404]	; (80021c8 <general_task_init+0x588>)
 8002032:	f000 fa45 	bl	80024c0 <hv_init>
			500. / 1024, // Vmax = 500, 922  = 1024 * 0.9 // 922
 			0.535 / 500, //1. / 233.645, // 43k/10M //0.002,
			500
			);

	hv_set_output_voltage_adc_offset(&self->hv_system, Vref_hv / 2);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f503 7416 	add.w	r4, r3, #600	; 0x258
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002044:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002048:	f7fe fba4 	bl	8000794 <__aeabi_ddiv>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	ec43 2b17 	vmov	d7, r2, r3
 8002054:	eeb0 0a47 	vmov.f32	s0, s14
 8002058:	eef0 0a67 	vmov.f32	s1, s15
 800205c:	4620      	mov	r0, r4
 800205e:	f000 fae9 	bl	8002634 <hv_set_output_voltage_adc_offset>

	/* Select range pin */
	set_adc_dose_range_select_pin(SENSOR_RANGE_SELECT_GPIO_Port, SENSOR_RANGE_SELECT_Pin);
 8002062:	2104      	movs	r1, #4
 8002064:	4858      	ldr	r0, [pc, #352]	; (80021c8 <general_task_init+0x588>)
 8002066:	f7ff fa4b 	bl	8001500 <set_adc_dose_range_select_pin>
	select_broad_adc_dose_range();
 800206a:	f7ff fa5f 	bl	800152c <select_broad_adc_dose_range>


	/* SD Card*/
	FR_OK;
	user_sd_init(&self->sd, &hspi2, SD_CS_GPIO_Port, SD_CS_Pin);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f503 702a 	add.w	r0, r3, #680	; 0x2a8
 8002074:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002078:	4a54      	ldr	r2, [pc, #336]	; (80021cc <general_task_init+0x58c>)
 800207a:	4952      	ldr	r1, [pc, #328]	; (80021c4 <general_task_init+0x584>)
 800207c:	f006 ff98 	bl	8008fb0 <user_sd_init>
	self->sd_mount = user_sd_mount(&self->sd, 1);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8002086:	2101      	movs	r1, #1
 8002088:	4618      	mov	r0, r3
 800208a:	f006 ffa9 	bl	8008fe0 <user_sd_mount>
 800208e:	4602      	mov	r2, r0
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002096:	f8c3 272c 	str.w	r2, [r3, #1836]	; 0x72c
	self->sd_open = user_sd_fopen(&self->sd, "file.txt", FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80020a0:	220b      	movs	r2, #11
 80020a2:	494b      	ldr	r1, [pc, #300]	; (80021d0 <general_task_init+0x590>)
 80020a4:	4618      	mov	r0, r3
 80020a6:	f006 ffaf 	bl	8009008 <user_sd_fopen>
 80020aa:	4602      	mov	r2, r0
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80020b2:	f8c3 2730 	str.w	r2, [r3, #1840]	; 0x730
	self->sd_puts = user_sd_fputs(&self->sd, "govno");
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80020bc:	4945      	ldr	r1, [pc, #276]	; (80021d4 <general_task_init+0x594>)
 80020be:	4618      	mov	r0, r3
 80020c0:	f006 ffb7 	bl	8009032 <user_sd_fputs>
 80020c4:	4602      	mov	r2, r0
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80020cc:	f8c3 2734 	str.w	r2, [r3, #1844]	; 0x734
	self->sd_close = user_sd_fclose(&self->sd);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80020d6:	4618      	mov	r0, r3
 80020d8:	f006 ffbd 	bl	8009056 <user_sd_fclose>
 80020dc:	4602      	mov	r2, r0
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80020e4:	f8c3 2738 	str.w	r2, [r3, #1848]	; 0x738



	HAL_Delay(5);
 80020e8:	2005      	movs	r0, #5
 80020ea:	f003 fa25 	bl	8005538 <HAL_Delay>
	/* Ethernet */
	wiz_NetInfo gWIZNETINFO = {
 80020ee:	4b3a      	ldr	r3, [pc, #232]	; (80021d8 <general_task_init+0x598>)
 80020f0:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80020f4:	461d      	mov	r5, r3
 80020f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80020fe:	6020      	str	r0, [r4, #0]
 8002100:	3404      	adds	r4, #4
 8002102:	8021      	strh	r1, [r4, #0]
 8002104:	3402      	adds	r4, #2
 8002106:	0c0b      	lsrs	r3, r1, #16
 8002108:	7023      	strb	r3, [r4, #0]
			.gw		= {169, 254, 206, 240},
			.dns 	= {0, 0, 0, 0},
			.dhcp 	= NETINFO_STATIC
	};

	W5500_SetAddress(gWIZNETINFO);
 800210a:	466b      	mov	r3, sp
 800210c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002110:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002114:	6018      	str	r0, [r3, #0]
 8002116:	3304      	adds	r3, #4
 8002118:	8019      	strh	r1, [r3, #0]
 800211a:	3302      	adds	r3, #2
 800211c:	0c0a      	lsrs	r2, r1, #16
 800211e:	701a      	strb	r2, [r3, #0]
 8002120:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002124:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002126:	f003 f907 	bl	8005338 <W5500_SetAddress>
	W5500_Reboot();
 800212a:	f003 f921 	bl	8005370 <W5500_Reboot>

	/* TCP server sockets */
	tcp_output_stream_init_data_t tcpOutputInit;
	tcpOutputInit.sn = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	f887 3020 	strb.w	r3, [r7, #32]
	tcpOutputInit.port = 11151;
 8002134:	f642 338f 	movw	r3, #11151	; 0x2b8f
 8002138:	847b      	strh	r3, [r7, #34]	; 0x22
	tcpOutputInit.flag = SF_IO_NONBLOCK;
 800213a:	2301      	movs	r3, #1
 800213c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	tcpOutputInit.hinput = &self->tcpInput;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	33a0      	adds	r3, #160	; 0xa0
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
	tcpOutputInit.closeSocketCounterMax = 50;
 8002146:	2332      	movs	r3, #50	; 0x32
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c

	tcp_output_stream_init(&self->tcpOutput, tcpOutputInit);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1d18      	adds	r0, r3, #4
 800214e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	f107 0320 	add.w	r3, r7, #32
 8002156:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002158:	f001 fd5c 	bl	8003c14 <tcp_output_stream_init>

	tcp_input_stream_init_data_t tcpInputInit;
	tcpInputInit.sn = 1;
 800215c:	2301      	movs	r3, #1
 800215e:	753b      	strb	r3, [r7, #20]
	tcpInputInit.port = 11152;
 8002160:	f642 3390 	movw	r3, #11152	; 0x2b90
 8002164:	82fb      	strh	r3, [r7, #22]
	tcpInputInit.flag = SF_IO_NONBLOCK;
 8002166:	2301      	movs	r3, #1
 8002168:	763b      	strb	r3, [r7, #24]
	tcpInputInit.w5500RebootCounterMax = 50;
 800216a:	2332      	movs	r3, #50	; 0x32
 800216c:	61fb      	str	r3, [r7, #28]
	tcp_input_stream_init(&self->tcpInput, tcpInputInit);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	cb0e      	ldmia	r3, {r1, r2, r3}
 800217a:	f001 fc03 	bl	8003984 <tcp_input_stream_init>

	self->cycleCounter = 0;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002184:	461a      	mov	r2, r3
 8002186:	2300      	movs	r3, #0
 8002188:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
	self->cycleCounterMax = self->loopPeriod_ms;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002198:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740
}
 800219c:	bf00      	nop
 800219e:	3770      	adds	r7, #112	; 0x70
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bdb0      	pop	{r4, r5, r7, pc}
 80021a4:	f3af 8000 	nop.w
 80021a8:	00000000 	.word	0x00000000
 80021ac:	407f4000 	.word	0x407f4000
 80021b0:	c06e19b9 	.word	0xc06e19b9
 80021b4:	3f5187e7 	.word	0x3f5187e7
 80021b8:	00000000 	.word	0x00000000
 80021bc:	3fdf4000 	.word	0x3fdf4000
 80021c0:	40020c00 	.word	0x40020c00
 80021c4:	2000020c 	.word	0x2000020c
 80021c8:	40020800 	.word	0x40020800
 80021cc:	40021000 	.word	0x40021000
 80021d0:	0800d38c 	.word	0x0800d38c
 80021d4:	0800d398 	.word	0x0800d398
 80021d8:	0800d3a0 	.word	0x0800d3a0

080021dc <general_task_setup>:

void general_task_setup(general_task_t* self)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
	//ILI9341_Init();

	// init display
	ssd1306_Init();
 80021e4:	f001 f8e6 	bl	80033b4 <ssd1306_Init>
	general_task_switch_screen(self, screen_1_instance());
 80021e8:	f7ff fd16 	bl	8001c18 <screen_1_instance>
 80021ec:	4603      	mov	r3, r0
 80021ee:	4619      	mov	r1, r3
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f954 	bl	800249e <general_task_switch_screen>
	tcp_input_stream_enable_handler(&self->tcpInput);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	33a0      	adds	r3, #160	; 0xa0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f001 fc4b 	bl	8003a96 <tcp_input_stream_enable_handler>
	/* HV ADC Start Calibration (offset measurement) */
	//adc_monitor_start_measurement(&self->adcHVMonitor, self->freqIT * 2 / 3);
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <general_task_loop>:

void general_task_loop(general_task_t* self)
{
 8002208:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
	keyboard_routine(&self->keyboard);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	33f4      	adds	r3, #244	; 0xf4
 8002216:	4618      	mov	r0, r3
 8002218:	f000 fae0 	bl	80027dc <keyboard_routine>
	if(!self->cycleCounter)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002222:	f8d3 373c 	ldr.w	r3, [r3, #1852]	; 0x73c
 8002226:	2b00      	cmp	r3, #0
 8002228:	f040 80c9 	bne.w	80023be <general_task_loop+0x1b6>
	{
		self->cycleCounter = self->cycleCounterMax;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002232:	f8d3 3740 	ldr.w	r3, [r3, #1856]	; 0x740
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800223c:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c

		// Output message
		HAL_NVIC_DisableIRQ(USR_ADC_TIM_IRQn);
 8002240:	2036      	movs	r0, #54	; 0x36
 8002242:	f003 fac6 	bl	80057d2 <HAL_NVIC_DisableIRQ>
		tx_message_set_adc_dr_uV(&self->txMessage, (int32_t)(adc_get_vout(&self->adcDoseRate) * 1e+6));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe fe4a 	bl	8000eec <adc_get_vout>
 8002258:	ec51 0b10 	vmov	r0, r1, d0
 800225c:	a363      	add	r3, pc, #396	; (adr r3, 80023ec <general_task_loop+0x1e4>)
 800225e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002262:	f7fe f96d 	bl	8000540 <__aeabi_dmul>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4610      	mov	r0, r2
 800226c:	4619      	mov	r1, r3
 800226e:	f7fe fc17 	bl	8000aa0 <__aeabi_d2iz>
 8002272:	4603      	mov	r3, r0
 8002274:	4619      	mov	r1, r3
 8002276:	4620      	mov	r0, r4
 8002278:	f001 fe03 	bl	8003e82 <tx_message_set_adc_dr_uV>
		tx_message_set_adc_dr_average_uV(&self->txMessage, (int32_t)(adc_monitor_get_average_signal_value(&self->adcDRMonitor) * 1e+6));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff f90e 	bl	80014aa <adc_monitor_get_average_signal_value>
 800228e:	ec51 0b10 	vmov	r0, r1, d0
 8002292:	a356      	add	r3, pc, #344	; (adr r3, 80023ec <general_task_loop+0x1e4>)
 8002294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002298:	f7fe f952 	bl	8000540 <__aeabi_dmul>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4610      	mov	r0, r2
 80022a2:	4619      	mov	r1, r3
 80022a4:	f7fe fbfc 	bl	8000aa0 <__aeabi_d2iz>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4619      	mov	r1, r3
 80022ac:	4620      	mov	r0, r4
 80022ae:	f001 fdf7 	bl	8003ea0 <tx_message_set_adc_dr_average_uV>
		tx_message_set_hv_out_mV(&self->txMessage, (int32_t)(hv_get_output_voltage_V(&self->hv_system) * 1e+3)); // hv offset!!!
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f994 	bl	80025ec <hv_get_output_voltage_V>
 80022c4:	ec51 0b10 	vmov	r0, r1, d0
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	4b46      	ldr	r3, [pc, #280]	; (80023e8 <general_task_loop+0x1e0>)
 80022ce:	f7fe f937 	bl	8000540 <__aeabi_dmul>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4610      	mov	r0, r2
 80022d8:	4619      	mov	r1, r3
 80022da:	f7fe fbe1 	bl	8000aa0 <__aeabi_d2iz>
 80022de:	4603      	mov	r3, r0
 80022e0:	4619      	mov	r1, r3
 80022e2:	4620      	mov	r0, r4
 80022e4:	f001 fdeb 	bl	8003ebe <tx_message_set_hv_out_mV>
		tx_message_set_press_out_Pa(&self->txMessage, adc_get_vout(&self->adcPressure) * self->pressureCoeff);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe fdf9 	bl	8000eec <adc_get_vout>
 80022fa:	ec59 8b10 	vmov	r8, r9, d0
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe f8c3 	bl	8000490 <__aeabi_f2d>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4640      	mov	r0, r8
 8002310:	4649      	mov	r1, r9
 8002312:	f7fe f915 	bl	8000540 <__aeabi_dmul>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4610      	mov	r0, r2
 800231c:	4619      	mov	r1, r3
 800231e:	f7fe fbbf 	bl	8000aa0 <__aeabi_d2iz>
 8002322:	4603      	mov	r3, r0
 8002324:	4619      	mov	r1, r3
 8002326:	4620      	mov	r0, r4
 8002328:	f001 fdd8 	bl	8003edc <tx_message_set_press_out_Pa>
		tx_message_set_adc_dr_measure_state(&self->txMessage, adc_monitor_get_measurement_state(&self->adcDRMonitor));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff f8d4 	bl	80014e6 <adc_monitor_get_measurement_state>
 800233e:	4603      	mov	r3, r0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	4619      	mov	r1, r3
 8002344:	4620      	mov	r0, r4
 8002346:	f001 fdd8 	bl	8003efa <tx_message_set_adc_dr_measure_state>
		tx_message_set_adc_dr_measure_time(&self->txMessage, adc_monitor_get_measurement_cycle_no(&self->adcDRMonitor) * 3 / self->freqIT );
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff f8b9 	bl	80014ce <adc_monitor_get_measurement_cycle_no>
 800235c:	4602      	mov	r2, r0
 800235e:	4613      	mov	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	8852      	ldrh	r2, [r2, #2]
 8002368:	fbb3 f3f2 	udiv	r3, r3, r2
 800236c:	b29b      	uxth	r3, r3
 800236e:	4619      	mov	r1, r3
 8002370:	4620      	mov	r0, r4
 8002372:	f001 fdd2 	bl	8003f1a <tx_message_set_adc_dr_measure_time>
		HAL_NVIC_EnableIRQ(USR_ADC_TIM_IRQn);
 8002376:	2036      	movs	r0, #54	; 0x36
 8002378:	f003 fa1d 	bl	80057b6 <HAL_NVIC_EnableIRQ>

		tcp_output_stream_set_message(&self->tcpOutput, tx_message_get(&self->txMessage), tx_message_size());
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	1d1c      	adds	r4, r3, #4
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	33dc      	adds	r3, #220	; 0xdc
 8002384:	4618      	mov	r0, r3
 8002386:	f001 fdd8 	bl	8003f3a <tx_message_get>
 800238a:	4605      	mov	r5, r0
 800238c:	f001 fde0 	bl	8003f50 <tx_message_size>
 8002390:	4603      	mov	r3, r0
 8002392:	b29b      	uxth	r3, r3
 8002394:	461a      	mov	r2, r3
 8002396:	4629      	mov	r1, r5
 8002398:	4620      	mov	r0, r4
 800239a:	f001 fc71 	bl	8003c80 <tcp_output_stream_set_message>
		tcp_output_stream_routine(&self->tcpOutput);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3304      	adds	r3, #4
 80023a2:	4618      	mov	r0, r3
 80023a4:	f001 fc99 	bl	8003cda <tcp_output_stream_routine>

		// Input message
		tcp_input_stream_routine(&self->tcpInput);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	33a0      	adds	r3, #160	; 0xa0
 80023ac:	4618      	mov	r0, r3
 80023ae:	f001 fb2d 	bl	8003a0c <tcp_input_stream_routine>

		// Update screen
		screen_update(self->currentScreen);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fa46 	bl	800184a <screen_update>

		// debug!!!
		//general_task_timer_interrupt(self);
	}

	self->cycleCounter--;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80023c4:	f8d3 373c 	ldr.w	r3, [r3, #1852]	; 0x73c
 80023c8:	3b01      	subs	r3, #1
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80023d0:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
	HAL_Delay(1);
 80023d4:	2001      	movs	r0, #1
 80023d6:	f003 f8af 	bl	8005538 <HAL_Delay>
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023e4:	f3af 8000 	nop.w
 80023e8:	408f4000 	.word	0x408f4000
 80023ec:	00000000 	.word	0x00000000
 80023f0:	412e8480 	.word	0x412e8480

080023f4 <general_task_timer_interrupt>:

void general_task_timer_interrupt(general_task_t* self)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
	switch(self->adcNoCnt)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8002402:	2b02      	cmp	r3, #2
 8002404:	d035      	beq.n	8002472 <general_task_timer_interrupt+0x7e>
 8002406:	2b02      	cmp	r3, #2
 8002408:	dc45      	bgt.n	8002496 <general_task_timer_interrupt+0xa2>
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <general_task_timer_interrupt+0x20>
 800240e:	2b01      	cmp	r3, #1
 8002410:	d01a      	beq.n	8002448 <general_task_timer_interrupt+0x54>
		adc_update(&self->adcPressure, NULL);
		adc_monitor_update(&self->adcPRMonitor);
		self->adcNoCnt = 0;
		break;
	}
}
 8002412:	e040      	b.n	8002496 <general_task_timer_interrupt+0xa2>
		tx_message_increase_id(&self->txMessage);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	33dc      	adds	r3, #220	; 0xdc
 8002418:	4618      	mov	r0, r3
 800241a:	f001 fd1f 	bl	8003e5c <tx_message_increase_id>
		adc_update(&self->adcDoseRate, NULL);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002424:	2100      	movs	r1, #0
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe fd43 	bl	8000eb2 <adc_update>
		adc_monitor_update(&self->adcDRMonitor);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe ff7e 	bl	8001334 <adc_monitor_update>
		self->adcNoCnt++;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		break;
 8002446:	e026      	b.n	8002496 <general_task_timer_interrupt+0xa2>
		adc_update(&self->adcHV, NULL);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800244e:	2100      	movs	r1, #0
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe fd2e 	bl	8000eb2 <adc_update>
		adc_monitor_update(&self->adcHVMonitor);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe ff69 	bl	8001334 <adc_monitor_update>
		self->adcNoCnt++;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		break;
 8002470:	e011      	b.n	8002496 <general_task_timer_interrupt+0xa2>
		adc_update(&self->adcPressure, NULL);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8002478:	2100      	movs	r1, #0
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fd19 	bl	8000eb2 <adc_update>
		adc_monitor_update(&self->adcPRMonitor);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe ff54 	bl	8001334 <adc_monitor_update>
		self->adcNoCnt = 0;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		break;
 8002494:	bf00      	nop
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <general_task_switch_screen>:


void general_task_switch_screen(general_task_t* self, screen_t* screen)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]
	//screen_register_keyboard(screen, &self->keyboard);
	screen_draw(screen);
 80024a8:	6838      	ldr	r0, [r7, #0]
 80024aa:	f7ff f9c1 	bl	8001830 <screen_draw>
	self->currentScreen = screen;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <hv_init>:
		uint16_t pinSelectHV,
		double VoutStep_V,
		double VoutGainADC,
		double VoutMax
		)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	; 0x28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6278      	str	r0, [r7, #36]	; 0x24
 80024c8:	6239      	str	r1, [r7, #32]
 80024ca:	61fa      	str	r2, [r7, #28]
 80024cc:	61bb      	str	r3, [r7, #24]
 80024ce:	ed87 0b04 	vstr	d0, [r7, #16]
 80024d2:	ed87 1b02 	vstr	d1, [r7, #8]
 80024d6:	ed87 2b00 	vstr	d2, [r7]
	memset(self, 0, sizeof(*self));
 80024da:	2230      	movs	r2, #48	; 0x30
 80024dc:	2100      	movs	r1, #0
 80024de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024e0:	f009 ff14 	bl	800c30c <memset>
	self->inputDAC 		= inputDAC;
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	6a3a      	ldr	r2, [r7, #32]
 80024e8:	601a      	str	r2, [r3, #0]
	self->outputADC 	= outputADC;
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	69fa      	ldr	r2, [r7, #28]
 80024ee:	605a      	str	r2, [r3, #4]
	self->portSelectHV 	= portSelectHV;
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	609a      	str	r2, [r3, #8]
	self->pinSelectHV 	= pinSelectHV;
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80024fa:	819a      	strh	r2, [r3, #12]
	self->VoutStep_V 	= VoutStep_V;
 80024fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002502:	e9c1 2304 	strd	r2, r3, [r1, #16]
	self->VoutGainADC 	= VoutGainADC;
 8002506:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002508:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800250c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	self->VoutMax		= VoutMax;
 8002510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002512:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002516:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	hv_select_positive_source(self);
 800251a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800251c:	f000 f821 	bl	8002562 <hv_select_positive_source>
	hv_set_output_voltage_adc_offset(self, 0);
 8002520:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8002538 <hv_init+0x78>
 8002524:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002526:	f000 f885 	bl	8002634 <hv_set_output_voltage_adc_offset>
}
 800252a:	bf00      	nop
 800252c:	3728      	adds	r7, #40	; 0x28
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	f3af 8000 	nop.w
	...

08002540 <hv_select_negative_source>:

void hv_select_negative_source(high_voltage_system_t* self)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(self->portSelectHV, self->pinSelectHV, HV_NEGATIVE_SOURCE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6898      	ldr	r0, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	899b      	ldrh	r3, [r3, #12]
 8002550:	2201      	movs	r2, #1
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	4619      	mov	r1, r3
 8002556:	f003 fdf5 	bl	8006144 <HAL_GPIO_WritePin>
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <hv_select_positive_source>:

void hv_select_positive_source(high_voltage_system_t* self)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(self->portSelectHV, self->pinSelectHV, HV_POSITIVE_SOURCE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6898      	ldr	r0, [r3, #8]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	899b      	ldrh	r3, [r3, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	4619      	mov	r1, r3
 8002578:	f003 fde4 	bl	8006144 <HAL_GPIO_WritePin>
}
 800257c:	bf00      	nop
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <hv_set_abs_output_voltage_V>:

void hv_set_abs_output_voltage_V(high_voltage_system_t* self, double Vout)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	ed87 0b00 	vstr	d0, [r7]
	uint32_t digital = (uint32_t)round(fmin(Vout, self->VoutMax) / self->VoutStep_V);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002596:	eeb0 1a47 	vmov.f32	s2, s14
 800259a:	eef0 1a67 	vmov.f32	s3, s15
 800259e:	ed97 0b00 	vldr	d0, [r7]
 80025a2:	f009 ff80 	bl	800c4a6 <fmin>
 80025a6:	ec51 0b10 	vmov	r0, r1, d0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80025b0:	f7fe f8f0 	bl	8000794 <__aeabi_ddiv>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	ec43 2b17 	vmov	d7, r2, r3
 80025bc:	eeb0 0a47 	vmov.f32	s0, s14
 80025c0:	eef0 0a67 	vmov.f32	s1, s15
 80025c4:	f009 ffc0 	bl	800c548 <round>
 80025c8:	ec53 2b10 	vmov	r2, r3, d0
 80025cc:	4610      	mov	r0, r2
 80025ce:	4619      	mov	r1, r3
 80025d0:	f7fe fa8e 	bl	8000af0 <__aeabi_d2uiz>
 80025d4:	4603      	mov	r3, r0
 80025d6:	617b      	str	r3, [r7, #20]
	dac_set_input_value(self->inputDAC, digital);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6979      	ldr	r1, [r7, #20]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe ffdd 	bl	800159e <dac_set_input_value>
}
 80025e4:	bf00      	nop
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <hv_get_output_voltage_V>:

double hv_get_output_voltage_V(high_voltage_system_t* self)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	return (adc_get_vout(self->outputADC) - self->VoutOffsetADC_V) / self->VoutGainADC;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fe fc77 	bl	8000eec <adc_get_vout>
 80025fe:	ec51 0b10 	vmov	r0, r1, d0
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002608:	f7fd fde2 	bl	80001d0 <__aeabi_dsub>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4610      	mov	r0, r2
 8002612:	4619      	mov	r1, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800261a:	f7fe f8bb 	bl	8000794 <__aeabi_ddiv>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	ec43 2b17 	vmov	d7, r2, r3
}
 8002626:	eeb0 0a47 	vmov.f32	s0, s14
 800262a:	eef0 0a67 	vmov.f32	s1, s15
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <hv_set_output_voltage_adc_offset>:

void hv_set_output_voltage_adc_offset(high_voltage_system_t* self, double offset_V)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	ed87 0b00 	vstr	d0, [r7]
	self->VoutOffsetADC_V = offset_V;
 8002640:	68f9      	ldr	r1, [r7, #12]
 8002642:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002646:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800264a:	bf00      	nop
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <empty_cb_>:
#include "button.h"
#include <string.h>
//#include "button_callbacks.h"

static uint8_t button_is_pressed(button_t* self);
static void empty_cb_(void) {};
 8002656:	b480      	push	{r7}
 8002658:	af00      	add	r7, sp, #0
 800265a:	bf00      	nop
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <button_reset_cbs>:
{
	self->release_cb = callback;
}

void button_reset_cbs(button_t* self)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
	self->short_press_cb 	= empty_cb_;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a07      	ldr	r2, [pc, #28]	; (800268c <button_reset_cbs+0x28>)
 8002670:	615a      	str	r2, [r3, #20]
	self->long_press_cb 	= empty_cb_;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a05      	ldr	r2, [pc, #20]	; (800268c <button_reset_cbs+0x28>)
 8002676:	619a      	str	r2, [r3, #24]
	self->release_cb		= empty_cb_;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a04      	ldr	r2, [pc, #16]	; (800268c <button_reset_cbs+0x28>)
 800267c:	61da      	str	r2, [r3, #28]
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	08002657 	.word	0x08002657

08002690 <button_routine>:

void button_routine(button_t* self)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	self->currentButtonState = button_is_pressed(self);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f887 	bl	80027ac <button_is_pressed>
 800269e:	4603      	mov	r3, r0
 80026a0:	461a      	mov	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	749a      	strb	r2, [r3, #18]
	switch(self->state)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	7b1b      	ldrb	r3, [r3, #12]
 80026aa:	2b06      	cmp	r3, #6
 80026ac:	d876      	bhi.n	800279c <button_routine+0x10c>
 80026ae:	a201      	add	r2, pc, #4	; (adr r2, 80026b4 <button_routine+0x24>)
 80026b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b4:	080026d1 	.word	0x080026d1
 80026b8:	080026f5 	.word	0x080026f5
 80026bc:	08002725 	.word	0x08002725
 80026c0:	08002733 	.word	0x08002733
 80026c4:	08002763 	.word	0x08002763
 80026c8:	08002771 	.word	0x08002771
 80026cc:	08002781 	.word	0x08002781
	{
	case BUTTON_NOT_ACTIVE:
		self->filteringCounter = 0;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	81da      	strh	r2, [r3, #14]
		self->longDelayCounter = 0;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	821a      	strh	r2, [r3, #16]
		if(self->currentButtonState && !self->previousButtonState)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	7c9b      	ldrb	r3, [r3, #18]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d054      	beq.n	800278e <button_routine+0xfe>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	7cdb      	ldrb	r3, [r3, #19]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d150      	bne.n	800278e <button_routine+0xfe>
		{
			self->state = BUTTON_FILTERING;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	731a      	strb	r2, [r3, #12]
		}
		break;
 80026f2:	e04c      	b.n	800278e <button_routine+0xfe>
	case BUTTON_FILTERING:
		if(self->currentButtonState)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	7c9b      	ldrb	r3, [r3, #18]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d006      	beq.n	800270a <button_routine+0x7a>
		{
			self->filteringCounter++;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	89db      	ldrh	r3, [r3, #14]
 8002700:	3301      	adds	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	81da      	strh	r2, [r3, #14]
 8002708:	e002      	b.n	8002710 <button_routine+0x80>
		}
		else
		{
			self->state = BUTTON_NOT_ACTIVE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	731a      	strb	r2, [r3, #12]
		}
		if(self->filteringCounter >= self->initData.cyclesFiltering)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	89da      	ldrh	r2, [r3, #14]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	891b      	ldrh	r3, [r3, #8]
 8002718:	429a      	cmp	r2, r3
 800271a:	d33a      	bcc.n	8002792 <button_routine+0x102>
		{
			self->state = BUTTON_SHORT_PRESS;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	731a      	strb	r2, [r3, #12]
		}
		break;
 8002722:	e036      	b.n	8002792 <button_routine+0x102>
	case BUTTON_SHORT_PRESS:
		self->short_press_cb();
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	4798      	blx	r3
		self->state = BUTTON_SHORT_HOLD;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2203      	movs	r2, #3
 800272e:	731a      	strb	r2, [r3, #12]
		break;
 8002730:	e034      	b.n	800279c <button_routine+0x10c>
	case BUTTON_SHORT_HOLD:
		if(self->currentButtonState)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	7c9b      	ldrb	r3, [r3, #18]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d006      	beq.n	8002748 <button_routine+0xb8>
		{
			self->longDelayCounter++;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	8a1b      	ldrh	r3, [r3, #16]
 800273e:	3301      	adds	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	821a      	strh	r2, [r3, #16]
 8002746:	e002      	b.n	800274e <button_routine+0xbe>
		}
		else
		{
			self->state = BUTTON_RELEASE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2206      	movs	r2, #6
 800274c:	731a      	strb	r2, [r3, #12]
		}

		if(self->longDelayCounter >= self->initData.cyclesLongDelay)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	8a1a      	ldrh	r2, [r3, #16]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	895b      	ldrh	r3, [r3, #10]
 8002756:	429a      	cmp	r2, r3
 8002758:	d31d      	bcc.n	8002796 <button_routine+0x106>
		{
			self->state = BUTTON_LONG_PRESS;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2204      	movs	r2, #4
 800275e:	731a      	strb	r2, [r3, #12]
		}
		break;
 8002760:	e019      	b.n	8002796 <button_routine+0x106>
	case BUTTON_LONG_PRESS:
		self->long_press_cb();
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	4798      	blx	r3
		self->state = BUTTON_LONG_HOLD;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2205      	movs	r2, #5
 800276c:	731a      	strb	r2, [r3, #12]
		break;
 800276e:	e015      	b.n	800279c <button_routine+0x10c>
	case BUTTON_LONG_HOLD:
		if(!self->currentButtonState)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	7c9b      	ldrb	r3, [r3, #18]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d110      	bne.n	800279a <button_routine+0x10a>
		{
			self->state = BUTTON_RELEASE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2206      	movs	r2, #6
 800277c:	731a      	strb	r2, [r3, #12]
		}
		break;
 800277e:	e00c      	b.n	800279a <button_routine+0x10a>
	case BUTTON_RELEASE:
		self->release_cb();
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	4798      	blx	r3
		self->state = BUTTON_NOT_ACTIVE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	731a      	strb	r2, [r3, #12]
		break;
 800278c:	e006      	b.n	800279c <button_routine+0x10c>
		break;
 800278e:	bf00      	nop
 8002790:	e004      	b.n	800279c <button_routine+0x10c>
		break;
 8002792:	bf00      	nop
 8002794:	e002      	b.n	800279c <button_routine+0x10c>
		break;
 8002796:	bf00      	nop
 8002798:	e000      	b.n	800279c <button_routine+0x10c>
		break;
 800279a:	bf00      	nop
	}
	self->previousButtonState = self->currentButtonState;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	7c9a      	ldrb	r2, [r3, #18]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	74da      	strb	r2, [r3, #19]
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <button_is_pressed>:

static uint8_t button_is_pressed(button_t* self)
{
 80027ac:	b590      	push	{r4, r7, lr}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
	return self->initData.unpressedState != HAL_GPIO_ReadPin(self->initData.port, self->initData.pin);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	799c      	ldrb	r4, [r3, #6]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	889b      	ldrh	r3, [r3, #4]
 80027c0:	4619      	mov	r1, r3
 80027c2:	4610      	mov	r0, r2
 80027c4:	f003 fca6 	bl	8006114 <HAL_GPIO_ReadPin>
 80027c8:	4603      	mov	r3, r0
 80027ca:	429c      	cmp	r4, r3
 80027cc:	bf14      	ite	ne
 80027ce:	2301      	movne	r3, #1
 80027d0:	2300      	moveq	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd90      	pop	{r4, r7, pc}

080027dc <keyboard_routine>:

#include "keyboard.h"
#include <string.h>

void keyboard_routine(keyboard_t* self)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
	button_routine(&self->up);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff ff52 	bl	8002690 <button_routine>
	button_routine(&self->down);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3320      	adds	r3, #32
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff4d 	bl	8002690 <button_routine>
	button_routine(&self->ok);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3340      	adds	r3, #64	; 0x40
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff ff48 	bl	8002690 <button_routine>
	button_routine(&self->axisReset);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3360      	adds	r3, #96	; 0x60
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff43 	bl	8002690 <button_routine>
	button_routine(&self->step);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3380      	adds	r3, #128	; 0x80
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff ff3e 	bl	8002690 <button_routine>
	button_routine(&self->motion);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	33a0      	adds	r3, #160	; 0xa0
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff39 	bl	8002690 <button_routine>
}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <keyboard_reset_cbs>:

void keyboard_reset_cbs(keyboard_t* self)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]

	button_reset_cbs(&self->up);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff17 	bl	8002664 <button_reset_cbs>
	button_reset_cbs(&self->down);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3320      	adds	r3, #32
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff ff12 	bl	8002664 <button_reset_cbs>
	button_reset_cbs(&self->ok);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3340      	adds	r3, #64	; 0x40
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff0d 	bl	8002664 <button_reset_cbs>
	button_reset_cbs(&self->axisReset);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3360      	adds	r3, #96	; 0x60
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff ff08 	bl	8002664 <button_reset_cbs>
	button_reset_cbs(&self->step);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3380      	adds	r3, #128	; 0x80
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff03 	bl	8002664 <button_reset_cbs>
	button_reset_cbs(&self->motion);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	33a0      	adds	r3, #160	; 0xa0
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff fefe 	bl	8002664 <button_reset_cbs>
}
 8002868:	bf00      	nop
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002874:	f002 fdee 	bl	8005454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002878:	f000 f82a 	bl	80028d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800287c:	f000 f9c0 	bl	8002c00 <MX_GPIO_Init>
  MX_DMA_Init();
 8002880:	f000 f996 	bl	8002bb0 <MX_DMA_Init>
  MX_TIM6_Init();
 8002884:	f000 f95e 	bl	8002b44 <MX_TIM6_Init>
  MX_SPI3_Init();
 8002888:	f000 f926 	bl	8002ad8 <MX_SPI3_Init>
  MX_SPI2_Init();
 800288c:	f000 f8ee 	bl	8002a6c <MX_SPI2_Init>
  MX_SPI1_Init();
 8002890:	f000 f8b6 	bl	8002a00 <MX_SPI1_Init>
  MX_I2C3_Init();
 8002894:	f000 f886 	bl	80029a4 <MX_I2C3_Init>
  MX_FATFS_Init();
 8002898:	f005 fe58 	bl	800854c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_DisableIRQ(USR_ADC_TIM_IRQn);
 800289c:	2036      	movs	r0, #54	; 0x36
 800289e:	f002 ff98 	bl	80057d2 <HAL_NVIC_DisableIRQ>

  // general task init
  general_task_init(&task);
 80028a2:	4809      	ldr	r0, [pc, #36]	; (80028c8 <main+0x58>)
 80028a4:	f7ff f9cc 	bl	8001c40 <general_task_init>
  general_task_setup(&task);
 80028a8:	4807      	ldr	r0, [pc, #28]	; (80028c8 <main+0x58>)
 80028aa:	f7ff fc97 	bl	80021dc <general_task_setup>

  HAL_NVIC_EnableIRQ(USR_ADC_TIM_IRQn);
 80028ae:	2036      	movs	r0, #54	; 0x36
 80028b0:	f002 ff81 	bl	80057b6 <HAL_NVIC_EnableIRQ>

  HAL_TIM_Base_Start_IT(adctim);
 80028b4:	4b05      	ldr	r3, [pc, #20]	; (80028cc <main+0x5c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f005 fb83 	bl	8007fc4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 general_task_loop(&task);
 80028be:	4802      	ldr	r0, [pc, #8]	; (80028c8 <main+0x58>)
 80028c0:	f7ff fca2 	bl	8002208 <general_task_loop>
 80028c4:	e7fb      	b.n	80028be <main+0x4e>
 80028c6:	bf00      	nop
 80028c8:	200003c8 	.word	0x200003c8
 80028cc:	20000038 	.word	0x20000038

080028d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b094      	sub	sp, #80	; 0x50
 80028d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028d6:	f107 0320 	add.w	r3, r7, #32
 80028da:	2230      	movs	r2, #48	; 0x30
 80028dc:	2100      	movs	r1, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f009 fd14 	bl	800c30c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028e4:	f107 030c 	add.w	r3, r7, #12
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028f4:	2300      	movs	r3, #0
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	4b28      	ldr	r3, [pc, #160]	; (800299c <SystemClock_Config+0xcc>)
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	4a27      	ldr	r2, [pc, #156]	; (800299c <SystemClock_Config+0xcc>)
 80028fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002902:	6413      	str	r3, [r2, #64]	; 0x40
 8002904:	4b25      	ldr	r3, [pc, #148]	; (800299c <SystemClock_Config+0xcc>)
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002910:	2300      	movs	r3, #0
 8002912:	607b      	str	r3, [r7, #4]
 8002914:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <SystemClock_Config+0xd0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a21      	ldr	r2, [pc, #132]	; (80029a0 <SystemClock_Config+0xd0>)
 800291a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	4b1f      	ldr	r3, [pc, #124]	; (80029a0 <SystemClock_Config+0xd0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800292c:	2302      	movs	r3, #2
 800292e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002930:	2301      	movs	r3, #1
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002934:	2310      	movs	r3, #16
 8002936:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002938:	2302      	movs	r3, #2
 800293a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800293c:	2300      	movs	r3, #0
 800293e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002940:	2308      	movs	r3, #8
 8002942:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002944:	23a8      	movs	r3, #168	; 0xa8
 8002946:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002948:	2302      	movs	r3, #2
 800294a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800294c:	2304      	movs	r3, #4
 800294e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002950:	f107 0320 	add.w	r3, r7, #32
 8002954:	4618      	mov	r0, r3
 8002956:	f004 f8bd 	bl	8006ad4 <HAL_RCC_OscConfig>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002960:	f000 fa4e 	bl	8002e00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002964:	230f      	movs	r3, #15
 8002966:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002968:	2302      	movs	r3, #2
 800296a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002970:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002974:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800297a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800297c:	f107 030c 	add.w	r3, r7, #12
 8002980:	2105      	movs	r1, #5
 8002982:	4618      	mov	r0, r3
 8002984:	f004 fb1e 	bl	8006fc4 <HAL_RCC_ClockConfig>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800298e:	f000 fa37 	bl	8002e00 <Error_Handler>
  }
}
 8002992:	bf00      	nop
 8002994:	3750      	adds	r7, #80	; 0x50
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	40007000 	.word	0x40007000

080029a4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80029a8:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <MX_I2C3_Init+0x50>)
 80029aa:	4a13      	ldr	r2, [pc, #76]	; (80029f8 <MX_I2C3_Init+0x54>)
 80029ac:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80029ae:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <MX_I2C3_Init+0x50>)
 80029b0:	4a12      	ldr	r2, [pc, #72]	; (80029fc <MX_I2C3_Init+0x58>)
 80029b2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029b4:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <MX_I2C3_Init+0x50>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80029ba:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <MX_I2C3_Init+0x50>)
 80029bc:	2200      	movs	r2, #0
 80029be:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <MX_I2C3_Init+0x50>)
 80029c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029c6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029c8:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <MX_I2C3_Init+0x50>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80029ce:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <MX_I2C3_Init+0x50>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029d4:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <MX_I2C3_Init+0x50>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029da:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <MX_I2C3_Init+0x50>)
 80029dc:	2200      	movs	r2, #0
 80029de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80029e0:	4804      	ldr	r0, [pc, #16]	; (80029f4 <MX_I2C3_Init+0x50>)
 80029e2:	f003 fbc9 	bl	8006178 <HAL_I2C_Init>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80029ec:	f000 fa08 	bl	8002e00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80029f0:	bf00      	nop
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000160 	.word	0x20000160
 80029f8:	40005c00 	.word	0x40005c00
 80029fc:	00061a80 	.word	0x00061a80

08002a00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a04:	4b17      	ldr	r3, [pc, #92]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a06:	4a18      	ldr	r2, [pc, #96]	; (8002a68 <MX_SPI1_Init+0x68>)
 8002a08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a0a:	4b16      	ldr	r3, [pc, #88]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a12:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a18:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002a1e:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a20:	2202      	movs	r2, #2
 8002a22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a24:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a2a:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a34:	2238      	movs	r2, #56	; 0x38
 8002a36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a38:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a3e:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a44:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a4a:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a4c:	220a      	movs	r2, #10
 8002a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a50:	4804      	ldr	r0, [pc, #16]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a52:	f004 fc83 	bl	800735c <HAL_SPI_Init>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a5c:	f000 f9d0 	bl	8002e00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a60:	bf00      	nop
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	200001b4 	.word	0x200001b4
 8002a68:	40013000 	.word	0x40013000

08002a6c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002a70:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <MX_SPI2_Init+0x64>)
 8002a72:	4a18      	ldr	r2, [pc, #96]	; (8002ad4 <MX_SPI2_Init+0x68>)
 8002a74:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a76:	4b16      	ldr	r3, [pc, #88]	; (8002ad0 <MX_SPI2_Init+0x64>)
 8002a78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a7c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002a7e:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <MX_SPI2_Init+0x64>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a84:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <MX_SPI2_Init+0x64>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a8a:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <MX_SPI2_Init+0x64>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a90:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <MX_SPI2_Init+0x64>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002a96:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <MX_SPI2_Init+0x64>)
 8002a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a9c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002a9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <MX_SPI2_Init+0x64>)
 8002aa0:	2218      	movs	r2, #24
 8002aa2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002aa4:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <MX_SPI2_Init+0x64>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <MX_SPI2_Init+0x64>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ab0:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <MX_SPI2_Init+0x64>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002ab6:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <MX_SPI2_Init+0x64>)
 8002ab8:	220a      	movs	r2, #10
 8002aba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002abc:	4804      	ldr	r0, [pc, #16]	; (8002ad0 <MX_SPI2_Init+0x64>)
 8002abe:	f004 fc4d 	bl	800735c <HAL_SPI_Init>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002ac8:	f000 f99a 	bl	8002e00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002acc:	bf00      	nop
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	2000020c 	.word	0x2000020c
 8002ad4:	40003800 	.word	0x40003800

08002ad8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002adc:	4b17      	ldr	r3, [pc, #92]	; (8002b3c <MX_SPI3_Init+0x64>)
 8002ade:	4a18      	ldr	r2, [pc, #96]	; (8002b40 <MX_SPI3_Init+0x68>)
 8002ae0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002ae2:	4b16      	ldr	r3, [pc, #88]	; (8002b3c <MX_SPI3_Init+0x64>)
 8002ae4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ae8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002aea:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <MX_SPI3_Init+0x64>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <MX_SPI3_Init+0x64>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002af6:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <MX_SPI3_Init+0x64>)
 8002af8:	2202      	movs	r2, #2
 8002afa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002afc:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <MX_SPI3_Init+0x64>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <MX_SPI3_Init+0x64>)
 8002b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b08:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002b0a:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <MX_SPI3_Init+0x64>)
 8002b0c:	2230      	movs	r2, #48	; 0x30
 8002b0e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b10:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <MX_SPI3_Init+0x64>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b16:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <MX_SPI3_Init+0x64>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b1c:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <MX_SPI3_Init+0x64>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002b22:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <MX_SPI3_Init+0x64>)
 8002b24:	220a      	movs	r2, #10
 8002b26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002b28:	4804      	ldr	r0, [pc, #16]	; (8002b3c <MX_SPI3_Init+0x64>)
 8002b2a:	f004 fc17 	bl	800735c <HAL_SPI_Init>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002b34:	f000 f964 	bl	8002e00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002b38:	bf00      	nop
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20000264 	.word	0x20000264
 8002b40:	40003c00 	.word	0x40003c00

08002b44 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b4a:	463b      	mov	r3, r7
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002b52:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <MX_TIM6_Init+0x64>)
 8002b54:	4a15      	ldr	r2, [pc, #84]	; (8002bac <MX_TIM6_Init+0x68>)
 8002b56:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000 - 1;
 8002b58:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <MX_TIM6_Init+0x64>)
 8002b5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b5e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b60:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <MX_TIM6_Init+0x64>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4200 / 3 - 1;
 8002b66:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <MX_TIM6_Init+0x64>)
 8002b68:	f240 5277 	movw	r2, #1399	; 0x577
 8002b6c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <MX_TIM6_Init+0x64>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002b74:	480c      	ldr	r0, [pc, #48]	; (8002ba8 <MX_TIM6_Init+0x64>)
 8002b76:	f005 f9d5 	bl	8007f24 <HAL_TIM_Base_Init>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002b80:	f000 f93e 	bl	8002e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b84:	2300      	movs	r3, #0
 8002b86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002b8c:	463b      	mov	r3, r7
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4805      	ldr	r0, [pc, #20]	; (8002ba8 <MX_TIM6_Init+0x64>)
 8002b92:	f005 fc4b 	bl	800842c <HAL_TIMEx_MasterConfigSynchronization>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002b9c:	f000 f930 	bl	8002e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002ba0:	bf00      	nop
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	2000037c 	.word	0x2000037c
 8002bac:	40001000 	.word	0x40001000

08002bb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	607b      	str	r3, [r7, #4]
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <MX_DMA_Init+0x4c>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	4a0f      	ldr	r2, [pc, #60]	; (8002bfc <MX_DMA_Init+0x4c>)
 8002bc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc6:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <MX_DMA_Init+0x4c>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bce:	607b      	str	r3, [r7, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	200e      	movs	r0, #14
 8002bd8:	f002 fdd1 	bl	800577e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002bdc:	200e      	movs	r0, #14
 8002bde:	f002 fdea 	bl	80057b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002be2:	2200      	movs	r2, #0
 8002be4:	2100      	movs	r1, #0
 8002be6:	200f      	movs	r0, #15
 8002be8:	f002 fdc9 	bl	800577e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002bec:	200f      	movs	r0, #15
 8002bee:	f002 fde2 	bl	80057b6 <HAL_NVIC_EnableIRQ>

}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800

08002c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08a      	sub	sp, #40	; 0x28
 8002c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c06:	f107 0314 	add.w	r3, r7, #20
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	605a      	str	r2, [r3, #4]
 8002c10:	609a      	str	r2, [r3, #8]
 8002c12:	60da      	str	r2, [r3, #12]
 8002c14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	4b64      	ldr	r3, [pc, #400]	; (8002dac <MX_GPIO_Init+0x1ac>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	4a63      	ldr	r2, [pc, #396]	; (8002dac <MX_GPIO_Init+0x1ac>)
 8002c20:	f043 0304 	orr.w	r3, r3, #4
 8002c24:	6313      	str	r3, [r2, #48]	; 0x30
 8002c26:	4b61      	ldr	r3, [pc, #388]	; (8002dac <MX_GPIO_Init+0x1ac>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	4b5d      	ldr	r3, [pc, #372]	; (8002dac <MX_GPIO_Init+0x1ac>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	4a5c      	ldr	r2, [pc, #368]	; (8002dac <MX_GPIO_Init+0x1ac>)
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	6313      	str	r3, [r2, #48]	; 0x30
 8002c42:	4b5a      	ldr	r3, [pc, #360]	; (8002dac <MX_GPIO_Init+0x1ac>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	4b56      	ldr	r3, [pc, #344]	; (8002dac <MX_GPIO_Init+0x1ac>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	4a55      	ldr	r2, [pc, #340]	; (8002dac <MX_GPIO_Init+0x1ac>)
 8002c58:	f043 0310 	orr.w	r3, r3, #16
 8002c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5e:	4b53      	ldr	r3, [pc, #332]	; (8002dac <MX_GPIO_Init+0x1ac>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	607b      	str	r3, [r7, #4]
 8002c6e:	4b4f      	ldr	r3, [pc, #316]	; (8002dac <MX_GPIO_Init+0x1ac>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	4a4e      	ldr	r2, [pc, #312]	; (8002dac <MX_GPIO_Init+0x1ac>)
 8002c74:	f043 0302 	orr.w	r3, r3, #2
 8002c78:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7a:	4b4c      	ldr	r3, [pc, #304]	; (8002dac <MX_GPIO_Init+0x1ac>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	607b      	str	r3, [r7, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	603b      	str	r3, [r7, #0]
 8002c8a:	4b48      	ldr	r3, [pc, #288]	; (8002dac <MX_GPIO_Init+0x1ac>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	4a47      	ldr	r2, [pc, #284]	; (8002dac <MX_GPIO_Init+0x1ac>)
 8002c90:	f043 0308 	orr.w	r3, r3, #8
 8002c94:	6313      	str	r3, [r2, #48]	; 0x30
 8002c96:	4b45      	ldr	r3, [pc, #276]	; (8002dac <MX_GPIO_Init+0x1ac>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSOR_RANGE_SELECT_Pin|HV_INPUT_SELECT_Pin, GPIO_PIN_RESET);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	210c      	movs	r1, #12
 8002ca6:	4842      	ldr	r0, [pc, #264]	; (8002db0 <MX_GPIO_Init+0x1b0>)
 8002ca8:	f003 fa4c 	bl	8006144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADC_PRESS_SPI_CS_Pin|ADC_DOSE_SPI_CS_Pin|ADC_HV_SPI_CS_Pin, GPIO_PIN_RESET);
 8002cac:	2200      	movs	r2, #0
 8002cae:	210e      	movs	r1, #14
 8002cb0:	4840      	ldr	r0, [pc, #256]	; (8002db4 <MX_GPIO_Init+0x1b4>)
 8002cb2:	f003 fa47 	bl	8006144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cbc:	483e      	ldr	r0, [pc, #248]	; (8002db8 <MX_GPIO_Init+0x1b8>)
 8002cbe:	f003 fa41 	bl	8006144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ETH_SPI_CS_Pin|ETH_RESET_Pin|SD_SPI_CS_Pin, GPIO_PIN_RESET);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002cc8:	483c      	ldr	r0, [pc, #240]	; (8002dbc <MX_GPIO_Init+0x1bc>)
 8002cca:	f003 fa3b 	bl	8006144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|DAC_SPI_CS_Pin, GPIO_PIN_RESET);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2103      	movs	r1, #3
 8002cd2:	483b      	ldr	r0, [pc, #236]	; (8002dc0 <MX_GPIO_Init+0x1c0>)
 8002cd4:	f003 fa36 	bl	8006144 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSOR_RANGE_SELECT_Pin HV_INPUT_SELECT_Pin */
  GPIO_InitStruct.Pin = SENSOR_RANGE_SELECT_Pin|HV_INPUT_SELECT_Pin;
 8002cd8:	230c      	movs	r3, #12
 8002cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ce8:	f107 0314 	add.w	r3, r7, #20
 8002cec:	4619      	mov	r1, r3
 8002cee:	4830      	ldr	r0, [pc, #192]	; (8002db0 <MX_GPIO_Init+0x1b0>)
 8002cf0:	f003 f874 	bl	8005ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_PRESS_SPI_CS_Pin ADC_DOSE_SPI_CS_Pin ADC_HV_SPI_CS_Pin */
  GPIO_InitStruct.Pin = ADC_PRESS_SPI_CS_Pin|ADC_DOSE_SPI_CS_Pin|ADC_HV_SPI_CS_Pin;
 8002cf4:	230e      	movs	r3, #14
 8002cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d00:	2302      	movs	r3, #2
 8002d02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d04:	f107 0314 	add.w	r3, r7, #20
 8002d08:	4619      	mov	r1, r3
 8002d0a:	482a      	ldr	r0, [pc, #168]	; (8002db4 <MX_GPIO_Init+0x1b4>)
 8002d0c:	f003 f866 	bl	8005ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002d10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d16:	2301      	movs	r3, #1
 8002d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002d22:	f107 0314 	add.w	r3, r7, #20
 8002d26:	4619      	mov	r1, r3
 8002d28:	4823      	ldr	r0, [pc, #140]	; (8002db8 <MX_GPIO_Init+0x1b8>)
 8002d2a:	f003 f857 	bl	8005ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : ETH_SPI_CS_Pin SD_SPI_CS_Pin */
  GPIO_InitStruct.Pin = ETH_SPI_CS_Pin|SD_SPI_CS_Pin;
 8002d2e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d34:	2301      	movs	r3, #1
 8002d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	4619      	mov	r1, r3
 8002d46:	481d      	ldr	r0, [pc, #116]	; (8002dbc <MX_GPIO_Init+0x1bc>)
 8002d48:	f003 f848 	bl	8005ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : ETH_RESET_Pin */
  GPIO_InitStruct.Pin = ETH_RESET_Pin;
 8002d4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d52:	2301      	movs	r3, #1
 8002d54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ETH_RESET_GPIO_Port, &GPIO_InitStruct);
 8002d5e:	f107 0314 	add.w	r3, r7, #20
 8002d62:	4619      	mov	r1, r3
 8002d64:	4815      	ldr	r0, [pc, #84]	; (8002dbc <MX_GPIO_Init+0x1bc>)
 8002d66:	f003 f839 	bl	8005ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d76:	2300      	movs	r3, #0
 8002d78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d7a:	f107 0314 	add.w	r3, r7, #20
 8002d7e:	4619      	mov	r1, r3
 8002d80:	480f      	ldr	r0, [pc, #60]	; (8002dc0 <MX_GPIO_Init+0x1c0>)
 8002d82:	f003 f82b 	bl	8005ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : DAC_SPI_CS_Pin */
  GPIO_InitStruct.Pin = DAC_SPI_CS_Pin;
 8002d86:	2302      	movs	r3, #2
 8002d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d92:	2302      	movs	r3, #2
 8002d94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DAC_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002d96:	f107 0314 	add.w	r3, r7, #20
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4808      	ldr	r0, [pc, #32]	; (8002dc0 <MX_GPIO_Init+0x1c0>)
 8002d9e:	f003 f81d 	bl	8005ddc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002da2:	bf00      	nop
 8002da4:	3728      	adds	r7, #40	; 0x28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40020800 	.word	0x40020800
 8002db4:	40020000 	.word	0x40020000
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	40020400 	.word	0x40020400
 8002dc0:	40020c00 	.word	0x40020c00

08002dc4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim == adctim)
 8002dcc:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d102      	bne.n	8002ddc <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		general_task_timer_interrupt(&task);
 8002dd6:	4808      	ldr	r0, [pc, #32]	; (8002df8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002dd8:	f7ff fb0c 	bl	80023f4 <general_task_timer_interrupt>
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a06      	ldr	r2, [pc, #24]	; (8002dfc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d101      	bne.n	8002dea <HAL_TIM_PeriodElapsedCallback+0x26>
    HAL_IncTick();
 8002de6:	f002 fb87 	bl	80054f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000038 	.word	0x20000038
 8002df8:	200003c8 	.word	0x200003c8
 8002dfc:	40010000 	.word	0x40010000

08002e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e04:	b672      	cpsid	i
}
 8002e06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e08:	e7fe      	b.n	8002e08 <Error_Handler+0x8>
	...

08002e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	607b      	str	r3, [r7, #4]
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <HAL_MspInit+0x4c>)
 8002e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1a:	4a0f      	ldr	r2, [pc, #60]	; (8002e58 <HAL_MspInit+0x4c>)
 8002e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e20:	6453      	str	r3, [r2, #68]	; 0x44
 8002e22:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <HAL_MspInit+0x4c>)
 8002e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e2a:	607b      	str	r3, [r7, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	603b      	str	r3, [r7, #0]
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <HAL_MspInit+0x4c>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	4a08      	ldr	r2, [pc, #32]	; (8002e58 <HAL_MspInit+0x4c>)
 8002e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3e:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <HAL_MspInit+0x4c>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800

08002e5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08a      	sub	sp, #40	; 0x28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e64:	f107 0314 	add.w	r3, r7, #20
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	60da      	str	r2, [r3, #12]
 8002e72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a29      	ldr	r2, [pc, #164]	; (8002f20 <HAL_I2C_MspInit+0xc4>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d14b      	bne.n	8002f16 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	4b28      	ldr	r3, [pc, #160]	; (8002f24 <HAL_I2C_MspInit+0xc8>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4a27      	ldr	r2, [pc, #156]	; (8002f24 <HAL_I2C_MspInit+0xc8>)
 8002e88:	f043 0304 	orr.w	r3, r3, #4
 8002e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8e:	4b25      	ldr	r3, [pc, #148]	; (8002f24 <HAL_I2C_MspInit+0xc8>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	613b      	str	r3, [r7, #16]
 8002e98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	4b21      	ldr	r3, [pc, #132]	; (8002f24 <HAL_I2C_MspInit+0xc8>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	4a20      	ldr	r2, [pc, #128]	; (8002f24 <HAL_I2C_MspInit+0xc8>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eaa:	4b1e      	ldr	r3, [pc, #120]	; (8002f24 <HAL_I2C_MspInit+0xc8>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002eb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ebc:	2312      	movs	r3, #18
 8002ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ec8:	2304      	movs	r3, #4
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ecc:	f107 0314 	add.w	r3, r7, #20
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4815      	ldr	r0, [pc, #84]	; (8002f28 <HAL_I2C_MspInit+0xcc>)
 8002ed4:	f002 ff82 	bl	8005ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ede:	2312      	movs	r3, #18
 8002ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002eea:	2304      	movs	r3, #4
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eee:	f107 0314 	add.w	r3, r7, #20
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	480d      	ldr	r0, [pc, #52]	; (8002f2c <HAL_I2C_MspInit+0xd0>)
 8002ef6:	f002 ff71 	bl	8005ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <HAL_I2C_MspInit+0xc8>)
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	4a08      	ldr	r2, [pc, #32]	; (8002f24 <HAL_I2C_MspInit+0xc8>)
 8002f04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f08:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0a:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <HAL_I2C_MspInit+0xc8>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f12:	60bb      	str	r3, [r7, #8]
 8002f14:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002f16:	bf00      	nop
 8002f18:	3728      	adds	r7, #40	; 0x28
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40005c00 	.word	0x40005c00
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40020800 	.word	0x40020800
 8002f2c:	40020000 	.word	0x40020000

08002f30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08e      	sub	sp, #56	; 0x38
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	60da      	str	r2, [r3, #12]
 8002f46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a79      	ldr	r2, [pc, #484]	; (8003134 <HAL_SPI_MspInit+0x204>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d12c      	bne.n	8002fac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	623b      	str	r3, [r7, #32]
 8002f56:	4b78      	ldr	r3, [pc, #480]	; (8003138 <HAL_SPI_MspInit+0x208>)
 8002f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5a:	4a77      	ldr	r2, [pc, #476]	; (8003138 <HAL_SPI_MspInit+0x208>)
 8002f5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f60:	6453      	str	r3, [r2, #68]	; 0x44
 8002f62:	4b75      	ldr	r3, [pc, #468]	; (8003138 <HAL_SPI_MspInit+0x208>)
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f6a:	623b      	str	r3, [r7, #32]
 8002f6c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	4b71      	ldr	r3, [pc, #452]	; (8003138 <HAL_SPI_MspInit+0x208>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	4a70      	ldr	r2, [pc, #448]	; (8003138 <HAL_SPI_MspInit+0x208>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7e:	4b6e      	ldr	r3, [pc, #440]	; (8003138 <HAL_SPI_MspInit+0x208>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	61fb      	str	r3, [r7, #28]
 8002f88:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002f8a:	23e0      	movs	r3, #224	; 0xe0
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f96:	2303      	movs	r3, #3
 8002f98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f9a:	2305      	movs	r3, #5
 8002f9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4865      	ldr	r0, [pc, #404]	; (800313c <HAL_SPI_MspInit+0x20c>)
 8002fa6:	f002 ff19 	bl	8005ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002faa:	e0bf      	b.n	800312c <HAL_SPI_MspInit+0x1fc>
  else if(hspi->Instance==SPI2)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a63      	ldr	r2, [pc, #396]	; (8003140 <HAL_SPI_MspInit+0x210>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	f040 8088 	bne.w	80030c8 <HAL_SPI_MspInit+0x198>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61bb      	str	r3, [r7, #24]
 8002fbc:	4b5e      	ldr	r3, [pc, #376]	; (8003138 <HAL_SPI_MspInit+0x208>)
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	4a5d      	ldr	r2, [pc, #372]	; (8003138 <HAL_SPI_MspInit+0x208>)
 8002fc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8002fc8:	4b5b      	ldr	r3, [pc, #364]	; (8003138 <HAL_SPI_MspInit+0x208>)
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fd0:	61bb      	str	r3, [r7, #24]
 8002fd2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	4b57      	ldr	r3, [pc, #348]	; (8003138 <HAL_SPI_MspInit+0x208>)
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	4a56      	ldr	r2, [pc, #344]	; (8003138 <HAL_SPI_MspInit+0x208>)
 8002fde:	f043 0302 	orr.w	r3, r3, #2
 8002fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe4:	4b54      	ldr	r3, [pc, #336]	; (8003138 <HAL_SPI_MspInit+0x208>)
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	617b      	str	r3, [r7, #20]
 8002fee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002ff0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ffe:	2303      	movs	r3, #3
 8003000:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003002:	2305      	movs	r3, #5
 8003004:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800300a:	4619      	mov	r1, r3
 800300c:	484d      	ldr	r0, [pc, #308]	; (8003144 <HAL_SPI_MspInit+0x214>)
 800300e:	f002 fee5 	bl	8005ddc <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8003012:	4b4d      	ldr	r3, [pc, #308]	; (8003148 <HAL_SPI_MspInit+0x218>)
 8003014:	4a4d      	ldr	r2, [pc, #308]	; (800314c <HAL_SPI_MspInit+0x21c>)
 8003016:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003018:	4b4b      	ldr	r3, [pc, #300]	; (8003148 <HAL_SPI_MspInit+0x218>)
 800301a:	2200      	movs	r2, #0
 800301c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800301e:	4b4a      	ldr	r3, [pc, #296]	; (8003148 <HAL_SPI_MspInit+0x218>)
 8003020:	2200      	movs	r2, #0
 8003022:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003024:	4b48      	ldr	r3, [pc, #288]	; (8003148 <HAL_SPI_MspInit+0x218>)
 8003026:	2200      	movs	r2, #0
 8003028:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800302a:	4b47      	ldr	r3, [pc, #284]	; (8003148 <HAL_SPI_MspInit+0x218>)
 800302c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003030:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003032:	4b45      	ldr	r3, [pc, #276]	; (8003148 <HAL_SPI_MspInit+0x218>)
 8003034:	2200      	movs	r2, #0
 8003036:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003038:	4b43      	ldr	r3, [pc, #268]	; (8003148 <HAL_SPI_MspInit+0x218>)
 800303a:	2200      	movs	r2, #0
 800303c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800303e:	4b42      	ldr	r3, [pc, #264]	; (8003148 <HAL_SPI_MspInit+0x218>)
 8003040:	2200      	movs	r2, #0
 8003042:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003044:	4b40      	ldr	r3, [pc, #256]	; (8003148 <HAL_SPI_MspInit+0x218>)
 8003046:	2200      	movs	r2, #0
 8003048:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800304a:	4b3f      	ldr	r3, [pc, #252]	; (8003148 <HAL_SPI_MspInit+0x218>)
 800304c:	2200      	movs	r2, #0
 800304e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003050:	483d      	ldr	r0, [pc, #244]	; (8003148 <HAL_SPI_MspInit+0x218>)
 8003052:	f002 fbd9 	bl	8005808 <HAL_DMA_Init>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_SPI_MspInit+0x130>
      Error_Handler();
 800305c:	f7ff fed0 	bl	8002e00 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a39      	ldr	r2, [pc, #228]	; (8003148 <HAL_SPI_MspInit+0x218>)
 8003064:	64da      	str	r2, [r3, #76]	; 0x4c
 8003066:	4a38      	ldr	r2, [pc, #224]	; (8003148 <HAL_SPI_MspInit+0x218>)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800306c:	4b38      	ldr	r3, [pc, #224]	; (8003150 <HAL_SPI_MspInit+0x220>)
 800306e:	4a39      	ldr	r2, [pc, #228]	; (8003154 <HAL_SPI_MspInit+0x224>)
 8003070:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8003072:	4b37      	ldr	r3, [pc, #220]	; (8003150 <HAL_SPI_MspInit+0x220>)
 8003074:	2200      	movs	r2, #0
 8003076:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003078:	4b35      	ldr	r3, [pc, #212]	; (8003150 <HAL_SPI_MspInit+0x220>)
 800307a:	2240      	movs	r2, #64	; 0x40
 800307c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800307e:	4b34      	ldr	r3, [pc, #208]	; (8003150 <HAL_SPI_MspInit+0x220>)
 8003080:	2200      	movs	r2, #0
 8003082:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003084:	4b32      	ldr	r3, [pc, #200]	; (8003150 <HAL_SPI_MspInit+0x220>)
 8003086:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800308a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800308c:	4b30      	ldr	r3, [pc, #192]	; (8003150 <HAL_SPI_MspInit+0x220>)
 800308e:	2200      	movs	r2, #0
 8003090:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003092:	4b2f      	ldr	r3, [pc, #188]	; (8003150 <HAL_SPI_MspInit+0x220>)
 8003094:	2200      	movs	r2, #0
 8003096:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003098:	4b2d      	ldr	r3, [pc, #180]	; (8003150 <HAL_SPI_MspInit+0x220>)
 800309a:	2200      	movs	r2, #0
 800309c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800309e:	4b2c      	ldr	r3, [pc, #176]	; (8003150 <HAL_SPI_MspInit+0x220>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030a4:	4b2a      	ldr	r3, [pc, #168]	; (8003150 <HAL_SPI_MspInit+0x220>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80030aa:	4829      	ldr	r0, [pc, #164]	; (8003150 <HAL_SPI_MspInit+0x220>)
 80030ac:	f002 fbac 	bl	8005808 <HAL_DMA_Init>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_SPI_MspInit+0x18a>
      Error_Handler();
 80030b6:	f7ff fea3 	bl	8002e00 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a24      	ldr	r2, [pc, #144]	; (8003150 <HAL_SPI_MspInit+0x220>)
 80030be:	649a      	str	r2, [r3, #72]	; 0x48
 80030c0:	4a23      	ldr	r2, [pc, #140]	; (8003150 <HAL_SPI_MspInit+0x220>)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80030c6:	e031      	b.n	800312c <HAL_SPI_MspInit+0x1fc>
  else if(hspi->Instance==SPI3)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a22      	ldr	r2, [pc, #136]	; (8003158 <HAL_SPI_MspInit+0x228>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d12c      	bne.n	800312c <HAL_SPI_MspInit+0x1fc>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	4b18      	ldr	r3, [pc, #96]	; (8003138 <HAL_SPI_MspInit+0x208>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	4a17      	ldr	r2, [pc, #92]	; (8003138 <HAL_SPI_MspInit+0x208>)
 80030dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030e0:	6413      	str	r3, [r2, #64]	; 0x40
 80030e2:	4b15      	ldr	r3, [pc, #84]	; (8003138 <HAL_SPI_MspInit+0x208>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	4b11      	ldr	r3, [pc, #68]	; (8003138 <HAL_SPI_MspInit+0x208>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	4a10      	ldr	r2, [pc, #64]	; (8003138 <HAL_SPI_MspInit+0x208>)
 80030f8:	f043 0304 	orr.w	r3, r3, #4
 80030fc:	6313      	str	r3, [r2, #48]	; 0x30
 80030fe:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <HAL_SPI_MspInit+0x208>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800310a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003110:	2302      	movs	r3, #2
 8003112:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	2300      	movs	r3, #0
 8003116:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003118:	2303      	movs	r3, #3
 800311a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800311c:	2306      	movs	r3, #6
 800311e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003124:	4619      	mov	r1, r3
 8003126:	480d      	ldr	r0, [pc, #52]	; (800315c <HAL_SPI_MspInit+0x22c>)
 8003128:	f002 fe58 	bl	8005ddc <HAL_GPIO_Init>
}
 800312c:	bf00      	nop
 800312e:	3738      	adds	r7, #56	; 0x38
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40013000 	.word	0x40013000
 8003138:	40023800 	.word	0x40023800
 800313c:	40020000 	.word	0x40020000
 8003140:	40003800 	.word	0x40003800
 8003144:	40020400 	.word	0x40020400
 8003148:	200002bc 	.word	0x200002bc
 800314c:	40026058 	.word	0x40026058
 8003150:	2000031c 	.word	0x2000031c
 8003154:	40026070 	.word	0x40026070
 8003158:	40003c00 	.word	0x40003c00
 800315c:	40020800 	.word	0x40020800

08003160 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a0e      	ldr	r2, [pc, #56]	; (80031a8 <HAL_TIM_Base_MspInit+0x48>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d115      	bne.n	800319e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <HAL_TIM_Base_MspInit+0x4c>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	4a0c      	ldr	r2, [pc, #48]	; (80031ac <HAL_TIM_Base_MspInit+0x4c>)
 800317c:	f043 0310 	orr.w	r3, r3, #16
 8003180:	6413      	str	r3, [r2, #64]	; 0x40
 8003182:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <HAL_TIM_Base_MspInit+0x4c>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f003 0310 	and.w	r3, r3, #16
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800318e:	2200      	movs	r2, #0
 8003190:	2100      	movs	r1, #0
 8003192:	2036      	movs	r0, #54	; 0x36
 8003194:	f002 faf3 	bl	800577e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003198:	2036      	movs	r0, #54	; 0x36
 800319a:	f002 fb0c 	bl	80057b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800319e:	bf00      	nop
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40001000 	.word	0x40001000
 80031ac:	40023800 	.word	0x40023800

080031b0 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 80031b4:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <SDTimer_Handler+0x40>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d006      	beq.n	80031cc <SDTimer_Handler+0x1c>
		Timer1--;
 80031be:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <SDTimer_Handler+0x40>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <SDTimer_Handler+0x40>)
 80031ca:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 80031cc:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <SDTimer_Handler+0x44>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d006      	beq.n	80031e4 <SDTimer_Handler+0x34>
		Timer2--;
 80031d6:	4b07      	ldr	r3, [pc, #28]	; (80031f4 <SDTimer_Handler+0x44>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <SDTimer_Handler+0x44>)
 80031e2:	701a      	strb	r2, [r3, #0]
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	20002b11 	.word	0x20002b11
 80031f4:	20002b12 	.word	0x20002b12

080031f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031fc:	e7fe      	b.n	80031fc <NMI_Handler+0x4>

080031fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031fe:	b480      	push	{r7}
 8003200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003202:	e7fe      	b.n	8003202 <HardFault_Handler+0x4>

08003204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003208:	e7fe      	b.n	8003208 <MemManage_Handler+0x4>

0800320a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800320a:	b480      	push	{r7}
 800320c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800320e:	e7fe      	b.n	800320e <BusFault_Handler+0x4>

08003210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003214:	e7fe      	b.n	8003214 <UsageFault_Handler+0x4>

08003216 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003216:	b480      	push	{r7}
 8003218:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800321a:	bf00      	nop
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003228:	bf00      	nop
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003232:	b480      	push	{r7}
 8003234:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003236:	bf00      	nop
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8003244:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <SysTick_Handler+0x30>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	b2db      	uxtb	r3, r3
 800324a:	3301      	adds	r3, #1
 800324c:	b2da      	uxtb	r2, r3
 800324e:	4b08      	ldr	r3, [pc, #32]	; (8003270 <SysTick_Handler+0x30>)
 8003250:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8003252:	4b07      	ldr	r3, [pc, #28]	; (8003270 <SysTick_Handler+0x30>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b09      	cmp	r3, #9
 800325a:	d904      	bls.n	8003266 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 800325c:	4b04      	ldr	r3, [pc, #16]	; (8003270 <SysTick_Handler+0x30>)
 800325e:	2200      	movs	r2, #0
 8003260:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8003262:	f7ff ffa5 	bl	80031b0 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003266:	f002 f947 	bl	80054f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800326a:	bf00      	nop
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	20002b10 	.word	0x20002b10

08003274 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003278:	4802      	ldr	r0, [pc, #8]	; (8003284 <DMA1_Stream3_IRQHandler+0x10>)
 800327a:	f002 fb73 	bl	8005964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	200002bc 	.word	0x200002bc

08003288 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800328c:	4802      	ldr	r0, [pc, #8]	; (8003298 <DMA1_Stream4_IRQHandler+0x10>)
 800328e:	f002 fb69 	bl	8005964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003292:	bf00      	nop
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	2000031c 	.word	0x2000031c

0800329c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80032a0:	4802      	ldr	r0, [pc, #8]	; (80032ac <TIM6_DAC_IRQHandler+0x10>)
 80032a2:	f004 feff 	bl	80080a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80032a6:	bf00      	nop
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	2000037c 	.word	0x2000037c

080032b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032b8:	4a14      	ldr	r2, [pc, #80]	; (800330c <_sbrk+0x5c>)
 80032ba:	4b15      	ldr	r3, [pc, #84]	; (8003310 <_sbrk+0x60>)
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032c4:	4b13      	ldr	r3, [pc, #76]	; (8003314 <_sbrk+0x64>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d102      	bne.n	80032d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032cc:	4b11      	ldr	r3, [pc, #68]	; (8003314 <_sbrk+0x64>)
 80032ce:	4a12      	ldr	r2, [pc, #72]	; (8003318 <_sbrk+0x68>)
 80032d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032d2:	4b10      	ldr	r3, [pc, #64]	; (8003314 <_sbrk+0x64>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4413      	add	r3, r2
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d207      	bcs.n	80032f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032e0:	f009 f82c 	bl	800c33c <__errno>
 80032e4:	4603      	mov	r3, r0
 80032e6:	220c      	movs	r2, #12
 80032e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032ea:	f04f 33ff 	mov.w	r3, #4294967295
 80032ee:	e009      	b.n	8003304 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032f0:	4b08      	ldr	r3, [pc, #32]	; (8003314 <_sbrk+0x64>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032f6:	4b07      	ldr	r3, [pc, #28]	; (8003314 <_sbrk+0x64>)
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4413      	add	r3, r2
 80032fe:	4a05      	ldr	r2, [pc, #20]	; (8003314 <_sbrk+0x64>)
 8003300:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003302:	68fb      	ldr	r3, [r7, #12]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	20020000 	.word	0x20020000
 8003310:	00000400 	.word	0x00000400
 8003314:	20002b14 	.word	0x20002b14
 8003318:	200032f8 	.word	0x200032f8

0800331c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003320:	4b06      	ldr	r3, [pc, #24]	; (800333c <SystemInit+0x20>)
 8003322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003326:	4a05      	ldr	r2, [pc, #20]	; (800333c <SystemInit+0x20>)
 8003328:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800332c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	e000ed00 	.word	0xe000ed00

08003340 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003344:	bf00      	nop
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af04      	add	r7, sp, #16
 8003356:	4603      	mov	r3, r0
 8003358:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800335a:	f04f 33ff 	mov.w	r3, #4294967295
 800335e:	9302      	str	r3, [sp, #8]
 8003360:	2301      	movs	r3, #1
 8003362:	9301      	str	r3, [sp, #4]
 8003364:	1dfb      	adds	r3, r7, #7
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	2301      	movs	r3, #1
 800336a:	2200      	movs	r2, #0
 800336c:	2178      	movs	r1, #120	; 0x78
 800336e:	4803      	ldr	r0, [pc, #12]	; (800337c <ssd1306_WriteCommand+0x2c>)
 8003370:	f003 f846 	bl	8006400 <HAL_I2C_Mem_Write>
}
 8003374:	bf00      	nop
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	20000160 	.word	0x20000160

08003380 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af04      	add	r7, sp, #16
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	b29b      	uxth	r3, r3
 800338e:	f04f 32ff 	mov.w	r2, #4294967295
 8003392:	9202      	str	r2, [sp, #8]
 8003394:	9301      	str	r3, [sp, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	2301      	movs	r3, #1
 800339c:	2240      	movs	r2, #64	; 0x40
 800339e:	2178      	movs	r1, #120	; 0x78
 80033a0:	4803      	ldr	r0, [pc, #12]	; (80033b0 <ssd1306_WriteData+0x30>)
 80033a2:	f003 f82d 	bl	8006400 <HAL_I2C_Mem_Write>
}
 80033a6:	bf00      	nop
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20000160 	.word	0x20000160

080033b4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80033b8:	f7ff ffc2 	bl	8003340 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80033bc:	2064      	movs	r0, #100	; 0x64
 80033be:	f002 f8bb 	bl	8005538 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80033c2:	2000      	movs	r0, #0
 80033c4:	f000 f9d8 	bl	8003778 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80033c8:	2020      	movs	r0, #32
 80033ca:	f7ff ffc1 	bl	8003350 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80033ce:	2000      	movs	r0, #0
 80033d0:	f7ff ffbe 	bl	8003350 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80033d4:	20b0      	movs	r0, #176	; 0xb0
 80033d6:	f7ff ffbb 	bl	8003350 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80033da:	20c8      	movs	r0, #200	; 0xc8
 80033dc:	f7ff ffb8 	bl	8003350 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80033e0:	2000      	movs	r0, #0
 80033e2:	f7ff ffb5 	bl	8003350 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80033e6:	2010      	movs	r0, #16
 80033e8:	f7ff ffb2 	bl	8003350 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80033ec:	2040      	movs	r0, #64	; 0x40
 80033ee:	f7ff ffaf 	bl	8003350 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80033f2:	20ff      	movs	r0, #255	; 0xff
 80033f4:	f000 f9ac 	bl	8003750 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80033f8:	20a1      	movs	r0, #161	; 0xa1
 80033fa:	f7ff ffa9 	bl	8003350 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80033fe:	20a6      	movs	r0, #166	; 0xa6
 8003400:	f7ff ffa6 	bl	8003350 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003404:	20a8      	movs	r0, #168	; 0xa8
 8003406:	f7ff ffa3 	bl	8003350 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800340a:	203f      	movs	r0, #63	; 0x3f
 800340c:	f7ff ffa0 	bl	8003350 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003410:	20a4      	movs	r0, #164	; 0xa4
 8003412:	f7ff ff9d 	bl	8003350 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003416:	20d3      	movs	r0, #211	; 0xd3
 8003418:	f7ff ff9a 	bl	8003350 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800341c:	2000      	movs	r0, #0
 800341e:	f7ff ff97 	bl	8003350 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003422:	20d5      	movs	r0, #213	; 0xd5
 8003424:	f7ff ff94 	bl	8003350 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003428:	20f0      	movs	r0, #240	; 0xf0
 800342a:	f7ff ff91 	bl	8003350 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800342e:	20d9      	movs	r0, #217	; 0xd9
 8003430:	f7ff ff8e 	bl	8003350 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003434:	2022      	movs	r0, #34	; 0x22
 8003436:	f7ff ff8b 	bl	8003350 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800343a:	20da      	movs	r0, #218	; 0xda
 800343c:	f7ff ff88 	bl	8003350 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003440:	2012      	movs	r0, #18
 8003442:	f7ff ff85 	bl	8003350 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003446:	20db      	movs	r0, #219	; 0xdb
 8003448:	f7ff ff82 	bl	8003350 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800344c:	2020      	movs	r0, #32
 800344e:	f7ff ff7f 	bl	8003350 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003452:	208d      	movs	r0, #141	; 0x8d
 8003454:	f7ff ff7c 	bl	8003350 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003458:	2014      	movs	r0, #20
 800345a:	f7ff ff79 	bl	8003350 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800345e:	2001      	movs	r0, #1
 8003460:	f000 f98a 	bl	8003778 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003464:	2000      	movs	r0, #0
 8003466:	f000 f80f 	bl	8003488 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800346a:	f000 f825 	bl	80034b8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800346e:	4b05      	ldr	r3, [pc, #20]	; (8003484 <ssd1306_Init+0xd0>)
 8003470:	2200      	movs	r2, #0
 8003472:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <ssd1306_Init+0xd0>)
 8003476:	2200      	movs	r2, #0
 8003478:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800347a:	4b02      	ldr	r3, [pc, #8]	; (8003484 <ssd1306_Init+0xd0>)
 800347c:	2201      	movs	r2, #1
 800347e:	711a      	strb	r2, [r3, #4]
}
 8003480:	bf00      	nop
 8003482:	bd80      	pop	{r7, pc}
 8003484:	20002f18 	.word	0x20002f18

08003488 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <ssd1306_Fill+0x14>
 8003498:	2300      	movs	r3, #0
 800349a:	e000      	b.n	800349e <ssd1306_Fill+0x16>
 800349c:	23ff      	movs	r3, #255	; 0xff
 800349e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034a2:	4619      	mov	r1, r3
 80034a4:	4803      	ldr	r0, [pc, #12]	; (80034b4 <ssd1306_Fill+0x2c>)
 80034a6:	f008 ff31 	bl	800c30c <memset>
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20002b18 	.word	0x20002b18

080034b8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80034be:	2300      	movs	r3, #0
 80034c0:	71fb      	strb	r3, [r7, #7]
 80034c2:	e016      	b.n	80034f2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	3b50      	subs	r3, #80	; 0x50
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff ff40 	bl	8003350 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80034d0:	2000      	movs	r0, #0
 80034d2:	f7ff ff3d 	bl	8003350 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80034d6:	2010      	movs	r0, #16
 80034d8:	f7ff ff3a 	bl	8003350 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	01db      	lsls	r3, r3, #7
 80034e0:	4a08      	ldr	r2, [pc, #32]	; (8003504 <ssd1306_UpdateScreen+0x4c>)
 80034e2:	4413      	add	r3, r2
 80034e4:	2180      	movs	r1, #128	; 0x80
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff ff4a 	bl	8003380 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80034ec:	79fb      	ldrb	r3, [r7, #7]
 80034ee:	3301      	adds	r3, #1
 80034f0:	71fb      	strb	r3, [r7, #7]
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	2b07      	cmp	r3, #7
 80034f6:	d9e5      	bls.n	80034c4 <ssd1306_UpdateScreen+0xc>
    }
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20002b18 	.word	0x20002b18

08003508 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	71fb      	strb	r3, [r7, #7]
 8003512:	460b      	mov	r3, r1
 8003514:	71bb      	strb	r3, [r7, #6]
 8003516:	4613      	mov	r3, r2
 8003518:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800351a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351e:	2b00      	cmp	r3, #0
 8003520:	db3d      	blt.n	800359e <ssd1306_DrawPixel+0x96>
 8003522:	79bb      	ldrb	r3, [r7, #6]
 8003524:	2b3f      	cmp	r3, #63	; 0x3f
 8003526:	d83a      	bhi.n	800359e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003528:	797b      	ldrb	r3, [r7, #5]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d11a      	bne.n	8003564 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800352e:	79fa      	ldrb	r2, [r7, #7]
 8003530:	79bb      	ldrb	r3, [r7, #6]
 8003532:	08db      	lsrs	r3, r3, #3
 8003534:	b2d8      	uxtb	r0, r3
 8003536:	4603      	mov	r3, r0
 8003538:	01db      	lsls	r3, r3, #7
 800353a:	4413      	add	r3, r2
 800353c:	4a1b      	ldr	r2, [pc, #108]	; (80035ac <ssd1306_DrawPixel+0xa4>)
 800353e:	5cd3      	ldrb	r3, [r2, r3]
 8003540:	b25a      	sxtb	r2, r3
 8003542:	79bb      	ldrb	r3, [r7, #6]
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	2101      	movs	r1, #1
 800354a:	fa01 f303 	lsl.w	r3, r1, r3
 800354e:	b25b      	sxtb	r3, r3
 8003550:	4313      	orrs	r3, r2
 8003552:	b259      	sxtb	r1, r3
 8003554:	79fa      	ldrb	r2, [r7, #7]
 8003556:	4603      	mov	r3, r0
 8003558:	01db      	lsls	r3, r3, #7
 800355a:	4413      	add	r3, r2
 800355c:	b2c9      	uxtb	r1, r1
 800355e:	4a13      	ldr	r2, [pc, #76]	; (80035ac <ssd1306_DrawPixel+0xa4>)
 8003560:	54d1      	strb	r1, [r2, r3]
 8003562:	e01d      	b.n	80035a0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003564:	79fa      	ldrb	r2, [r7, #7]
 8003566:	79bb      	ldrb	r3, [r7, #6]
 8003568:	08db      	lsrs	r3, r3, #3
 800356a:	b2d8      	uxtb	r0, r3
 800356c:	4603      	mov	r3, r0
 800356e:	01db      	lsls	r3, r3, #7
 8003570:	4413      	add	r3, r2
 8003572:	4a0e      	ldr	r2, [pc, #56]	; (80035ac <ssd1306_DrawPixel+0xa4>)
 8003574:	5cd3      	ldrb	r3, [r2, r3]
 8003576:	b25a      	sxtb	r2, r3
 8003578:	79bb      	ldrb	r3, [r7, #6]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	2101      	movs	r1, #1
 8003580:	fa01 f303 	lsl.w	r3, r1, r3
 8003584:	b25b      	sxtb	r3, r3
 8003586:	43db      	mvns	r3, r3
 8003588:	b25b      	sxtb	r3, r3
 800358a:	4013      	ands	r3, r2
 800358c:	b259      	sxtb	r1, r3
 800358e:	79fa      	ldrb	r2, [r7, #7]
 8003590:	4603      	mov	r3, r0
 8003592:	01db      	lsls	r3, r3, #7
 8003594:	4413      	add	r3, r2
 8003596:	b2c9      	uxtb	r1, r1
 8003598:	4a04      	ldr	r2, [pc, #16]	; (80035ac <ssd1306_DrawPixel+0xa4>)
 800359a:	54d1      	strb	r1, [r2, r3]
 800359c:	e000      	b.n	80035a0 <ssd1306_DrawPixel+0x98>
        return;
 800359e:	bf00      	nop
    }
}
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	20002b18 	.word	0x20002b18

080035b0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80035b0:	b590      	push	{r4, r7, lr}
 80035b2:	b089      	sub	sp, #36	; 0x24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4604      	mov	r4, r0
 80035b8:	4638      	mov	r0, r7
 80035ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80035be:	4623      	mov	r3, r4
 80035c0:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	2b1f      	cmp	r3, #31
 80035c6:	d902      	bls.n	80035ce <ssd1306_WriteChar+0x1e>
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	2b7e      	cmp	r3, #126	; 0x7e
 80035cc:	d901      	bls.n	80035d2 <ssd1306_WriteChar+0x22>
        return 0;
 80035ce:	2300      	movs	r3, #0
 80035d0:	e079      	b.n	80036c6 <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80035d2:	4b3f      	ldr	r3, [pc, #252]	; (80036d0 <ssd1306_WriteChar+0x120>)
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	783b      	ldrb	r3, [r7, #0]
 80035da:	4413      	add	r3, r2
 80035dc:	2b80      	cmp	r3, #128	; 0x80
 80035de:	dc06      	bgt.n	80035ee <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80035e0:	4b3b      	ldr	r3, [pc, #236]	; (80036d0 <ssd1306_WriteChar+0x120>)
 80035e2:	885b      	ldrh	r3, [r3, #2]
 80035e4:	461a      	mov	r2, r3
 80035e6:	787b      	ldrb	r3, [r7, #1]
 80035e8:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80035ea:	2b40      	cmp	r3, #64	; 0x40
 80035ec:	dd01      	ble.n	80035f2 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	e069      	b.n	80036c6 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80035f2:	2300      	movs	r3, #0
 80035f4:	61fb      	str	r3, [r7, #28]
 80035f6:	e04e      	b.n	8003696 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
 80035fc:	3b20      	subs	r3, #32
 80035fe:	7879      	ldrb	r1, [r7, #1]
 8003600:	fb01 f303 	mul.w	r3, r1, r3
 8003604:	4619      	mov	r1, r3
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	440b      	add	r3, r1
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	4413      	add	r3, r2
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8003612:	2300      	movs	r3, #0
 8003614:	61bb      	str	r3, [r7, #24]
 8003616:	e036      	b.n	8003686 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d013      	beq.n	8003650 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003628:	4b29      	ldr	r3, [pc, #164]	; (80036d0 <ssd1306_WriteChar+0x120>)
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b2da      	uxtb	r2, r3
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	4413      	add	r3, r2
 8003634:	b2d8      	uxtb	r0, r3
 8003636:	4b26      	ldr	r3, [pc, #152]	; (80036d0 <ssd1306_WriteChar+0x120>)
 8003638:	885b      	ldrh	r3, [r3, #2]
 800363a:	b2da      	uxtb	r2, r3
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	4413      	add	r3, r2
 8003642:	b2db      	uxtb	r3, r3
 8003644:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8003648:	4619      	mov	r1, r3
 800364a:	f7ff ff5d 	bl	8003508 <ssd1306_DrawPixel>
 800364e:	e017      	b.n	8003680 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003650:	4b1f      	ldr	r3, [pc, #124]	; (80036d0 <ssd1306_WriteChar+0x120>)
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	b2da      	uxtb	r2, r3
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	b2db      	uxtb	r3, r3
 800365a:	4413      	add	r3, r2
 800365c:	b2d8      	uxtb	r0, r3
 800365e:	4b1c      	ldr	r3, [pc, #112]	; (80036d0 <ssd1306_WriteChar+0x120>)
 8003660:	885b      	ldrh	r3, [r3, #2]
 8003662:	b2da      	uxtb	r2, r3
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	4413      	add	r3, r2
 800366a:	b2d9      	uxtb	r1, r3
 800366c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003670:	2b00      	cmp	r3, #0
 8003672:	bf0c      	ite	eq
 8003674:	2301      	moveq	r3, #1
 8003676:	2300      	movne	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	f7ff ff44 	bl	8003508 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	3301      	adds	r3, #1
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	783b      	ldrb	r3, [r7, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	4293      	cmp	r3, r2
 800368e:	d3c3      	bcc.n	8003618 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	3301      	adds	r3, #1
 8003694:	61fb      	str	r3, [r7, #28]
 8003696:	787b      	ldrb	r3, [r7, #1]
 8003698:	461a      	mov	r2, r3
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	4293      	cmp	r3, r2
 800369e:	d3ab      	bcc.n	80035f8 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80036a0:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <ssd1306_WriteChar+0x120>)
 80036a2:	881a      	ldrh	r2, [r3, #0]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d006      	beq.n	80036b8 <ssd1306_WriteChar+0x108>
 80036aa:	68b9      	ldr	r1, [r7, #8]
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
 80036ae:	3b20      	subs	r3, #32
 80036b0:	440b      	add	r3, r1
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	e001      	b.n	80036bc <ssd1306_WriteChar+0x10c>
 80036b8:	783b      	ldrb	r3, [r7, #0]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	4413      	add	r3, r2
 80036be:	b29a      	uxth	r2, r3
 80036c0:	4b03      	ldr	r3, [pc, #12]	; (80036d0 <ssd1306_WriteChar+0x120>)
 80036c2:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3724      	adds	r7, #36	; 0x24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd90      	pop	{r4, r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20002f18 	.word	0x20002f18

080036d4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af02      	add	r7, sp, #8
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	4638      	mov	r0, r7
 80036de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80036e2:	e013      	b.n	800370c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	7818      	ldrb	r0, [r3, #0]
 80036e8:	7e3b      	ldrb	r3, [r7, #24]
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	463b      	mov	r3, r7
 80036ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036f0:	f7ff ff5e 	bl	80035b0 <ssd1306_WriteChar>
 80036f4:	4603      	mov	r3, r0
 80036f6:	461a      	mov	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d002      	beq.n	8003706 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	e008      	b.n	8003718 <ssd1306_WriteString+0x44>
        }
        str++;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	3301      	adds	r3, #1
 800370a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e7      	bne.n	80036e4 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	781b      	ldrb	r3, [r3, #0]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	460a      	mov	r2, r1
 800372a:	71fb      	strb	r3, [r7, #7]
 800372c:	4613      	mov	r3, r2
 800372e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003730:	79fb      	ldrb	r3, [r7, #7]
 8003732:	b29a      	uxth	r2, r3
 8003734:	4b05      	ldr	r3, [pc, #20]	; (800374c <ssd1306_SetCursor+0x2c>)
 8003736:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003738:	79bb      	ldrb	r3, [r7, #6]
 800373a:	b29a      	uxth	r2, r3
 800373c:	4b03      	ldr	r3, [pc, #12]	; (800374c <ssd1306_SetCursor+0x2c>)
 800373e:	805a      	strh	r2, [r3, #2]
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	20002f18 	.word	0x20002f18

08003750 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800375a:	2381      	movs	r3, #129	; 0x81
 800375c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800375e:	7bfb      	ldrb	r3, [r7, #15]
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff fdf5 	bl	8003350 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff fdf1 	bl	8003350 <ssd1306_WriteCommand>
}
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003782:	79fb      	ldrb	r3, [r7, #7]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003788:	23af      	movs	r3, #175	; 0xaf
 800378a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800378c:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <ssd1306_SetDisplayOn+0x38>)
 800378e:	2201      	movs	r2, #1
 8003790:	715a      	strb	r2, [r3, #5]
 8003792:	e004      	b.n	800379e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003794:	23ae      	movs	r3, #174	; 0xae
 8003796:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <ssd1306_SetDisplayOn+0x38>)
 800379a:	2200      	movs	r2, #0
 800379c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff fdd5 	bl	8003350 <ssd1306_WriteCommand>
}
 80037a6:	bf00      	nop
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20002f18 	.word	0x20002f18

080037b4 <ssd1306_WriteInt>:
    return SSD1306.DisplayOn;
}

// Upd by AKG
void ssd1306_WriteInt(int num, SSD1306_Font_t Font, SSD1306_COLOR color)
{
 80037b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037b8:	b08b      	sub	sp, #44	; 0x2c
 80037ba:	af02      	add	r7, sp, #8
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	4638      	mov	r0, r7
 80037c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80037c4:	466b      	mov	r3, sp
 80037c6:	461e      	mov	r6, r3
	static const int MAX_NUMBER_LENGTH = 10;

	int num_length = 1;
 80037c8:	2301      	movs	r3, #1
 80037ca:	61fb      	str	r3, [r7, #28]
	int num_divided = num;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	61bb      	str	r3, [r7, #24]
	while(num_divided / 10) {
 80037d0:	e00a      	b.n	80037e8 <ssd1306_WriteInt+0x34>
		num_length++;
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	3301      	adds	r3, #1
 80037d6:	61fb      	str	r3, [r7, #28]
		num_divided = num_divided / 10;
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	4a32      	ldr	r2, [pc, #200]	; (80038a4 <ssd1306_WriteInt+0xf0>)
 80037dc:	fb82 1203 	smull	r1, r2, r2, r3
 80037e0:	1092      	asrs	r2, r2, #2
 80037e2:	17db      	asrs	r3, r3, #31
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	61bb      	str	r3, [r7, #24]
	while(num_divided / 10) {
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	3309      	adds	r3, #9
 80037ec:	2b12      	cmp	r3, #18
 80037ee:	d8f0      	bhi.n	80037d2 <ssd1306_WriteInt+0x1e>
	}

	char str[MAX_NUMBER_LENGTH];
 80037f0:	4b2d      	ldr	r3, [pc, #180]	; (80038a8 <ssd1306_WriteInt+0xf4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3b01      	subs	r3, #1
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	4b2b      	ldr	r3, [pc, #172]	; (80038a8 <ssd1306_WriteInt+0xf4>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	2300      	movs	r3, #0
 8003800:	4690      	mov	r8, r2
 8003802:	4699      	mov	r9, r3
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003810:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003814:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003818:	4b23      	ldr	r3, [pc, #140]	; (80038a8 <ssd1306_WriteInt+0xf4>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	2300      	movs	r3, #0
 8003820:	4614      	mov	r4, r2
 8003822:	461d      	mov	r5, r3
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	00eb      	lsls	r3, r5, #3
 800382e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003832:	00e2      	lsls	r2, r4, #3
 8003834:	4b1c      	ldr	r3, [pc, #112]	; (80038a8 <ssd1306_WriteInt+0xf4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	3307      	adds	r3, #7
 800383a:	08db      	lsrs	r3, r3, #3
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	ebad 0d03 	sub.w	sp, sp, r3
 8003842:	ab02      	add	r3, sp, #8
 8003844:	3300      	adds	r3, #0
 8003846:	613b      	str	r3, [r7, #16]
	memset(str, 0, MAX_NUMBER_LENGTH*sizeof(char));
 8003848:	4b17      	ldr	r3, [pc, #92]	; (80038a8 <ssd1306_WriteInt+0xf4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	2100      	movs	r1, #0
 8003850:	6938      	ldr	r0, [r7, #16]
 8003852:	f008 fd5b 	bl	800c30c <memset>

	if(num_length <= MAX_NUMBER_LENGTH)
 8003856:	4b14      	ldr	r3, [pc, #80]	; (80038a8 <ssd1306_WriteInt+0xf4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69fa      	ldr	r2, [r7, #28]
 800385c:	429a      	cmp	r2, r3
 800385e:	dc0d      	bgt.n	800387c <ssd1306_WriteInt+0xc8>
	{
		itoa(num, str, 10);
 8003860:	220a      	movs	r2, #10
 8003862:	6939      	ldr	r1, [r7, #16]
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f008 fc59 	bl	800c11c <itoa>
		ssd1306_WriteString(str, Font, color);
 800386a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	463b      	mov	r3, r7
 8003872:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003874:	6938      	ldr	r0, [r7, #16]
 8003876:	f7ff ff2d 	bl	80036d4 <ssd1306_WriteString>
 800387a:	e00c      	b.n	8003896 <ssd1306_WriteInt+0xe2>
	}
	else
	{
		itoa(0, str, 10);
 800387c:	220a      	movs	r2, #10
 800387e:	6939      	ldr	r1, [r7, #16]
 8003880:	2000      	movs	r0, #0
 8003882:	f008 fc4b 	bl	800c11c <itoa>
		ssd1306_WriteString(str, Font, color);
 8003886:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	463b      	mov	r3, r7
 800388e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003890:	6938      	ldr	r0, [r7, #16]
 8003892:	f7ff ff1f 	bl	80036d4 <ssd1306_WriteString>
 8003896:	46b5      	mov	sp, r6
	}
}
 8003898:	bf00      	nop
 800389a:	3724      	adds	r7, #36	; 0x24
 800389c:	46bd      	mov	sp, r7
 800389e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038a2:	bf00      	nop
 80038a4:	66666667 	.word	0x66666667
 80038a8:	0800d424 	.word	0x0800d424

080038ac <rx_message_run_command>:
#include <stdlib.h>

extern general_task_t task;

void rx_message_run_command(char* msg)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
	int32_t code = 0, param = 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	2300      	movs	r3, #0
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
	memcpy(&code, msg, sizeof(code));
 80038c0:	60fb      	str	r3, [r7, #12]
	memcpy(&param, msg + 4, sizeof(param));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3304      	adds	r3, #4
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	60bb      	str	r3, [r7, #8]

	switch(code)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b05      	cmp	r3, #5
 80038ce:	d84c      	bhi.n	800396a <rx_message_run_command+0xbe>
 80038d0:	a201      	add	r2, pc, #4	; (adr r2, 80038d8 <rx_message_run_command+0x2c>)
 80038d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d6:	bf00      	nop
 80038d8:	08003965 	.word	0x08003965
 80038dc:	080038f1 	.word	0x080038f1
 80038e0:	0800390f 	.word	0x0800390f
 80038e4:	08003935 	.word	0x08003935
 80038e8:	0800393d 	.word	0x0800393d
 80038ec:	0800394f 	.word	0x0800394f
	{
	case COMM_EMPTY:
		break;
	case COMM_SET_HV:
		// [param] = HV in Volts
		hv_set_abs_output_voltage_V(&task.hv_system, (double)abs(param));
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	bfb8      	it	lt
 80038f6:	425b      	neglt	r3, r3
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fc fdb7 	bl	800046c <__aeabi_i2d>
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	ec43 2b10 	vmov	d0, r2, r3
 8003906:	481b      	ldr	r0, [pc, #108]	; (8003974 <rx_message_run_command+0xc8>)
 8003908:	f7fe fe3c 	bl	8002584 <hv_set_abs_output_voltage_V>
		break;
 800390c:	e02d      	b.n	800396a <rx_message_run_command+0xbe>
	case COMM_START_MEAS:
		if(param >= 0) // [param] = seconds
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	db29      	blt.n	8003968 <rx_message_run_command+0xbc>
		{
			adc_monitor_start_measurement(&task.adcDRMonitor, task.freqIT / 3 * param);
 8003914:	4b18      	ldr	r3, [pc, #96]	; (8003978 <rx_message_run_command+0xcc>)
 8003916:	885b      	ldrh	r3, [r3, #2]
 8003918:	4a18      	ldr	r2, [pc, #96]	; (800397c <rx_message_run_command+0xd0>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	085b      	lsrs	r3, r3, #1
 8003920:	b29b      	uxth	r3, r3
 8003922:	461a      	mov	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	fb02 f303 	mul.w	r3, r2, r3
 800392a:	4619      	mov	r1, r3
 800392c:	4814      	ldr	r0, [pc, #80]	; (8003980 <rx_message_run_command+0xd4>)
 800392e:	f7fd fd83 	bl	8001438 <adc_monitor_start_measurement>
		}
		break;
 8003932:	e019      	b.n	8003968 <rx_message_run_command+0xbc>
	case COMM_RESET_MEAS:
		adc_monitor_reset_measurement(&task.adcDRMonitor);
 8003934:	4812      	ldr	r0, [pc, #72]	; (8003980 <rx_message_run_command+0xd4>)
 8003936:	f7fd fda1 	bl	800147c <adc_monitor_reset_measurement>
		break;
 800393a:	e016      	b.n	800396a <rx_message_run_command+0xbe>
	case COMM_SET_MEAS_RANGE:
		if(!param) // [param] = 0 - broad range, 1 - narrow range
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d102      	bne.n	8003948 <rx_message_run_command+0x9c>
		{
			select_broad_adc_dose_range();
 8003942:	f7fd fdf3 	bl	800152c <select_broad_adc_dose_range>
		}
		else
		{
			select_narrow_adc_dose_range();
		}
		break;
 8003946:	e010      	b.n	800396a <rx_message_run_command+0xbe>
			select_narrow_adc_dose_range();
 8003948:	f7fd fe06 	bl	8001558 <select_narrow_adc_dose_range>
		break;
 800394c:	e00d      	b.n	800396a <rx_message_run_command+0xbe>
	case COMM_SWITCH_HV:
		if(!param) // [param] = 0 - positive HV source, 1 - negative HV source
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d103      	bne.n	800395c <rx_message_run_command+0xb0>
		{
			hv_select_positive_source(&task.hv_system);
 8003954:	4807      	ldr	r0, [pc, #28]	; (8003974 <rx_message_run_command+0xc8>)
 8003956:	f7fe fe04 	bl	8002562 <hv_select_positive_source>
		else
		{
			hv_select_negative_source(&task.hv_system);
		}
		// gpio toggle
		break;
 800395a:	e006      	b.n	800396a <rx_message_run_command+0xbe>
			hv_select_negative_source(&task.hv_system);
 800395c:	4805      	ldr	r0, [pc, #20]	; (8003974 <rx_message_run_command+0xc8>)
 800395e:	f7fe fdef 	bl	8002540 <hv_select_negative_source>
		break;
 8003962:	e002      	b.n	800396a <rx_message_run_command+0xbe>
		break;
 8003964:	bf00      	nop
 8003966:	e000      	b.n	800396a <rx_message_run_command+0xbe>
		break;
 8003968:	bf00      	nop
	}
}
 800396a:	bf00      	nop
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20000620 	.word	0x20000620
 8003978:	200003c8 	.word	0x200003c8
 800397c:	aaaaaaab 	.word	0xaaaaaaab
 8003980:	200005a0 	.word	0x200005a0

08003984 <tcp_input_stream_init>:
static int tcp_input_stream_listen_socket(tcp_input_stream_t *self);
static int tcp_input_stream_receive(tcp_input_stream_t *self);
static int tcp_input_stream_reboot_ethernet(tcp_input_stream_t *self, int sockOpen);

int tcp_input_stream_init(tcp_input_stream_t *self, tcp_input_stream_init_data_t tcpInit)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	4638      	mov	r0, r7
 800398e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	memset(self, 0, sizeof(*self));
 8003992:	223c      	movs	r2, #60	; 0x3c
 8003994:	2100      	movs	r1, #0
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f008 fcb8 	bl	800c30c <memset>
	memset(self->msg, 0, INPUT_MESSAGE_SIZE);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	3301      	adds	r3, #1
 80039a0:	2208      	movs	r2, #8
 80039a2:	2100      	movs	r1, #0
 80039a4:	4618      	mov	r0, r3
 80039a6:	f008 fcb1 	bl	800c30c <memset>
	memset(self->msgTemp, 0, INPUT_MESSAGE_SIZE);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	3309      	adds	r3, #9
 80039ae:	2208      	movs	r2, #8
 80039b0:	2100      	movs	r1, #0
 80039b2:	4618      	mov	r0, r3
 80039b4:	f008 fcaa 	bl	800c30c <memset>
	memset(self->buff, 0, INPUT_MESSAGE_BUFFER_SIZE);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	3311      	adds	r3, #17
 80039bc:	2208      	movs	r2, #8
 80039be:	2100      	movs	r1, #0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f008 fca3 	bl	800c30c <memset>
	self->stat = 0;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	701a      	strb	r2, [r3, #0]
	self->initData = tcpInit;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	3328      	adds	r3, #40	; 0x28
 80039d0:	463a      	mov	r2, r7
 80039d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80039d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	self->currentBuffIndex = 0;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	61da      	str	r2, [r3, #28]
	self->bytesReceived = 0;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	621a      	str	r2, [r3, #32]
	self->msgSize = 0;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	849a      	strh	r2, [r3, #36]	; 0x24
	self->handlerEnabled = 0;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	self->isConnected = 0;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	self->w5500RebootCounter = self->initData.w5500RebootCounterMax;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	639a      	str	r2, [r3, #56]	; 0x38

	//self->state = INPUT_SOCK_INIT;
	return 0;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <tcp_input_stream_routine>:
{
	return INPUT_MESSAGE_SIZE; //size
}

int tcp_input_stream_routine(tcp_input_stream_t *self)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
	// new state mashine
	int received = -1;
 8003a14:	f04f 33ff 	mov.w	r3, #4294967295
 8003a18:	60fb      	str	r3, [r7, #12]
	self->isConnected = 0;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	switch(getSn_SR(self->initData.sn))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 fe96 	bl	8004764 <WIZCHIP_READ>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b17      	cmp	r3, #23
 8003a3c:	d013      	beq.n	8003a66 <tcp_input_stream_routine+0x5a>
 8003a3e:	2b17      	cmp	r3, #23
 8003a40:	dc24      	bgt.n	8003a8c <tcp_input_stream_routine+0x80>
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d002      	beq.n	8003a4c <tcp_input_stream_routine+0x40>
 8003a46:	2b13      	cmp	r3, #19
 8003a48:	d009      	beq.n	8003a5e <tcp_input_stream_routine+0x52>
 8003a4a:	e01f      	b.n	8003a8c <tcp_input_stream_routine+0x80>
	{
	case SOCK_CLOSED:
		int open = tcp_input_stream_open_socket(self);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f830 	bl	8003ab2 <tcp_input_stream_open_socket>
 8003a52:	60b8      	str	r0, [r7, #8]
		tcp_input_stream_reboot_ethernet(self, open);
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f8ba 	bl	8003bd0 <tcp_input_stream_reboot_ethernet>
		break;
 8003a5c:	e016      	b.n	8003a8c <tcp_input_stream_routine+0x80>
	case SOCK_INIT:
		tcp_input_stream_listen_socket(self);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f83f 	bl	8003ae2 <tcp_input_stream_listen_socket>
		break;
 8003a64:	e012      	b.n	8003a8c <tcp_input_stream_routine+0x80>
	case SOCK_ESTABLISHED:
		received = tcp_input_stream_receive(self);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f84e 	bl	8003b08 <tcp_input_stream_receive>
 8003a6c:	60f8      	str	r0, [r7, #12]
		if(received < 0)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	da06      	bge.n	8003a82 <tcp_input_stream_routine+0x76>
		{
			disconnect(self->initData.sn);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fc4c 	bl	8004318 <disconnect>
		}
		else
		{
			self->isConnected = 1;
		}
		break;
 8003a80:	e003      	b.n	8003a8a <tcp_input_stream_routine+0x7e>
			self->isConnected = 1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		break;
 8003a8a:	bf00      	nop
	}
	return 0;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <tcp_input_stream_enable_handler>:


void tcp_input_stream_enable_handler(tcp_input_stream_t *self)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
	self->handlerEnabled = 1;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <tcp_input_stream_open_socket>:
{
	return self->isConnected;
}

static int tcp_input_stream_open_socket(tcp_input_stream_t *self)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
	self->stat = socket(self->initData.sn, Sn_MR_TCP, self->initData.port, self->initData.flag);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003aca:	2101      	movs	r1, #1
 8003acc:	f000 fa48 	bl	8003f60 <socket>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	701a      	strb	r2, [r3, #0]
	return 0;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <tcp_input_stream_listen_socket>:

static int tcp_input_stream_listen_socket(tcp_input_stream_t *self)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b082      	sub	sp, #8
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
	self->stat = listen(self->initData.sn);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 fbb7 	bl	8004264 <listen>
 8003af6:	4603      	mov	r3, r0
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	701a      	strb	r2, [r3, #0]
	return 0;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <tcp_input_stream_receive>:

static int tcp_input_stream_receive(tcp_input_stream_t *self)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	while (self->bytesReceived != INPUT_MESSAGE_SIZE)
 8003b10:	e033      	b.n	8003b7a <tcp_input_stream_receive+0x72>
	{
		int recv_size = recv(self->initData.sn, (uint8_t*)self->buff, INPUT_MESSAGE_BUFFER_SIZE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3311      	adds	r3, #17
 8003b1c:	2208      	movs	r2, #8
 8003b1e:	4619      	mov	r1, r3
 8003b20:	f000 fd6a 	bl	80045f8 <recv>
 8003b24:	60f8      	str	r0, [r7, #12]
		if (recv_size == 0)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <tcp_input_stream_receive+0x28>
		{
			return 0;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	e04b      	b.n	8003bc8 <tcp_input_stream_receive+0xc0>
		}
		if (recv_size < 0)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	da01      	bge.n	8003b3a <tcp_input_stream_receive+0x32>
		{
			return recv_size;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	e046      	b.n	8003bc8 <tcp_input_stream_receive+0xc0>
		}

		self->bytesReceived += recv_size;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1a      	ldr	r2, [r3, #32]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	441a      	add	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	621a      	str	r2, [r3, #32]

		int i;
		for(i = 0; i < recv_size; ++i)
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	e012      	b.n	8003b72 <tcp_input_stream_receive+0x6a>
		{
			self->msgTemp[self->currentBuffIndex] = self->buff[i];
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	440a      	add	r2, r1
 8003b56:	3211      	adds	r2, #17
 8003b58:	7811      	ldrb	r1, [r2, #0]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	460a      	mov	r2, r1
 8003b60:	725a      	strb	r2, [r3, #9]
			self->currentBuffIndex++;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	61da      	str	r2, [r3, #28]
		for(i = 0; i < recv_size; ++i)
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	617b      	str	r3, [r7, #20]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	dbe8      	blt.n	8003b4c <tcp_input_stream_receive+0x44>
	while (self->bytesReceived != INPUT_MESSAGE_SIZE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d1c7      	bne.n	8003b12 <tcp_input_stream_receive+0xa>
		}

	}

	memcpy(self->msg, self->msgTemp, INPUT_MESSAGE_SIZE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	1c58      	adds	r0, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3309      	adds	r3, #9
 8003b8a:	2208      	movs	r2, #8
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	f008 fc01 	bl	800c394 <memcpy>

	if(self->handlerEnabled)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d004      	beq.n	8003ba6 <tcp_input_stream_receive+0x9e>
	{
		rx_message_run_command(self->msg); // reaction
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff fe83 	bl	80038ac <rx_message_run_command>
	}

	int tempBytesReceived = self->bytesReceived;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	613b      	str	r3, [r7, #16]
	memset(self->msgTemp, 0, INPUT_MESSAGE_SIZE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3309      	adds	r3, #9
 8003bb0:	2208      	movs	r2, #8
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f008 fba9 	bl	800c30c <memset>
	self->bytesReceived = 0;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	621a      	str	r2, [r3, #32]
	self->currentBuffIndex = 0;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	61da      	str	r2, [r3, #28]

	return tempBytesReceived;
 8003bc6:	693b      	ldr	r3, [r7, #16]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <tcp_input_stream_reboot_ethernet>:
	close(self->initData.sn);
	return 0;
}

static int tcp_input_stream_reboot_ethernet(tcp_input_stream_t *self, int sockOpen)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
	if(sockOpen != SOCK_OK)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d010      	beq.n	8003c02 <tcp_input_stream_reboot_ethernet+0x32>
	{
		if(self->w5500RebootCounter == 0)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d106      	bne.n	8003bf6 <tcp_input_stream_reboot_ethernet+0x26>
		{
			W5500_Reboot();
 8003be8:	f001 fbc2 	bl	8005370 <W5500_Reboot>
			// reset delay counter after reboot
			self->w5500RebootCounter = self->initData.w5500RebootCounterMax;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	639a      	str	r2, [r3, #56]	; 0x38
 8003bf4:	e009      	b.n	8003c0a <tcp_input_stream_reboot_ethernet+0x3a>
		}
		else
		{
			// count delay
			self->w5500RebootCounter--;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfa:	1e5a      	subs	r2, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	639a      	str	r2, [r3, #56]	; 0x38
 8003c00:	e003      	b.n	8003c0a <tcp_input_stream_reboot_ethernet+0x3a>
		}
	}
	else
	{
		// reset delay counter after ok open socket
		self->w5500RebootCounter = self->initData.w5500RebootCounterMax;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	639a      	str	r2, [r3, #56]	; 0x38
	}
	return 0;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <tcp_output_stream_init>:
static int tcp_output_stream_listen_socket(tcp_output_stream_t *self);
static int tcp_output_stream_send(tcp_output_stream_t *self);
static int tcp_output_stream_reboot_socket(tcp_output_stream_t *self, int sent);

int tcp_output_stream_init(tcp_output_stream_t *self, tcp_output_stream_init_data_t tcpInit)
{
 8003c14:	b084      	sub	sp, #16
 8003c16:	b590      	push	{r4, r7, lr}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	f107 001c 	add.w	r0, r7, #28
 8003c22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	memset(self, 0, sizeof(*self));
 8003c26:	229c      	movs	r2, #156	; 0x9c
 8003c28:	2100      	movs	r1, #0
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f008 fb6e 	bl	800c30c <memset>
	self->stat = 0;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	701a      	strb	r2, [r3, #0]
	self->initData = tcpInit;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f103 0484 	add.w	r4, r3, #132	; 0x84
 8003c3c:	f107 031c 	add.w	r3, r7, #28
 8003c40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->msgSize = 0;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	self->isConnected = 0;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	self->closeSocketCounter = self->initData.closeSocketCounterMax;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	memset(self->msg, 0, MAX_OUTPUT_MESSAGE_SIZE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3301      	adds	r3, #1
 8003c66:	2280      	movs	r2, #128	; 0x80
 8003c68:	2100      	movs	r1, #0
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f008 fb4e 	bl	800c30c <memset>
	return 0;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003c7c:	b004      	add	sp, #16
 8003c7e:	4770      	bx	lr

08003c80 <tcp_output_stream_set_message>:
{
	return 0;
}

int tcp_output_stream_set_message(tcp_output_stream_t *self, char* message, uint16_t size)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	80fb      	strh	r3, [r7, #6]
	memset(self->msg, 0, MAX_OUTPUT_MESSAGE_SIZE);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3301      	adds	r3, #1
 8003c92:	2280      	movs	r2, #128	; 0x80
 8003c94:	2100      	movs	r1, #0
 8003c96:	4618      	mov	r0, r3
 8003c98:	f008 fb38 	bl	800c30c <memset>
	if(size < MAX_OUTPUT_MESSAGE_SIZE)
 8003c9c:	88fb      	ldrh	r3, [r7, #6]
 8003c9e:	2b7f      	cmp	r3, #127	; 0x7f
 8003ca0:	d80b      	bhi.n	8003cba <tcp_output_stream_set_message+0x3a>
	{
		self->msgSize = size;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	88fa      	ldrh	r2, [r7, #6]
 8003ca6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		memcpy(self->msg, message, size);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3301      	adds	r3, #1
 8003cae:	88fa      	ldrh	r2, [r7, #6]
 8003cb0:	68b9      	ldr	r1, [r7, #8]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f008 fb6e 	bl	800c394 <memcpy>
 8003cb8:	e00a      	b.n	8003cd0 <tcp_output_stream_set_message+0x50>
	}
	else
	{
		self->msgSize = MAX_OUTPUT_MESSAGE_SIZE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2280      	movs	r2, #128	; 0x80
 8003cbe:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		memcpy(self->msg, message, MAX_OUTPUT_MESSAGE_SIZE);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	2280      	movs	r2, #128	; 0x80
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f008 fb62 	bl	800c394 <memcpy>
	}
	return 0;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <tcp_output_stream_routine>:

int tcp_output_stream_routine(tcp_output_stream_t *self)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b084      	sub	sp, #16
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
	// new state machine
	int sent = -1;
 8003ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce6:	60fb      	str	r3, [r7, #12]
	self->isConnected = 0;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	switch(getSn_SR(self->initData.sn))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fd2f 	bl	8004764 <WIZCHIP_READ>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b17      	cmp	r3, #23
 8003d0a:	d00e      	beq.n	8003d2a <tcp_output_stream_routine+0x50>
 8003d0c:	2b17      	cmp	r3, #23
 8003d0e:	dc27      	bgt.n	8003d60 <tcp_output_stream_routine+0x86>
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <tcp_output_stream_routine+0x40>
 8003d14:	2b13      	cmp	r3, #19
 8003d16:	d004      	beq.n	8003d22 <tcp_output_stream_routine+0x48>
 8003d18:	e022      	b.n	8003d60 <tcp_output_stream_routine+0x86>
	{
	case SOCK_CLOSED:
		//int open = tcp_output_stream_open_socket(self);
		tcp_output_stream_open_socket(self);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f825 	bl	8003d6a <tcp_output_stream_open_socket>
		break;
 8003d20:	e01e      	b.n	8003d60 <tcp_output_stream_routine+0x86>
	case SOCK_INIT:
		tcp_output_stream_listen_socket(self);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f83a 	bl	8003d9c <tcp_output_stream_listen_socket>
		break;
 8003d28:	e01a      	b.n	8003d60 <tcp_output_stream_routine+0x86>
	case SOCK_ESTABLISHED:
		sent = tcp_output_stream_send(self);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f849 	bl	8003dc2 <tcp_output_stream_send>
 8003d30:	60f8      	str	r0, [r7, #12]
		if(sent < 0)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	da06      	bge.n	8003d46 <tcp_output_stream_routine+0x6c>
		{
			disconnect(self->initData.sn);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 faea 	bl	8004318 <disconnect>
		}
		else
		{
			self->isConnected = 1;
		}
		break;
 8003d44:	e00b      	b.n	8003d5e <tcp_output_stream_routine+0x84>
		else if (self == 0)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d104      	bne.n	8003d56 <tcp_output_stream_routine+0x7c>
			tcp_output_stream_reboot_socket(self, sent);
 8003d4c:	68f9      	ldr	r1, [r7, #12]
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f85a 	bl	8003e08 <tcp_output_stream_reboot_socket>
		break;
 8003d54:	e003      	b.n	8003d5e <tcp_output_stream_routine+0x84>
			self->isConnected = 1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		break;
 8003d5e:	bf00      	nop
	}
	return 0;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <tcp_output_stream_open_socket>:
{
	return self->isConnected;
}

static int tcp_output_stream_open_socket(tcp_output_stream_t *self)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
	self->stat = socket(self->initData.sn, Sn_MR_TCP, self->initData.port, self->initData.flag);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 0084 	ldrb.w	r0, [r3, #132]	; 0x84
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003d84:	2101      	movs	r1, #1
 8003d86:	f000 f8eb 	bl	8003f60 <socket>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	701a      	strb	r2, [r3, #0]
	return 0;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <tcp_output_stream_listen_socket>:

static int tcp_output_stream_listen_socket(tcp_output_stream_t *self)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
	self->stat = listen(self->initData.sn);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 fa5a 	bl	8004264 <listen>
 8003db0:	4603      	mov	r3, r0
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	701a      	strb	r2, [r3, #0]
	return 0;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <tcp_output_stream_send>:

static int tcp_output_stream_send(tcp_output_stream_t *self)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
	return send(self->initData.sn, (uint8_t*)self->msg, self->msgSize);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 0084 	ldrb.w	r0, [r3, #132]	; 0x84
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	1c59      	adds	r1, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f000 fb12 	bl	8004404 <send>
 8003de0:	4603      	mov	r3, r0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <tcp_output_stream_close_socket>:

int tcp_output_stream_close_socket(tcp_output_stream_t *self)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b082      	sub	sp, #8
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
	close(self->initData.sn);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 f9c5 	bl	8004188 <close>
	return 0;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <tcp_output_stream_reboot_socket>:

static int tcp_output_stream_reboot_socket(tcp_output_stream_t *self, int sent)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
	if (!sent) // sent == 0
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d116      	bne.n	8003e46 <tcp_output_stream_reboot_socket+0x3e>
	{
		if(self->closeSocketCounter == 0)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d109      	bne.n	8003e36 <tcp_output_stream_reboot_socket+0x2e>
		{
			tcp_output_stream_close_socket(self);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff ffe1 	bl	8003dea <tcp_output_stream_close_socket>

			// reset delay counter after reboot
			self->closeSocketCounter = self->initData.closeSocketCounterMax;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003e34:	e00d      	b.n	8003e52 <tcp_output_stream_reboot_socket+0x4a>
		}
		else
		{
			// count delay
			self->closeSocketCounter--;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e3c:	1e5a      	subs	r2, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003e44:	e005      	b.n	8003e52 <tcp_output_stream_reboot_socket+0x4a>
		}
	}
	else
	{
		// reset delay counter after reboot
		self->closeSocketCounter = self->initData.closeSocketCounterMax;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}

	return 0;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <tx_message_increase_id>:
{
	return 0;
}

void tx_message_increase_id(tx_message_t *self)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
	uint32_t id;
	memcpy(&id, self->message + BYTE_POS_ID, sizeof(id)); // get current id
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	60fb      	str	r3, [r7, #12]
	id++; // increase id
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	60fb      	str	r3, [r7, #12]
	memcpy(self->message + BYTE_POS_ID, (char*)&id, sizeof(id)); // copy increased id
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	601a      	str	r2, [r3, #0]
}
 8003e76:	bf00      	nop
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <tx_message_set_adc_dr_uV>:

void tx_message_set_adc_dr_uV(tx_message_t *self, int32_t val)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	6039      	str	r1, [r7, #0]
	memcpy(self->message + BYTE_POS_ADC_DR, (char*)&val, sizeof(val));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	601a      	str	r2, [r3, #0]
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <tx_message_set_adc_dr_average_uV>:

void tx_message_set_adc_dr_average_uV(tx_message_t *self, int32_t val)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
	memcpy(self->message + BYTE_POS_ADC_DR_AV, (char*)&val, sizeof(val));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3308      	adds	r3, #8
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	601a      	str	r2, [r3, #0]
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <tx_message_set_hv_out_mV>:

void tx_message_set_hv_out_mV(tx_message_t *self, int32_t val)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	6039      	str	r1, [r7, #0]
	memcpy(self->message + BYTE_POS_HV_OUT, (char*)&val, sizeof(val));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	330c      	adds	r3, #12
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	601a      	str	r2, [r3, #0]
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <tx_message_set_press_out_Pa>:

void tx_message_set_press_out_Pa(tx_message_t *self, int32_t val)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
	memcpy(self->message + BYTE_POS_PRESS_OUT, (char*)&val, sizeof(val));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3310      	adds	r3, #16
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	601a      	str	r2, [r3, #0]
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <tx_message_set_adc_dr_measure_state>:

void tx_message_set_adc_dr_measure_state(tx_message_t *self, uint8_t val)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	460b      	mov	r3, r1
 8003f04:	70fb      	strb	r3, [r7, #3]
	memcpy(self->message + BYTE_POS_DR_MEASURE_STATE, (char*)&val, sizeof(val));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	3314      	adds	r3, #20
 8003f0a:	78fa      	ldrb	r2, [r7, #3]
 8003f0c:	701a      	strb	r2, [r3, #0]
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <tx_message_set_adc_dr_measure_time>:

void tx_message_set_adc_dr_measure_time(tx_message_t *self, uint16_t val)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	460b      	mov	r3, r1
 8003f24:	807b      	strh	r3, [r7, #2]
	memcpy(self->message + BYTE_POS_DR_MEASURE_TIME, (char*)&val, sizeof(val));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3315      	adds	r3, #21
 8003f2a:	887a      	ldrh	r2, [r7, #2]
 8003f2c:	801a      	strh	r2, [r3, #0]
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <tx_message_get>:


char* tx_message_get(tx_message_t *self)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
	return self->message;
 8003f42:	687b      	ldr	r3, [r7, #4]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <tx_message_size>:

size_t tx_message_size(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
	return TX_MESSAGE_SIZE;
 8003f54:	2317      	movs	r3, #23
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8003f60:	b590      	push	{r4, r7, lr}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4604      	mov	r4, r0
 8003f68:	4608      	mov	r0, r1
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4623      	mov	r3, r4
 8003f70:	71fb      	strb	r3, [r7, #7]
 8003f72:	4603      	mov	r3, r0
 8003f74:	71bb      	strb	r3, [r7, #6]
 8003f76:	460b      	mov	r3, r1
 8003f78:	80bb      	strh	r3, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8003f7e:	79fb      	ldrb	r3, [r7, #7]
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d902      	bls.n	8003f8a <socket+0x2a>
 8003f84:	f04f 33ff 	mov.w	r3, #4294967295
 8003f88:	e0f0      	b.n	800416c <socket+0x20c>
	switch(protocol)
 8003f8a:	79bb      	ldrb	r3, [r7, #6]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d005      	beq.n	8003f9c <socket+0x3c>
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	dd11      	ble.n	8003fb8 <socket+0x58>
 8003f94:	3b02      	subs	r3, #2
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d80e      	bhi.n	8003fb8 <socket+0x58>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8003f9a:	e010      	b.n	8003fbe <socket+0x5e>
            getSIPR((uint8_t*)&taddr);
 8003f9c:	f107 030c 	add.w	r3, r7, #12
 8003fa0:	2204      	movs	r2, #4
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003fa8:	f000 fc76 	bl	8004898 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d105      	bne.n	8003fbe <socket+0x5e>
 8003fb2:	f06f 0302 	mvn.w	r3, #2
 8003fb6:	e0d9      	b.n	800416c <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8003fb8:	f06f 0304 	mvn.w	r3, #4
 8003fbc:	e0d6      	b.n	800416c <socket+0x20c>
         break;
 8003fbe:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <socket+0x70>
 8003fca:	f06f 0305 	mvn.w	r3, #5
 8003fce:	e0cd      	b.n	800416c <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d028      	beq.n	8004028 <socket+0xc8>
	{
   	switch(protocol)
 8003fd6:	79bb      	ldrb	r3, [r7, #6]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d002      	beq.n	8003fe2 <socket+0x82>
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d008      	beq.n	8003ff2 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8003fe0:	e022      	b.n	8004028 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8003fe2:	78fb      	ldrb	r3, [r7, #3]
 8003fe4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d11a      	bne.n	8004022 <socket+0xc2>
 8003fec:	f06f 0305 	mvn.w	r3, #5
 8003ff0:	e0bc      	b.n	800416c <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8003ff2:	78fb      	ldrb	r3, [r7, #3]
 8003ff4:	f003 0320 	and.w	r3, r3, #32
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d006      	beq.n	800400a <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8003ffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004000:	2b00      	cmp	r3, #0
 8004002:	db02      	blt.n	800400a <socket+0xaa>
 8004004:	f06f 0305 	mvn.w	r3, #5
 8004008:	e0b0      	b.n	800416c <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 800400a:	78fb      	ldrb	r3, [r7, #3]
 800400c:	f003 0310 	and.w	r3, r3, #16
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8004014:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004018:	2b00      	cmp	r3, #0
 800401a:	db04      	blt.n	8004026 <socket+0xc6>
 800401c:	f06f 0305 	mvn.w	r3, #5
 8004020:	e0a4      	b.n	800416c <socket+0x20c>
   	      break;
 8004022:	bf00      	nop
 8004024:	e000      	b.n	8004028 <socket+0xc8>
   	      break;
 8004026:	bf00      	nop
   	}
   }
	close(sn);
 8004028:	79fb      	ldrb	r3, [r7, #7]
 800402a:	4618      	mov	r0, r3
 800402c:	f000 f8ac 	bl	8004188 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8004030:	79fb      	ldrb	r3, [r7, #7]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	3301      	adds	r3, #1
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	4618      	mov	r0, r3
 800403a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800403e:	f023 030f 	bic.w	r3, r3, #15
 8004042:	b25a      	sxtb	r2, r3
 8004044:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004048:	4313      	orrs	r3, r2
 800404a:	b25b      	sxtb	r3, r3
 800404c:	b2db      	uxtb	r3, r3
 800404e:	4619      	mov	r1, r3
 8004050:	f000 fbd4 	bl	80047fc <WIZCHIP_WRITE>
    #endif
	if(!port)
 8004054:	88bb      	ldrh	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d110      	bne.n	800407c <socket+0x11c>
	{
	   port = sock_any_port++;
 800405a:	4b46      	ldr	r3, [pc, #280]	; (8004174 <socket+0x214>)
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	b291      	uxth	r1, r2
 8004062:	4a44      	ldr	r2, [pc, #272]	; (8004174 <socket+0x214>)
 8004064:	8011      	strh	r1, [r2, #0]
 8004066:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8004068:	4b42      	ldr	r3, [pc, #264]	; (8004174 <socket+0x214>)
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8004070:	4293      	cmp	r3, r2
 8004072:	d103      	bne.n	800407c <socket+0x11c>
 8004074:	4b3f      	ldr	r3, [pc, #252]	; (8004174 <socket+0x214>)
 8004076:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800407a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800407c:	79fb      	ldrb	r3, [r7, #7]
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	3301      	adds	r3, #1
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004088:	461a      	mov	r2, r3
 800408a:	88bb      	ldrh	r3, [r7, #4]
 800408c:	0a1b      	lsrs	r3, r3, #8
 800408e:	b29b      	uxth	r3, r3
 8004090:	b2db      	uxtb	r3, r3
 8004092:	4619      	mov	r1, r3
 8004094:	4610      	mov	r0, r2
 8004096:	f000 fbb1 	bl	80047fc <WIZCHIP_WRITE>
 800409a:	79fb      	ldrb	r3, [r7, #7]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	3301      	adds	r3, #1
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a6:	461a      	mov	r2, r3
 80040a8:	88bb      	ldrh	r3, [r7, #4]
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	4619      	mov	r1, r3
 80040ae:	4610      	mov	r0, r2
 80040b0:	f000 fba4 	bl	80047fc <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	3301      	adds	r3, #1
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80040c0:	2101      	movs	r1, #1
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fb9a 	bl	80047fc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80040c8:	bf00      	nop
 80040ca:	79fb      	ldrb	r3, [r7, #7]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	3301      	adds	r3, #1
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 fb44 	bl	8004764 <WIZCHIP_READ>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f3      	bne.n	80040ca <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80040e2:	79fb      	ldrb	r3, [r7, #7]
 80040e4:	2201      	movs	r2, #1
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	b21b      	sxth	r3, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	b21a      	sxth	r2, r3
 80040f0:	4b21      	ldr	r3, [pc, #132]	; (8004178 <socket+0x218>)
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	b21b      	sxth	r3, r3
 80040f6:	4013      	ands	r3, r2
 80040f8:	b21b      	sxth	r3, r3
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	4b1e      	ldr	r3, [pc, #120]	; (8004178 <socket+0x218>)
 80040fe:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	f003 0201 	and.w	r2, r3, #1
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	b21a      	sxth	r2, r3
 800410e:	4b1a      	ldr	r3, [pc, #104]	; (8004178 <socket+0x218>)
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	b21b      	sxth	r3, r3
 8004114:	4313      	orrs	r3, r2
 8004116:	b21b      	sxth	r3, r3
 8004118:	b29a      	uxth	r2, r3
 800411a:	4b17      	ldr	r3, [pc, #92]	; (8004178 <socket+0x218>)
 800411c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	2201      	movs	r2, #1
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	b21b      	sxth	r3, r3
 8004128:	43db      	mvns	r3, r3
 800412a:	b21a      	sxth	r2, r3
 800412c:	4b13      	ldr	r3, [pc, #76]	; (800417c <socket+0x21c>)
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	b21b      	sxth	r3, r3
 8004132:	4013      	ands	r3, r2
 8004134:	b21b      	sxth	r3, r3
 8004136:	b29a      	uxth	r2, r3
 8004138:	4b10      	ldr	r3, [pc, #64]	; (800417c <socket+0x21c>)
 800413a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800413c:	79fb      	ldrb	r3, [r7, #7]
 800413e:	4a10      	ldr	r2, [pc, #64]	; (8004180 <socket+0x220>)
 8004140:	2100      	movs	r1, #0
 8004142:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8004146:	79fb      	ldrb	r3, [r7, #7]
 8004148:	4a0e      	ldr	r2, [pc, #56]	; (8004184 <socket+0x224>)
 800414a:	2100      	movs	r1, #0
 800414c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800414e:	bf00      	nop
 8004150:	79fb      	ldrb	r3, [r7, #7]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	3301      	adds	r3, #1
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fb01 	bl	8004764 <WIZCHIP_READ>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0f3      	beq.n	8004150 <socket+0x1f0>
   return (int8_t)sn;
 8004168:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800416c:	4618      	mov	r0, r3
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	bd90      	pop	{r4, r7, pc}
 8004174:	20000040 	.word	0x20000040
 8004178:	20002f1e 	.word	0x20002f1e
 800417c:	20002f20 	.word	0x20002f20
 8004180:	20002f24 	.word	0x20002f24
 8004184:	20002f34 	.word	0x20002f34

08004188 <close>:

int8_t close(uint8_t sn)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	4603      	mov	r3, r0
 8004190:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8004192:	79fb      	ldrb	r3, [r7, #7]
 8004194:	2b08      	cmp	r3, #8
 8004196:	d902      	bls.n	800419e <close+0x16>
 8004198:	f04f 33ff 	mov.w	r3, #4294967295
 800419c:	e055      	b.n	800424a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800419e:	79fb      	ldrb	r3, [r7, #7]
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	3301      	adds	r3, #1
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80041aa:	2110      	movs	r1, #16
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 fb25 	bl	80047fc <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80041b2:	bf00      	nop
 80041b4:	79fb      	ldrb	r3, [r7, #7]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	3301      	adds	r3, #1
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 facf 	bl	8004764 <WIZCHIP_READ>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f3      	bne.n	80041b4 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	3301      	adds	r3, #1
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80041d8:	211f      	movs	r1, #31
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fb0e 	bl	80047fc <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80041e0:	79fb      	ldrb	r3, [r7, #7]
 80041e2:	2201      	movs	r2, #1
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	b21b      	sxth	r3, r3
 80041ea:	43db      	mvns	r3, r3
 80041ec:	b21a      	sxth	r2, r3
 80041ee:	4b19      	ldr	r3, [pc, #100]	; (8004254 <close+0xcc>)
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	b21b      	sxth	r3, r3
 80041f4:	4013      	ands	r3, r2
 80041f6:	b21b      	sxth	r3, r3
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	4b16      	ldr	r3, [pc, #88]	; (8004254 <close+0xcc>)
 80041fc:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80041fe:	79fb      	ldrb	r3, [r7, #7]
 8004200:	2201      	movs	r2, #1
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	b21b      	sxth	r3, r3
 8004208:	43db      	mvns	r3, r3
 800420a:	b21a      	sxth	r2, r3
 800420c:	4b12      	ldr	r3, [pc, #72]	; (8004258 <close+0xd0>)
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	b21b      	sxth	r3, r3
 8004212:	4013      	ands	r3, r2
 8004214:	b21b      	sxth	r3, r3
 8004216:	b29a      	uxth	r2, r3
 8004218:	4b0f      	ldr	r3, [pc, #60]	; (8004258 <close+0xd0>)
 800421a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	4a0f      	ldr	r2, [pc, #60]	; (800425c <close+0xd4>)
 8004220:	2100      	movs	r1, #0
 8004222:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	4a0d      	ldr	r2, [pc, #52]	; (8004260 <close+0xd8>)
 800422a:	2100      	movs	r1, #0
 800422c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800422e:	bf00      	nop
 8004230:	79fb      	ldrb	r3, [r7, #7]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	3301      	adds	r3, #1
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fa91 	bl	8004764 <WIZCHIP_READ>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1f3      	bne.n	8004230 <close+0xa8>
	return SOCK_OK;
 8004248:	2301      	movs	r3, #1
}
 800424a:	4618      	mov	r0, r3
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20002f1e 	.word	0x20002f1e
 8004258:	20002f20 	.word	0x20002f20
 800425c:	20002f24 	.word	0x20002f24
 8004260:	20002f34 	.word	0x20002f34

08004264 <listen>:

int8_t listen(uint8_t sn)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	4603      	mov	r3, r0
 800426c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800426e:	79fb      	ldrb	r3, [r7, #7]
 8004270:	2b08      	cmp	r3, #8
 8004272:	d902      	bls.n	800427a <listen+0x16>
 8004274:	f04f 33ff 	mov.w	r3, #4294967295
 8004278:	e049      	b.n	800430e <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800427a:	79fb      	ldrb	r3, [r7, #7]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	3301      	adds	r3, #1
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	4618      	mov	r0, r3
 8004284:	f000 fa6e 	bl	8004764 <WIZCHIP_READ>
 8004288:	4603      	mov	r3, r0
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	2b01      	cmp	r3, #1
 8004290:	d002      	beq.n	8004298 <listen+0x34>
 8004292:	f06f 0304 	mvn.w	r3, #4
 8004296:	e03a      	b.n	800430e <listen+0xaa>
	CHECK_SOCKINIT();
 8004298:	79fb      	ldrb	r3, [r7, #7]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	3301      	adds	r3, #1
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fa5d 	bl	8004764 <WIZCHIP_READ>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b13      	cmp	r3, #19
 80042ae:	d002      	beq.n	80042b6 <listen+0x52>
 80042b0:	f06f 0302 	mvn.w	r3, #2
 80042b4:	e02b      	b.n	800430e <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 80042b6:	79fb      	ldrb	r3, [r7, #7]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	3301      	adds	r3, #1
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80042c2:	2102      	movs	r1, #2
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 fa99 	bl	80047fc <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80042ca:	bf00      	nop
 80042cc:	79fb      	ldrb	r3, [r7, #7]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	3301      	adds	r3, #1
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fa43 	bl	8004764 <WIZCHIP_READ>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1f3      	bne.n	80042cc <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80042e4:	e006      	b.n	80042f4 <listen+0x90>
   {
         close(sn);
 80042e6:	79fb      	ldrb	r3, [r7, #7]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff ff4d 	bl	8004188 <close>
         return SOCKERR_SOCKCLOSED;
 80042ee:	f06f 0303 	mvn.w	r3, #3
 80042f2:	e00c      	b.n	800430e <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80042f4:	79fb      	ldrb	r3, [r7, #7]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	3301      	adds	r3, #1
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004300:	4618      	mov	r0, r3
 8004302:	f000 fa2f 	bl	8004764 <WIZCHIP_READ>
 8004306:	4603      	mov	r3, r0
 8004308:	2b14      	cmp	r3, #20
 800430a:	d1ec      	bne.n	80042e6 <listen+0x82>
   }
   return SOCK_OK;
 800430c:	2301      	movs	r3, #1
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8004322:	79fb      	ldrb	r3, [r7, #7]
 8004324:	2b08      	cmp	r3, #8
 8004326:	d902      	bls.n	800432e <disconnect+0x16>
 8004328:	f04f 33ff 	mov.w	r3, #4294967295
 800432c:	e062      	b.n	80043f4 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800432e:	79fb      	ldrb	r3, [r7, #7]
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	3301      	adds	r3, #1
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fa14 	bl	8004764 <WIZCHIP_READ>
 800433c:	4603      	mov	r3, r0
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	2b01      	cmp	r3, #1
 8004344:	d002      	beq.n	800434c <disconnect+0x34>
 8004346:	f06f 0304 	mvn.w	r3, #4
 800434a:	e053      	b.n	80043f4 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 800434c:	79fb      	ldrb	r3, [r7, #7]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	3301      	adds	r3, #1
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004358:	2108      	movs	r1, #8
 800435a:	4618      	mov	r0, r3
 800435c:	f000 fa4e 	bl	80047fc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8004360:	bf00      	nop
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	3301      	adds	r3, #1
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800436e:	4618      	mov	r0, r3
 8004370:	f000 f9f8 	bl	8004764 <WIZCHIP_READ>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f3      	bne.n	8004362 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800437a:	79fb      	ldrb	r3, [r7, #7]
 800437c:	2201      	movs	r2, #1
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	b21b      	sxth	r3, r3
 8004384:	43db      	mvns	r3, r3
 8004386:	b21a      	sxth	r2, r3
 8004388:	4b1c      	ldr	r3, [pc, #112]	; (80043fc <disconnect+0xe4>)
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	b21b      	sxth	r3, r3
 800438e:	4013      	ands	r3, r2
 8004390:	b21b      	sxth	r3, r3
 8004392:	b29a      	uxth	r2, r3
 8004394:	4b19      	ldr	r3, [pc, #100]	; (80043fc <disconnect+0xe4>)
 8004396:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8004398:	4b19      	ldr	r3, [pc, #100]	; (8004400 <disconnect+0xe8>)
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	461a      	mov	r2, r3
 800439e:	79fb      	ldrb	r3, [r7, #7]
 80043a0:	fa42 f303 	asr.w	r3, r2, r3
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d016      	beq.n	80043da <disconnect+0xc2>
 80043ac:	2300      	movs	r3, #0
 80043ae:	e021      	b.n	80043f4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80043b0:	79fb      	ldrb	r3, [r7, #7]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	3301      	adds	r3, #1
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 f9d1 	bl	8004764 <WIZCHIP_READ>
 80043c2:	4603      	mov	r3, r0
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d006      	beq.n	80043da <disconnect+0xc2>
	   {
	      close(sn);
 80043cc:	79fb      	ldrb	r3, [r7, #7]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff feda 	bl	8004188 <close>
	      return SOCKERR_TIMEOUT;
 80043d4:	f06f 030c 	mvn.w	r3, #12
 80043d8:	e00c      	b.n	80043f4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	3301      	adds	r3, #1
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 f9bc 	bl	8004764 <WIZCHIP_READ>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1de      	bne.n	80043b0 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80043f2:	2301      	movs	r3, #1
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	20002f20 	.word	0x20002f20
 8004400:	20002f1e 	.word	0x20002f1e

08004404 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	4603      	mov	r3, r0
 800440c:	6039      	str	r1, [r7, #0]
 800440e:	71fb      	strb	r3, [r7, #7]
 8004410:	4613      	mov	r3, r2
 8004412:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8004414:	2300      	movs	r3, #0
 8004416:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8004418:	2300      	movs	r3, #0
 800441a:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 800441c:	79fb      	ldrb	r3, [r7, #7]
 800441e:	2b08      	cmp	r3, #8
 8004420:	d902      	bls.n	8004428 <send+0x24>
 8004422:	f04f 33ff 	mov.w	r3, #4294967295
 8004426:	e0de      	b.n	80045e6 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004428:	79fb      	ldrb	r3, [r7, #7]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	3301      	adds	r3, #1
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	4618      	mov	r0, r3
 8004432:	f000 f997 	bl	8004764 <WIZCHIP_READ>
 8004436:	4603      	mov	r3, r0
 8004438:	f003 030f 	and.w	r3, r3, #15
 800443c:	2b01      	cmp	r3, #1
 800443e:	d002      	beq.n	8004446 <send+0x42>
 8004440:	f06f 0304 	mvn.w	r3, #4
 8004444:	e0cf      	b.n	80045e6 <send+0x1e2>
   CHECK_SOCKDATA();
 8004446:	88bb      	ldrh	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d102      	bne.n	8004452 <send+0x4e>
 800444c:	f06f 030d 	mvn.w	r3, #13
 8004450:	e0c9      	b.n	80045e6 <send+0x1e2>
   tmp = getSn_SR(sn);
 8004452:	79fb      	ldrb	r3, [r7, #7]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	3301      	adds	r3, #1
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800445e:	4618      	mov	r0, r3
 8004460:	f000 f980 	bl	8004764 <WIZCHIP_READ>
 8004464:	4603      	mov	r3, r0
 8004466:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	2b17      	cmp	r3, #23
 800446c:	d005      	beq.n	800447a <send+0x76>
 800446e:	7bfb      	ldrb	r3, [r7, #15]
 8004470:	2b1c      	cmp	r3, #28
 8004472:	d002      	beq.n	800447a <send+0x76>
 8004474:	f06f 0306 	mvn.w	r3, #6
 8004478:	e0b5      	b.n	80045e6 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 800447a:	4b5d      	ldr	r3, [pc, #372]	; (80045f0 <send+0x1ec>)
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	79fb      	ldrb	r3, [r7, #7]
 8004482:	fa42 f303 	asr.w	r3, r2, r3
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d039      	beq.n	8004502 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	3301      	adds	r3, #1
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800449a:	4618      	mov	r0, r3
 800449c:	f000 f962 	bl	8004764 <WIZCHIP_READ>
 80044a0:	4603      	mov	r3, r0
 80044a2:	f003 031f 	and.w	r3, r3, #31
 80044a6:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	f003 0310 	and.w	r3, r3, #16
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d019      	beq.n	80044e6 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	3301      	adds	r3, #1
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80044be:	2110      	movs	r1, #16
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 f99b 	bl	80047fc <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	2201      	movs	r2, #1
 80044ca:	fa02 f303 	lsl.w	r3, r2, r3
 80044ce:	b21b      	sxth	r3, r3
 80044d0:	43db      	mvns	r3, r3
 80044d2:	b21a      	sxth	r2, r3
 80044d4:	4b46      	ldr	r3, [pc, #280]	; (80045f0 <send+0x1ec>)
 80044d6:	881b      	ldrh	r3, [r3, #0]
 80044d8:	b21b      	sxth	r3, r3
 80044da:	4013      	ands	r3, r2
 80044dc:	b21b      	sxth	r3, r3
 80044de:	b29a      	uxth	r2, r3
 80044e0:	4b43      	ldr	r3, [pc, #268]	; (80045f0 <send+0x1ec>)
 80044e2:	801a      	strh	r2, [r3, #0]
 80044e4:	e00d      	b.n	8004502 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d006      	beq.n	80044fe <send+0xfa>
      {
         close(sn);
 80044f0:	79fb      	ldrb	r3, [r7, #7]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff fe48 	bl	8004188 <close>
         return SOCKERR_TIMEOUT;
 80044f8:	f06f 030c 	mvn.w	r3, #12
 80044fc:	e073      	b.n	80045e6 <send+0x1e2>
      }
      else return SOCK_BUSY;
 80044fe:	2300      	movs	r3, #0
 8004500:	e071      	b.n	80045e6 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	3301      	adds	r3, #1
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800450e:	4618      	mov	r0, r3
 8004510:	f000 f928 	bl	8004764 <WIZCHIP_READ>
 8004514:	4603      	mov	r3, r0
 8004516:	b29b      	uxth	r3, r3
 8004518:	029b      	lsls	r3, r3, #10
 800451a:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800451c:	88ba      	ldrh	r2, [r7, #4]
 800451e:	89bb      	ldrh	r3, [r7, #12]
 8004520:	429a      	cmp	r2, r3
 8004522:	d901      	bls.n	8004528 <send+0x124>
 8004524:	89bb      	ldrh	r3, [r7, #12]
 8004526:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8004528:	79fb      	ldrb	r3, [r7, #7]
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fa74 	bl	8004a18 <getSn_TX_FSR>
 8004530:	4603      	mov	r3, r0
 8004532:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8004534:	79fb      	ldrb	r3, [r7, #7]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	3301      	adds	r3, #1
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004540:	4618      	mov	r0, r3
 8004542:	f000 f90f 	bl	8004764 <WIZCHIP_READ>
 8004546:	4603      	mov	r3, r0
 8004548:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800454a:	7bfb      	ldrb	r3, [r7, #15]
 800454c:	2b17      	cmp	r3, #23
 800454e:	d009      	beq.n	8004564 <send+0x160>
 8004550:	7bfb      	ldrb	r3, [r7, #15]
 8004552:	2b1c      	cmp	r3, #28
 8004554:	d006      	beq.n	8004564 <send+0x160>
      {
         close(sn);
 8004556:	79fb      	ldrb	r3, [r7, #7]
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff fe15 	bl	8004188 <close>
         return SOCKERR_SOCKSTATUS;
 800455e:	f06f 0306 	mvn.w	r3, #6
 8004562:	e040      	b.n	80045e6 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8004564:	4b23      	ldr	r3, [pc, #140]	; (80045f4 <send+0x1f0>)
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	fa42 f303 	asr.w	r3, r2, r3
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <send+0x180>
 8004578:	88ba      	ldrh	r2, [r7, #4]
 800457a:	89bb      	ldrh	r3, [r7, #12]
 800457c:	429a      	cmp	r2, r3
 800457e:	d901      	bls.n	8004584 <send+0x180>
 8004580:	2300      	movs	r3, #0
 8004582:	e030      	b.n	80045e6 <send+0x1e2>
      if(len <= freesize) break;
 8004584:	88ba      	ldrh	r2, [r7, #4]
 8004586:	89bb      	ldrh	r3, [r7, #12]
 8004588:	429a      	cmp	r2, r3
 800458a:	d900      	bls.n	800458e <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 800458c:	e7cc      	b.n	8004528 <send+0x124>
      if(len <= freesize) break;
 800458e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8004590:	88ba      	ldrh	r2, [r7, #4]
 8004592:	79fb      	ldrb	r3, [r7, #7]
 8004594:	6839      	ldr	r1, [r7, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fad4 	bl	8004b44 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	3301      	adds	r3, #1
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80045a8:	2120      	movs	r1, #32
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 f926 	bl	80047fc <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80045b0:	bf00      	nop
 80045b2:	79fb      	ldrb	r3, [r7, #7]
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	3301      	adds	r3, #1
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 f8d0 	bl	8004764 <WIZCHIP_READ>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1f3      	bne.n	80045b2 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80045ca:	79fb      	ldrb	r3, [r7, #7]
 80045cc:	2201      	movs	r2, #1
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	b21a      	sxth	r2, r3
 80045d4:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <send+0x1ec>)
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	b21b      	sxth	r3, r3
 80045da:	4313      	orrs	r3, r2
 80045dc:	b21b      	sxth	r3, r3
 80045de:	b29a      	uxth	r2, r3
 80045e0:	4b03      	ldr	r3, [pc, #12]	; (80045f0 <send+0x1ec>)
 80045e2:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80045e4:	88bb      	ldrh	r3, [r7, #4]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	20002f20 	.word	0x20002f20
 80045f4:	20002f1e 	.word	0x20002f1e

080045f8 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80045f8:	b590      	push	{r4, r7, lr}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	4603      	mov	r3, r0
 8004600:	6039      	str	r1, [r7, #0]
 8004602:	71fb      	strb	r3, [r7, #7]
 8004604:	4613      	mov	r3, r2
 8004606:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8004608:	2300      	movs	r3, #0
 800460a:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 800460c:	2300      	movs	r3, #0
 800460e:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	2b08      	cmp	r3, #8
 8004614:	d902      	bls.n	800461c <recv+0x24>
 8004616:	f04f 33ff 	mov.w	r3, #4294967295
 800461a:	e09c      	b.n	8004756 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800461c:	79fb      	ldrb	r3, [r7, #7]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	3301      	adds	r3, #1
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4618      	mov	r0, r3
 8004626:	f000 f89d 	bl	8004764 <WIZCHIP_READ>
 800462a:	4603      	mov	r3, r0
 800462c:	f003 030f 	and.w	r3, r3, #15
 8004630:	2b01      	cmp	r3, #1
 8004632:	d002      	beq.n	800463a <recv+0x42>
 8004634:	f06f 0304 	mvn.w	r3, #4
 8004638:	e08d      	b.n	8004756 <recv+0x15e>
   CHECK_SOCKDATA();
 800463a:	88bb      	ldrh	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d102      	bne.n	8004646 <recv+0x4e>
 8004640:	f06f 030d 	mvn.w	r3, #13
 8004644:	e087      	b.n	8004756 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8004646:	79fb      	ldrb	r3, [r7, #7]
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	3301      	adds	r3, #1
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8004652:	4618      	mov	r0, r3
 8004654:	f000 f886 	bl	8004764 <WIZCHIP_READ>
 8004658:	4603      	mov	r3, r0
 800465a:	b29b      	uxth	r3, r3
 800465c:	029b      	lsls	r3, r3, #10
 800465e:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8004660:	89ba      	ldrh	r2, [r7, #12]
 8004662:	88bb      	ldrh	r3, [r7, #4]
 8004664:	429a      	cmp	r2, r3
 8004666:	d201      	bcs.n	800466c <recv+0x74>
 8004668:	89bb      	ldrh	r3, [r7, #12]
 800466a:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 800466c:	79fb      	ldrb	r3, [r7, #7]
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fa1d 	bl	8004aae <getSn_RX_RSR>
 8004674:	4603      	mov	r3, r0
 8004676:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	3301      	adds	r3, #1
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004684:	4618      	mov	r0, r3
 8004686:	f000 f86d 	bl	8004764 <WIZCHIP_READ>
 800468a:	4603      	mov	r3, r0
 800468c:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 800468e:	7bfb      	ldrb	r3, [r7, #15]
 8004690:	2b17      	cmp	r3, #23
 8004692:	d026      	beq.n	80046e2 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	2b1c      	cmp	r3, #28
 8004698:	d11c      	bne.n	80046d4 <recv+0xdc>
            {
               if(recvsize != 0) break;
 800469a:	89bb      	ldrh	r3, [r7, #12]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d133      	bne.n	8004708 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80046a0:	79fb      	ldrb	r3, [r7, #7]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 f9b8 	bl	8004a18 <getSn_TX_FSR>
 80046a8:	4603      	mov	r3, r0
 80046aa:	461c      	mov	r4, r3
 80046ac:	79fb      	ldrb	r3, [r7, #7]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	3301      	adds	r3, #1
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 f853 	bl	8004764 <WIZCHIP_READ>
 80046be:	4603      	mov	r3, r0
 80046c0:	029b      	lsls	r3, r3, #10
 80046c2:	429c      	cmp	r4, r3
 80046c4:	d10d      	bne.n	80046e2 <recv+0xea>
               {
                  close(sn);
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff fd5d 	bl	8004188 <close>
                  return SOCKERR_SOCKSTATUS;
 80046ce:	f06f 0306 	mvn.w	r3, #6
 80046d2:	e040      	b.n	8004756 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 80046d4:	79fb      	ldrb	r3, [r7, #7]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff fd56 	bl	8004188 <close>
               return SOCKERR_SOCKSTATUS;
 80046dc:	f06f 0306 	mvn.w	r3, #6
 80046e0:	e039      	b.n	8004756 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80046e2:	4b1f      	ldr	r3, [pc, #124]	; (8004760 <recv+0x168>)
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	461a      	mov	r2, r3
 80046e8:	79fb      	ldrb	r3, [r7, #7]
 80046ea:	fa42 f303 	asr.w	r3, r2, r3
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d004      	beq.n	8004700 <recv+0x108>
 80046f6:	89bb      	ldrh	r3, [r7, #12]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <recv+0x108>
 80046fc:	2300      	movs	r3, #0
 80046fe:	e02a      	b.n	8004756 <recv+0x15e>
         if(recvsize != 0) break;
 8004700:	89bb      	ldrh	r3, [r7, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d102      	bne.n	800470c <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 8004706:	e7b1      	b.n	800466c <recv+0x74>
               if(recvsize != 0) break;
 8004708:	bf00      	nop
 800470a:	e000      	b.n	800470e <recv+0x116>
         if(recvsize != 0) break;
 800470c:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 800470e:	89ba      	ldrh	r2, [r7, #12]
 8004710:	88bb      	ldrh	r3, [r7, #4]
 8004712:	429a      	cmp	r2, r3
 8004714:	d201      	bcs.n	800471a <recv+0x122>
 8004716:	89bb      	ldrh	r3, [r7, #12]
 8004718:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 800471a:	88ba      	ldrh	r2, [r7, #4]
 800471c:	79fb      	ldrb	r3, [r7, #7]
 800471e:	6839      	ldr	r1, [r7, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f000 fa6b 	bl	8004bfc <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	3301      	adds	r3, #1
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004732:	2140      	movs	r1, #64	; 0x40
 8004734:	4618      	mov	r0, r3
 8004736:	f000 f861 	bl	80047fc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800473a:	bf00      	nop
 800473c:	79fb      	ldrb	r3, [r7, #7]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	3301      	adds	r3, #1
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004748:	4618      	mov	r0, r3
 800474a:	f000 f80b 	bl	8004764 <WIZCHIP_READ>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1f3      	bne.n	800473c <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004754:	88bb      	ldrh	r3, [r7, #4]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	bd90      	pop	{r4, r7, pc}
 800475e:	bf00      	nop
 8004760:	20002f1e 	.word	0x20002f1e

08004764 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800476c:	4b22      	ldr	r3, [pc, #136]	; (80047f8 <WIZCHIP_READ+0x94>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004772:	4b21      	ldr	r3, [pc, #132]	; (80047f8 <WIZCHIP_READ+0x94>)
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004778:	4b1f      	ldr	r3, [pc, #124]	; (80047f8 <WIZCHIP_READ+0x94>)
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <WIZCHIP_READ+0x24>
 8004780:	4b1d      	ldr	r3, [pc, #116]	; (80047f8 <WIZCHIP_READ+0x94>)
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	2b00      	cmp	r3, #0
 8004786:	d114      	bne.n	80047b2 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004788:	4b1b      	ldr	r3, [pc, #108]	; (80047f8 <WIZCHIP_READ+0x94>)
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	0c12      	lsrs	r2, r2, #16
 8004790:	b2d2      	uxtb	r2, r2
 8004792:	4610      	mov	r0, r2
 8004794:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004796:	4b18      	ldr	r3, [pc, #96]	; (80047f8 <WIZCHIP_READ+0x94>)
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	0a12      	lsrs	r2, r2, #8
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	4610      	mov	r0, r2
 80047a2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80047a4:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <WIZCHIP_READ+0x94>)
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	4610      	mov	r0, r2
 80047ae:	4798      	blx	r3
 80047b0:	e011      	b.n	80047d6 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	0c1b      	lsrs	r3, r3, #16
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	0a1b      	lsrs	r3, r3, #8
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80047c8:	4b0b      	ldr	r3, [pc, #44]	; (80047f8 <WIZCHIP_READ+0x94>)
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	f107 020c 	add.w	r2, r7, #12
 80047d0:	2103      	movs	r1, #3
 80047d2:	4610      	mov	r0, r2
 80047d4:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80047d6:	4b08      	ldr	r3, [pc, #32]	; (80047f8 <WIZCHIP_READ+0x94>)
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	4798      	blx	r3
 80047dc:	4603      	mov	r3, r0
 80047de:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80047e0:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <WIZCHIP_READ+0x94>)
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80047e6:	4b04      	ldr	r3, [pc, #16]	; (80047f8 <WIZCHIP_READ+0x94>)
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	4798      	blx	r3
   return ret;
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20000044 	.word	0x20000044

080047fc <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8004808:	4b22      	ldr	r3, [pc, #136]	; (8004894 <WIZCHIP_WRITE+0x98>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800480e:	4b21      	ldr	r3, [pc, #132]	; (8004894 <WIZCHIP_WRITE+0x98>)
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f043 0304 	orr.w	r3, r3, #4
 800481a:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800481c:	4b1d      	ldr	r3, [pc, #116]	; (8004894 <WIZCHIP_WRITE+0x98>)
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	2b00      	cmp	r3, #0
 8004822:	d119      	bne.n	8004858 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004824:	4b1b      	ldr	r3, [pc, #108]	; (8004894 <WIZCHIP_WRITE+0x98>)
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	0c12      	lsrs	r2, r2, #16
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	4610      	mov	r0, r2
 8004830:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004832:	4b18      	ldr	r3, [pc, #96]	; (8004894 <WIZCHIP_WRITE+0x98>)
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	0a12      	lsrs	r2, r2, #8
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	4610      	mov	r0, r2
 800483e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004840:	4b14      	ldr	r3, [pc, #80]	; (8004894 <WIZCHIP_WRITE+0x98>)
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	b2d2      	uxtb	r2, r2
 8004848:	4610      	mov	r0, r2
 800484a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800484c:	4b11      	ldr	r3, [pc, #68]	; (8004894 <WIZCHIP_WRITE+0x98>)
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	78fa      	ldrb	r2, [r7, #3]
 8004852:	4610      	mov	r0, r2
 8004854:	4798      	blx	r3
 8004856:	e013      	b.n	8004880 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	0c1b      	lsrs	r3, r3, #16
 800485c:	b2db      	uxtb	r3, r3
 800485e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	0a1b      	lsrs	r3, r3, #8
 8004864:	b2db      	uxtb	r3, r3
 8004866:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	b2db      	uxtb	r3, r3
 800486c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800486e:	78fb      	ldrb	r3, [r7, #3]
 8004870:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8004872:	4b08      	ldr	r3, [pc, #32]	; (8004894 <WIZCHIP_WRITE+0x98>)
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	f107 020c 	add.w	r2, r7, #12
 800487a:	2104      	movs	r1, #4
 800487c:	4610      	mov	r0, r2
 800487e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004880:	4b04      	ldr	r3, [pc, #16]	; (8004894 <WIZCHIP_WRITE+0x98>)
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004886:	4b03      	ldr	r3, [pc, #12]	; (8004894 <WIZCHIP_WRITE+0x98>)
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	4798      	blx	r3
}
 800488c:	bf00      	nop
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	20000044 	.word	0x20000044

08004898 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004898:	b590      	push	{r4, r7, lr}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	4613      	mov	r3, r2
 80048a4:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80048a6:	4b2b      	ldr	r3, [pc, #172]	; (8004954 <WIZCHIP_READ_BUF+0xbc>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	4798      	blx	r3
   WIZCHIP.CS._select();
 80048ac:	4b29      	ldr	r3, [pc, #164]	; (8004954 <WIZCHIP_READ_BUF+0xbc>)
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80048b2:	4b28      	ldr	r3, [pc, #160]	; (8004954 <WIZCHIP_READ_BUF+0xbc>)
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <WIZCHIP_READ_BUF+0x2a>
 80048ba:	4b26      	ldr	r3, [pc, #152]	; (8004954 <WIZCHIP_READ_BUF+0xbc>)
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d126      	bne.n	8004910 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80048c2:	4b24      	ldr	r3, [pc, #144]	; (8004954 <WIZCHIP_READ_BUF+0xbc>)
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	0c12      	lsrs	r2, r2, #16
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	4610      	mov	r0, r2
 80048ce:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80048d0:	4b20      	ldr	r3, [pc, #128]	; (8004954 <WIZCHIP_READ_BUF+0xbc>)
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	0a12      	lsrs	r2, r2, #8
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	4610      	mov	r0, r2
 80048dc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80048de:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <WIZCHIP_READ_BUF+0xbc>)
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	4610      	mov	r0, r2
 80048e8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80048ea:	2300      	movs	r3, #0
 80048ec:	82fb      	strh	r3, [r7, #22]
 80048ee:	e00a      	b.n	8004906 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80048f0:	4b18      	ldr	r3, [pc, #96]	; (8004954 <WIZCHIP_READ_BUF+0xbc>)
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	8afa      	ldrh	r2, [r7, #22]
 80048f6:	68b9      	ldr	r1, [r7, #8]
 80048f8:	188c      	adds	r4, r1, r2
 80048fa:	4798      	blx	r3
 80048fc:	4603      	mov	r3, r0
 80048fe:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8004900:	8afb      	ldrh	r3, [r7, #22]
 8004902:	3301      	adds	r3, #1
 8004904:	82fb      	strh	r3, [r7, #22]
 8004906:	8afa      	ldrh	r2, [r7, #22]
 8004908:	88fb      	ldrh	r3, [r7, #6]
 800490a:	429a      	cmp	r2, r3
 800490c:	d3f0      	bcc.n	80048f0 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800490e:	e017      	b.n	8004940 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	0c1b      	lsrs	r3, r3, #16
 8004914:	b2db      	uxtb	r3, r3
 8004916:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	0a1b      	lsrs	r3, r3, #8
 800491c:	b2db      	uxtb	r3, r3
 800491e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	b2db      	uxtb	r3, r3
 8004924:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004926:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <WIZCHIP_READ_BUF+0xbc>)
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	f107 0210 	add.w	r2, r7, #16
 800492e:	2103      	movs	r1, #3
 8004930:	4610      	mov	r0, r2
 8004932:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8004934:	4b07      	ldr	r3, [pc, #28]	; (8004954 <WIZCHIP_READ_BUF+0xbc>)
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	88fa      	ldrh	r2, [r7, #6]
 800493a:	4611      	mov	r1, r2
 800493c:	68b8      	ldr	r0, [r7, #8]
 800493e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004940:	4b04      	ldr	r3, [pc, #16]	; (8004954 <WIZCHIP_READ_BUF+0xbc>)
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004946:	4b03      	ldr	r3, [pc, #12]	; (8004954 <WIZCHIP_READ_BUF+0xbc>)
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	4798      	blx	r3
}
 800494c:	bf00      	nop
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	bd90      	pop	{r4, r7, pc}
 8004954:	20000044 	.word	0x20000044

08004958 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	4613      	mov	r3, r2
 8004964:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8004966:	4b2b      	ldr	r3, [pc, #172]	; (8004a14 <WIZCHIP_WRITE_BUF+0xbc>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800496c:	4b29      	ldr	r3, [pc, #164]	; (8004a14 <WIZCHIP_WRITE_BUF+0xbc>)
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f043 0304 	orr.w	r3, r3, #4
 8004978:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800497a:	4b26      	ldr	r3, [pc, #152]	; (8004a14 <WIZCHIP_WRITE_BUF+0xbc>)
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	2b00      	cmp	r3, #0
 8004980:	d126      	bne.n	80049d0 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004982:	4b24      	ldr	r3, [pc, #144]	; (8004a14 <WIZCHIP_WRITE_BUF+0xbc>)
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	0c12      	lsrs	r2, r2, #16
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	4610      	mov	r0, r2
 800498e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004990:	4b20      	ldr	r3, [pc, #128]	; (8004a14 <WIZCHIP_WRITE_BUF+0xbc>)
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	0a12      	lsrs	r2, r2, #8
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	4610      	mov	r0, r2
 800499c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800499e:	4b1d      	ldr	r3, [pc, #116]	; (8004a14 <WIZCHIP_WRITE_BUF+0xbc>)
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	b2d2      	uxtb	r2, r2
 80049a6:	4610      	mov	r0, r2
 80049a8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80049aa:	2300      	movs	r3, #0
 80049ac:	82fb      	strh	r3, [r7, #22]
 80049ae:	e00a      	b.n	80049c6 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80049b0:	4b18      	ldr	r3, [pc, #96]	; (8004a14 <WIZCHIP_WRITE_BUF+0xbc>)
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	8afa      	ldrh	r2, [r7, #22]
 80049b6:	68b9      	ldr	r1, [r7, #8]
 80049b8:	440a      	add	r2, r1
 80049ba:	7812      	ldrb	r2, [r2, #0]
 80049bc:	4610      	mov	r0, r2
 80049be:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80049c0:	8afb      	ldrh	r3, [r7, #22]
 80049c2:	3301      	adds	r3, #1
 80049c4:	82fb      	strh	r3, [r7, #22]
 80049c6:	8afa      	ldrh	r2, [r7, #22]
 80049c8:	88fb      	ldrh	r3, [r7, #6]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d3f0      	bcc.n	80049b0 <WIZCHIP_WRITE_BUF+0x58>
 80049ce:	e017      	b.n	8004a00 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	0c1b      	lsrs	r3, r3, #16
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	0a1b      	lsrs	r3, r3, #8
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80049e6:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <WIZCHIP_WRITE_BUF+0xbc>)
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	f107 0210 	add.w	r2, r7, #16
 80049ee:	2103      	movs	r1, #3
 80049f0:	4610      	mov	r0, r2
 80049f2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80049f4:	4b07      	ldr	r3, [pc, #28]	; (8004a14 <WIZCHIP_WRITE_BUF+0xbc>)
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	88fa      	ldrh	r2, [r7, #6]
 80049fa:	4611      	mov	r1, r2
 80049fc:	68b8      	ldr	r0, [r7, #8]
 80049fe:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004a00:	4b04      	ldr	r3, [pc, #16]	; (8004a14 <WIZCHIP_WRITE_BUF+0xbc>)
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004a06:	4b03      	ldr	r3, [pc, #12]	; (8004a14 <WIZCHIP_WRITE_BUF+0xbc>)
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	4798      	blx	r3
}
 8004a0c:	bf00      	nop
 8004a0e:	3718      	adds	r7, #24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	20000044 	.word	0x20000044

08004a18 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8004a18:	b590      	push	{r4, r7, lr}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8004a22:	2300      	movs	r3, #0
 8004a24:	81fb      	strh	r3, [r7, #14]
 8004a26:	2300      	movs	r3, #0
 8004a28:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	3301      	adds	r3, #1
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff fe94 	bl	8004764 <WIZCHIP_READ>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004a40:	89bb      	ldrh	r3, [r7, #12]
 8004a42:	021b      	lsls	r3, r3, #8
 8004a44:	b29c      	uxth	r4, r3
 8004a46:	79fb      	ldrb	r3, [r7, #7]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff fe86 	bl	8004764 <WIZCHIP_READ>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	4423      	add	r3, r4
 8004a5e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8004a60:	89bb      	ldrh	r3, [r7, #12]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d01a      	beq.n	8004a9c <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8004a66:	79fb      	ldrb	r3, [r7, #7]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff fe76 	bl	8004764 <WIZCHIP_READ>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004a7c:	89fb      	ldrh	r3, [r7, #14]
 8004a7e:	021b      	lsls	r3, r3, #8
 8004a80:	b29c      	uxth	r4, r3
 8004a82:	79fb      	ldrb	r3, [r7, #7]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	3301      	adds	r3, #1
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7ff fe68 	bl	8004764 <WIZCHIP_READ>
 8004a94:	4603      	mov	r3, r0
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	4423      	add	r3, r4
 8004a9a:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8004a9c:	89fa      	ldrh	r2, [r7, #14]
 8004a9e:	89bb      	ldrh	r3, [r7, #12]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d1c2      	bne.n	8004a2a <getSn_TX_FSR+0x12>
   return val;
 8004aa4:	89fb      	ldrh	r3, [r7, #14]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd90      	pop	{r4, r7, pc}

08004aae <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8004aae:	b590      	push	{r4, r7, lr}
 8004ab0:	b085      	sub	sp, #20
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	81fb      	strh	r3, [r7, #14]
 8004abc:	2300      	movs	r3, #0
 8004abe:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8004ac0:	79fb      	ldrb	r3, [r7, #7]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7ff fe49 	bl	8004764 <WIZCHIP_READ>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8004ad6:	89bb      	ldrh	r3, [r7, #12]
 8004ad8:	021b      	lsls	r3, r3, #8
 8004ada:	b29c      	uxth	r4, r3
 8004adc:	79fb      	ldrb	r3, [r7, #7]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff fe3b 	bl	8004764 <WIZCHIP_READ>
 8004aee:	4603      	mov	r3, r0
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	4423      	add	r3, r4
 8004af4:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8004af6:	89bb      	ldrh	r3, [r7, #12]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d01a      	beq.n	8004b32 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8004afc:	79fb      	ldrb	r3, [r7, #7]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	3301      	adds	r3, #1
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff fe2b 	bl	8004764 <WIZCHIP_READ>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8004b12:	89fb      	ldrh	r3, [r7, #14]
 8004b14:	021b      	lsls	r3, r3, #8
 8004b16:	b29c      	uxth	r4, r3
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff fe1d 	bl	8004764 <WIZCHIP_READ>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	4423      	add	r3, r4
 8004b30:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8004b32:	89fa      	ldrh	r2, [r7, #14]
 8004b34:	89bb      	ldrh	r3, [r7, #12]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d1c2      	bne.n	8004ac0 <getSn_RX_RSR+0x12>
   return val;
 8004b3a:	89fb      	ldrh	r3, [r7, #14]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3714      	adds	r7, #20
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd90      	pop	{r4, r7, pc}

08004b44 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004b44:	b590      	push	{r4, r7, lr}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	6039      	str	r1, [r7, #0]
 8004b4e:	71fb      	strb	r3, [r7, #7]
 8004b50:	4613      	mov	r3, r2
 8004b52:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8004b5c:	88bb      	ldrh	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d048      	beq.n	8004bf4 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8004b62:	79fb      	ldrb	r3, [r7, #7]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	3301      	adds	r3, #1
 8004b68:	00db      	lsls	r3, r3, #3
 8004b6a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff fdf8 	bl	8004764 <WIZCHIP_READ>
 8004b74:	4603      	mov	r3, r0
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	021b      	lsls	r3, r3, #8
 8004b7a:	b29c      	uxth	r4, r3
 8004b7c:	79fb      	ldrb	r3, [r7, #7]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	3301      	adds	r3, #1
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff fdeb 	bl	8004764 <WIZCHIP_READ>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	4423      	add	r3, r4
 8004b94:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8004b96:	89fb      	ldrh	r3, [r7, #14]
 8004b98:	021b      	lsls	r3, r3, #8
 8004b9a:	79fa      	ldrb	r2, [r7, #7]
 8004b9c:	0092      	lsls	r2, r2, #2
 8004b9e:	3202      	adds	r2, #2
 8004ba0:	00d2      	lsls	r2, r2, #3
 8004ba2:	4413      	add	r3, r2
 8004ba4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8004ba6:	88bb      	ldrh	r3, [r7, #4]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	6839      	ldr	r1, [r7, #0]
 8004bac:	68b8      	ldr	r0, [r7, #8]
 8004bae:	f7ff fed3 	bl	8004958 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8004bb2:	89fa      	ldrh	r2, [r7, #14]
 8004bb4:	88bb      	ldrh	r3, [r7, #4]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8004bba:	79fb      	ldrb	r3, [r7, #7]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	89fb      	ldrh	r3, [r7, #14]
 8004bca:	0a1b      	lsrs	r3, r3, #8
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4610      	mov	r0, r2
 8004bd4:	f7ff fe12 	bl	80047fc <WIZCHIP_WRITE>
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	3301      	adds	r3, #1
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8004be4:	461a      	mov	r2, r3
 8004be6:	89fb      	ldrh	r3, [r7, #14]
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	4619      	mov	r1, r3
 8004bec:	4610      	mov	r0, r2
 8004bee:	f7ff fe05 	bl	80047fc <WIZCHIP_WRITE>
 8004bf2:	e000      	b.n	8004bf6 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8004bf4:	bf00      	nop
}
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd90      	pop	{r4, r7, pc}

08004bfc <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004bfc:	b590      	push	{r4, r7, lr}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	4603      	mov	r3, r0
 8004c04:	6039      	str	r1, [r7, #0]
 8004c06:	71fb      	strb	r3, [r7, #7]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8004c10:	2300      	movs	r3, #0
 8004c12:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8004c14:	88bb      	ldrh	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d048      	beq.n	8004cac <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8004c1a:	79fb      	ldrb	r3, [r7, #7]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	3301      	adds	r3, #1
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff fd9c 	bl	8004764 <WIZCHIP_READ>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	021b      	lsls	r3, r3, #8
 8004c32:	b29c      	uxth	r4, r3
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	3301      	adds	r3, #1
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff fd8f 	bl	8004764 <WIZCHIP_READ>
 8004c46:	4603      	mov	r3, r0
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	4423      	add	r3, r4
 8004c4c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8004c4e:	89fb      	ldrh	r3, [r7, #14]
 8004c50:	021b      	lsls	r3, r3, #8
 8004c52:	79fa      	ldrb	r2, [r7, #7]
 8004c54:	0092      	lsls	r2, r2, #2
 8004c56:	3203      	adds	r2, #3
 8004c58:	00d2      	lsls	r2, r2, #3
 8004c5a:	4413      	add	r3, r2
 8004c5c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8004c5e:	88bb      	ldrh	r3, [r7, #4]
 8004c60:	461a      	mov	r2, r3
 8004c62:	6839      	ldr	r1, [r7, #0]
 8004c64:	68b8      	ldr	r0, [r7, #8]
 8004c66:	f7ff fe17 	bl	8004898 <WIZCHIP_READ_BUF>
   ptr += len;
 8004c6a:	89fa      	ldrh	r2, [r7, #14]
 8004c6c:	88bb      	ldrh	r3, [r7, #4]
 8004c6e:	4413      	add	r3, r2
 8004c70:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8004c72:	79fb      	ldrb	r3, [r7, #7]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	3301      	adds	r3, #1
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8004c7e:	461a      	mov	r2, r3
 8004c80:	89fb      	ldrh	r3, [r7, #14]
 8004c82:	0a1b      	lsrs	r3, r3, #8
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	f7ff fdb6 	bl	80047fc <WIZCHIP_WRITE>
 8004c90:	79fb      	ldrb	r3, [r7, #7]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	3301      	adds	r3, #1
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	89fb      	ldrh	r3, [r7, #14]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	f7ff fda9 	bl	80047fc <WIZCHIP_WRITE>
 8004caa:	e000      	b.n	8004cae <wiz_recv_data+0xb2>
   if(len == 0) return;
 8004cac:	bf00      	nop
}
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd90      	pop	{r4, r7, pc}

08004cb4 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_enter(void)           {};
void       wizchip_cris_enter(void)           {}
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	bf00      	nop
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_exit(void)          {};
void       wizchip_cris_exit(void)          {}
 8004cc2:	b480      	push	{r7}
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	bf00      	nop
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_select(void)            {};

void wizchip_cs_select(void) {}
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	bf00      	nop
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 8004cde:	b480      	push	{r7}
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	bf00      	nop
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	460b      	mov	r3, r1
 8004d10:	70fb      	strb	r3, [r7, #3]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	78fa      	ldrb	r2, [r7, #3]
 8004d16:	701a      	strb	r2, [r3, #0]
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	2300      	movs	r3, #0
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	71fb      	strb	r3, [r7, #7]
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}; 
void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	460b      	mov	r3, r1
 8004d54:	807b      	strh	r3, [r7, #2]
 8004d56:	bf00      	nop
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	807b      	strh	r3, [r7, #2]
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
	...

08004d7c <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <reg_wizchip_cs_cbfunc+0x16>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d106      	bne.n	8004da0 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8004d92:	4b0a      	ldr	r3, [pc, #40]	; (8004dbc <reg_wizchip_cs_cbfunc+0x40>)
 8004d94:	4a0a      	ldr	r2, [pc, #40]	; (8004dc0 <reg_wizchip_cs_cbfunc+0x44>)
 8004d96:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8004d98:	4b08      	ldr	r3, [pc, #32]	; (8004dbc <reg_wizchip_cs_cbfunc+0x40>)
 8004d9a:	4a0a      	ldr	r2, [pc, #40]	; (8004dc4 <reg_wizchip_cs_cbfunc+0x48>)
 8004d9c:	615a      	str	r2, [r3, #20]
 8004d9e:	e006      	b.n	8004dae <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8004da0:	4a06      	ldr	r2, [pc, #24]	; (8004dbc <reg_wizchip_cs_cbfunc+0x40>)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 8004da6:	4a05      	ldr	r2, [pc, #20]	; (8004dbc <reg_wizchip_cs_cbfunc+0x40>)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	6153      	str	r3, [r2, #20]
   }
}
 8004dac:	bf00      	nop
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	20000044 	.word	0x20000044
 8004dc0:	08004cd1 	.word	0x08004cd1
 8004dc4:	08004cdf 	.word	0x08004cdf

08004dc8 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8004dd2:	bf00      	nop
 8004dd4:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <reg_wizchip_spi_cbfunc+0x4c>)
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0f9      	beq.n	8004dd4 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <reg_wizchip_spi_cbfunc+0x24>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d106      	bne.n	8004dfa <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8004dec:	4b09      	ldr	r3, [pc, #36]	; (8004e14 <reg_wizchip_spi_cbfunc+0x4c>)
 8004dee:	4a0a      	ldr	r2, [pc, #40]	; (8004e18 <reg_wizchip_spi_cbfunc+0x50>)
 8004df0:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8004df2:	4b08      	ldr	r3, [pc, #32]	; (8004e14 <reg_wizchip_spi_cbfunc+0x4c>)
 8004df4:	4a09      	ldr	r2, [pc, #36]	; (8004e1c <reg_wizchip_spi_cbfunc+0x54>)
 8004df6:	61da      	str	r2, [r3, #28]
 8004df8:	e006      	b.n	8004e08 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8004dfa:	4a06      	ldr	r2, [pc, #24]	; (8004e14 <reg_wizchip_spi_cbfunc+0x4c>)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8004e00:	4a04      	ldr	r2, [pc, #16]	; (8004e14 <reg_wizchip_spi_cbfunc+0x4c>)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	61d3      	str	r3, [r2, #28]
   }
}
 8004e06:	bf00      	nop
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	20000044 	.word	0x20000044
 8004e18:	08004d25 	.word	0x08004d25
 8004e1c:	08004d35 	.word	0x08004d35

08004e20 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8004e2a:	bf00      	nop
 8004e2c:	4b0f      	ldr	r3, [pc, #60]	; (8004e6c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0f9      	beq.n	8004e2c <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d002      	beq.n	8004e44 <reg_wizchip_spiburst_cbfunc+0x24>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d106      	bne.n	8004e52 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8004e44:	4b09      	ldr	r3, [pc, #36]	; (8004e6c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004e46:	4a0a      	ldr	r2, [pc, #40]	; (8004e70 <reg_wizchip_spiburst_cbfunc+0x50>)
 8004e48:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8004e4a:	4b08      	ldr	r3, [pc, #32]	; (8004e6c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004e4c:	4a09      	ldr	r2, [pc, #36]	; (8004e74 <reg_wizchip_spiburst_cbfunc+0x54>)
 8004e4e:	625a      	str	r2, [r3, #36]	; 0x24
 8004e50:	e006      	b.n	8004e60 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8004e52:	4a06      	ldr	r2, [pc, #24]	; (8004e6c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6213      	str	r3, [r2, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8004e58:	4a04      	ldr	r2, [pc, #16]	; (8004e6c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	6253      	str	r3, [r2, #36]	; 0x24
   }
}
 8004e5e:	bf00      	nop
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	20000044 	.word	0x20000044
 8004e70:	08004d4b 	.word	0x08004d4b
 8004e74:	08004d63 	.word	0x08004d63

08004e78 <ctlnetwork>:
   return 0;
}


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	4603      	mov	r3, r0
 8004e80:	6039      	str	r1, [r7, #0]
 8004e82:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	2b05      	cmp	r3, #5
 8004e88:	d82c      	bhi.n	8004ee4 <ctlnetwork+0x6c>
 8004e8a:	a201      	add	r2, pc, #4	; (adr r2, 8004e90 <ctlnetwork+0x18>)
 8004e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e90:	08004ea9 	.word	0x08004ea9
 8004e94:	08004eb1 	.word	0x08004eb1
 8004e98:	08004eb9 	.word	0x08004eb9
 8004e9c:	08004ec7 	.word	0x08004ec7
 8004ea0:	08004ed5 	.word	0x08004ed5
 8004ea4:	08004edd 	.word	0x08004edd
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8004ea8:	6838      	ldr	r0, [r7, #0]
 8004eaa:	f000 f8fb 	bl	80050a4 <wizchip_setnetinfo>
         break;
 8004eae:	e01c      	b.n	8004eea <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8004eb0:	6838      	ldr	r0, [r7, #0]
 8004eb2:	f000 f937 	bl	8005124 <wizchip_getnetinfo>
         break;
 8004eb6:	e018      	b.n	8004eea <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 f971 	bl	80051a4 <wizchip_setnetmode>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	e012      	b.n	8004eec <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8004ec6:	f000 f98f 	bl	80051e8 <wizchip_getnetmode>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	461a      	mov	r2, r3
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	701a      	strb	r2, [r3, #0]
         break;
 8004ed2:	e00a      	b.n	8004eea <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8004ed4:	6838      	ldr	r0, [r7, #0]
 8004ed6:	f000 f98f 	bl	80051f8 <wizchip_settimeout>
         break;
 8004eda:	e006      	b.n	8004eea <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8004edc:	6838      	ldr	r0, [r7, #0]
 8004ede:	f000 f9ac 	bl	800523a <wizchip_gettimeout>
         break;
 8004ee2:	e002      	b.n	8004eea <ctlnetwork+0x72>
      default:
         return -1;
 8004ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee8:	e000      	b.n	8004eec <ctlnetwork+0x74>
   }
   return 0;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8004efa:	1d3b      	adds	r3, r7, #4
 8004efc:	2206      	movs	r2, #6
 8004efe:	4619      	mov	r1, r3
 8004f00:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004f04:	f7ff fcc8 	bl	8004898 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8004f08:	f107 0314 	add.w	r3, r7, #20
 8004f0c:	2204      	movs	r2, #4
 8004f0e:	4619      	mov	r1, r3
 8004f10:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004f14:	f7ff fcc0 	bl	8004898 <WIZCHIP_READ_BUF>
 8004f18:	f107 0310 	add.w	r3, r7, #16
 8004f1c:	2204      	movs	r2, #4
 8004f1e:	4619      	mov	r1, r3
 8004f20:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004f24:	f7ff fcb8 	bl	8004898 <WIZCHIP_READ_BUF>
 8004f28:	f107 030c 	add.w	r3, r7, #12
 8004f2c:	2204      	movs	r2, #4
 8004f2e:	4619      	mov	r1, r3
 8004f30:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004f34:	f7ff fcb0 	bl	8004898 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8004f38:	2180      	movs	r1, #128	; 0x80
 8004f3a:	2000      	movs	r0, #0
 8004f3c:	f7ff fc5e 	bl	80047fc <WIZCHIP_WRITE>
   getMR(); // for delay
 8004f40:	2000      	movs	r0, #0
 8004f42:	f7ff fc0f 	bl	8004764 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8004f46:	1d3b      	adds	r3, r7, #4
 8004f48:	2206      	movs	r2, #6
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004f50:	f7ff fd02 	bl	8004958 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8004f54:	f107 0314 	add.w	r3, r7, #20
 8004f58:	2204      	movs	r2, #4
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004f60:	f7ff fcfa 	bl	8004958 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8004f64:	f107 0310 	add.w	r3, r7, #16
 8004f68:	2204      	movs	r2, #4
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004f70:	f7ff fcf2 	bl	8004958 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8004f74:	f107 030c 	add.w	r3, r7, #12
 8004f78:	2204      	movs	r2, #4
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004f80:	f7ff fcea 	bl	8004958 <WIZCHIP_WRITE_BUF>
}
 8004f84:	bf00      	nop
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8004f96:	2300      	movs	r3, #0
 8004f98:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8004f9a:	f7ff ffab 	bl	8004ef4 <wizchip_sw_reset>
   if(txsize)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d03b      	beq.n	800501c <wizchip_init+0x90>
   {
      tmp = 0;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	73bb      	strb	r3, [r7, #14]
            tmp += txsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004fa8:	2300      	movs	r3, #0
 8004faa:	73fb      	strb	r3, [r7, #15]
 8004fac:	e015      	b.n	8004fda <wizchip_init+0x4e>
        {
            tmp += txsize[i];
 8004fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	781a      	ldrb	r2, [r3, #0]
 8004fb8:	7bbb      	ldrb	r3, [r7, #14]
 8004fba:	4413      	add	r3, r2
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	73bb      	strb	r3, [r7, #14]

        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8004fc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fc4:	2b10      	cmp	r3, #16
 8004fc6:	dd02      	ble.n	8004fce <wizchip_init+0x42>
 8004fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fcc:	e066      	b.n	800509c <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	73fb      	strb	r3, [r7, #15]
 8004fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fde:	2b07      	cmp	r3, #7
 8004fe0:	dde5      	ble.n	8004fae <wizchip_init+0x22>
        #endif
        }
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	73fb      	strb	r3, [r7, #15]
 8004fe6:	e015      	b.n	8005014 <wizchip_init+0x88>
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100
            j = 0;
            while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_TXBUF_SIZE(i, j);
        #else
            setSn_TXBUF_SIZE(i, txsize[i]);
 8004fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	3301      	adds	r3, #1
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	4413      	add	r3, r2
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	4619      	mov	r1, r3
 8005004:	f7ff fbfa 	bl	80047fc <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800500c:	b2db      	uxtb	r3, r3
 800500e:	3301      	adds	r3, #1
 8005010:	b2db      	uxtb	r3, r3
 8005012:	73fb      	strb	r3, [r7, #15]
 8005014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005018:	2b07      	cmp	r3, #7
 800501a:	dde5      	ble.n	8004fe8 <wizchip_init+0x5c>
        }

    #endif
   }

   if(rxsize)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d03b      	beq.n	800509a <wizchip_init+0x10e>
   {
      tmp = 0;
 8005022:	2300      	movs	r3, #0
 8005024:	73bb      	strb	r3, [r7, #14]
            tmp += rxsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005026:	2300      	movs	r3, #0
 8005028:	73fb      	strb	r3, [r7, #15]
 800502a:	e015      	b.n	8005058 <wizchip_init+0xcc>
        {
            tmp += rxsize[i];
 800502c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	4413      	add	r3, r2
 8005034:	781a      	ldrb	r2, [r3, #0]
 8005036:	7bbb      	ldrb	r3, [r7, #14]
 8005038:	4413      	add	r3, r2
 800503a:	b2db      	uxtb	r3, r3
 800503c:	73bb      	strb	r3, [r7, #14]
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 800503e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005042:	2b10      	cmp	r3, #16
 8005044:	dd02      	ble.n	800504c <wizchip_init+0xc0>
 8005046:	f04f 33ff 	mov.w	r3, #4294967295
 800504a:	e027      	b.n	800509c <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800504c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005050:	b2db      	uxtb	r3, r3
 8005052:	3301      	adds	r3, #1
 8005054:	b2db      	uxtb	r3, r3
 8005056:	73fb      	strb	r3, [r7, #15]
 8005058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800505c:	2b07      	cmp	r3, #7
 800505e:	dde5      	ble.n	800502c <wizchip_init+0xa0>
        #endif
        }

        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005060:	2300      	movs	r3, #0
 8005062:	73fb      	strb	r3, [r7, #15]
 8005064:	e015      	b.n	8005092 <wizchip_init+0x106>
        #if _WIZCHIP_ < W5200    // add condition for w5100
            j = 0;
            while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_RXBUF_SIZE(i, j);
        #else
            setSn_RXBUF_SIZE(i, rxsize[i]);
 8005066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	3301      	adds	r3, #1
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8005074:	4618      	mov	r0, r3
 8005076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	4413      	add	r3, r2
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	4619      	mov	r1, r3
 8005082:	f7ff fbbb 	bl	80047fc <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800508a:	b2db      	uxtb	r3, r3
 800508c:	3301      	adds	r3, #1
 800508e:	b2db      	uxtb	r3, r3
 8005090:	73fb      	strb	r3, [r7, #15]
 8005092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005096:	2b07      	cmp	r3, #7
 8005098:	dde5      	ble.n	8005066 <wizchip_init+0xda>
        #endif
        }
    #endif
   }
   return 0;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2206      	movs	r2, #6
 80050b0:	4619      	mov	r1, r3
 80050b2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80050b6:	f7ff fc4f 	bl	8004958 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	330e      	adds	r3, #14
 80050be:	2204      	movs	r2, #4
 80050c0:	4619      	mov	r1, r3
 80050c2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80050c6:	f7ff fc47 	bl	8004958 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	330a      	adds	r3, #10
 80050ce:	2204      	movs	r2, #4
 80050d0:	4619      	mov	r1, r3
 80050d2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80050d6:	f7ff fc3f 	bl	8004958 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	3306      	adds	r3, #6
 80050de:	2204      	movs	r2, #4
 80050e0:	4619      	mov	r1, r3
 80050e2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80050e6:	f7ff fc37 	bl	8004958 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	7c9a      	ldrb	r2, [r3, #18]
 80050ee:	4b0b      	ldr	r3, [pc, #44]	; (800511c <wizchip_setnetinfo+0x78>)
 80050f0:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	7cda      	ldrb	r2, [r3, #19]
 80050f6:	4b09      	ldr	r3, [pc, #36]	; (800511c <wizchip_setnetinfo+0x78>)
 80050f8:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	7d1a      	ldrb	r2, [r3, #20]
 80050fe:	4b07      	ldr	r3, [pc, #28]	; (800511c <wizchip_setnetinfo+0x78>)
 8005100:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	7d5a      	ldrb	r2, [r3, #21]
 8005106:	4b05      	ldr	r3, [pc, #20]	; (800511c <wizchip_setnetinfo+0x78>)
 8005108:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	7d9a      	ldrb	r2, [r3, #22]
 800510e:	4b04      	ldr	r3, [pc, #16]	; (8005120 <wizchip_setnetinfo+0x7c>)
 8005110:	701a      	strb	r2, [r3, #0]
}
 8005112:	bf00      	nop
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	20002f3c 	.word	0x20002f3c
 8005120:	20002f40 	.word	0x20002f40

08005124 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2206      	movs	r2, #6
 8005130:	4619      	mov	r1, r3
 8005132:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8005136:	f7ff fbaf 	bl	8004898 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	330e      	adds	r3, #14
 800513e:	2204      	movs	r2, #4
 8005140:	4619      	mov	r1, r3
 8005142:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005146:	f7ff fba7 	bl	8004898 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	330a      	adds	r3, #10
 800514e:	2204      	movs	r2, #4
 8005150:	4619      	mov	r1, r3
 8005152:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8005156:	f7ff fb9f 	bl	8004898 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3306      	adds	r3, #6
 800515e:	2204      	movs	r2, #4
 8005160:	4619      	mov	r1, r3
 8005162:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8005166:	f7ff fb97 	bl	8004898 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800516a:	4b0c      	ldr	r3, [pc, #48]	; (800519c <wizchip_getnetinfo+0x78>)
 800516c:	781a      	ldrb	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8005172:	4b0a      	ldr	r3, [pc, #40]	; (800519c <wizchip_getnetinfo+0x78>)
 8005174:	785a      	ldrb	r2, [r3, #1]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800517a:	4b08      	ldr	r3, [pc, #32]	; (800519c <wizchip_getnetinfo+0x78>)
 800517c:	789a      	ldrb	r2, [r3, #2]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8005182:	4b06      	ldr	r3, [pc, #24]	; (800519c <wizchip_getnetinfo+0x78>)
 8005184:	78da      	ldrb	r2, [r3, #3]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 800518a:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <wizchip_getnetinfo+0x7c>)
 800518c:	781a      	ldrb	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	759a      	strb	r2, [r3, #22]
}
 8005192:	bf00      	nop
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	20002f3c 	.word	0x20002f3c
 80051a0:	20002f40 	.word	0x20002f40

080051a4 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	4603      	mov	r3, r0
 80051ac:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80051ae:	2300      	movs	r3, #0
 80051b0:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <wizchip_setnetmode+0x1e>
 80051bc:	f04f 33ff 	mov.w	r3, #4294967295
 80051c0:	e00e      	b.n	80051e0 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 80051c2:	2000      	movs	r0, #0
 80051c4:	f7ff face 	bl	8004764 <WIZCHIP_READ>
 80051c8:	4603      	mov	r3, r0
 80051ca:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 80051cc:	7bfa      	ldrb	r2, [r7, #15]
 80051ce:	79fb      	ldrb	r3, [r7, #7]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	4619      	mov	r1, r3
 80051d8:	2000      	movs	r0, #0
 80051da:	f7ff fb0f 	bl	80047fc <WIZCHIP_WRITE>
   return 0;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 80051ec:	2000      	movs	r0, #0
 80051ee:	f7ff fab9 	bl	8004764 <WIZCHIP_READ>
 80051f2:	4603      	mov	r3, r0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	4619      	mov	r1, r3
 8005206:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800520a:	f7ff faf7 	bl	80047fc <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	885b      	ldrh	r3, [r3, #2]
 8005212:	0a1b      	lsrs	r3, r3, #8
 8005214:	b29b      	uxth	r3, r3
 8005216:	b2db      	uxtb	r3, r3
 8005218:	4619      	mov	r1, r3
 800521a:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800521e:	f7ff faed 	bl	80047fc <WIZCHIP_WRITE>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	885b      	ldrh	r3, [r3, #2]
 8005226:	b2db      	uxtb	r3, r3
 8005228:	4619      	mov	r1, r3
 800522a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800522e:	f7ff fae5 	bl	80047fc <WIZCHIP_WRITE>
}
 8005232:	bf00      	nop
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800523a:	b590      	push	{r4, r7, lr}
 800523c:	b083      	sub	sp, #12
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8005242:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8005246:	f7ff fa8d 	bl	8004764 <WIZCHIP_READ>
 800524a:	4603      	mov	r3, r0
 800524c:	461a      	mov	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8005252:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8005256:	f7ff fa85 	bl	8004764 <WIZCHIP_READ>
 800525a:	4603      	mov	r3, r0
 800525c:	b29b      	uxth	r3, r3
 800525e:	021b      	lsls	r3, r3, #8
 8005260:	b29c      	uxth	r4, r3
 8005262:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8005266:	f7ff fa7d 	bl	8004764 <WIZCHIP_READ>
 800526a:	4603      	mov	r3, r0
 800526c:	b29b      	uxth	r3, r3
 800526e:	4423      	add	r3, r4
 8005270:	b29a      	uxth	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	805a      	strh	r2, [r3, #2]
}
 8005276:	bf00      	nop
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	bd90      	pop	{r4, r7, pc}
	...

08005280 <W5500_Select>:
#include "wiznet_api.h"

static wiz_NetInfo gWIZNETINFO;

void W5500_Select(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIZNET_CS_PORT, WIZNET_CS_PIN, GPIO_PIN_RESET);
 8005284:	2200      	movs	r2, #0
 8005286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800528a:	4802      	ldr	r0, [pc, #8]	; (8005294 <W5500_Select+0x14>)
 800528c:	f000 ff5a 	bl	8006144 <HAL_GPIO_WritePin>
}
 8005290:	bf00      	nop
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40020400 	.word	0x40020400

08005298 <W5500_Deselect>:

void W5500_Deselect(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIZNET_CS_PORT, WIZNET_CS_PIN, GPIO_PIN_SET);
 800529c:	2201      	movs	r2, #1
 800529e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80052a2:	4802      	ldr	r0, [pc, #8]	; (80052ac <W5500_Deselect+0x14>)
 80052a4:	f000 ff4e 	bl	8006144 <HAL_GPIO_WritePin>
}
 80052a8:	bf00      	nop
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	40020400 	.word	0x40020400

080052b0 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	460b      	mov	r3, r1
 80052ba:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(WIZNET_SPI_INSTANCE, buff, len, HAL_MAX_DELAY);
 80052bc:	887a      	ldrh	r2, [r7, #2]
 80052be:	f04f 33ff 	mov.w	r3, #4294967295
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	4803      	ldr	r0, [pc, #12]	; (80052d4 <W5500_ReadBuff+0x24>)
 80052c6:	f002 fa15 	bl	80076f4 <HAL_SPI_Receive>
}
 80052ca:	bf00      	nop
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	2000020c 	.word	0x2000020c

080052d8 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	460b      	mov	r3, r1
 80052e2:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(WIZNET_SPI_INSTANCE, buff, len, HAL_MAX_DELAY);
 80052e4:	887a      	ldrh	r2, [r7, #2]
 80052e6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ea:	6879      	ldr	r1, [r7, #4]
 80052ec:	4803      	ldr	r0, [pc, #12]	; (80052fc <W5500_WriteBuff+0x24>)
 80052ee:	f002 f8be 	bl	800746e <HAL_SPI_Transmit>
}
 80052f2:	bf00      	nop
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	2000020c 	.word	0x2000020c

08005300 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
	uint8_t byte;
	W5500_ReadBuff(&byte, sizeof(byte));
 8005306:	1dfb      	adds	r3, r7, #7
 8005308:	2101      	movs	r1, #1
 800530a:	4618      	mov	r0, r3
 800530c:	f7ff ffd0 	bl	80052b0 <W5500_ReadBuff>
	return byte;
 8005310:	79fb      	ldrb	r3, [r7, #7]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b082      	sub	sp, #8
 800531e:	af00      	add	r7, sp, #0
 8005320:	4603      	mov	r3, r0
 8005322:	71fb      	strb	r3, [r7, #7]
	W5500_WriteBuff(&byte, sizeof(byte));
 8005324:	1dfb      	adds	r3, r7, #7
 8005326:	2101      	movs	r1, #1
 8005328:	4618      	mov	r0, r3
 800532a:	f7ff ffd5 	bl	80052d8 <W5500_WriteBuff>
}
 800532e:	bf00      	nop
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
	...

08005338 <W5500_SetAddress>:

void W5500_SetAddress(wiz_NetInfo info)
{
 8005338:	b084      	sub	sp, #16
 800533a:	b4b0      	push	{r4, r5, r7}
 800533c:	af00      	add	r7, sp, #0
 800533e:	f107 040c 	add.w	r4, r7, #12
 8005342:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	gWIZNETINFO = info;
 8005346:	4b09      	ldr	r3, [pc, #36]	; (800536c <W5500_SetAddress+0x34>)
 8005348:	461c      	mov	r4, r3
 800534a:	f107 050c 	add.w	r5, r7, #12
 800534e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005352:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005356:	6020      	str	r0, [r4, #0]
 8005358:	3404      	adds	r4, #4
 800535a:	8021      	strh	r1, [r4, #0]
 800535c:	3402      	adds	r4, #2
 800535e:	0c0b      	lsrs	r3, r1, #16
 8005360:	7023      	strb	r3, [r4, #0]
}
 8005362:	bf00      	nop
 8005364:	46bd      	mov	sp, r7
 8005366:	bcb0      	pop	{r4, r5, r7}
 8005368:	b004      	add	sp, #16
 800536a:	4770      	bx	lr
 800536c:	20002f44 	.word	0x20002f44

08005370 <W5500_Reboot>:
void W5500_Reboot()
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIZNET_RST_PORT, WIZNET_RST_PIN, GPIO_PIN_RESET);
 8005376:	2200      	movs	r2, #0
 8005378:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800537c:	4817      	ldr	r0, [pc, #92]	; (80053dc <W5500_Reboot+0x6c>)
 800537e:	f000 fee1 	bl	8006144 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8005382:	2005      	movs	r0, #5
 8005384:	f000 f8d8 	bl	8005538 <HAL_Delay>
	HAL_GPIO_WritePin(WIZNET_RST_PORT, WIZNET_RST_PIN, GPIO_PIN_SET);
 8005388:	2201      	movs	r2, #1
 800538a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800538e:	4813      	ldr	r0, [pc, #76]	; (80053dc <W5500_Reboot+0x6c>)
 8005390:	f000 fed8 	bl	8006144 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8005394:	2005      	movs	r0, #5
 8005396:	f000 f8cf 	bl	8005538 <HAL_Delay>
	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Deselect);
 800539a:	4911      	ldr	r1, [pc, #68]	; (80053e0 <W5500_Reboot+0x70>)
 800539c:	4811      	ldr	r0, [pc, #68]	; (80053e4 <W5500_Reboot+0x74>)
 800539e:	f7ff fced 	bl	8004d7c <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 80053a2:	4911      	ldr	r1, [pc, #68]	; (80053e8 <W5500_Reboot+0x78>)
 80053a4:	4811      	ldr	r0, [pc, #68]	; (80053ec <W5500_Reboot+0x7c>)
 80053a6:	f7ff fd0f 	bl	8004dc8 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 80053aa:	4911      	ldr	r1, [pc, #68]	; (80053f0 <W5500_Reboot+0x80>)
 80053ac:	4811      	ldr	r0, [pc, #68]	; (80053f4 <W5500_Reboot+0x84>)
 80053ae:	f7ff fd37 	bl	8004e20 <reg_wizchip_spiburst_cbfunc>
	uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 80053b2:	4a11      	ldr	r2, [pc, #68]	; (80053f8 <W5500_Reboot+0x88>)
 80053b4:	463b      	mov	r3, r7
 80053b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053ba:	e883 0003 	stmia.w	r3, {r0, r1}
	wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 80053be:	463a      	mov	r2, r7
 80053c0:	463b      	mov	r3, r7
 80053c2:	4611      	mov	r1, r2
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7ff fde1 	bl	8004f8c <wizchip_init>
	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 80053ca:	490c      	ldr	r1, [pc, #48]	; (80053fc <W5500_Reboot+0x8c>)
 80053cc:	2000      	movs	r0, #0
 80053ce:	f7ff fd53 	bl	8004e78 <ctlnetwork>
}
 80053d2:	bf00      	nop
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	40020400 	.word	0x40020400
 80053e0:	08005299 	.word	0x08005299
 80053e4:	08005281 	.word	0x08005281
 80053e8:	0800531b 	.word	0x0800531b
 80053ec:	08005301 	.word	0x08005301
 80053f0:	080052d9 	.word	0x080052d9
 80053f4:	080052b1 	.word	0x080052b1
 80053f8:	0800d3b8 	.word	0x0800d3b8
 80053fc:	20002f44 	.word	0x20002f44

08005400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005438 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005404:	f7fd ff8a 	bl	800331c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005408:	480c      	ldr	r0, [pc, #48]	; (800543c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800540a:	490d      	ldr	r1, [pc, #52]	; (8005440 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800540c:	4a0d      	ldr	r2, [pc, #52]	; (8005444 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800540e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005410:	e002      	b.n	8005418 <LoopCopyDataInit>

08005412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005416:	3304      	adds	r3, #4

08005418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800541a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800541c:	d3f9      	bcc.n	8005412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800541e:	4a0a      	ldr	r2, [pc, #40]	; (8005448 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005420:	4c0a      	ldr	r4, [pc, #40]	; (800544c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005424:	e001      	b.n	800542a <LoopFillZerobss>

08005426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005428:	3204      	adds	r2, #4

0800542a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800542a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800542c:	d3fb      	bcc.n	8005426 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800542e:	f006 ff8b 	bl	800c348 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005432:	f7fd fa1d 	bl	8002870 <main>
  bx  lr    
 8005436:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005438:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800543c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005440:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8005444:	0800e050 	.word	0x0800e050
  ldr r2, =_sbss
 8005448:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 800544c:	200032f4 	.word	0x200032f4

08005450 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005450:	e7fe      	b.n	8005450 <ADC_IRQHandler>
	...

08005454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005458:	4b0e      	ldr	r3, [pc, #56]	; (8005494 <HAL_Init+0x40>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a0d      	ldr	r2, [pc, #52]	; (8005494 <HAL_Init+0x40>)
 800545e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005462:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005464:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <HAL_Init+0x40>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a0a      	ldr	r2, [pc, #40]	; (8005494 <HAL_Init+0x40>)
 800546a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800546e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005470:	4b08      	ldr	r3, [pc, #32]	; (8005494 <HAL_Init+0x40>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a07      	ldr	r2, [pc, #28]	; (8005494 <HAL_Init+0x40>)
 8005476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800547a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800547c:	2003      	movs	r0, #3
 800547e:	f000 f973 	bl	8005768 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005482:	200f      	movs	r0, #15
 8005484:	f000 f808 	bl	8005498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005488:	f7fd fcc0 	bl	8002e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40023c00 	.word	0x40023c00

08005498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80054a0:	4b12      	ldr	r3, [pc, #72]	; (80054ec <HAL_InitTick+0x54>)
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	4b12      	ldr	r3, [pc, #72]	; (80054f0 <HAL_InitTick+0x58>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	4619      	mov	r1, r3
 80054aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80054b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 f999 	bl	80057ee <HAL_SYSTICK_Config>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e00e      	b.n	80054e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b0f      	cmp	r3, #15
 80054ca:	d80a      	bhi.n	80054e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054cc:	2200      	movs	r2, #0
 80054ce:	6879      	ldr	r1, [r7, #4]
 80054d0:	f04f 30ff 	mov.w	r0, #4294967295
 80054d4:	f000 f953 	bl	800577e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80054d8:	4a06      	ldr	r2, [pc, #24]	; (80054f4 <HAL_InitTick+0x5c>)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	e000      	b.n	80054e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	2000003c 	.word	0x2000003c
 80054f0:	20000070 	.word	0x20000070
 80054f4:	2000006c 	.word	0x2000006c

080054f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054fc:	4b06      	ldr	r3, [pc, #24]	; (8005518 <HAL_IncTick+0x20>)
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	461a      	mov	r2, r3
 8005502:	4b06      	ldr	r3, [pc, #24]	; (800551c <HAL_IncTick+0x24>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4413      	add	r3, r2
 8005508:	4a04      	ldr	r2, [pc, #16]	; (800551c <HAL_IncTick+0x24>)
 800550a:	6013      	str	r3, [r2, #0]
}
 800550c:	bf00      	nop
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	20000070 	.word	0x20000070
 800551c:	20002f5c 	.word	0x20002f5c

08005520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
  return uwTick;
 8005524:	4b03      	ldr	r3, [pc, #12]	; (8005534 <HAL_GetTick+0x14>)
 8005526:	681b      	ldr	r3, [r3, #0]
}
 8005528:	4618      	mov	r0, r3
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	20002f5c 	.word	0x20002f5c

08005538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005540:	f7ff ffee 	bl	8005520 <HAL_GetTick>
 8005544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005550:	d005      	beq.n	800555e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005552:	4b0a      	ldr	r3, [pc, #40]	; (800557c <HAL_Delay+0x44>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4413      	add	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800555e:	bf00      	nop
 8005560:	f7ff ffde 	bl	8005520 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	429a      	cmp	r2, r3
 800556e:	d8f7      	bhi.n	8005560 <HAL_Delay+0x28>
  {
  }
}
 8005570:	bf00      	nop
 8005572:	bf00      	nop
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20000070 	.word	0x20000070

08005580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f003 0307 	and.w	r3, r3, #7
 800558e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005590:	4b0c      	ldr	r3, [pc, #48]	; (80055c4 <__NVIC_SetPriorityGrouping+0x44>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800559c:	4013      	ands	r3, r2
 800559e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80055ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055b2:	4a04      	ldr	r2, [pc, #16]	; (80055c4 <__NVIC_SetPriorityGrouping+0x44>)
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	60d3      	str	r3, [r2, #12]
}
 80055b8:	bf00      	nop
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	e000ed00 	.word	0xe000ed00

080055c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055cc:	4b04      	ldr	r3, [pc, #16]	; (80055e0 <__NVIC_GetPriorityGrouping+0x18>)
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	0a1b      	lsrs	r3, r3, #8
 80055d2:	f003 0307 	and.w	r3, r3, #7
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	e000ed00 	.word	0xe000ed00

080055e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	4603      	mov	r3, r0
 80055ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	db0b      	blt.n	800560e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055f6:	79fb      	ldrb	r3, [r7, #7]
 80055f8:	f003 021f 	and.w	r2, r3, #31
 80055fc:	4907      	ldr	r1, [pc, #28]	; (800561c <__NVIC_EnableIRQ+0x38>)
 80055fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005602:	095b      	lsrs	r3, r3, #5
 8005604:	2001      	movs	r0, #1
 8005606:	fa00 f202 	lsl.w	r2, r0, r2
 800560a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	e000e100 	.word	0xe000e100

08005620 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	4603      	mov	r3, r0
 8005628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800562a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800562e:	2b00      	cmp	r3, #0
 8005630:	db12      	blt.n	8005658 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005632:	79fb      	ldrb	r3, [r7, #7]
 8005634:	f003 021f 	and.w	r2, r3, #31
 8005638:	490a      	ldr	r1, [pc, #40]	; (8005664 <__NVIC_DisableIRQ+0x44>)
 800563a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800563e:	095b      	lsrs	r3, r3, #5
 8005640:	2001      	movs	r0, #1
 8005642:	fa00 f202 	lsl.w	r2, r0, r2
 8005646:	3320      	adds	r3, #32
 8005648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800564c:	f3bf 8f4f 	dsb	sy
}
 8005650:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005652:	f3bf 8f6f 	isb	sy
}
 8005656:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	e000e100 	.word	0xe000e100

08005668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	4603      	mov	r3, r0
 8005670:	6039      	str	r1, [r7, #0]
 8005672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005678:	2b00      	cmp	r3, #0
 800567a:	db0a      	blt.n	8005692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	b2da      	uxtb	r2, r3
 8005680:	490c      	ldr	r1, [pc, #48]	; (80056b4 <__NVIC_SetPriority+0x4c>)
 8005682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005686:	0112      	lsls	r2, r2, #4
 8005688:	b2d2      	uxtb	r2, r2
 800568a:	440b      	add	r3, r1
 800568c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005690:	e00a      	b.n	80056a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	b2da      	uxtb	r2, r3
 8005696:	4908      	ldr	r1, [pc, #32]	; (80056b8 <__NVIC_SetPriority+0x50>)
 8005698:	79fb      	ldrb	r3, [r7, #7]
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	3b04      	subs	r3, #4
 80056a0:	0112      	lsls	r2, r2, #4
 80056a2:	b2d2      	uxtb	r2, r2
 80056a4:	440b      	add	r3, r1
 80056a6:	761a      	strb	r2, [r3, #24]
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	e000e100 	.word	0xe000e100
 80056b8:	e000ed00 	.word	0xe000ed00

080056bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056bc:	b480      	push	{r7}
 80056be:	b089      	sub	sp, #36	; 0x24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f003 0307 	and.w	r3, r3, #7
 80056ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	f1c3 0307 	rsb	r3, r3, #7
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	bf28      	it	cs
 80056da:	2304      	movcs	r3, #4
 80056dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	3304      	adds	r3, #4
 80056e2:	2b06      	cmp	r3, #6
 80056e4:	d902      	bls.n	80056ec <NVIC_EncodePriority+0x30>
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	3b03      	subs	r3, #3
 80056ea:	e000      	b.n	80056ee <NVIC_EncodePriority+0x32>
 80056ec:	2300      	movs	r3, #0
 80056ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056f0:	f04f 32ff 	mov.w	r2, #4294967295
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	fa02 f303 	lsl.w	r3, r2, r3
 80056fa:	43da      	mvns	r2, r3
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	401a      	ands	r2, r3
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005704:	f04f 31ff 	mov.w	r1, #4294967295
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	fa01 f303 	lsl.w	r3, r1, r3
 800570e:	43d9      	mvns	r1, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005714:	4313      	orrs	r3, r2
         );
}
 8005716:	4618      	mov	r0, r3
 8005718:	3724      	adds	r7, #36	; 0x24
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
	...

08005724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3b01      	subs	r3, #1
 8005730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005734:	d301      	bcc.n	800573a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005736:	2301      	movs	r3, #1
 8005738:	e00f      	b.n	800575a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800573a:	4a0a      	ldr	r2, [pc, #40]	; (8005764 <SysTick_Config+0x40>)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3b01      	subs	r3, #1
 8005740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005742:	210f      	movs	r1, #15
 8005744:	f04f 30ff 	mov.w	r0, #4294967295
 8005748:	f7ff ff8e 	bl	8005668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800574c:	4b05      	ldr	r3, [pc, #20]	; (8005764 <SysTick_Config+0x40>)
 800574e:	2200      	movs	r2, #0
 8005750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005752:	4b04      	ldr	r3, [pc, #16]	; (8005764 <SysTick_Config+0x40>)
 8005754:	2207      	movs	r2, #7
 8005756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	e000e010 	.word	0xe000e010

08005768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7ff ff05 	bl	8005580 <__NVIC_SetPriorityGrouping>
}
 8005776:	bf00      	nop
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800577e:	b580      	push	{r7, lr}
 8005780:	b086      	sub	sp, #24
 8005782:	af00      	add	r7, sp, #0
 8005784:	4603      	mov	r3, r0
 8005786:	60b9      	str	r1, [r7, #8]
 8005788:	607a      	str	r2, [r7, #4]
 800578a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800578c:	2300      	movs	r3, #0
 800578e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005790:	f7ff ff1a 	bl	80055c8 <__NVIC_GetPriorityGrouping>
 8005794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	68b9      	ldr	r1, [r7, #8]
 800579a:	6978      	ldr	r0, [r7, #20]
 800579c:	f7ff ff8e 	bl	80056bc <NVIC_EncodePriority>
 80057a0:	4602      	mov	r2, r0
 80057a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057a6:	4611      	mov	r1, r2
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff ff5d 	bl	8005668 <__NVIC_SetPriority>
}
 80057ae:	bf00      	nop
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b082      	sub	sp, #8
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	4603      	mov	r3, r0
 80057be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7ff ff0d 	bl	80055e4 <__NVIC_EnableIRQ>
}
 80057ca:	bf00      	nop
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b082      	sub	sp, #8
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	4603      	mov	r3, r0
 80057da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80057dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff ff1d 	bl	8005620 <__NVIC_DisableIRQ>
}
 80057e6:	bf00      	nop
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b082      	sub	sp, #8
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7ff ff94 	bl	8005724 <SysTick_Config>
 80057fc:	4603      	mov	r3, r0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
	...

08005808 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005814:	f7ff fe84 	bl	8005520 <HAL_GetTick>
 8005818:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e099      	b.n	8005958 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 0201 	bic.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005844:	e00f      	b.n	8005866 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005846:	f7ff fe6b 	bl	8005520 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b05      	cmp	r3, #5
 8005852:	d908      	bls.n	8005866 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2220      	movs	r2, #32
 8005858:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2203      	movs	r2, #3
 800585e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e078      	b.n	8005958 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1e8      	bne.n	8005846 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	4b38      	ldr	r3, [pc, #224]	; (8005960 <HAL_DMA_Init+0x158>)
 8005880:	4013      	ands	r3, r2
 8005882:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005892:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800589e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	2b04      	cmp	r3, #4
 80058be:	d107      	bne.n	80058d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c8:	4313      	orrs	r3, r2
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f023 0307 	bic.w	r3, r3, #7
 80058e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f6:	2b04      	cmp	r3, #4
 80058f8:	d117      	bne.n	800592a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	4313      	orrs	r3, r2
 8005902:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00e      	beq.n	800592a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f9e9 	bl	8005ce4 <DMA_CheckFifoParam>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d008      	beq.n	800592a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2240      	movs	r2, #64	; 0x40
 800591c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2201      	movs	r2, #1
 8005922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005926:	2301      	movs	r3, #1
 8005928:	e016      	b.n	8005958 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f9a0 	bl	8005c78 <DMA_CalcBaseAndBitshift>
 8005938:	4603      	mov	r3, r0
 800593a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005940:	223f      	movs	r2, #63	; 0x3f
 8005942:	409a      	lsls	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3718      	adds	r7, #24
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	f010803f 	.word	0xf010803f

08005964 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800596c:	2300      	movs	r3, #0
 800596e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005970:	4b8e      	ldr	r3, [pc, #568]	; (8005bac <HAL_DMA_IRQHandler+0x248>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a8e      	ldr	r2, [pc, #568]	; (8005bb0 <HAL_DMA_IRQHandler+0x24c>)
 8005976:	fba2 2303 	umull	r2, r3, r2, r3
 800597a:	0a9b      	lsrs	r3, r3, #10
 800597c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005982:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800598e:	2208      	movs	r2, #8
 8005990:	409a      	lsls	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	4013      	ands	r3, r2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d01a      	beq.n	80059d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d013      	beq.n	80059d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0204 	bic.w	r2, r2, #4
 80059b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059bc:	2208      	movs	r2, #8
 80059be:	409a      	lsls	r2, r3
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c8:	f043 0201 	orr.w	r2, r3, #1
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d4:	2201      	movs	r2, #1
 80059d6:	409a      	lsls	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4013      	ands	r3, r2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d012      	beq.n	8005a06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00b      	beq.n	8005a06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f2:	2201      	movs	r2, #1
 80059f4:	409a      	lsls	r2, r3
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059fe:	f043 0202 	orr.w	r2, r3, #2
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a0a:	2204      	movs	r2, #4
 8005a0c:	409a      	lsls	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4013      	ands	r3, r2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d012      	beq.n	8005a3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00b      	beq.n	8005a3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a28:	2204      	movs	r2, #4
 8005a2a:	409a      	lsls	r2, r3
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a34:	f043 0204 	orr.w	r2, r3, #4
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a40:	2210      	movs	r2, #16
 8005a42:	409a      	lsls	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4013      	ands	r3, r2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d043      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0308 	and.w	r3, r3, #8
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d03c      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a5e:	2210      	movs	r2, #16
 8005a60:	409a      	lsls	r2, r3
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d018      	beq.n	8005aa6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d108      	bne.n	8005a94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d024      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	4798      	blx	r3
 8005a92:	e01f      	b.n	8005ad4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d01b      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	4798      	blx	r3
 8005aa4:	e016      	b.n	8005ad4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d107      	bne.n	8005ac4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0208 	bic.w	r2, r2, #8
 8005ac2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad8:	2220      	movs	r2, #32
 8005ada:	409a      	lsls	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 808f 	beq.w	8005c04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0310 	and.w	r3, r3, #16
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 8087 	beq.w	8005c04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005afa:	2220      	movs	r2, #32
 8005afc:	409a      	lsls	r2, r3
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b05      	cmp	r3, #5
 8005b0c:	d136      	bne.n	8005b7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 0216 	bic.w	r2, r2, #22
 8005b1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	695a      	ldr	r2, [r3, #20]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d103      	bne.n	8005b3e <HAL_DMA_IRQHandler+0x1da>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d007      	beq.n	8005b4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0208 	bic.w	r2, r2, #8
 8005b4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b52:	223f      	movs	r2, #63	; 0x3f
 8005b54:	409a      	lsls	r2, r3
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d07e      	beq.n	8005c70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	4798      	blx	r3
        }
        return;
 8005b7a:	e079      	b.n	8005c70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d01d      	beq.n	8005bc6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10d      	bne.n	8005bb4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d031      	beq.n	8005c04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	4798      	blx	r3
 8005ba8:	e02c      	b.n	8005c04 <HAL_DMA_IRQHandler+0x2a0>
 8005baa:	bf00      	nop
 8005bac:	2000003c 	.word	0x2000003c
 8005bb0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d023      	beq.n	8005c04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	4798      	blx	r3
 8005bc4:	e01e      	b.n	8005c04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10f      	bne.n	8005bf4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0210 	bic.w	r2, r2, #16
 8005be2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d032      	beq.n	8005c72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d022      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2205      	movs	r2, #5
 8005c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 0201 	bic.w	r2, r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	3301      	adds	r3, #1
 8005c34:	60bb      	str	r3, [r7, #8]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d307      	bcc.n	8005c4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1f2      	bne.n	8005c30 <HAL_DMA_IRQHandler+0x2cc>
 8005c4a:	e000      	b.n	8005c4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005c4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d005      	beq.n	8005c72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	4798      	blx	r3
 8005c6e:	e000      	b.n	8005c72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005c70:	bf00      	nop
    }
  }
}
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	3b10      	subs	r3, #16
 8005c88:	4a14      	ldr	r2, [pc, #80]	; (8005cdc <DMA_CalcBaseAndBitshift+0x64>)
 8005c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8e:	091b      	lsrs	r3, r3, #4
 8005c90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005c92:	4a13      	ldr	r2, [pc, #76]	; (8005ce0 <DMA_CalcBaseAndBitshift+0x68>)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	d909      	bls.n	8005cba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005cae:	f023 0303 	bic.w	r3, r3, #3
 8005cb2:	1d1a      	adds	r2, r3, #4
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	659a      	str	r2, [r3, #88]	; 0x58
 8005cb8:	e007      	b.n	8005cca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005cc2:	f023 0303 	bic.w	r3, r3, #3
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	aaaaaaab 	.word	0xaaaaaaab
 8005ce0:	0800dba0 	.word	0x0800dba0

08005ce4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cec:	2300      	movs	r3, #0
 8005cee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d11f      	bne.n	8005d3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d856      	bhi.n	8005db2 <DMA_CheckFifoParam+0xce>
 8005d04:	a201      	add	r2, pc, #4	; (adr r2, 8005d0c <DMA_CheckFifoParam+0x28>)
 8005d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0a:	bf00      	nop
 8005d0c:	08005d1d 	.word	0x08005d1d
 8005d10:	08005d2f 	.word	0x08005d2f
 8005d14:	08005d1d 	.word	0x08005d1d
 8005d18:	08005db3 	.word	0x08005db3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d046      	beq.n	8005db6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d2c:	e043      	b.n	8005db6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d36:	d140      	bne.n	8005dba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d3c:	e03d      	b.n	8005dba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d46:	d121      	bne.n	8005d8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d837      	bhi.n	8005dbe <DMA_CheckFifoParam+0xda>
 8005d4e:	a201      	add	r2, pc, #4	; (adr r2, 8005d54 <DMA_CheckFifoParam+0x70>)
 8005d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d54:	08005d65 	.word	0x08005d65
 8005d58:	08005d6b 	.word	0x08005d6b
 8005d5c:	08005d65 	.word	0x08005d65
 8005d60:	08005d7d 	.word	0x08005d7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	73fb      	strb	r3, [r7, #15]
      break;
 8005d68:	e030      	b.n	8005dcc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d025      	beq.n	8005dc2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d7a:	e022      	b.n	8005dc2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d84:	d11f      	bne.n	8005dc6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005d8a:	e01c      	b.n	8005dc6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d903      	bls.n	8005d9a <DMA_CheckFifoParam+0xb6>
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b03      	cmp	r3, #3
 8005d96:	d003      	beq.n	8005da0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005d98:	e018      	b.n	8005dcc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8005d9e:	e015      	b.n	8005dcc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00e      	beq.n	8005dca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	73fb      	strb	r3, [r7, #15]
      break;
 8005db0:	e00b      	b.n	8005dca <DMA_CheckFifoParam+0xe6>
      break;
 8005db2:	bf00      	nop
 8005db4:	e00a      	b.n	8005dcc <DMA_CheckFifoParam+0xe8>
      break;
 8005db6:	bf00      	nop
 8005db8:	e008      	b.n	8005dcc <DMA_CheckFifoParam+0xe8>
      break;
 8005dba:	bf00      	nop
 8005dbc:	e006      	b.n	8005dcc <DMA_CheckFifoParam+0xe8>
      break;
 8005dbe:	bf00      	nop
 8005dc0:	e004      	b.n	8005dcc <DMA_CheckFifoParam+0xe8>
      break;
 8005dc2:	bf00      	nop
 8005dc4:	e002      	b.n	8005dcc <DMA_CheckFifoParam+0xe8>
      break;   
 8005dc6:	bf00      	nop
 8005dc8:	e000      	b.n	8005dcc <DMA_CheckFifoParam+0xe8>
      break;
 8005dca:	bf00      	nop
    }
  } 
  
  return status; 
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop

08005ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b089      	sub	sp, #36	; 0x24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005df2:	2300      	movs	r3, #0
 8005df4:	61fb      	str	r3, [r7, #28]
 8005df6:	e16b      	b.n	80060d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005df8:	2201      	movs	r2, #1
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005e00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	4013      	ands	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	f040 815a 	bne.w	80060ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f003 0303 	and.w	r3, r3, #3
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d005      	beq.n	8005e2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d130      	bne.n	8005e90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	005b      	lsls	r3, r3, #1
 8005e38:	2203      	movs	r2, #3
 8005e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3e:	43db      	mvns	r3, r3
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	4013      	ands	r3, r2
 8005e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	005b      	lsls	r3, r3, #1
 8005e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e64:	2201      	movs	r2, #1
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6c:	43db      	mvns	r3, r3
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	4013      	ands	r3, r2
 8005e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	091b      	lsrs	r3, r3, #4
 8005e7a:	f003 0201 	and.w	r2, r3, #1
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	fa02 f303 	lsl.w	r3, r2, r3
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f003 0303 	and.w	r3, r3, #3
 8005e98:	2b03      	cmp	r3, #3
 8005e9a:	d017      	beq.n	8005ecc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	005b      	lsls	r3, r3, #1
 8005ea6:	2203      	movs	r2, #3
 8005ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eac:	43db      	mvns	r3, r3
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f003 0303 	and.w	r3, r3, #3
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d123      	bne.n	8005f20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	08da      	lsrs	r2, r3, #3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3208      	adds	r2, #8
 8005ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	f003 0307 	and.w	r3, r3, #7
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	220f      	movs	r2, #15
 8005ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef4:	43db      	mvns	r3, r3
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	4013      	ands	r3, r2
 8005efa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	691a      	ldr	r2, [r3, #16]
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	08da      	lsrs	r2, r3, #3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3208      	adds	r2, #8
 8005f1a:	69b9      	ldr	r1, [r7, #24]
 8005f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	005b      	lsls	r3, r3, #1
 8005f2a:	2203      	movs	r2, #3
 8005f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f30:	43db      	mvns	r3, r3
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	4013      	ands	r3, r2
 8005f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f003 0203 	and.w	r2, r3, #3
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	fa02 f303 	lsl.w	r3, r2, r3
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 80b4 	beq.w	80060ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f62:	2300      	movs	r3, #0
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	4b60      	ldr	r3, [pc, #384]	; (80060e8 <HAL_GPIO_Init+0x30c>)
 8005f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6a:	4a5f      	ldr	r2, [pc, #380]	; (80060e8 <HAL_GPIO_Init+0x30c>)
 8005f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f70:	6453      	str	r3, [r2, #68]	; 0x44
 8005f72:	4b5d      	ldr	r3, [pc, #372]	; (80060e8 <HAL_GPIO_Init+0x30c>)
 8005f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f7e:	4a5b      	ldr	r2, [pc, #364]	; (80060ec <HAL_GPIO_Init+0x310>)
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	089b      	lsrs	r3, r3, #2
 8005f84:	3302      	adds	r3, #2
 8005f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	f003 0303 	and.w	r3, r3, #3
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	220f      	movs	r2, #15
 8005f96:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9a:	43db      	mvns	r3, r3
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a52      	ldr	r2, [pc, #328]	; (80060f0 <HAL_GPIO_Init+0x314>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d02b      	beq.n	8006002 <HAL_GPIO_Init+0x226>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a51      	ldr	r2, [pc, #324]	; (80060f4 <HAL_GPIO_Init+0x318>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d025      	beq.n	8005ffe <HAL_GPIO_Init+0x222>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a50      	ldr	r2, [pc, #320]	; (80060f8 <HAL_GPIO_Init+0x31c>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d01f      	beq.n	8005ffa <HAL_GPIO_Init+0x21e>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a4f      	ldr	r2, [pc, #316]	; (80060fc <HAL_GPIO_Init+0x320>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d019      	beq.n	8005ff6 <HAL_GPIO_Init+0x21a>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a4e      	ldr	r2, [pc, #312]	; (8006100 <HAL_GPIO_Init+0x324>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d013      	beq.n	8005ff2 <HAL_GPIO_Init+0x216>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a4d      	ldr	r2, [pc, #308]	; (8006104 <HAL_GPIO_Init+0x328>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d00d      	beq.n	8005fee <HAL_GPIO_Init+0x212>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a4c      	ldr	r2, [pc, #304]	; (8006108 <HAL_GPIO_Init+0x32c>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d007      	beq.n	8005fea <HAL_GPIO_Init+0x20e>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a4b      	ldr	r2, [pc, #300]	; (800610c <HAL_GPIO_Init+0x330>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d101      	bne.n	8005fe6 <HAL_GPIO_Init+0x20a>
 8005fe2:	2307      	movs	r3, #7
 8005fe4:	e00e      	b.n	8006004 <HAL_GPIO_Init+0x228>
 8005fe6:	2308      	movs	r3, #8
 8005fe8:	e00c      	b.n	8006004 <HAL_GPIO_Init+0x228>
 8005fea:	2306      	movs	r3, #6
 8005fec:	e00a      	b.n	8006004 <HAL_GPIO_Init+0x228>
 8005fee:	2305      	movs	r3, #5
 8005ff0:	e008      	b.n	8006004 <HAL_GPIO_Init+0x228>
 8005ff2:	2304      	movs	r3, #4
 8005ff4:	e006      	b.n	8006004 <HAL_GPIO_Init+0x228>
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e004      	b.n	8006004 <HAL_GPIO_Init+0x228>
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	e002      	b.n	8006004 <HAL_GPIO_Init+0x228>
 8005ffe:	2301      	movs	r3, #1
 8006000:	e000      	b.n	8006004 <HAL_GPIO_Init+0x228>
 8006002:	2300      	movs	r3, #0
 8006004:	69fa      	ldr	r2, [r7, #28]
 8006006:	f002 0203 	and.w	r2, r2, #3
 800600a:	0092      	lsls	r2, r2, #2
 800600c:	4093      	lsls	r3, r2
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	4313      	orrs	r3, r2
 8006012:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006014:	4935      	ldr	r1, [pc, #212]	; (80060ec <HAL_GPIO_Init+0x310>)
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	089b      	lsrs	r3, r3, #2
 800601a:	3302      	adds	r3, #2
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006022:	4b3b      	ldr	r3, [pc, #236]	; (8006110 <HAL_GPIO_Init+0x334>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	43db      	mvns	r3, r3
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	4013      	ands	r3, r2
 8006030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	4313      	orrs	r3, r2
 8006044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006046:	4a32      	ldr	r2, [pc, #200]	; (8006110 <HAL_GPIO_Init+0x334>)
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800604c:	4b30      	ldr	r3, [pc, #192]	; (8006110 <HAL_GPIO_Init+0x334>)
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	43db      	mvns	r3, r3
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	4013      	ands	r3, r2
 800605a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	4313      	orrs	r3, r2
 800606e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006070:	4a27      	ldr	r2, [pc, #156]	; (8006110 <HAL_GPIO_Init+0x334>)
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006076:	4b26      	ldr	r3, [pc, #152]	; (8006110 <HAL_GPIO_Init+0x334>)
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	43db      	mvns	r3, r3
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	4013      	ands	r3, r2
 8006084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	4313      	orrs	r3, r2
 8006098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800609a:	4a1d      	ldr	r2, [pc, #116]	; (8006110 <HAL_GPIO_Init+0x334>)
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80060a0:	4b1b      	ldr	r3, [pc, #108]	; (8006110 <HAL_GPIO_Init+0x334>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	43db      	mvns	r3, r3
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	4013      	ands	r3, r2
 80060ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d003      	beq.n	80060c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80060c4:	4a12      	ldr	r2, [pc, #72]	; (8006110 <HAL_GPIO_Init+0x334>)
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	3301      	adds	r3, #1
 80060ce:	61fb      	str	r3, [r7, #28]
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	2b0f      	cmp	r3, #15
 80060d4:	f67f ae90 	bls.w	8005df8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80060d8:	bf00      	nop
 80060da:	bf00      	nop
 80060dc:	3724      	adds	r7, #36	; 0x24
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	40023800 	.word	0x40023800
 80060ec:	40013800 	.word	0x40013800
 80060f0:	40020000 	.word	0x40020000
 80060f4:	40020400 	.word	0x40020400
 80060f8:	40020800 	.word	0x40020800
 80060fc:	40020c00 	.word	0x40020c00
 8006100:	40021000 	.word	0x40021000
 8006104:	40021400 	.word	0x40021400
 8006108:	40021800 	.word	0x40021800
 800610c:	40021c00 	.word	0x40021c00
 8006110:	40013c00 	.word	0x40013c00

08006114 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	691a      	ldr	r2, [r3, #16]
 8006124:	887b      	ldrh	r3, [r7, #2]
 8006126:	4013      	ands	r3, r2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800612c:	2301      	movs	r3, #1
 800612e:	73fb      	strb	r3, [r7, #15]
 8006130:	e001      	b.n	8006136 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006132:	2300      	movs	r3, #0
 8006134:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006136:	7bfb      	ldrb	r3, [r7, #15]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3714      	adds	r7, #20
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	807b      	strh	r3, [r7, #2]
 8006150:	4613      	mov	r3, r2
 8006152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006154:	787b      	ldrb	r3, [r7, #1]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800615a:	887a      	ldrh	r2, [r7, #2]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006160:	e003      	b.n	800616a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006162:	887b      	ldrh	r3, [r7, #2]
 8006164:	041a      	lsls	r2, r3, #16
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	619a      	str	r2, [r3, #24]
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
	...

08006178 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e12b      	b.n	80063e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d106      	bne.n	80061a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7fc fe5c 	bl	8002e5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2224      	movs	r2, #36	; 0x24
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0201 	bic.w	r2, r2, #1
 80061ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80061dc:	f001 f8aa 	bl	8007334 <HAL_RCC_GetPCLK1Freq>
 80061e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	4a81      	ldr	r2, [pc, #516]	; (80063ec <HAL_I2C_Init+0x274>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d807      	bhi.n	80061fc <HAL_I2C_Init+0x84>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4a80      	ldr	r2, [pc, #512]	; (80063f0 <HAL_I2C_Init+0x278>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	bf94      	ite	ls
 80061f4:	2301      	movls	r3, #1
 80061f6:	2300      	movhi	r3, #0
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	e006      	b.n	800620a <HAL_I2C_Init+0x92>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4a7d      	ldr	r2, [pc, #500]	; (80063f4 <HAL_I2C_Init+0x27c>)
 8006200:	4293      	cmp	r3, r2
 8006202:	bf94      	ite	ls
 8006204:	2301      	movls	r3, #1
 8006206:	2300      	movhi	r3, #0
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e0e7      	b.n	80063e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	4a78      	ldr	r2, [pc, #480]	; (80063f8 <HAL_I2C_Init+0x280>)
 8006216:	fba2 2303 	umull	r2, r3, r2, r3
 800621a:	0c9b      	lsrs	r3, r3, #18
 800621c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	430a      	orrs	r2, r1
 8006230:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	4a6a      	ldr	r2, [pc, #424]	; (80063ec <HAL_I2C_Init+0x274>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d802      	bhi.n	800624c <HAL_I2C_Init+0xd4>
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	3301      	adds	r3, #1
 800624a:	e009      	b.n	8006260 <HAL_I2C_Init+0xe8>
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006252:	fb02 f303 	mul.w	r3, r2, r3
 8006256:	4a69      	ldr	r2, [pc, #420]	; (80063fc <HAL_I2C_Init+0x284>)
 8006258:	fba2 2303 	umull	r2, r3, r2, r3
 800625c:	099b      	lsrs	r3, r3, #6
 800625e:	3301      	adds	r3, #1
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	6812      	ldr	r2, [r2, #0]
 8006264:	430b      	orrs	r3, r1
 8006266:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006272:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	495c      	ldr	r1, [pc, #368]	; (80063ec <HAL_I2C_Init+0x274>)
 800627c:	428b      	cmp	r3, r1
 800627e:	d819      	bhi.n	80062b4 <HAL_I2C_Init+0x13c>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	1e59      	subs	r1, r3, #1
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	fbb1 f3f3 	udiv	r3, r1, r3
 800628e:	1c59      	adds	r1, r3, #1
 8006290:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006294:	400b      	ands	r3, r1
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00a      	beq.n	80062b0 <HAL_I2C_Init+0x138>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	1e59      	subs	r1, r3, #1
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80062a8:	3301      	adds	r3, #1
 80062aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ae:	e051      	b.n	8006354 <HAL_I2C_Init+0x1dc>
 80062b0:	2304      	movs	r3, #4
 80062b2:	e04f      	b.n	8006354 <HAL_I2C_Init+0x1dc>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d111      	bne.n	80062e0 <HAL_I2C_Init+0x168>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	1e58      	subs	r0, r3, #1
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6859      	ldr	r1, [r3, #4]
 80062c4:	460b      	mov	r3, r1
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	440b      	add	r3, r1
 80062ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80062ce:	3301      	adds	r3, #1
 80062d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	bf0c      	ite	eq
 80062d8:	2301      	moveq	r3, #1
 80062da:	2300      	movne	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	e012      	b.n	8006306 <HAL_I2C_Init+0x18e>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	1e58      	subs	r0, r3, #1
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6859      	ldr	r1, [r3, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	440b      	add	r3, r1
 80062ee:	0099      	lsls	r1, r3, #2
 80062f0:	440b      	add	r3, r1
 80062f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80062f6:	3301      	adds	r3, #1
 80062f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	bf0c      	ite	eq
 8006300:	2301      	moveq	r3, #1
 8006302:	2300      	movne	r3, #0
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <HAL_I2C_Init+0x196>
 800630a:	2301      	movs	r3, #1
 800630c:	e022      	b.n	8006354 <HAL_I2C_Init+0x1dc>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10e      	bne.n	8006334 <HAL_I2C_Init+0x1bc>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	1e58      	subs	r0, r3, #1
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6859      	ldr	r1, [r3, #4]
 800631e:	460b      	mov	r3, r1
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	440b      	add	r3, r1
 8006324:	fbb0 f3f3 	udiv	r3, r0, r3
 8006328:	3301      	adds	r3, #1
 800632a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800632e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006332:	e00f      	b.n	8006354 <HAL_I2C_Init+0x1dc>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	1e58      	subs	r0, r3, #1
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6859      	ldr	r1, [r3, #4]
 800633c:	460b      	mov	r3, r1
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	440b      	add	r3, r1
 8006342:	0099      	lsls	r1, r3, #2
 8006344:	440b      	add	r3, r1
 8006346:	fbb0 f3f3 	udiv	r3, r0, r3
 800634a:	3301      	adds	r3, #1
 800634c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006350:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006354:	6879      	ldr	r1, [r7, #4]
 8006356:	6809      	ldr	r1, [r1, #0]
 8006358:	4313      	orrs	r3, r2
 800635a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	69da      	ldr	r2, [r3, #28]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006382:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	6911      	ldr	r1, [r2, #16]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	68d2      	ldr	r2, [r2, #12]
 800638e:	4311      	orrs	r1, r2
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	6812      	ldr	r2, [r2, #0]
 8006394:	430b      	orrs	r3, r1
 8006396:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	695a      	ldr	r2, [r3, #20]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	431a      	orrs	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0201 	orr.w	r2, r2, #1
 80063c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2220      	movs	r2, #32
 80063ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	000186a0 	.word	0x000186a0
 80063f0:	001e847f 	.word	0x001e847f
 80063f4:	003d08ff 	.word	0x003d08ff
 80063f8:	431bde83 	.word	0x431bde83
 80063fc:	10624dd3 	.word	0x10624dd3

08006400 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b088      	sub	sp, #32
 8006404:	af02      	add	r7, sp, #8
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	4608      	mov	r0, r1
 800640a:	4611      	mov	r1, r2
 800640c:	461a      	mov	r2, r3
 800640e:	4603      	mov	r3, r0
 8006410:	817b      	strh	r3, [r7, #10]
 8006412:	460b      	mov	r3, r1
 8006414:	813b      	strh	r3, [r7, #8]
 8006416:	4613      	mov	r3, r2
 8006418:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800641a:	f7ff f881 	bl	8005520 <HAL_GetTick>
 800641e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b20      	cmp	r3, #32
 800642a:	f040 80d9 	bne.w	80065e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	2319      	movs	r3, #25
 8006434:	2201      	movs	r2, #1
 8006436:	496d      	ldr	r1, [pc, #436]	; (80065ec <HAL_I2C_Mem_Write+0x1ec>)
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f000 f971 	bl	8006720 <I2C_WaitOnFlagUntilTimeout>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006444:	2302      	movs	r3, #2
 8006446:	e0cc      	b.n	80065e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800644e:	2b01      	cmp	r3, #1
 8006450:	d101      	bne.n	8006456 <HAL_I2C_Mem_Write+0x56>
 8006452:	2302      	movs	r3, #2
 8006454:	e0c5      	b.n	80065e2 <HAL_I2C_Mem_Write+0x1e2>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	2b01      	cmp	r3, #1
 800646a:	d007      	beq.n	800647c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0201 	orr.w	r2, r2, #1
 800647a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800648a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2221      	movs	r2, #33	; 0x21
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2240      	movs	r2, #64	; 0x40
 8006498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6a3a      	ldr	r2, [r7, #32]
 80064a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80064ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4a4d      	ldr	r2, [pc, #308]	; (80065f0 <HAL_I2C_Mem_Write+0x1f0>)
 80064bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80064be:	88f8      	ldrh	r0, [r7, #6]
 80064c0:	893a      	ldrh	r2, [r7, #8]
 80064c2:	8979      	ldrh	r1, [r7, #10]
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	9301      	str	r3, [sp, #4]
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	4603      	mov	r3, r0
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 f890 	bl	80065f4 <I2C_RequestMemoryWrite>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d052      	beq.n	8006580 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e081      	b.n	80065e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f000 fa36 	bl	8006954 <I2C_WaitOnTXEFlagUntilTimeout>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00d      	beq.n	800650a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	d107      	bne.n	8006506 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006504:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e06b      	b.n	80065e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650e:	781a      	ldrb	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	1c5a      	adds	r2, r3, #1
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006524:	3b01      	subs	r3, #1
 8006526:	b29a      	uxth	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006530:	b29b      	uxth	r3, r3
 8006532:	3b01      	subs	r3, #1
 8006534:	b29a      	uxth	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	2b04      	cmp	r3, #4
 8006546:	d11b      	bne.n	8006580 <HAL_I2C_Mem_Write+0x180>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800654c:	2b00      	cmp	r3, #0
 800654e:	d017      	beq.n	8006580 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006554:	781a      	ldrb	r2, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800656a:	3b01      	subs	r3, #1
 800656c:	b29a      	uxth	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006576:	b29b      	uxth	r3, r3
 8006578:	3b01      	subs	r3, #1
 800657a:	b29a      	uxth	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1aa      	bne.n	80064de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 fa29 	bl	80069e4 <I2C_WaitOnBTFFlagUntilTimeout>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00d      	beq.n	80065b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659c:	2b04      	cmp	r3, #4
 800659e:	d107      	bne.n	80065b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e016      	b.n	80065e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2220      	movs	r2, #32
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	e000      	b.n	80065e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80065e0:	2302      	movs	r3, #2
  }
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	00100002 	.word	0x00100002
 80065f0:	ffff0000 	.word	0xffff0000

080065f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b088      	sub	sp, #32
 80065f8:	af02      	add	r7, sp, #8
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	4608      	mov	r0, r1
 80065fe:	4611      	mov	r1, r2
 8006600:	461a      	mov	r2, r3
 8006602:	4603      	mov	r3, r0
 8006604:	817b      	strh	r3, [r7, #10]
 8006606:	460b      	mov	r3, r1
 8006608:	813b      	strh	r3, [r7, #8]
 800660a:	4613      	mov	r3, r2
 800660c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800661c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	6a3b      	ldr	r3, [r7, #32]
 8006624:	2200      	movs	r2, #0
 8006626:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f000 f878 	bl	8006720 <I2C_WaitOnFlagUntilTimeout>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00d      	beq.n	8006652 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006644:	d103      	bne.n	800664e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800664c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e05f      	b.n	8006712 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006652:	897b      	ldrh	r3, [r7, #10]
 8006654:	b2db      	uxtb	r3, r3
 8006656:	461a      	mov	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006660:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006664:	6a3a      	ldr	r2, [r7, #32]
 8006666:	492d      	ldr	r1, [pc, #180]	; (800671c <I2C_RequestMemoryWrite+0x128>)
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 f8d3 	bl	8006814 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e04c      	b.n	8006712 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006678:	2300      	movs	r3, #0
 800667a:	617b      	str	r3, [r7, #20]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	617b      	str	r3, [r7, #20]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	617b      	str	r3, [r7, #20]
 800668c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800668e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006690:	6a39      	ldr	r1, [r7, #32]
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f000 f95e 	bl	8006954 <I2C_WaitOnTXEFlagUntilTimeout>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00d      	beq.n	80066ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	2b04      	cmp	r3, #4
 80066a4:	d107      	bne.n	80066b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e02b      	b.n	8006712 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066ba:	88fb      	ldrh	r3, [r7, #6]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d105      	bne.n	80066cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066c0:	893b      	ldrh	r3, [r7, #8]
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	611a      	str	r2, [r3, #16]
 80066ca:	e021      	b.n	8006710 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80066cc:	893b      	ldrh	r3, [r7, #8]
 80066ce:	0a1b      	lsrs	r3, r3, #8
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066dc:	6a39      	ldr	r1, [r7, #32]
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f000 f938 	bl	8006954 <I2C_WaitOnTXEFlagUntilTimeout>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00d      	beq.n	8006706 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d107      	bne.n	8006702 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006700:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e005      	b.n	8006712 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006706:	893b      	ldrh	r3, [r7, #8]
 8006708:	b2da      	uxtb	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3718      	adds	r7, #24
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	00010002 	.word	0x00010002

08006720 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	603b      	str	r3, [r7, #0]
 800672c:	4613      	mov	r3, r2
 800672e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006730:	e048      	b.n	80067c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006738:	d044      	beq.n	80067c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800673a:	f7fe fef1 	bl	8005520 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	429a      	cmp	r2, r3
 8006748:	d302      	bcc.n	8006750 <I2C_WaitOnFlagUntilTimeout+0x30>
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d139      	bne.n	80067c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	0c1b      	lsrs	r3, r3, #16
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b01      	cmp	r3, #1
 8006758:	d10d      	bne.n	8006776 <I2C_WaitOnFlagUntilTimeout+0x56>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	43da      	mvns	r2, r3
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	4013      	ands	r3, r2
 8006766:	b29b      	uxth	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	bf0c      	ite	eq
 800676c:	2301      	moveq	r3, #1
 800676e:	2300      	movne	r3, #0
 8006770:	b2db      	uxtb	r3, r3
 8006772:	461a      	mov	r2, r3
 8006774:	e00c      	b.n	8006790 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	43da      	mvns	r2, r3
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	4013      	ands	r3, r2
 8006782:	b29b      	uxth	r3, r3
 8006784:	2b00      	cmp	r3, #0
 8006786:	bf0c      	ite	eq
 8006788:	2301      	moveq	r3, #1
 800678a:	2300      	movne	r3, #0
 800678c:	b2db      	uxtb	r3, r3
 800678e:	461a      	mov	r2, r3
 8006790:	79fb      	ldrb	r3, [r7, #7]
 8006792:	429a      	cmp	r2, r3
 8006794:	d116      	bne.n	80067c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2220      	movs	r2, #32
 80067a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b0:	f043 0220 	orr.w	r2, r3, #32
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e023      	b.n	800680c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	0c1b      	lsrs	r3, r3, #16
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d10d      	bne.n	80067ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	43da      	mvns	r2, r3
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	4013      	ands	r3, r2
 80067da:	b29b      	uxth	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	bf0c      	ite	eq
 80067e0:	2301      	moveq	r3, #1
 80067e2:	2300      	movne	r3, #0
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	461a      	mov	r2, r3
 80067e8:	e00c      	b.n	8006804 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	43da      	mvns	r2, r3
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	4013      	ands	r3, r2
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	bf0c      	ite	eq
 80067fc:	2301      	moveq	r3, #1
 80067fe:	2300      	movne	r3, #0
 8006800:	b2db      	uxtb	r3, r3
 8006802:	461a      	mov	r2, r3
 8006804:	79fb      	ldrb	r3, [r7, #7]
 8006806:	429a      	cmp	r2, r3
 8006808:	d093      	beq.n	8006732 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006822:	e071      	b.n	8006908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800682e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006832:	d123      	bne.n	800687c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006842:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800684c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2220      	movs	r2, #32
 8006858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006868:	f043 0204 	orr.w	r2, r3, #4
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e067      	b.n	800694c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006882:	d041      	beq.n	8006908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006884:	f7fe fe4c 	bl	8005520 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	429a      	cmp	r2, r3
 8006892:	d302      	bcc.n	800689a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d136      	bne.n	8006908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	0c1b      	lsrs	r3, r3, #16
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d10c      	bne.n	80068be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	43da      	mvns	r2, r3
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	4013      	ands	r3, r2
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	bf14      	ite	ne
 80068b6:	2301      	movne	r3, #1
 80068b8:	2300      	moveq	r3, #0
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	e00b      	b.n	80068d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	43da      	mvns	r2, r3
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	4013      	ands	r3, r2
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	bf14      	ite	ne
 80068d0:	2301      	movne	r3, #1
 80068d2:	2300      	moveq	r3, #0
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d016      	beq.n	8006908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2220      	movs	r2, #32
 80068e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f4:	f043 0220 	orr.w	r2, r3, #32
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e021      	b.n	800694c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	0c1b      	lsrs	r3, r3, #16
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b01      	cmp	r3, #1
 8006910:	d10c      	bne.n	800692c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	43da      	mvns	r2, r3
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	4013      	ands	r3, r2
 800691e:	b29b      	uxth	r3, r3
 8006920:	2b00      	cmp	r3, #0
 8006922:	bf14      	ite	ne
 8006924:	2301      	movne	r3, #1
 8006926:	2300      	moveq	r3, #0
 8006928:	b2db      	uxtb	r3, r3
 800692a:	e00b      	b.n	8006944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	43da      	mvns	r2, r3
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	4013      	ands	r3, r2
 8006938:	b29b      	uxth	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	bf14      	ite	ne
 800693e:	2301      	movne	r3, #1
 8006940:	2300      	moveq	r3, #0
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	f47f af6d 	bne.w	8006824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006960:	e034      	b.n	80069cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f000 f886 	bl	8006a74 <I2C_IsAcknowledgeFailed>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e034      	b.n	80069dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006978:	d028      	beq.n	80069cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800697a:	f7fe fdd1 	bl	8005520 <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	429a      	cmp	r2, r3
 8006988:	d302      	bcc.n	8006990 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d11d      	bne.n	80069cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800699a:	2b80      	cmp	r3, #128	; 0x80
 800699c:	d016      	beq.n	80069cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b8:	f043 0220 	orr.w	r2, r3, #32
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e007      	b.n	80069dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d6:	2b80      	cmp	r3, #128	; 0x80
 80069d8:	d1c3      	bne.n	8006962 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069f0:	e034      	b.n	8006a5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f000 f83e 	bl	8006a74 <I2C_IsAcknowledgeFailed>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e034      	b.n	8006a6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a08:	d028      	beq.n	8006a5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a0a:	f7fe fd89 	bl	8005520 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d302      	bcc.n	8006a20 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d11d      	bne.n	8006a5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	f003 0304 	and.w	r3, r3, #4
 8006a2a:	2b04      	cmp	r3, #4
 8006a2c:	d016      	beq.n	8006a5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2220      	movs	r2, #32
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a48:	f043 0220 	orr.w	r2, r3, #32
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e007      	b.n	8006a6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	f003 0304 	and.w	r3, r3, #4
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d1c3      	bne.n	80069f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a8a:	d11b      	bne.n	8006ac4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2220      	movs	r2, #32
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab0:	f043 0204 	orr.w	r2, r3, #4
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e000      	b.n	8006ac6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
	...

08006ad4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e267      	b.n	8006fb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d075      	beq.n	8006bde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006af2:	4b88      	ldr	r3, [pc, #544]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f003 030c 	and.w	r3, r3, #12
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d00c      	beq.n	8006b18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006afe:	4b85      	ldr	r3, [pc, #532]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b06:	2b08      	cmp	r3, #8
 8006b08:	d112      	bne.n	8006b30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b0a:	4b82      	ldr	r3, [pc, #520]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b16:	d10b      	bne.n	8006b30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b18:	4b7e      	ldr	r3, [pc, #504]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d05b      	beq.n	8006bdc <HAL_RCC_OscConfig+0x108>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d157      	bne.n	8006bdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e242      	b.n	8006fb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b38:	d106      	bne.n	8006b48 <HAL_RCC_OscConfig+0x74>
 8006b3a:	4b76      	ldr	r3, [pc, #472]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a75      	ldr	r2, [pc, #468]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b44:	6013      	str	r3, [r2, #0]
 8006b46:	e01d      	b.n	8006b84 <HAL_RCC_OscConfig+0xb0>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b50:	d10c      	bne.n	8006b6c <HAL_RCC_OscConfig+0x98>
 8006b52:	4b70      	ldr	r3, [pc, #448]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a6f      	ldr	r2, [pc, #444]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b5c:	6013      	str	r3, [r2, #0]
 8006b5e:	4b6d      	ldr	r3, [pc, #436]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a6c      	ldr	r2, [pc, #432]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b68:	6013      	str	r3, [r2, #0]
 8006b6a:	e00b      	b.n	8006b84 <HAL_RCC_OscConfig+0xb0>
 8006b6c:	4b69      	ldr	r3, [pc, #420]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a68      	ldr	r2, [pc, #416]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b76:	6013      	str	r3, [r2, #0]
 8006b78:	4b66      	ldr	r3, [pc, #408]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a65      	ldr	r2, [pc, #404]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d013      	beq.n	8006bb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b8c:	f7fe fcc8 	bl	8005520 <HAL_GetTick>
 8006b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b92:	e008      	b.n	8006ba6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b94:	f7fe fcc4 	bl	8005520 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b64      	cmp	r3, #100	; 0x64
 8006ba0:	d901      	bls.n	8006ba6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e207      	b.n	8006fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ba6:	4b5b      	ldr	r3, [pc, #364]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d0f0      	beq.n	8006b94 <HAL_RCC_OscConfig+0xc0>
 8006bb2:	e014      	b.n	8006bde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bb4:	f7fe fcb4 	bl	8005520 <HAL_GetTick>
 8006bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bba:	e008      	b.n	8006bce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bbc:	f7fe fcb0 	bl	8005520 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b64      	cmp	r3, #100	; 0x64
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e1f3      	b.n	8006fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bce:	4b51      	ldr	r3, [pc, #324]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1f0      	bne.n	8006bbc <HAL_RCC_OscConfig+0xe8>
 8006bda:	e000      	b.n	8006bde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d063      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bea:	4b4a      	ldr	r3, [pc, #296]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f003 030c 	and.w	r3, r3, #12
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00b      	beq.n	8006c0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bf6:	4b47      	ldr	r3, [pc, #284]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bfe:	2b08      	cmp	r3, #8
 8006c00:	d11c      	bne.n	8006c3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c02:	4b44      	ldr	r3, [pc, #272]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d116      	bne.n	8006c3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c0e:	4b41      	ldr	r3, [pc, #260]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d005      	beq.n	8006c26 <HAL_RCC_OscConfig+0x152>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d001      	beq.n	8006c26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e1c7      	b.n	8006fb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c26:	4b3b      	ldr	r3, [pc, #236]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	00db      	lsls	r3, r3, #3
 8006c34:	4937      	ldr	r1, [pc, #220]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006c36:	4313      	orrs	r3, r2
 8006c38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c3a:	e03a      	b.n	8006cb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d020      	beq.n	8006c86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c44:	4b34      	ldr	r3, [pc, #208]	; (8006d18 <HAL_RCC_OscConfig+0x244>)
 8006c46:	2201      	movs	r2, #1
 8006c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c4a:	f7fe fc69 	bl	8005520 <HAL_GetTick>
 8006c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c50:	e008      	b.n	8006c64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c52:	f7fe fc65 	bl	8005520 <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d901      	bls.n	8006c64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e1a8      	b.n	8006fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c64:	4b2b      	ldr	r3, [pc, #172]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0302 	and.w	r3, r3, #2
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d0f0      	beq.n	8006c52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c70:	4b28      	ldr	r3, [pc, #160]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	00db      	lsls	r3, r3, #3
 8006c7e:	4925      	ldr	r1, [pc, #148]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	600b      	str	r3, [r1, #0]
 8006c84:	e015      	b.n	8006cb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c86:	4b24      	ldr	r3, [pc, #144]	; (8006d18 <HAL_RCC_OscConfig+0x244>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c8c:	f7fe fc48 	bl	8005520 <HAL_GetTick>
 8006c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c92:	e008      	b.n	8006ca6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c94:	f7fe fc44 	bl	8005520 <HAL_GetTick>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d901      	bls.n	8006ca6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	e187      	b.n	8006fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ca6:	4b1b      	ldr	r3, [pc, #108]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1f0      	bne.n	8006c94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0308 	and.w	r3, r3, #8
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d036      	beq.n	8006d2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d016      	beq.n	8006cf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cc6:	4b15      	ldr	r3, [pc, #84]	; (8006d1c <HAL_RCC_OscConfig+0x248>)
 8006cc8:	2201      	movs	r2, #1
 8006cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ccc:	f7fe fc28 	bl	8005520 <HAL_GetTick>
 8006cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cd2:	e008      	b.n	8006ce6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cd4:	f7fe fc24 	bl	8005520 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e167      	b.n	8006fb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ce6:	4b0b      	ldr	r3, [pc, #44]	; (8006d14 <HAL_RCC_OscConfig+0x240>)
 8006ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d0f0      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x200>
 8006cf2:	e01b      	b.n	8006d2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cf4:	4b09      	ldr	r3, [pc, #36]	; (8006d1c <HAL_RCC_OscConfig+0x248>)
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cfa:	f7fe fc11 	bl	8005520 <HAL_GetTick>
 8006cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d00:	e00e      	b.n	8006d20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d02:	f7fe fc0d 	bl	8005520 <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d907      	bls.n	8006d20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e150      	b.n	8006fb6 <HAL_RCC_OscConfig+0x4e2>
 8006d14:	40023800 	.word	0x40023800
 8006d18:	42470000 	.word	0x42470000
 8006d1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d20:	4b88      	ldr	r3, [pc, #544]	; (8006f44 <HAL_RCC_OscConfig+0x470>)
 8006d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d24:	f003 0302 	and.w	r3, r3, #2
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1ea      	bne.n	8006d02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0304 	and.w	r3, r3, #4
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 8097 	beq.w	8006e68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d3e:	4b81      	ldr	r3, [pc, #516]	; (8006f44 <HAL_RCC_OscConfig+0x470>)
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10f      	bne.n	8006d6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	60bb      	str	r3, [r7, #8]
 8006d4e:	4b7d      	ldr	r3, [pc, #500]	; (8006f44 <HAL_RCC_OscConfig+0x470>)
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	4a7c      	ldr	r2, [pc, #496]	; (8006f44 <HAL_RCC_OscConfig+0x470>)
 8006d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d58:	6413      	str	r3, [r2, #64]	; 0x40
 8006d5a:	4b7a      	ldr	r3, [pc, #488]	; (8006f44 <HAL_RCC_OscConfig+0x470>)
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d62:	60bb      	str	r3, [r7, #8]
 8006d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d66:	2301      	movs	r3, #1
 8006d68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d6a:	4b77      	ldr	r3, [pc, #476]	; (8006f48 <HAL_RCC_OscConfig+0x474>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d118      	bne.n	8006da8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d76:	4b74      	ldr	r3, [pc, #464]	; (8006f48 <HAL_RCC_OscConfig+0x474>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a73      	ldr	r2, [pc, #460]	; (8006f48 <HAL_RCC_OscConfig+0x474>)
 8006d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d82:	f7fe fbcd 	bl	8005520 <HAL_GetTick>
 8006d86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d88:	e008      	b.n	8006d9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d8a:	f7fe fbc9 	bl	8005520 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d901      	bls.n	8006d9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e10c      	b.n	8006fb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d9c:	4b6a      	ldr	r3, [pc, #424]	; (8006f48 <HAL_RCC_OscConfig+0x474>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d0f0      	beq.n	8006d8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d106      	bne.n	8006dbe <HAL_RCC_OscConfig+0x2ea>
 8006db0:	4b64      	ldr	r3, [pc, #400]	; (8006f44 <HAL_RCC_OscConfig+0x470>)
 8006db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db4:	4a63      	ldr	r2, [pc, #396]	; (8006f44 <HAL_RCC_OscConfig+0x470>)
 8006db6:	f043 0301 	orr.w	r3, r3, #1
 8006dba:	6713      	str	r3, [r2, #112]	; 0x70
 8006dbc:	e01c      	b.n	8006df8 <HAL_RCC_OscConfig+0x324>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	2b05      	cmp	r3, #5
 8006dc4:	d10c      	bne.n	8006de0 <HAL_RCC_OscConfig+0x30c>
 8006dc6:	4b5f      	ldr	r3, [pc, #380]	; (8006f44 <HAL_RCC_OscConfig+0x470>)
 8006dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dca:	4a5e      	ldr	r2, [pc, #376]	; (8006f44 <HAL_RCC_OscConfig+0x470>)
 8006dcc:	f043 0304 	orr.w	r3, r3, #4
 8006dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8006dd2:	4b5c      	ldr	r3, [pc, #368]	; (8006f44 <HAL_RCC_OscConfig+0x470>)
 8006dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd6:	4a5b      	ldr	r2, [pc, #364]	; (8006f44 <HAL_RCC_OscConfig+0x470>)
 8006dd8:	f043 0301 	orr.w	r3, r3, #1
 8006ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8006dde:	e00b      	b.n	8006df8 <HAL_RCC_OscConfig+0x324>
 8006de0:	4b58      	ldr	r3, [pc, #352]	; (8006f44 <HAL_RCC_OscConfig+0x470>)
 8006de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de4:	4a57      	ldr	r2, [pc, #348]	; (8006f44 <HAL_RCC_OscConfig+0x470>)
 8006de6:	f023 0301 	bic.w	r3, r3, #1
 8006dea:	6713      	str	r3, [r2, #112]	; 0x70
 8006dec:	4b55      	ldr	r3, [pc, #340]	; (8006f44 <HAL_RCC_OscConfig+0x470>)
 8006dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df0:	4a54      	ldr	r2, [pc, #336]	; (8006f44 <HAL_RCC_OscConfig+0x470>)
 8006df2:	f023 0304 	bic.w	r3, r3, #4
 8006df6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d015      	beq.n	8006e2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e00:	f7fe fb8e 	bl	8005520 <HAL_GetTick>
 8006e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e06:	e00a      	b.n	8006e1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e08:	f7fe fb8a 	bl	8005520 <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d901      	bls.n	8006e1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e0cb      	b.n	8006fb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e1e:	4b49      	ldr	r3, [pc, #292]	; (8006f44 <HAL_RCC_OscConfig+0x470>)
 8006e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d0ee      	beq.n	8006e08 <HAL_RCC_OscConfig+0x334>
 8006e2a:	e014      	b.n	8006e56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e2c:	f7fe fb78 	bl	8005520 <HAL_GetTick>
 8006e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e32:	e00a      	b.n	8006e4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e34:	f7fe fb74 	bl	8005520 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d901      	bls.n	8006e4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e0b5      	b.n	8006fb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e4a:	4b3e      	ldr	r3, [pc, #248]	; (8006f44 <HAL_RCC_OscConfig+0x470>)
 8006e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4e:	f003 0302 	and.w	r3, r3, #2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1ee      	bne.n	8006e34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e56:	7dfb      	ldrb	r3, [r7, #23]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d105      	bne.n	8006e68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e5c:	4b39      	ldr	r3, [pc, #228]	; (8006f44 <HAL_RCC_OscConfig+0x470>)
 8006e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e60:	4a38      	ldr	r2, [pc, #224]	; (8006f44 <HAL_RCC_OscConfig+0x470>)
 8006e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f000 80a1 	beq.w	8006fb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e72:	4b34      	ldr	r3, [pc, #208]	; (8006f44 <HAL_RCC_OscConfig+0x470>)
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f003 030c 	and.w	r3, r3, #12
 8006e7a:	2b08      	cmp	r3, #8
 8006e7c:	d05c      	beq.n	8006f38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d141      	bne.n	8006f0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e86:	4b31      	ldr	r3, [pc, #196]	; (8006f4c <HAL_RCC_OscConfig+0x478>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e8c:	f7fe fb48 	bl	8005520 <HAL_GetTick>
 8006e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e92:	e008      	b.n	8006ea6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e94:	f7fe fb44 	bl	8005520 <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d901      	bls.n	8006ea6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e087      	b.n	8006fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ea6:	4b27      	ldr	r3, [pc, #156]	; (8006f44 <HAL_RCC_OscConfig+0x470>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1f0      	bne.n	8006e94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	69da      	ldr	r2, [r3, #28]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	019b      	lsls	r3, r3, #6
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec8:	085b      	lsrs	r3, r3, #1
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	041b      	lsls	r3, r3, #16
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed4:	061b      	lsls	r3, r3, #24
 8006ed6:	491b      	ldr	r1, [pc, #108]	; (8006f44 <HAL_RCC_OscConfig+0x470>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006edc:	4b1b      	ldr	r3, [pc, #108]	; (8006f4c <HAL_RCC_OscConfig+0x478>)
 8006ede:	2201      	movs	r2, #1
 8006ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ee2:	f7fe fb1d 	bl	8005520 <HAL_GetTick>
 8006ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ee8:	e008      	b.n	8006efc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006eea:	f7fe fb19 	bl	8005520 <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d901      	bls.n	8006efc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e05c      	b.n	8006fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006efc:	4b11      	ldr	r3, [pc, #68]	; (8006f44 <HAL_RCC_OscConfig+0x470>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d0f0      	beq.n	8006eea <HAL_RCC_OscConfig+0x416>
 8006f08:	e054      	b.n	8006fb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f0a:	4b10      	ldr	r3, [pc, #64]	; (8006f4c <HAL_RCC_OscConfig+0x478>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f10:	f7fe fb06 	bl	8005520 <HAL_GetTick>
 8006f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f16:	e008      	b.n	8006f2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f18:	f7fe fb02 	bl	8005520 <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d901      	bls.n	8006f2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e045      	b.n	8006fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f2a:	4b06      	ldr	r3, [pc, #24]	; (8006f44 <HAL_RCC_OscConfig+0x470>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1f0      	bne.n	8006f18 <HAL_RCC_OscConfig+0x444>
 8006f36:	e03d      	b.n	8006fb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d107      	bne.n	8006f50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e038      	b.n	8006fb6 <HAL_RCC_OscConfig+0x4e2>
 8006f44:	40023800 	.word	0x40023800
 8006f48:	40007000 	.word	0x40007000
 8006f4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f50:	4b1b      	ldr	r3, [pc, #108]	; (8006fc0 <HAL_RCC_OscConfig+0x4ec>)
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d028      	beq.n	8006fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d121      	bne.n	8006fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d11a      	bne.n	8006fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f80:	4013      	ands	r3, r2
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d111      	bne.n	8006fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f96:	085b      	lsrs	r3, r3, #1
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d107      	bne.n	8006fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006faa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d001      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e000      	b.n	8006fb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3718      	adds	r7, #24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	40023800 	.word	0x40023800

08006fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e0cc      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fd8:	4b68      	ldr	r3, [pc, #416]	; (800717c <HAL_RCC_ClockConfig+0x1b8>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0307 	and.w	r3, r3, #7
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d90c      	bls.n	8007000 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fe6:	4b65      	ldr	r3, [pc, #404]	; (800717c <HAL_RCC_ClockConfig+0x1b8>)
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	b2d2      	uxtb	r2, r2
 8006fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fee:	4b63      	ldr	r3, [pc, #396]	; (800717c <HAL_RCC_ClockConfig+0x1b8>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0307 	and.w	r3, r3, #7
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d001      	beq.n	8007000 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e0b8      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0302 	and.w	r3, r3, #2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d020      	beq.n	800704e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0304 	and.w	r3, r3, #4
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007018:	4b59      	ldr	r3, [pc, #356]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	4a58      	ldr	r2, [pc, #352]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 800701e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007022:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0308 	and.w	r3, r3, #8
 800702c:	2b00      	cmp	r3, #0
 800702e:	d005      	beq.n	800703c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007030:	4b53      	ldr	r3, [pc, #332]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	4a52      	ldr	r2, [pc, #328]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 8007036:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800703a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800703c:	4b50      	ldr	r3, [pc, #320]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	494d      	ldr	r1, [pc, #308]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 800704a:	4313      	orrs	r3, r2
 800704c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	d044      	beq.n	80070e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d107      	bne.n	8007072 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007062:	4b47      	ldr	r3, [pc, #284]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d119      	bne.n	80070a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e07f      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	2b02      	cmp	r3, #2
 8007078:	d003      	beq.n	8007082 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800707e:	2b03      	cmp	r3, #3
 8007080:	d107      	bne.n	8007092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007082:	4b3f      	ldr	r3, [pc, #252]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d109      	bne.n	80070a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e06f      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007092:	4b3b      	ldr	r3, [pc, #236]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0302 	and.w	r3, r3, #2
 800709a:	2b00      	cmp	r3, #0
 800709c:	d101      	bne.n	80070a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e067      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070a2:	4b37      	ldr	r3, [pc, #220]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f023 0203 	bic.w	r2, r3, #3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	4934      	ldr	r1, [pc, #208]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 80070b0:	4313      	orrs	r3, r2
 80070b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070b4:	f7fe fa34 	bl	8005520 <HAL_GetTick>
 80070b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ba:	e00a      	b.n	80070d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070bc:	f7fe fa30 	bl	8005520 <HAL_GetTick>
 80070c0:	4602      	mov	r2, r0
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e04f      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070d2:	4b2b      	ldr	r3, [pc, #172]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f003 020c 	and.w	r2, r3, #12
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d1eb      	bne.n	80070bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070e4:	4b25      	ldr	r3, [pc, #148]	; (800717c <HAL_RCC_ClockConfig+0x1b8>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0307 	and.w	r3, r3, #7
 80070ec:	683a      	ldr	r2, [r7, #0]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d20c      	bcs.n	800710c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070f2:	4b22      	ldr	r3, [pc, #136]	; (800717c <HAL_RCC_ClockConfig+0x1b8>)
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	b2d2      	uxtb	r2, r2
 80070f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070fa:	4b20      	ldr	r3, [pc, #128]	; (800717c <HAL_RCC_ClockConfig+0x1b8>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0307 	and.w	r3, r3, #7
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	429a      	cmp	r2, r3
 8007106:	d001      	beq.n	800710c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e032      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0304 	and.w	r3, r3, #4
 8007114:	2b00      	cmp	r3, #0
 8007116:	d008      	beq.n	800712a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007118:	4b19      	ldr	r3, [pc, #100]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	4916      	ldr	r1, [pc, #88]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 8007126:	4313      	orrs	r3, r2
 8007128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0308 	and.w	r3, r3, #8
 8007132:	2b00      	cmp	r3, #0
 8007134:	d009      	beq.n	800714a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007136:	4b12      	ldr	r3, [pc, #72]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	490e      	ldr	r1, [pc, #56]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 8007146:	4313      	orrs	r3, r2
 8007148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800714a:	f000 f821 	bl	8007190 <HAL_RCC_GetSysClockFreq>
 800714e:	4602      	mov	r2, r0
 8007150:	4b0b      	ldr	r3, [pc, #44]	; (8007180 <HAL_RCC_ClockConfig+0x1bc>)
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	091b      	lsrs	r3, r3, #4
 8007156:	f003 030f 	and.w	r3, r3, #15
 800715a:	490a      	ldr	r1, [pc, #40]	; (8007184 <HAL_RCC_ClockConfig+0x1c0>)
 800715c:	5ccb      	ldrb	r3, [r1, r3]
 800715e:	fa22 f303 	lsr.w	r3, r2, r3
 8007162:	4a09      	ldr	r2, [pc, #36]	; (8007188 <HAL_RCC_ClockConfig+0x1c4>)
 8007164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007166:	4b09      	ldr	r3, [pc, #36]	; (800718c <HAL_RCC_ClockConfig+0x1c8>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4618      	mov	r0, r3
 800716c:	f7fe f994 	bl	8005498 <HAL_InitTick>

  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	40023c00 	.word	0x40023c00
 8007180:	40023800 	.word	0x40023800
 8007184:	0800d40c 	.word	0x0800d40c
 8007188:	2000003c 	.word	0x2000003c
 800718c:	2000006c 	.word	0x2000006c

08007190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007194:	b090      	sub	sp, #64	; 0x40
 8007196:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007198:	2300      	movs	r3, #0
 800719a:	637b      	str	r3, [r7, #52]	; 0x34
 800719c:	2300      	movs	r3, #0
 800719e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071a0:	2300      	movs	r3, #0
 80071a2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80071a4:	2300      	movs	r3, #0
 80071a6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071a8:	4b59      	ldr	r3, [pc, #356]	; (8007310 <HAL_RCC_GetSysClockFreq+0x180>)
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f003 030c 	and.w	r3, r3, #12
 80071b0:	2b08      	cmp	r3, #8
 80071b2:	d00d      	beq.n	80071d0 <HAL_RCC_GetSysClockFreq+0x40>
 80071b4:	2b08      	cmp	r3, #8
 80071b6:	f200 80a1 	bhi.w	80072fc <HAL_RCC_GetSysClockFreq+0x16c>
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d002      	beq.n	80071c4 <HAL_RCC_GetSysClockFreq+0x34>
 80071be:	2b04      	cmp	r3, #4
 80071c0:	d003      	beq.n	80071ca <HAL_RCC_GetSysClockFreq+0x3a>
 80071c2:	e09b      	b.n	80072fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071c4:	4b53      	ldr	r3, [pc, #332]	; (8007314 <HAL_RCC_GetSysClockFreq+0x184>)
 80071c6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80071c8:	e09b      	b.n	8007302 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071ca:	4b53      	ldr	r3, [pc, #332]	; (8007318 <HAL_RCC_GetSysClockFreq+0x188>)
 80071cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80071ce:	e098      	b.n	8007302 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071d0:	4b4f      	ldr	r3, [pc, #316]	; (8007310 <HAL_RCC_GetSysClockFreq+0x180>)
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071d8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071da:	4b4d      	ldr	r3, [pc, #308]	; (8007310 <HAL_RCC_GetSysClockFreq+0x180>)
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d028      	beq.n	8007238 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071e6:	4b4a      	ldr	r3, [pc, #296]	; (8007310 <HAL_RCC_GetSysClockFreq+0x180>)
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	099b      	lsrs	r3, r3, #6
 80071ec:	2200      	movs	r2, #0
 80071ee:	623b      	str	r3, [r7, #32]
 80071f0:	627a      	str	r2, [r7, #36]	; 0x24
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80071f8:	2100      	movs	r1, #0
 80071fa:	4b47      	ldr	r3, [pc, #284]	; (8007318 <HAL_RCC_GetSysClockFreq+0x188>)
 80071fc:	fb03 f201 	mul.w	r2, r3, r1
 8007200:	2300      	movs	r3, #0
 8007202:	fb00 f303 	mul.w	r3, r0, r3
 8007206:	4413      	add	r3, r2
 8007208:	4a43      	ldr	r2, [pc, #268]	; (8007318 <HAL_RCC_GetSysClockFreq+0x188>)
 800720a:	fba0 1202 	umull	r1, r2, r0, r2
 800720e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007210:	460a      	mov	r2, r1
 8007212:	62ba      	str	r2, [r7, #40]	; 0x28
 8007214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007216:	4413      	add	r3, r2
 8007218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800721a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800721c:	2200      	movs	r2, #0
 800721e:	61bb      	str	r3, [r7, #24]
 8007220:	61fa      	str	r2, [r7, #28]
 8007222:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007226:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800722a:	f7f9 fc81 	bl	8000b30 <__aeabi_uldivmod>
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	4613      	mov	r3, r2
 8007234:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007236:	e053      	b.n	80072e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007238:	4b35      	ldr	r3, [pc, #212]	; (8007310 <HAL_RCC_GetSysClockFreq+0x180>)
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	099b      	lsrs	r3, r3, #6
 800723e:	2200      	movs	r2, #0
 8007240:	613b      	str	r3, [r7, #16]
 8007242:	617a      	str	r2, [r7, #20]
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800724a:	f04f 0b00 	mov.w	fp, #0
 800724e:	4652      	mov	r2, sl
 8007250:	465b      	mov	r3, fp
 8007252:	f04f 0000 	mov.w	r0, #0
 8007256:	f04f 0100 	mov.w	r1, #0
 800725a:	0159      	lsls	r1, r3, #5
 800725c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007260:	0150      	lsls	r0, r2, #5
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	ebb2 080a 	subs.w	r8, r2, sl
 800726a:	eb63 090b 	sbc.w	r9, r3, fp
 800726e:	f04f 0200 	mov.w	r2, #0
 8007272:	f04f 0300 	mov.w	r3, #0
 8007276:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800727a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800727e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007282:	ebb2 0408 	subs.w	r4, r2, r8
 8007286:	eb63 0509 	sbc.w	r5, r3, r9
 800728a:	f04f 0200 	mov.w	r2, #0
 800728e:	f04f 0300 	mov.w	r3, #0
 8007292:	00eb      	lsls	r3, r5, #3
 8007294:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007298:	00e2      	lsls	r2, r4, #3
 800729a:	4614      	mov	r4, r2
 800729c:	461d      	mov	r5, r3
 800729e:	eb14 030a 	adds.w	r3, r4, sl
 80072a2:	603b      	str	r3, [r7, #0]
 80072a4:	eb45 030b 	adc.w	r3, r5, fp
 80072a8:	607b      	str	r3, [r7, #4]
 80072aa:	f04f 0200 	mov.w	r2, #0
 80072ae:	f04f 0300 	mov.w	r3, #0
 80072b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072b6:	4629      	mov	r1, r5
 80072b8:	028b      	lsls	r3, r1, #10
 80072ba:	4621      	mov	r1, r4
 80072bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072c0:	4621      	mov	r1, r4
 80072c2:	028a      	lsls	r2, r1, #10
 80072c4:	4610      	mov	r0, r2
 80072c6:	4619      	mov	r1, r3
 80072c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ca:	2200      	movs	r2, #0
 80072cc:	60bb      	str	r3, [r7, #8]
 80072ce:	60fa      	str	r2, [r7, #12]
 80072d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072d4:	f7f9 fc2c 	bl	8000b30 <__aeabi_uldivmod>
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4613      	mov	r3, r2
 80072de:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072e0:	4b0b      	ldr	r3, [pc, #44]	; (8007310 <HAL_RCC_GetSysClockFreq+0x180>)
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	0c1b      	lsrs	r3, r3, #16
 80072e6:	f003 0303 	and.w	r3, r3, #3
 80072ea:	3301      	adds	r3, #1
 80072ec:	005b      	lsls	r3, r3, #1
 80072ee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80072f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80072f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80072fa:	e002      	b.n	8007302 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072fc:	4b05      	ldr	r3, [pc, #20]	; (8007314 <HAL_RCC_GetSysClockFreq+0x184>)
 80072fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007304:	4618      	mov	r0, r3
 8007306:	3740      	adds	r7, #64	; 0x40
 8007308:	46bd      	mov	sp, r7
 800730a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800730e:	bf00      	nop
 8007310:	40023800 	.word	0x40023800
 8007314:	00f42400 	.word	0x00f42400
 8007318:	017d7840 	.word	0x017d7840

0800731c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800731c:	b480      	push	{r7}
 800731e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007320:	4b03      	ldr	r3, [pc, #12]	; (8007330 <HAL_RCC_GetHCLKFreq+0x14>)
 8007322:	681b      	ldr	r3, [r3, #0]
}
 8007324:	4618      	mov	r0, r3
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	2000003c 	.word	0x2000003c

08007334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007338:	f7ff fff0 	bl	800731c <HAL_RCC_GetHCLKFreq>
 800733c:	4602      	mov	r2, r0
 800733e:	4b05      	ldr	r3, [pc, #20]	; (8007354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	0a9b      	lsrs	r3, r3, #10
 8007344:	f003 0307 	and.w	r3, r3, #7
 8007348:	4903      	ldr	r1, [pc, #12]	; (8007358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800734a:	5ccb      	ldrb	r3, [r1, r3]
 800734c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007350:	4618      	mov	r0, r3
 8007352:	bd80      	pop	{r7, pc}
 8007354:	40023800 	.word	0x40023800
 8007358:	0800d41c 	.word	0x0800d41c

0800735c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e07b      	b.n	8007466 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007372:	2b00      	cmp	r3, #0
 8007374:	d108      	bne.n	8007388 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800737e:	d009      	beq.n	8007394 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	61da      	str	r2, [r3, #28]
 8007386:	e005      	b.n	8007394 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d106      	bne.n	80073b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7fb fdbe 	bl	8002f30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2202      	movs	r2, #2
 80073b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80073dc:	431a      	orrs	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073e6:	431a      	orrs	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	f003 0302 	and.w	r3, r3, #2
 80073f0:	431a      	orrs	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	431a      	orrs	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007404:	431a      	orrs	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	69db      	ldr	r3, [r3, #28]
 800740a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800740e:	431a      	orrs	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a1b      	ldr	r3, [r3, #32]
 8007414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007418:	ea42 0103 	orr.w	r1, r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007420:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	430a      	orrs	r2, r1
 800742a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	0c1b      	lsrs	r3, r3, #16
 8007432:	f003 0104 	and.w	r1, r3, #4
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743a:	f003 0210 	and.w	r2, r3, #16
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	430a      	orrs	r2, r1
 8007444:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	69da      	ldr	r2, [r3, #28]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007454:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b088      	sub	sp, #32
 8007472:	af00      	add	r7, sp, #0
 8007474:	60f8      	str	r0, [r7, #12]
 8007476:	60b9      	str	r1, [r7, #8]
 8007478:	603b      	str	r3, [r7, #0]
 800747a:	4613      	mov	r3, r2
 800747c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007488:	2b01      	cmp	r3, #1
 800748a:	d101      	bne.n	8007490 <HAL_SPI_Transmit+0x22>
 800748c:	2302      	movs	r3, #2
 800748e:	e12d      	b.n	80076ec <HAL_SPI_Transmit+0x27e>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007498:	f7fe f842 	bl	8005520 <HAL_GetTick>
 800749c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800749e:	88fb      	ldrh	r3, [r7, #6]
 80074a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d002      	beq.n	80074b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80074ae:	2302      	movs	r3, #2
 80074b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074b2:	e116      	b.n	80076e2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d002      	beq.n	80074c0 <HAL_SPI_Transmit+0x52>
 80074ba:	88fb      	ldrh	r3, [r7, #6]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d102      	bne.n	80074c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074c4:	e10d      	b.n	80076e2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2203      	movs	r2, #3
 80074ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	88fa      	ldrh	r2, [r7, #6]
 80074de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	88fa      	ldrh	r2, [r7, #6]
 80074e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800750c:	d10f      	bne.n	800752e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800751c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800752c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007538:	2b40      	cmp	r3, #64	; 0x40
 800753a:	d007      	beq.n	800754c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800754a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007554:	d14f      	bne.n	80075f6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <HAL_SPI_Transmit+0xf6>
 800755e:	8afb      	ldrh	r3, [r7, #22]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d142      	bne.n	80075ea <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007568:	881a      	ldrh	r2, [r3, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007574:	1c9a      	adds	r2, r3, #2
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800757e:	b29b      	uxth	r3, r3
 8007580:	3b01      	subs	r3, #1
 8007582:	b29a      	uxth	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007588:	e02f      	b.n	80075ea <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f003 0302 	and.w	r3, r3, #2
 8007594:	2b02      	cmp	r3, #2
 8007596:	d112      	bne.n	80075be <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759c:	881a      	ldrh	r2, [r3, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a8:	1c9a      	adds	r2, r3, #2
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	3b01      	subs	r3, #1
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80075bc:	e015      	b.n	80075ea <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075be:	f7fd ffaf 	bl	8005520 <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d803      	bhi.n	80075d6 <HAL_SPI_Transmit+0x168>
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d4:	d102      	bne.n	80075dc <HAL_SPI_Transmit+0x16e>
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d106      	bne.n	80075ea <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80075e8:	e07b      	b.n	80076e2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1ca      	bne.n	800758a <HAL_SPI_Transmit+0x11c>
 80075f4:	e050      	b.n	8007698 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d002      	beq.n	8007604 <HAL_SPI_Transmit+0x196>
 80075fe:	8afb      	ldrh	r3, [r7, #22]
 8007600:	2b01      	cmp	r3, #1
 8007602:	d144      	bne.n	800768e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	330c      	adds	r3, #12
 800760e:	7812      	ldrb	r2, [r2, #0]
 8007610:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007616:	1c5a      	adds	r2, r3, #1
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007620:	b29b      	uxth	r3, r3
 8007622:	3b01      	subs	r3, #1
 8007624:	b29a      	uxth	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800762a:	e030      	b.n	800768e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f003 0302 	and.w	r3, r3, #2
 8007636:	2b02      	cmp	r3, #2
 8007638:	d113      	bne.n	8007662 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	330c      	adds	r3, #12
 8007644:	7812      	ldrb	r2, [r2, #0]
 8007646:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764c:	1c5a      	adds	r2, r3, #1
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007656:	b29b      	uxth	r3, r3
 8007658:	3b01      	subs	r3, #1
 800765a:	b29a      	uxth	r2, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007660:	e015      	b.n	800768e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007662:	f7fd ff5d 	bl	8005520 <HAL_GetTick>
 8007666:	4602      	mov	r2, r0
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	429a      	cmp	r2, r3
 8007670:	d803      	bhi.n	800767a <HAL_SPI_Transmit+0x20c>
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007678:	d102      	bne.n	8007680 <HAL_SPI_Transmit+0x212>
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d106      	bne.n	800768e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800768c:	e029      	b.n	80076e2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007692:	b29b      	uxth	r3, r3
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1c9      	bne.n	800762c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007698:	69ba      	ldr	r2, [r7, #24]
 800769a:	6839      	ldr	r1, [r7, #0]
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f000 fbed 	bl	8007e7c <SPI_EndRxTxTransaction>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d002      	beq.n	80076ae <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2220      	movs	r2, #32
 80076ac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10a      	bne.n	80076cc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076b6:	2300      	movs	r3, #0
 80076b8:	613b      	str	r3, [r7, #16]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	613b      	str	r3, [r7, #16]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	613b      	str	r3, [r7, #16]
 80076ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	77fb      	strb	r3, [r7, #31]
 80076d8:	e003      	b.n	80076e2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80076ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3720      	adds	r7, #32
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b088      	sub	sp, #32
 80076f8:	af02      	add	r7, sp, #8
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	603b      	str	r3, [r7, #0]
 8007700:	4613      	mov	r3, r2
 8007702:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007704:	2300      	movs	r3, #0
 8007706:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800770e:	b2db      	uxtb	r3, r3
 8007710:	2b01      	cmp	r3, #1
 8007712:	d002      	beq.n	800771a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007714:	2302      	movs	r3, #2
 8007716:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007718:	e0fb      	b.n	8007912 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007722:	d112      	bne.n	800774a <HAL_SPI_Receive+0x56>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10e      	bne.n	800774a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2204      	movs	r2, #4
 8007730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007734:	88fa      	ldrh	r2, [r7, #6]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	4613      	mov	r3, r2
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	68b9      	ldr	r1, [r7, #8]
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 f8ef 	bl	8007924 <HAL_SPI_TransmitReceive>
 8007746:	4603      	mov	r3, r0
 8007748:	e0e8      	b.n	800791c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007750:	2b01      	cmp	r3, #1
 8007752:	d101      	bne.n	8007758 <HAL_SPI_Receive+0x64>
 8007754:	2302      	movs	r3, #2
 8007756:	e0e1      	b.n	800791c <HAL_SPI_Receive+0x228>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007760:	f7fd fede 	bl	8005520 <HAL_GetTick>
 8007764:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d002      	beq.n	8007772 <HAL_SPI_Receive+0x7e>
 800776c:	88fb      	ldrh	r3, [r7, #6]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d102      	bne.n	8007778 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007776:	e0cc      	b.n	8007912 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2204      	movs	r2, #4
 800777c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	88fa      	ldrh	r2, [r7, #6]
 8007790:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	88fa      	ldrh	r2, [r7, #6]
 8007796:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077be:	d10f      	bne.n	80077e0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80077de:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ea:	2b40      	cmp	r3, #64	; 0x40
 80077ec:	d007      	beq.n	80077fe <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077fc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d16a      	bne.n	80078dc <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007806:	e032      	b.n	800786e <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f003 0301 	and.w	r3, r3, #1
 8007812:	2b01      	cmp	r3, #1
 8007814:	d115      	bne.n	8007842 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f103 020c 	add.w	r2, r3, #12
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007822:	7812      	ldrb	r2, [r2, #0]
 8007824:	b2d2      	uxtb	r2, r2
 8007826:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782c:	1c5a      	adds	r2, r3, #1
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007836:	b29b      	uxth	r3, r3
 8007838:	3b01      	subs	r3, #1
 800783a:	b29a      	uxth	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007840:	e015      	b.n	800786e <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007842:	f7fd fe6d 	bl	8005520 <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	683a      	ldr	r2, [r7, #0]
 800784e:	429a      	cmp	r2, r3
 8007850:	d803      	bhi.n	800785a <HAL_SPI_Receive+0x166>
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007858:	d102      	bne.n	8007860 <HAL_SPI_Receive+0x16c>
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d106      	bne.n	800786e <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800786c:	e051      	b.n	8007912 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007872:	b29b      	uxth	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1c7      	bne.n	8007808 <HAL_SPI_Receive+0x114>
 8007878:	e035      	b.n	80078e6 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	2b01      	cmp	r3, #1
 8007886:	d113      	bne.n	80078b0 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68da      	ldr	r2, [r3, #12]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007892:	b292      	uxth	r2, r2
 8007894:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789a:	1c9a      	adds	r2, r3, #2
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	3b01      	subs	r3, #1
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078ae:	e015      	b.n	80078dc <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078b0:	f7fd fe36 	bl	8005520 <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d803      	bhi.n	80078c8 <HAL_SPI_Receive+0x1d4>
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c6:	d102      	bne.n	80078ce <HAL_SPI_Receive+0x1da>
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d106      	bne.n	80078dc <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80078da:	e01a      	b.n	8007912 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1c9      	bne.n	800787a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f000 fa60 	bl	8007db0 <SPI_EndRxTransaction>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d002      	beq.n	80078fc <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2220      	movs	r2, #32
 80078fa:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007900:	2b00      	cmp	r3, #0
 8007902:	d002      	beq.n	800790a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	75fb      	strb	r3, [r7, #23]
 8007908:	e003      	b.n	8007912 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800791a:	7dfb      	ldrb	r3, [r7, #23]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3718      	adds	r7, #24
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b08c      	sub	sp, #48	; 0x30
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]
 8007930:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007932:	2301      	movs	r3, #1
 8007934:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007936:	2300      	movs	r3, #0
 8007938:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007942:	2b01      	cmp	r3, #1
 8007944:	d101      	bne.n	800794a <HAL_SPI_TransmitReceive+0x26>
 8007946:	2302      	movs	r3, #2
 8007948:	e198      	b.n	8007c7c <HAL_SPI_TransmitReceive+0x358>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007952:	f7fd fde5 	bl	8005520 <HAL_GetTick>
 8007956:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800795e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007968:	887b      	ldrh	r3, [r7, #2]
 800796a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800796c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007970:	2b01      	cmp	r3, #1
 8007972:	d00f      	beq.n	8007994 <HAL_SPI_TransmitReceive+0x70>
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800797a:	d107      	bne.n	800798c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d103      	bne.n	800798c <HAL_SPI_TransmitReceive+0x68>
 8007984:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007988:	2b04      	cmp	r3, #4
 800798a:	d003      	beq.n	8007994 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800798c:	2302      	movs	r3, #2
 800798e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007992:	e16d      	b.n	8007c70 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d005      	beq.n	80079a6 <HAL_SPI_TransmitReceive+0x82>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <HAL_SPI_TransmitReceive+0x82>
 80079a0:	887b      	ldrh	r3, [r7, #2]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d103      	bne.n	80079ae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80079ac:	e160      	b.n	8007c70 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b04      	cmp	r3, #4
 80079b8:	d003      	beq.n	80079c2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2205      	movs	r2, #5
 80079be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	887a      	ldrh	r2, [r7, #2]
 80079d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	887a      	ldrh	r2, [r7, #2]
 80079d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	887a      	ldrh	r2, [r7, #2]
 80079e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	887a      	ldrh	r2, [r7, #2]
 80079ea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a02:	2b40      	cmp	r3, #64	; 0x40
 8007a04:	d007      	beq.n	8007a16 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a1e:	d17c      	bne.n	8007b1a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d002      	beq.n	8007a2e <HAL_SPI_TransmitReceive+0x10a>
 8007a28:	8b7b      	ldrh	r3, [r7, #26]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d16a      	bne.n	8007b04 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a32:	881a      	ldrh	r2, [r3, #0]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3e:	1c9a      	adds	r2, r3, #2
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a52:	e057      	b.n	8007b04 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f003 0302 	and.w	r3, r3, #2
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d11b      	bne.n	8007a9a <HAL_SPI_TransmitReceive+0x176>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d016      	beq.n	8007a9a <HAL_SPI_TransmitReceive+0x176>
 8007a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d113      	bne.n	8007a9a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a76:	881a      	ldrh	r2, [r3, #0]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a82:	1c9a      	adds	r2, r3, #2
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a96:	2300      	movs	r3, #0
 8007a98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	f003 0301 	and.w	r3, r3, #1
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d119      	bne.n	8007adc <HAL_SPI_TransmitReceive+0x1b8>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d014      	beq.n	8007adc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68da      	ldr	r2, [r3, #12]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007abc:	b292      	uxth	r2, r2
 8007abe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac4:	1c9a      	adds	r2, r3, #2
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007adc:	f7fd fd20 	bl	8005520 <HAL_GetTick>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d80b      	bhi.n	8007b04 <HAL_SPI_TransmitReceive+0x1e0>
 8007aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af2:	d007      	beq.n	8007b04 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8007b02:	e0b5      	b.n	8007c70 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1a2      	bne.n	8007a54 <HAL_SPI_TransmitReceive+0x130>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d19d      	bne.n	8007a54 <HAL_SPI_TransmitReceive+0x130>
 8007b18:	e080      	b.n	8007c1c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d002      	beq.n	8007b28 <HAL_SPI_TransmitReceive+0x204>
 8007b22:	8b7b      	ldrh	r3, [r7, #26]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d16f      	bne.n	8007c08 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	330c      	adds	r3, #12
 8007b32:	7812      	ldrb	r2, [r2, #0]
 8007b34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3a:	1c5a      	adds	r2, r3, #1
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	3b01      	subs	r3, #1
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b4e:	e05b      	b.n	8007c08 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f003 0302 	and.w	r3, r3, #2
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d11c      	bne.n	8007b98 <HAL_SPI_TransmitReceive+0x274>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d017      	beq.n	8007b98 <HAL_SPI_TransmitReceive+0x274>
 8007b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d114      	bne.n	8007b98 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	330c      	adds	r3, #12
 8007b78:	7812      	ldrb	r2, [r2, #0]
 8007b7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b80:	1c5a      	adds	r2, r3, #1
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	b29a      	uxth	r2, r3
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d119      	bne.n	8007bda <HAL_SPI_TransmitReceive+0x2b6>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d014      	beq.n	8007bda <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68da      	ldr	r2, [r3, #12]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bba:	b2d2      	uxtb	r2, r2
 8007bbc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc2:	1c5a      	adds	r2, r3, #1
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007bda:	f7fd fca1 	bl	8005520 <HAL_GetTick>
 8007bde:	4602      	mov	r2, r0
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d803      	bhi.n	8007bf2 <HAL_SPI_TransmitReceive+0x2ce>
 8007bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf0:	d102      	bne.n	8007bf8 <HAL_SPI_TransmitReceive+0x2d4>
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d107      	bne.n	8007c08 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8007c06:	e033      	b.n	8007c70 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d19e      	bne.n	8007b50 <HAL_SPI_TransmitReceive+0x22c>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d199      	bne.n	8007b50 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f000 f92b 	bl	8007e7c <SPI_EndRxTxTransaction>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d006      	beq.n	8007c3a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2220      	movs	r2, #32
 8007c36:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007c38:	e01a      	b.n	8007c70 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d10a      	bne.n	8007c58 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c42:	2300      	movs	r3, #0
 8007c44:	617b      	str	r3, [r7, #20]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	617b      	str	r3, [r7, #20]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	617b      	str	r3, [r7, #20]
 8007c56:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d003      	beq.n	8007c68 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c66:	e003      	b.n	8007c70 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3730      	adds	r7, #48	; 0x30
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c92:	b2db      	uxtb	r3, r3
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b088      	sub	sp, #32
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	603b      	str	r3, [r7, #0]
 8007cac:	4613      	mov	r3, r2
 8007cae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007cb0:	f7fd fc36 	bl	8005520 <HAL_GetTick>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb8:	1a9b      	subs	r3, r3, r2
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007cc0:	f7fd fc2e 	bl	8005520 <HAL_GetTick>
 8007cc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007cc6:	4b39      	ldr	r3, [pc, #228]	; (8007dac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	015b      	lsls	r3, r3, #5
 8007ccc:	0d1b      	lsrs	r3, r3, #20
 8007cce:	69fa      	ldr	r2, [r7, #28]
 8007cd0:	fb02 f303 	mul.w	r3, r2, r3
 8007cd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cd6:	e054      	b.n	8007d82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cde:	d050      	beq.n	8007d82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ce0:	f7fd fc1e 	bl	8005520 <HAL_GetTick>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	69fa      	ldr	r2, [r7, #28]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d902      	bls.n	8007cf6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d13d      	bne.n	8007d72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d0e:	d111      	bne.n	8007d34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d18:	d004      	beq.n	8007d24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d22:	d107      	bne.n	8007d34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d3c:	d10f      	bne.n	8007d5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e017      	b.n	8007da2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d101      	bne.n	8007d7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	689a      	ldr	r2, [r3, #8]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	bf0c      	ite	eq
 8007d92:	2301      	moveq	r3, #1
 8007d94:	2300      	movne	r3, #0
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	461a      	mov	r2, r3
 8007d9a:	79fb      	ldrb	r3, [r7, #7]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d19b      	bne.n	8007cd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3720      	adds	r7, #32
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	2000003c 	.word	0x2000003c

08007db0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af02      	add	r7, sp, #8
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007dc4:	d111      	bne.n	8007dea <SPI_EndRxTransaction+0x3a>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dce:	d004      	beq.n	8007dda <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dd8:	d107      	bne.n	8007dea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007de8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007df2:	d12a      	bne.n	8007e4a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dfc:	d012      	beq.n	8007e24 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2200      	movs	r2, #0
 8007e06:	2180      	movs	r1, #128	; 0x80
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f7ff ff49 	bl	8007ca0 <SPI_WaitFlagStateUntilTimeout>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d02d      	beq.n	8007e70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e18:	f043 0220 	orr.w	r2, r3, #32
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e026      	b.n	8007e72 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f7ff ff36 	bl	8007ca0 <SPI_WaitFlagStateUntilTimeout>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d01a      	beq.n	8007e70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e3e:	f043 0220 	orr.w	r2, r3, #32
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e013      	b.n	8007e72 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	2200      	movs	r2, #0
 8007e52:	2101      	movs	r1, #1
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f7ff ff23 	bl	8007ca0 <SPI_WaitFlagStateUntilTimeout>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d007      	beq.n	8007e70 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e64:	f043 0220 	orr.w	r2, r3, #32
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e000      	b.n	8007e72 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
	...

08007e7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b088      	sub	sp, #32
 8007e80:	af02      	add	r7, sp, #8
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	2102      	movs	r1, #2
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f7ff ff04 	bl	8007ca0 <SPI_WaitFlagStateUntilTimeout>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d007      	beq.n	8007eae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea2:	f043 0220 	orr.w	r2, r3, #32
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e032      	b.n	8007f14 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007eae:	4b1b      	ldr	r3, [pc, #108]	; (8007f1c <SPI_EndRxTxTransaction+0xa0>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a1b      	ldr	r2, [pc, #108]	; (8007f20 <SPI_EndRxTxTransaction+0xa4>)
 8007eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb8:	0d5b      	lsrs	r3, r3, #21
 8007eba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ebe:	fb02 f303 	mul.w	r3, r2, r3
 8007ec2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ecc:	d112      	bne.n	8007ef4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	2180      	movs	r1, #128	; 0x80
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f7ff fee1 	bl	8007ca0 <SPI_WaitFlagStateUntilTimeout>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d016      	beq.n	8007f12 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee8:	f043 0220 	orr.w	r2, r3, #32
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e00f      	b.n	8007f14 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00a      	beq.n	8007f10 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	3b01      	subs	r3, #1
 8007efe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f0a:	2b80      	cmp	r3, #128	; 0x80
 8007f0c:	d0f2      	beq.n	8007ef4 <SPI_EndRxTxTransaction+0x78>
 8007f0e:	e000      	b.n	8007f12 <SPI_EndRxTxTransaction+0x96>
        break;
 8007f10:	bf00      	nop
  }

  return HAL_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3718      	adds	r7, #24
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	2000003c 	.word	0x2000003c
 8007f20:	165e9f81 	.word	0x165e9f81

08007f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e041      	b.n	8007fba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d106      	bne.n	8007f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7fb f908 	bl	8003160 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2202      	movs	r2, #2
 8007f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	3304      	adds	r3, #4
 8007f60:	4619      	mov	r1, r3
 8007f62:	4610      	mov	r0, r2
 8007f64:	f000 f9b6 	bl	80082d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
	...

08007fc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d001      	beq.n	8007fdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e04e      	b.n	800807a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2202      	movs	r2, #2
 8007fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68da      	ldr	r2, [r3, #12]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f042 0201 	orr.w	r2, r2, #1
 8007ff2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a23      	ldr	r2, [pc, #140]	; (8008088 <HAL_TIM_Base_Start_IT+0xc4>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d022      	beq.n	8008044 <HAL_TIM_Base_Start_IT+0x80>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008006:	d01d      	beq.n	8008044 <HAL_TIM_Base_Start_IT+0x80>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a1f      	ldr	r2, [pc, #124]	; (800808c <HAL_TIM_Base_Start_IT+0xc8>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d018      	beq.n	8008044 <HAL_TIM_Base_Start_IT+0x80>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a1e      	ldr	r2, [pc, #120]	; (8008090 <HAL_TIM_Base_Start_IT+0xcc>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d013      	beq.n	8008044 <HAL_TIM_Base_Start_IT+0x80>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a1c      	ldr	r2, [pc, #112]	; (8008094 <HAL_TIM_Base_Start_IT+0xd0>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d00e      	beq.n	8008044 <HAL_TIM_Base_Start_IT+0x80>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a1b      	ldr	r2, [pc, #108]	; (8008098 <HAL_TIM_Base_Start_IT+0xd4>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d009      	beq.n	8008044 <HAL_TIM_Base_Start_IT+0x80>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a19      	ldr	r2, [pc, #100]	; (800809c <HAL_TIM_Base_Start_IT+0xd8>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d004      	beq.n	8008044 <HAL_TIM_Base_Start_IT+0x80>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a18      	ldr	r2, [pc, #96]	; (80080a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d111      	bne.n	8008068 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f003 0307 	and.w	r3, r3, #7
 800804e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2b06      	cmp	r3, #6
 8008054:	d010      	beq.n	8008078 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f042 0201 	orr.w	r2, r2, #1
 8008064:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008066:	e007      	b.n	8008078 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f042 0201 	orr.w	r2, r2, #1
 8008076:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3714      	adds	r7, #20
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	40010000 	.word	0x40010000
 800808c:	40000400 	.word	0x40000400
 8008090:	40000800 	.word	0x40000800
 8008094:	40000c00 	.word	0x40000c00
 8008098:	40010400 	.word	0x40010400
 800809c:	40014000 	.word	0x40014000
 80080a0:	40001800 	.word	0x40001800

080080a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	f003 0302 	and.w	r3, r3, #2
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d020      	beq.n	8008108 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f003 0302 	and.w	r3, r3, #2
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d01b      	beq.n	8008108 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f06f 0202 	mvn.w	r2, #2
 80080d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2201      	movs	r2, #1
 80080de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	699b      	ldr	r3, [r3, #24]
 80080e6:	f003 0303 	and.w	r3, r3, #3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f8d2 	bl	8008298 <HAL_TIM_IC_CaptureCallback>
 80080f4:	e005      	b.n	8008102 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f8c4 	bl	8008284 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 f8d5 	bl	80082ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	f003 0304 	and.w	r3, r3, #4
 800810e:	2b00      	cmp	r3, #0
 8008110:	d020      	beq.n	8008154 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f003 0304 	and.w	r3, r3, #4
 8008118:	2b00      	cmp	r3, #0
 800811a:	d01b      	beq.n	8008154 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f06f 0204 	mvn.w	r2, #4
 8008124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2202      	movs	r2, #2
 800812a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008136:	2b00      	cmp	r3, #0
 8008138:	d003      	beq.n	8008142 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f8ac 	bl	8008298 <HAL_TIM_IC_CaptureCallback>
 8008140:	e005      	b.n	800814e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f89e 	bl	8008284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 f8af 	bl	80082ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	f003 0308 	and.w	r3, r3, #8
 800815a:	2b00      	cmp	r3, #0
 800815c:	d020      	beq.n	80081a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f003 0308 	and.w	r3, r3, #8
 8008164:	2b00      	cmp	r3, #0
 8008166:	d01b      	beq.n	80081a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f06f 0208 	mvn.w	r2, #8
 8008170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2204      	movs	r2, #4
 8008176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	69db      	ldr	r3, [r3, #28]
 800817e:	f003 0303 	and.w	r3, r3, #3
 8008182:	2b00      	cmp	r3, #0
 8008184:	d003      	beq.n	800818e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f886 	bl	8008298 <HAL_TIM_IC_CaptureCallback>
 800818c:	e005      	b.n	800819a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f878 	bl	8008284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f889 	bl	80082ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	f003 0310 	and.w	r3, r3, #16
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d020      	beq.n	80081ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f003 0310 	and.w	r3, r3, #16
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d01b      	beq.n	80081ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f06f 0210 	mvn.w	r2, #16
 80081bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2208      	movs	r2, #8
 80081c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	69db      	ldr	r3, [r3, #28]
 80081ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d003      	beq.n	80081da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f860 	bl	8008298 <HAL_TIM_IC_CaptureCallback>
 80081d8:	e005      	b.n	80081e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f852 	bl	8008284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 f863 	bl	80082ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00c      	beq.n	8008210 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f003 0301 	and.w	r3, r3, #1
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d007      	beq.n	8008210 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f06f 0201 	mvn.w	r2, #1
 8008208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7fa fdda 	bl	8002dc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00c      	beq.n	8008234 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008220:	2b00      	cmp	r3, #0
 8008222:	d007      	beq.n	8008234 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800822c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f982 	bl	8008538 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00c      	beq.n	8008258 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008244:	2b00      	cmp	r3, #0
 8008246:	d007      	beq.n	8008258 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f834 	bl	80082c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	f003 0320 	and.w	r3, r3, #32
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00c      	beq.n	800827c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f003 0320 	and.w	r3, r3, #32
 8008268:	2b00      	cmp	r3, #0
 800826a:	d007      	beq.n	800827c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f06f 0220 	mvn.w	r2, #32
 8008274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f954 	bl	8008524 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800827c:	bf00      	nop
 800827e:	3710      	adds	r7, #16
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800828c:	bf00      	nop
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082b4:	bf00      	nop
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a46      	ldr	r2, [pc, #280]	; (8008400 <TIM_Base_SetConfig+0x12c>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d013      	beq.n	8008314 <TIM_Base_SetConfig+0x40>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082f2:	d00f      	beq.n	8008314 <TIM_Base_SetConfig+0x40>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a43      	ldr	r2, [pc, #268]	; (8008404 <TIM_Base_SetConfig+0x130>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d00b      	beq.n	8008314 <TIM_Base_SetConfig+0x40>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a42      	ldr	r2, [pc, #264]	; (8008408 <TIM_Base_SetConfig+0x134>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d007      	beq.n	8008314 <TIM_Base_SetConfig+0x40>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a41      	ldr	r2, [pc, #260]	; (800840c <TIM_Base_SetConfig+0x138>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d003      	beq.n	8008314 <TIM_Base_SetConfig+0x40>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a40      	ldr	r2, [pc, #256]	; (8008410 <TIM_Base_SetConfig+0x13c>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d108      	bne.n	8008326 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800831a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	4313      	orrs	r3, r2
 8008324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a35      	ldr	r2, [pc, #212]	; (8008400 <TIM_Base_SetConfig+0x12c>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d02b      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008334:	d027      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a32      	ldr	r2, [pc, #200]	; (8008404 <TIM_Base_SetConfig+0x130>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d023      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a31      	ldr	r2, [pc, #196]	; (8008408 <TIM_Base_SetConfig+0x134>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d01f      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a30      	ldr	r2, [pc, #192]	; (800840c <TIM_Base_SetConfig+0x138>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d01b      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a2f      	ldr	r2, [pc, #188]	; (8008410 <TIM_Base_SetConfig+0x13c>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d017      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a2e      	ldr	r2, [pc, #184]	; (8008414 <TIM_Base_SetConfig+0x140>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d013      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a2d      	ldr	r2, [pc, #180]	; (8008418 <TIM_Base_SetConfig+0x144>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d00f      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a2c      	ldr	r2, [pc, #176]	; (800841c <TIM_Base_SetConfig+0x148>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d00b      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a2b      	ldr	r2, [pc, #172]	; (8008420 <TIM_Base_SetConfig+0x14c>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d007      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a2a      	ldr	r2, [pc, #168]	; (8008424 <TIM_Base_SetConfig+0x150>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d003      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a29      	ldr	r2, [pc, #164]	; (8008428 <TIM_Base_SetConfig+0x154>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d108      	bne.n	8008398 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800838c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	4313      	orrs	r3, r2
 8008396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	689a      	ldr	r2, [r3, #8]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a10      	ldr	r2, [pc, #64]	; (8008400 <TIM_Base_SetConfig+0x12c>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d003      	beq.n	80083cc <TIM_Base_SetConfig+0xf8>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a12      	ldr	r2, [pc, #72]	; (8008410 <TIM_Base_SetConfig+0x13c>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d103      	bne.n	80083d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	691a      	ldr	r2, [r3, #16]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d105      	bne.n	80083f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	f023 0201 	bic.w	r2, r3, #1
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	611a      	str	r2, [r3, #16]
  }
}
 80083f2:	bf00      	nop
 80083f4:	3714      	adds	r7, #20
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	40010000 	.word	0x40010000
 8008404:	40000400 	.word	0x40000400
 8008408:	40000800 	.word	0x40000800
 800840c:	40000c00 	.word	0x40000c00
 8008410:	40010400 	.word	0x40010400
 8008414:	40014000 	.word	0x40014000
 8008418:	40014400 	.word	0x40014400
 800841c:	40014800 	.word	0x40014800
 8008420:	40001800 	.word	0x40001800
 8008424:	40001c00 	.word	0x40001c00
 8008428:	40002000 	.word	0x40002000

0800842c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800843c:	2b01      	cmp	r3, #1
 800843e:	d101      	bne.n	8008444 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008440:	2302      	movs	r3, #2
 8008442:	e05a      	b.n	80084fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2202      	movs	r2, #2
 8008450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800846a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	4313      	orrs	r3, r2
 8008474:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a21      	ldr	r2, [pc, #132]	; (8008508 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d022      	beq.n	80084ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008490:	d01d      	beq.n	80084ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a1d      	ldr	r2, [pc, #116]	; (800850c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d018      	beq.n	80084ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a1b      	ldr	r2, [pc, #108]	; (8008510 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d013      	beq.n	80084ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a1a      	ldr	r2, [pc, #104]	; (8008514 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d00e      	beq.n	80084ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a18      	ldr	r2, [pc, #96]	; (8008518 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d009      	beq.n	80084ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a17      	ldr	r2, [pc, #92]	; (800851c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d004      	beq.n	80084ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a15      	ldr	r2, [pc, #84]	; (8008520 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d10c      	bne.n	80084e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	4313      	orrs	r3, r2
 80084de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3714      	adds	r7, #20
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop
 8008508:	40010000 	.word	0x40010000
 800850c:	40000400 	.word	0x40000400
 8008510:	40000800 	.word	0x40000800
 8008514:	40000c00 	.word	0x40000c00
 8008518:	40010400 	.word	0x40010400
 800851c:	40014000 	.word	0x40014000
 8008520:	40001800 	.word	0x40001800

08008524 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008550:	4904      	ldr	r1, [pc, #16]	; (8008564 <MX_FATFS_Init+0x18>)
 8008552:	4805      	ldr	r0, [pc, #20]	; (8008568 <MX_FATFS_Init+0x1c>)
 8008554:	f003 fcf4 	bl	800bf40 <FATFS_LinkDriver>
 8008558:	4603      	mov	r3, r0
 800855a:	461a      	mov	r2, r3
 800855c:	4b03      	ldr	r3, [pc, #12]	; (800856c <MX_FATFS_Init+0x20>)
 800855e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008560:	bf00      	nop
 8008562:	bd80      	pop	{r7, pc}
 8008564:	20002f64 	.word	0x20002f64
 8008568:	20000074 	.word	0x20000074
 800856c:	20002f60 	.word	0x20002f60

08008570 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008570:	b480      	push	{r7}
 8008572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008574:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008576:	4618      	mov	r0, r3
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <SD_set_spi_and_cs>:
void SD_set_spi_and_cs (
		SPI_HandleTypeDef* spi,
		GPIO_TypeDef* port,
		uint16_t pin
		)
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	4613      	mov	r3, r2
 800858c:	80fb      	strh	r3, [r7, #6]
	hspi = spi;
 800858e:	4a07      	ldr	r2, [pc, #28]	; (80085ac <SD_set_spi_and_cs+0x2c>)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6013      	str	r3, [r2, #0]
	portCS = port;
 8008594:	4a06      	ldr	r2, [pc, #24]	; (80085b0 <SD_set_spi_and_cs+0x30>)
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	6013      	str	r3, [r2, #0]
	pinCS = pin;
 800859a:	4a06      	ldr	r2, [pc, #24]	; (80085b4 <SD_set_spi_and_cs+0x34>)
 800859c:	88fb      	ldrh	r3, [r7, #6]
 800859e:	8013      	strh	r3, [r2, #0]
}
 80085a0:	bf00      	nop
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr
 80085ac:	20002f6c 	.word	0x20002f6c
 80085b0:	20002f70 	.word	0x20002f70
 80085b4:	20002f74 	.word	0x20002f74

080085b8 <SELECT>:

/* SPI Chip Select */
static void SELECT(void)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	af00      	add	r7, sp, #0
	if(portCS)
 80085bc:	4b06      	ldr	r3, [pc, #24]	; (80085d8 <SELECT+0x20>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d007      	beq.n	80085d4 <SELECT+0x1c>
	{
		HAL_GPIO_WritePin(portCS, pinCS, GPIO_PIN_RESET);
 80085c4:	4b04      	ldr	r3, [pc, #16]	; (80085d8 <SELECT+0x20>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a04      	ldr	r2, [pc, #16]	; (80085dc <SELECT+0x24>)
 80085ca:	8811      	ldrh	r1, [r2, #0]
 80085cc:	2200      	movs	r2, #0
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fd fdb8 	bl	8006144 <HAL_GPIO_WritePin>
	}
}
 80085d4:	bf00      	nop
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	20002f70 	.word	0x20002f70
 80085dc:	20002f74 	.word	0x20002f74

080085e0 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	af00      	add	r7, sp, #0
	if(portCS)
 80085e4:	4b06      	ldr	r3, [pc, #24]	; (8008600 <DESELECT+0x20>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d007      	beq.n	80085fc <DESELECT+0x1c>
	{
		HAL_GPIO_WritePin(portCS, pinCS, GPIO_PIN_SET);
 80085ec:	4b04      	ldr	r3, [pc, #16]	; (8008600 <DESELECT+0x20>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a04      	ldr	r2, [pc, #16]	; (8008604 <DESELECT+0x24>)
 80085f2:	8811      	ldrh	r1, [r2, #0]
 80085f4:	2201      	movs	r2, #1
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fd fda4 	bl	8006144 <HAL_GPIO_WritePin>
	}
}
 80085fc:	bf00      	nop
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	20002f70 	.word	0x20002f70
 8008604:	20002f74 	.word	0x20002f74

08008608 <SPI_TxByte>:

static void SPI_TxByte(BYTE data)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	4603      	mov	r3, r0
 8008610:	71fb      	strb	r3, [r7, #7]
	if(hspi)
 8008612:	4b0c      	ldr	r3, [pc, #48]	; (8008644 <SPI_TxByte+0x3c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d010      	beq.n	800863c <SPI_TxByte+0x34>
	{
		while (HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY);
 800861a:	bf00      	nop
 800861c:	4b09      	ldr	r3, [pc, #36]	; (8008644 <SPI_TxByte+0x3c>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4618      	mov	r0, r3
 8008622:	f7ff fb2f 	bl	8007c84 <HAL_SPI_GetState>
 8008626:	4603      	mov	r3, r0
 8008628:	2b01      	cmp	r3, #1
 800862a:	d1f7      	bne.n	800861c <SPI_TxByte+0x14>
		HAL_SPI_Transmit(hspi, &data, 1, SPI_TIMEOUT);
 800862c:	4b05      	ldr	r3, [pc, #20]	; (8008644 <SPI_TxByte+0x3c>)
 800862e:	6818      	ldr	r0, [r3, #0]
 8008630:	1df9      	adds	r1, r7, #7
 8008632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008636:	2201      	movs	r2, #1
 8008638:	f7fe ff19 	bl	800746e <HAL_SPI_Transmit>
	}
}
 800863c:	bf00      	nop
 800863e:	3708      	adds	r7, #8
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	20002f6c 	.word	0x20002f6c

08008648 <SPI_RxByte>:

static uint8_t SPI_RxByte(void)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af02      	add	r7, sp, #8
	if(hspi)
 800864e:	4b11      	ldr	r3, [pc, #68]	; (8008694 <SPI_RxByte+0x4c>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d018      	beq.n	8008688 <SPI_RxByte+0x40>
	{
		uint8_t dummy, data;
		dummy = 0xFF;
 8008656:	23ff      	movs	r3, #255	; 0xff
 8008658:	71fb      	strb	r3, [r7, #7]
		data = 0;
 800865a:	2300      	movs	r3, #0
 800865c:	71bb      	strb	r3, [r7, #6]

		while ((HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY));
 800865e:	bf00      	nop
 8008660:	4b0c      	ldr	r3, [pc, #48]	; (8008694 <SPI_RxByte+0x4c>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4618      	mov	r0, r3
 8008666:	f7ff fb0d 	bl	8007c84 <HAL_SPI_GetState>
 800866a:	4603      	mov	r3, r0
 800866c:	2b01      	cmp	r3, #1
 800866e:	d1f7      	bne.n	8008660 <SPI_RxByte+0x18>
		HAL_SPI_TransmitReceive(hspi, &dummy, &data, 1, SPI_TIMEOUT);
 8008670:	4b08      	ldr	r3, [pc, #32]	; (8008694 <SPI_RxByte+0x4c>)
 8008672:	6818      	ldr	r0, [r3, #0]
 8008674:	1dba      	adds	r2, r7, #6
 8008676:	1df9      	adds	r1, r7, #7
 8008678:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	2301      	movs	r3, #1
 8008680:	f7ff f950 	bl	8007924 <HAL_SPI_TransmitReceive>

		return data;
 8008684:	79bb      	ldrb	r3, [r7, #6]
 8008686:	e000      	b.n	800868a <SPI_RxByte+0x42>
	}
	return 0;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	20002f6c 	.word	0x20002f6c

08008698 <SPI_RxBytePtr>:

static void SPI_RxBytePtr(uint8_t *buff)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80086a0:	f7ff ffd2 	bl	8008648 <SPI_RxByte>
 80086a4:	4603      	mov	r3, r0
 80086a6:	461a      	mov	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	701a      	strb	r2, [r3, #0]
}
 80086ac:	bf00      	nop
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <SD_ReadyWait>:

static uint8_t SD_ReadyWait(void)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
  uint8_t res;
  Timer2 = 50;
 80086ba:	4b0b      	ldr	r3, [pc, #44]	; (80086e8 <SD_ReadyWait+0x34>)
 80086bc:	2232      	movs	r2, #50	; 0x32
 80086be:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80086c0:	f7ff ffc2 	bl	8008648 <SPI_RxByte>

  do
  {
    res = SPI_RxByte();
 80086c4:	f7ff ffc0 	bl	8008648 <SPI_RxByte>
 80086c8:	4603      	mov	r3, r0
 80086ca:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80086cc:	79fb      	ldrb	r3, [r7, #7]
 80086ce:	2bff      	cmp	r3, #255	; 0xff
 80086d0:	d004      	beq.n	80086dc <SD_ReadyWait+0x28>
 80086d2:	4b05      	ldr	r3, [pc, #20]	; (80086e8 <SD_ReadyWait+0x34>)
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d1f3      	bne.n	80086c4 <SD_ReadyWait+0x10>

  return res;
 80086dc:	79fb      	ldrb	r3, [r7, #7]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	20002b12 	.word	0x20002b12

080086ec <SD_PowerOn>:

static void SD_PowerOn(void)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b086      	sub	sp, #24
 80086f0:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80086f2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80086f6:	617b      	str	r3, [r7, #20]

  DESELECT();
 80086f8:	f7ff ff72 	bl	80085e0 <DESELECT>

  for(int i = 0; i < 10; i++)
 80086fc:	2300      	movs	r3, #0
 80086fe:	613b      	str	r3, [r7, #16]
 8008700:	e005      	b.n	800870e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8008702:	20ff      	movs	r0, #255	; 0xff
 8008704:	f7ff ff80 	bl	8008608 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	3301      	adds	r3, #1
 800870c:	613b      	str	r3, [r7, #16]
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	2b09      	cmp	r3, #9
 8008712:	ddf6      	ble.n	8008702 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8008714:	f7ff ff50 	bl	80085b8 <SELECT>

  cmd_arg[0] = (CMD0 | 0x40);
 8008718:	2340      	movs	r3, #64	; 0x40
 800871a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 800871c:	2300      	movs	r3, #0
 800871e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8008720:	2300      	movs	r3, #0
 8008722:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8008724:	2300      	movs	r3, #0
 8008726:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8008728:	2300      	movs	r3, #0
 800872a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 800872c:	2395      	movs	r3, #149	; 0x95
 800872e:	727b      	strb	r3, [r7, #9]

  for (int i = 0; i < 6; i++)
 8008730:	2300      	movs	r3, #0
 8008732:	60fb      	str	r3, [r7, #12]
 8008734:	e009      	b.n	800874a <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8008736:	1d3a      	adds	r2, r7, #4
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	4413      	add	r3, r2
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	4618      	mov	r0, r3
 8008740:	f7ff ff62 	bl	8008608 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	3301      	adds	r3, #1
 8008748:	60fb      	str	r3, [r7, #12]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2b05      	cmp	r3, #5
 800874e:	ddf2      	ble.n	8008736 <SD_PowerOn+0x4a>
  }

  while ((SPI_RxByte() != 0x01) && Count)
 8008750:	e002      	b.n	8008758 <SD_PowerOn+0x6c>
  {
    Count--;
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	3b01      	subs	r3, #1
 8008756:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8008758:	f7ff ff76 	bl	8008648 <SPI_RxByte>
 800875c:	4603      	mov	r3, r0
 800875e:	2b01      	cmp	r3, #1
 8008760:	d002      	beq.n	8008768 <SD_PowerOn+0x7c>
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1f4      	bne.n	8008752 <SD_PowerOn+0x66>
  }

  DESELECT();
 8008768:	f7ff ff3a 	bl	80085e0 <DESELECT>
  SPI_TxByte(0XFF);
 800876c:	20ff      	movs	r0, #255	; 0xff
 800876e:	f7ff ff4b 	bl	8008608 <SPI_TxByte>

  PowerFlag = 1;
 8008772:	4b03      	ldr	r3, [pc, #12]	; (8008780 <SD_PowerOn+0x94>)
 8008774:	2201      	movs	r2, #1
 8008776:	701a      	strb	r2, [r3, #0]
}
 8008778:	bf00      	nop
 800877a:	3718      	adds	r7, #24
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	20002f69 	.word	0x20002f69

08008784 <SD_PowerOff>:

static void SD_PowerOff(void)
{
 8008784:	b480      	push	{r7}
 8008786:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8008788:	4b03      	ldr	r3, [pc, #12]	; (8008798 <SD_PowerOff+0x14>)
 800878a:	2200      	movs	r2, #0
 800878c:	701a      	strb	r2, [r3, #0]
}
 800878e:	bf00      	nop
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	20002f69 	.word	0x20002f69

0800879c <SD_CheckPower>:

static uint8_t SD_CheckPower(void)
{
 800879c:	b480      	push	{r7}
 800879e:	af00      	add	r7, sp, #0
  return PowerFlag;
 80087a0:	4b03      	ldr	r3, [pc, #12]	; (80087b0 <SD_CheckPower+0x14>)
 80087a2:	781b      	ldrb	r3, [r3, #0]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	20002f69 	.word	0x20002f69

080087b4 <SD_RxDataBlock>:

static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  uint8_t token;

  Timer1 = 10;
 80087be:	4b17      	ldr	r3, [pc, #92]	; (800881c <SD_RxDataBlock+0x68>)
 80087c0:	220a      	movs	r2, #10
 80087c2:	701a      	strb	r2, [r3, #0]

  do
  {
    token = SPI_RxByte();
 80087c4:	f7ff ff40 	bl	8008648 <SPI_RxByte>
 80087c8:	4603      	mov	r3, r0
 80087ca:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80087cc:	7bfb      	ldrb	r3, [r7, #15]
 80087ce:	2bff      	cmp	r3, #255	; 0xff
 80087d0:	d104      	bne.n	80087dc <SD_RxDataBlock+0x28>
 80087d2:	4b12      	ldr	r3, [pc, #72]	; (800881c <SD_RxDataBlock+0x68>)
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1f3      	bne.n	80087c4 <SD_RxDataBlock+0x10>

  if(token != 0xFE)
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
 80087de:	2bfe      	cmp	r3, #254	; 0xfe
 80087e0:	d001      	beq.n	80087e6 <SD_RxDataBlock+0x32>
    return FALSE;
 80087e2:	2300      	movs	r3, #0
 80087e4:	e016      	b.n	8008814 <SD_RxDataBlock+0x60>

  do
  {
    SPI_RxBytePtr(buff++);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	1c5a      	adds	r2, r3, #1
 80087ea:	607a      	str	r2, [r7, #4]
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7ff ff53 	bl	8008698 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	1c5a      	adds	r2, r3, #1
 80087f6:	607a      	str	r2, [r7, #4]
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7ff ff4d 	bl	8008698 <SPI_RxBytePtr>
  } while(btr -= 2);
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	3b02      	subs	r3, #2
 8008802:	603b      	str	r3, [r7, #0]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1ed      	bne.n	80087e6 <SD_RxDataBlock+0x32>

  SPI_RxByte();
 800880a:	f7ff ff1d 	bl	8008648 <SPI_RxByte>
  SPI_RxByte();
 800880e:	f7ff ff1b 	bl	8008648 <SPI_RxByte>

  return TRUE;
 8008812:	2301      	movs	r3, #1
}
 8008814:	4618      	mov	r0, r3
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	20002b11 	.word	0x20002b11

08008820 <SD_TxDataBlock>:

#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	460b      	mov	r3, r1
 800882a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 800882c:	2300      	movs	r3, #0
 800882e:	737b      	strb	r3, [r7, #13]

  if (SD_ReadyWait() != 0xFF)
 8008830:	f7ff ff40 	bl	80086b4 <SD_ReadyWait>
 8008834:	4603      	mov	r3, r0
 8008836:	2bff      	cmp	r3, #255	; 0xff
 8008838:	d001      	beq.n	800883e <SD_TxDataBlock+0x1e>
    return FALSE;
 800883a:	2300      	movs	r3, #0
 800883c:	e040      	b.n	80088c0 <SD_TxDataBlock+0xa0>

  SPI_TxByte(token);
 800883e:	78fb      	ldrb	r3, [r7, #3]
 8008840:	4618      	mov	r0, r3
 8008842:	f7ff fee1 	bl	8008608 <SPI_TxByte>

  if (token != 0xFD)
 8008846:	78fb      	ldrb	r3, [r7, #3]
 8008848:	2bfd      	cmp	r3, #253	; 0xfd
 800884a:	d031      	beq.n	80088b0 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 800884c:	2300      	movs	r3, #0
 800884e:	73bb      	strb	r3, [r7, #14]

    do
    {
      SPI_TxByte(*buff++);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	1c5a      	adds	r2, r3, #1
 8008854:	607a      	str	r2, [r7, #4]
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	4618      	mov	r0, r3
 800885a:	f7ff fed5 	bl	8008608 <SPI_TxByte>
      SPI_TxByte(*buff++);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	1c5a      	adds	r2, r3, #1
 8008862:	607a      	str	r2, [r7, #4]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	4618      	mov	r0, r3
 8008868:	f7ff fece 	bl	8008608 <SPI_TxByte>
    } while (--wc);
 800886c:	7bbb      	ldrb	r3, [r7, #14]
 800886e:	3b01      	subs	r3, #1
 8008870:	73bb      	strb	r3, [r7, #14]
 8008872:	7bbb      	ldrb	r3, [r7, #14]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1eb      	bne.n	8008850 <SD_TxDataBlock+0x30>

    SPI_RxByte();
 8008878:	f7ff fee6 	bl	8008648 <SPI_RxByte>
    SPI_RxByte();
 800887c:	f7ff fee4 	bl	8008648 <SPI_RxByte>

    while (i <= 64)
 8008880:	e00b      	b.n	800889a <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8008882:	f7ff fee1 	bl	8008648 <SPI_RxByte>
 8008886:	4603      	mov	r3, r0
 8008888:	73fb      	strb	r3, [r7, #15]

      if ((resp & 0x1F) == 0x05)
 800888a:	7bfb      	ldrb	r3, [r7, #15]
 800888c:	f003 031f 	and.w	r3, r3, #31
 8008890:	2b05      	cmp	r3, #5
 8008892:	d006      	beq.n	80088a2 <SD_TxDataBlock+0x82>
        break;

      i++;
 8008894:	7b7b      	ldrb	r3, [r7, #13]
 8008896:	3301      	adds	r3, #1
 8008898:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 800889a:	7b7b      	ldrb	r3, [r7, #13]
 800889c:	2b40      	cmp	r3, #64	; 0x40
 800889e:	d9f0      	bls.n	8008882 <SD_TxDataBlock+0x62>
 80088a0:	e000      	b.n	80088a4 <SD_TxDataBlock+0x84>
        break;
 80088a2:	bf00      	nop
    }

    while (SPI_RxByte() == 0);
 80088a4:	bf00      	nop
 80088a6:	f7ff fecf 	bl	8008648 <SPI_RxByte>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d0fa      	beq.n	80088a6 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 80088b0:	7bfb      	ldrb	r3, [r7, #15]
 80088b2:	f003 031f 	and.w	r3, r3, #31
 80088b6:	2b05      	cmp	r3, #5
 80088b8:	d101      	bne.n	80088be <SD_TxDataBlock+0x9e>
    return TRUE;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e000      	b.n	80088c0 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <SD_SendCmd>:
#endif /* _READONLY */

static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	4603      	mov	r3, r0
 80088d0:	6039      	str	r1, [r7, #0]
 80088d2:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  if (SD_ReadyWait() != 0xFF)
 80088d4:	f7ff feee 	bl	80086b4 <SD_ReadyWait>
 80088d8:	4603      	mov	r3, r0
 80088da:	2bff      	cmp	r3, #255	; 0xff
 80088dc:	d001      	beq.n	80088e2 <SD_SendCmd+0x1a>
    return 0xFF;
 80088de:	23ff      	movs	r3, #255	; 0xff
 80088e0:	e040      	b.n	8008964 <SD_SendCmd+0x9c>

  SPI_TxByte(cmd); 			/* Command */
 80088e2:	79fb      	ldrb	r3, [r7, #7]
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7ff fe8f 	bl	8008608 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	0e1b      	lsrs	r3, r3, #24
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7ff fe89 	bl	8008608 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	0c1b      	lsrs	r3, r3, #16
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7ff fe83 	bl	8008608 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	0a1b      	lsrs	r3, r3, #8
 8008906:	b2db      	uxtb	r3, r3
 8008908:	4618      	mov	r0, r3
 800890a:	f7ff fe7d 	bl	8008608 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	b2db      	uxtb	r3, r3
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff fe78 	bl	8008608 <SPI_TxByte>

  crc = 0;
 8008918:	2300      	movs	r3, #0
 800891a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 800891c:	79fb      	ldrb	r3, [r7, #7]
 800891e:	2b40      	cmp	r3, #64	; 0x40
 8008920:	d101      	bne.n	8008926 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8008922:	2395      	movs	r3, #149	; 0x95
 8008924:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8008926:	79fb      	ldrb	r3, [r7, #7]
 8008928:	2b48      	cmp	r3, #72	; 0x48
 800892a:	d101      	bne.n	8008930 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 800892c:	2387      	movs	r3, #135	; 0x87
 800892e:	73fb      	strb	r3, [r7, #15]

  SPI_TxByte(crc);
 8008930:	7bfb      	ldrb	r3, [r7, #15]
 8008932:	4618      	mov	r0, r3
 8008934:	f7ff fe68 	bl	8008608 <SPI_TxByte>

  if (cmd == CMD12)
 8008938:	79fb      	ldrb	r3, [r7, #7]
 800893a:	2b4c      	cmp	r3, #76	; 0x4c
 800893c:	d101      	bne.n	8008942 <SD_SendCmd+0x7a>
    SPI_RxByte();
 800893e:	f7ff fe83 	bl	8008648 <SPI_RxByte>

  uint8_t n = 10;
 8008942:	230a      	movs	r3, #10
 8008944:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8008946:	f7ff fe7f 	bl	8008648 <SPI_RxByte>
 800894a:	4603      	mov	r3, r0
 800894c:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800894e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8008952:	2b00      	cmp	r3, #0
 8008954:	da05      	bge.n	8008962 <SD_SendCmd+0x9a>
 8008956:	7bbb      	ldrb	r3, [r7, #14]
 8008958:	3b01      	subs	r3, #1
 800895a:	73bb      	strb	r3, [r7, #14]
 800895c:	7bbb      	ldrb	r3, [r7, #14]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1f1      	bne.n	8008946 <SD_SendCmd+0x7e>

  return res;
 8008962:	7b7b      	ldrb	r3, [r7, #13]
}
 8008964:	4618      	mov	r0, r3
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <SD_disk_initialize>:

DSTATUS SD_disk_initialize(BYTE drv)
{
 800896c:	b590      	push	{r4, r7, lr}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	4603      	mov	r3, r0
 8008974:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  if(drv)
 8008976:	79fb      	ldrb	r3, [r7, #7]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d001      	beq.n	8008980 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 800897c:	2301      	movs	r3, #1
 800897e:	e0d5      	b.n	8008b2c <SD_disk_initialize+0x1c0>

  if(Stat & STA_NODISK)
 8008980:	4b6c      	ldr	r3, [pc, #432]	; (8008b34 <SD_disk_initialize+0x1c8>)
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	b2db      	uxtb	r3, r3
 8008986:	f003 0302 	and.w	r3, r3, #2
 800898a:	2b00      	cmp	r3, #0
 800898c:	d003      	beq.n	8008996 <SD_disk_initialize+0x2a>
    return Stat;
 800898e:	4b69      	ldr	r3, [pc, #420]	; (8008b34 <SD_disk_initialize+0x1c8>)
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	b2db      	uxtb	r3, r3
 8008994:	e0ca      	b.n	8008b2c <SD_disk_initialize+0x1c0>

  SD_PowerOn();
 8008996:	f7ff fea9 	bl	80086ec <SD_PowerOn>

  SELECT();
 800899a:	f7ff fe0d 	bl	80085b8 <SELECT>

  type = 0;
 800899e:	2300      	movs	r3, #0
 80089a0:	73bb      	strb	r3, [r7, #14]

  if (SD_SendCmd(CMD0, 0) == 1)
 80089a2:	2100      	movs	r1, #0
 80089a4:	2040      	movs	r0, #64	; 0x40
 80089a6:	f7ff ff8f 	bl	80088c8 <SD_SendCmd>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	f040 80a5 	bne.w	8008afc <SD_disk_initialize+0x190>
  {
    Timer1 = 100;
 80089b2:	4b61      	ldr	r3, [pc, #388]	; (8008b38 <SD_disk_initialize+0x1cc>)
 80089b4:	2264      	movs	r2, #100	; 0x64
 80089b6:	701a      	strb	r2, [r3, #0]

    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80089b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80089bc:	2048      	movs	r0, #72	; 0x48
 80089be:	f7ff ff83 	bl	80088c8 <SD_SendCmd>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d158      	bne.n	8008a7a <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80089c8:	2300      	movs	r3, #0
 80089ca:	73fb      	strb	r3, [r7, #15]
 80089cc:	e00c      	b.n	80089e8 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80089ce:	7bfc      	ldrb	r4, [r7, #15]
 80089d0:	f7ff fe3a 	bl	8008648 <SPI_RxByte>
 80089d4:	4603      	mov	r3, r0
 80089d6:	461a      	mov	r2, r3
 80089d8:	f104 0310 	add.w	r3, r4, #16
 80089dc:	443b      	add	r3, r7
 80089de:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80089e2:	7bfb      	ldrb	r3, [r7, #15]
 80089e4:	3301      	adds	r3, #1
 80089e6:	73fb      	strb	r3, [r7, #15]
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
 80089ea:	2b03      	cmp	r3, #3
 80089ec:	d9ef      	bls.n	80089ce <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80089ee:	7abb      	ldrb	r3, [r7, #10]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	f040 8083 	bne.w	8008afc <SD_disk_initialize+0x190>
 80089f6:	7afb      	ldrb	r3, [r7, #11]
 80089f8:	2baa      	cmp	r3, #170	; 0xaa
 80089fa:	d17f      	bne.n	8008afc <SD_disk_initialize+0x190>
      {
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80089fc:	2100      	movs	r1, #0
 80089fe:	2077      	movs	r0, #119	; 0x77
 8008a00:	f7ff ff62 	bl	80088c8 <SD_SendCmd>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d807      	bhi.n	8008a1a <SD_disk_initialize+0xae>
 8008a0a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008a0e:	2069      	movs	r0, #105	; 0x69
 8008a10:	f7ff ff5a 	bl	80088c8 <SD_SendCmd>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d005      	beq.n	8008a26 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8008a1a:	4b47      	ldr	r3, [pc, #284]	; (8008b38 <SD_disk_initialize+0x1cc>)
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d1eb      	bne.n	80089fc <SD_disk_initialize+0x90>
 8008a24:	e000      	b.n	8008a28 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8008a26:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8008a28:	4b43      	ldr	r3, [pc, #268]	; (8008b38 <SD_disk_initialize+0x1cc>)
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d064      	beq.n	8008afc <SD_disk_initialize+0x190>
 8008a32:	2100      	movs	r1, #0
 8008a34:	207a      	movs	r0, #122	; 0x7a
 8008a36:	f7ff ff47 	bl	80088c8 <SD_SendCmd>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d15d      	bne.n	8008afc <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8008a40:	2300      	movs	r3, #0
 8008a42:	73fb      	strb	r3, [r7, #15]
 8008a44:	e00c      	b.n	8008a60 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8008a46:	7bfc      	ldrb	r4, [r7, #15]
 8008a48:	f7ff fdfe 	bl	8008648 <SPI_RxByte>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	461a      	mov	r2, r3
 8008a50:	f104 0310 	add.w	r3, r4, #16
 8008a54:	443b      	add	r3, r7
 8008a56:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	73fb      	strb	r3, [r7, #15]
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
 8008a62:	2b03      	cmp	r3, #3
 8008a64:	d9ef      	bls.n	8008a46 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8008a66:	7a3b      	ldrb	r3, [r7, #8]
 8008a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <SD_disk_initialize+0x108>
 8008a70:	2306      	movs	r3, #6
 8008a72:	e000      	b.n	8008a76 <SD_disk_initialize+0x10a>
 8008a74:	2302      	movs	r3, #2
 8008a76:	73bb      	strb	r3, [r7, #14]
 8008a78:	e040      	b.n	8008afc <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	2077      	movs	r0, #119	; 0x77
 8008a7e:	f7ff ff23 	bl	80088c8 <SD_SendCmd>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d808      	bhi.n	8008a9a <SD_disk_initialize+0x12e>
 8008a88:	2100      	movs	r1, #0
 8008a8a:	2069      	movs	r0, #105	; 0x69
 8008a8c:	f7ff ff1c 	bl	80088c8 <SD_SendCmd>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d801      	bhi.n	8008a9a <SD_disk_initialize+0x12e>
 8008a96:	2302      	movs	r3, #2
 8008a98:	e000      	b.n	8008a9c <SD_disk_initialize+0x130>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8008a9e:	7bbb      	ldrb	r3, [r7, #14]
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	d10e      	bne.n	8008ac2 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	2077      	movs	r0, #119	; 0x77
 8008aa8:	f7ff ff0e 	bl	80088c8 <SD_SendCmd>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d80e      	bhi.n	8008ad0 <SD_disk_initialize+0x164>
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	2069      	movs	r0, #105	; 0x69
 8008ab6:	f7ff ff07 	bl	80088c8 <SD_SendCmd>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d107      	bne.n	8008ad0 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8008ac0:	e00d      	b.n	8008ade <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	2041      	movs	r0, #65	; 0x41
 8008ac6:	f7ff feff 	bl	80088c8 <SD_SendCmd>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d005      	beq.n	8008adc <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8008ad0:	4b19      	ldr	r3, [pc, #100]	; (8008b38 <SD_disk_initialize+0x1cc>)
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1e1      	bne.n	8008a9e <SD_disk_initialize+0x132>
 8008ada:	e000      	b.n	8008ade <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8008adc:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8008ade:	4b16      	ldr	r3, [pc, #88]	; (8008b38 <SD_disk_initialize+0x1cc>)
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d007      	beq.n	8008af8 <SD_disk_initialize+0x18c>
 8008ae8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008aec:	2050      	movs	r0, #80	; 0x50
 8008aee:	f7ff feeb 	bl	80088c8 <SD_SendCmd>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d001      	beq.n	8008afc <SD_disk_initialize+0x190>
      {
        type = 0;
 8008af8:	2300      	movs	r3, #0
 8008afa:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8008afc:	4a0f      	ldr	r2, [pc, #60]	; (8008b3c <SD_disk_initialize+0x1d0>)
 8008afe:	7bbb      	ldrb	r3, [r7, #14]
 8008b00:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8008b02:	f7ff fd6d 	bl	80085e0 <DESELECT>

  SPI_RxByte();
 8008b06:	f7ff fd9f 	bl	8008648 <SPI_RxByte>

  if (type)
 8008b0a:	7bbb      	ldrb	r3, [r7, #14]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d008      	beq.n	8008b22 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8008b10:	4b08      	ldr	r3, [pc, #32]	; (8008b34 <SD_disk_initialize+0x1c8>)
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	f023 0301 	bic.w	r3, r3, #1
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	4b05      	ldr	r3, [pc, #20]	; (8008b34 <SD_disk_initialize+0x1c8>)
 8008b1e:	701a      	strb	r2, [r3, #0]
 8008b20:	e001      	b.n	8008b26 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8008b22:	f7ff fe2f 	bl	8008784 <SD_PowerOff>
  }

  return Stat;
 8008b26:	4b03      	ldr	r3, [pc, #12]	; (8008b34 <SD_disk_initialize+0x1c8>)
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	b2db      	uxtb	r3, r3
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd90      	pop	{r4, r7, pc}
 8008b34:	20000071 	.word	0x20000071
 8008b38:	20002b11 	.word	0x20002b11
 8008b3c:	20002f68 	.word	0x20002f68

08008b40 <SD_disk_status>:

DSTATUS SD_disk_status(BYTE drv)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	4603      	mov	r3, r0
 8008b48:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8008b4a:	79fb      	ldrb	r3, [r7, #7]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d001      	beq.n	8008b54 <SD_disk_status+0x14>
    return STA_NOINIT;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e002      	b.n	8008b5a <SD_disk_status+0x1a>

  return Stat;
 8008b54:	4b04      	ldr	r3, [pc, #16]	; (8008b68 <SD_disk_status+0x28>)
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	b2db      	uxtb	r3, r3
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	20000071 	.word	0x20000071

08008b6c <SD_disk_read>:

DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60b9      	str	r1, [r7, #8]
 8008b74:	607a      	str	r2, [r7, #4]
 8008b76:	603b      	str	r3, [r7, #0]
 8008b78:	4603      	mov	r3, r0
 8008b7a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d102      	bne.n	8008b88 <SD_disk_read+0x1c>
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d101      	bne.n	8008b8c <SD_disk_read+0x20>
    return RES_PARERR;
 8008b88:	2304      	movs	r3, #4
 8008b8a:	e051      	b.n	8008c30 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8008b8c:	4b2a      	ldr	r3, [pc, #168]	; (8008c38 <SD_disk_read+0xcc>)
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d001      	beq.n	8008b9e <SD_disk_read+0x32>
    return RES_NOTRDY;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	e048      	b.n	8008c30 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8008b9e:	4b27      	ldr	r3, [pc, #156]	; (8008c3c <SD_disk_read+0xd0>)
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	f003 0304 	and.w	r3, r3, #4
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d102      	bne.n	8008bb0 <SD_disk_read+0x44>
    sector *= 512;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	025b      	lsls	r3, r3, #9
 8008bae:	607b      	str	r3, [r7, #4]

  SELECT();
 8008bb0:	f7ff fd02 	bl	80085b8 <SELECT>

  if (count == 1)
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d111      	bne.n	8008bde <SD_disk_read+0x72>
  {
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8008bba:	6879      	ldr	r1, [r7, #4]
 8008bbc:	2051      	movs	r0, #81	; 0x51
 8008bbe:	f7ff fe83 	bl	80088c8 <SD_SendCmd>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d129      	bne.n	8008c1c <SD_disk_read+0xb0>
 8008bc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008bcc:	68b8      	ldr	r0, [r7, #8]
 8008bce:	f7ff fdf1 	bl	80087b4 <SD_RxDataBlock>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d021      	beq.n	8008c1c <SD_disk_read+0xb0>
      count = 0;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	603b      	str	r3, [r7, #0]
 8008bdc:	e01e      	b.n	8008c1c <SD_disk_read+0xb0>
  }
  else
  {
    if (SD_SendCmd(CMD18, sector) == 0)
 8008bde:	6879      	ldr	r1, [r7, #4]
 8008be0:	2052      	movs	r0, #82	; 0x52
 8008be2:	f7ff fe71 	bl	80088c8 <SD_SendCmd>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d117      	bne.n	8008c1c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8008bec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008bf0:	68b8      	ldr	r0, [r7, #8]
 8008bf2:	f7ff fddf 	bl	80087b4 <SD_RxDataBlock>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00a      	beq.n	8008c12 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008c02:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	3b01      	subs	r3, #1
 8008c08:	603b      	str	r3, [r7, #0]
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1ed      	bne.n	8008bec <SD_disk_read+0x80>
 8008c10:	e000      	b.n	8008c14 <SD_disk_read+0xa8>
          break;
 8008c12:	bf00      	nop
      SD_SendCmd(CMD12, 0);
 8008c14:	2100      	movs	r1, #0
 8008c16:	204c      	movs	r0, #76	; 0x4c
 8008c18:	f7ff fe56 	bl	80088c8 <SD_SendCmd>
    }
  }

  DESELECT();
 8008c1c:	f7ff fce0 	bl	80085e0 <DESELECT>
  SPI_RxByte();
 8008c20:	f7ff fd12 	bl	8008648 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	bf14      	ite	ne
 8008c2a:	2301      	movne	r3, #1
 8008c2c:	2300      	moveq	r3, #0
 8008c2e:	b2db      	uxtb	r3, r3
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	20000071 	.word	0x20000071
 8008c3c:	20002f68 	.word	0x20002f68

08008c40 <SD_disk_write>:

#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60b9      	str	r1, [r7, #8]
 8008c48:	607a      	str	r2, [r7, #4]
 8008c4a:	603b      	str	r3, [r7, #0]
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8008c50:	7bfb      	ldrb	r3, [r7, #15]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d102      	bne.n	8008c5c <SD_disk_write+0x1c>
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d101      	bne.n	8008c60 <SD_disk_write+0x20>
    return RES_PARERR;
 8008c5c:	2304      	movs	r3, #4
 8008c5e:	e06b      	b.n	8008d38 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8008c60:	4b37      	ldr	r3, [pc, #220]	; (8008d40 <SD_disk_write+0x100>)
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	f003 0301 	and.w	r3, r3, #1
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d001      	beq.n	8008c72 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	e062      	b.n	8008d38 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8008c72:	4b33      	ldr	r3, [pc, #204]	; (8008d40 <SD_disk_write+0x100>)
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	f003 0304 	and.w	r3, r3, #4
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d001      	beq.n	8008c84 <SD_disk_write+0x44>
    return RES_WRPRT;
 8008c80:	2302      	movs	r3, #2
 8008c82:	e059      	b.n	8008d38 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8008c84:	4b2f      	ldr	r3, [pc, #188]	; (8008d44 <SD_disk_write+0x104>)
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	f003 0304 	and.w	r3, r3, #4
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d102      	bne.n	8008c96 <SD_disk_write+0x56>
    sector *= 512;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	025b      	lsls	r3, r3, #9
 8008c94:	607b      	str	r3, [r7, #4]

  SELECT();
 8008c96:	f7ff fc8f 	bl	80085b8 <SELECT>

  if (count == 1)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d110      	bne.n	8008cc2 <SD_disk_write+0x82>
  {
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8008ca0:	6879      	ldr	r1, [r7, #4]
 8008ca2:	2058      	movs	r0, #88	; 0x58
 8008ca4:	f7ff fe10 	bl	80088c8 <SD_SendCmd>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d13a      	bne.n	8008d24 <SD_disk_write+0xe4>
 8008cae:	21fe      	movs	r1, #254	; 0xfe
 8008cb0:	68b8      	ldr	r0, [r7, #8]
 8008cb2:	f7ff fdb5 	bl	8008820 <SD_TxDataBlock>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d033      	beq.n	8008d24 <SD_disk_write+0xe4>
      count = 0;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	603b      	str	r3, [r7, #0]
 8008cc0:	e030      	b.n	8008d24 <SD_disk_write+0xe4>
  }
  else
  {
    if (CardType & 2)
 8008cc2:	4b20      	ldr	r3, [pc, #128]	; (8008d44 <SD_disk_write+0x104>)
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	f003 0302 	and.w	r3, r3, #2
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d007      	beq.n	8008cde <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8008cce:	2100      	movs	r1, #0
 8008cd0:	2077      	movs	r0, #119	; 0x77
 8008cd2:	f7ff fdf9 	bl	80088c8 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	2057      	movs	r0, #87	; 0x57
 8008cda:	f7ff fdf5 	bl	80088c8 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8008cde:	6879      	ldr	r1, [r7, #4]
 8008ce0:	2059      	movs	r0, #89	; 0x59
 8008ce2:	f7ff fdf1 	bl	80088c8 <SD_SendCmd>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d11b      	bne.n	8008d24 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8008cec:	21fc      	movs	r1, #252	; 0xfc
 8008cee:	68b8      	ldr	r0, [r7, #8]
 8008cf0:	f7ff fd96 	bl	8008820 <SD_TxDataBlock>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00a      	beq.n	8008d10 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008d00:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	3b01      	subs	r3, #1
 8008d06:	603b      	str	r3, [r7, #0]
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1ee      	bne.n	8008cec <SD_disk_write+0xac>
 8008d0e:	e000      	b.n	8008d12 <SD_disk_write+0xd2>
          break;
 8008d10:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8008d12:	21fd      	movs	r1, #253	; 0xfd
 8008d14:	2000      	movs	r0, #0
 8008d16:	f7ff fd83 	bl	8008820 <SD_TxDataBlock>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d101      	bne.n	8008d24 <SD_disk_write+0xe4>
      {
        count = 1;
 8008d20:	2301      	movs	r3, #1
 8008d22:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8008d24:	f7ff fc5c 	bl	80085e0 <DESELECT>
  SPI_RxByte();
 8008d28:	f7ff fc8e 	bl	8008648 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	bf14      	ite	ne
 8008d32:	2301      	movne	r3, #1
 8008d34:	2300      	moveq	r3, #0
 8008d36:	b2db      	uxtb	r3, r3
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3710      	adds	r7, #16
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	20000071 	.word	0x20000071
 8008d44:	20002f68 	.word	0x20002f68

08008d48 <SD_disk_ioctl>:
#endif /* _READONLY */

DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8008d48:	b590      	push	{r4, r7, lr}
 8008d4a:	b08b      	sub	sp, #44	; 0x2c
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	4603      	mov	r3, r0
 8008d50:	603a      	str	r2, [r7, #0]
 8008d52:	71fb      	strb	r3, [r7, #7]
 8008d54:	460b      	mov	r3, r1
 8008d56:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8008d5c:	79fb      	ldrb	r3, [r7, #7]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d001      	beq.n	8008d66 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8008d62:	2304      	movs	r3, #4
 8008d64:	e11e      	b.n	8008fa4 <SD_disk_ioctl+0x25c>

  res = RES_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8008d6c:	79bb      	ldrb	r3, [r7, #6]
 8008d6e:	2b05      	cmp	r3, #5
 8008d70:	d129      	bne.n	8008dc6 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8008d72:	6a3b      	ldr	r3, [r7, #32]
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d017      	beq.n	8008daa <SD_disk_ioctl+0x62>
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	dc1f      	bgt.n	8008dbe <SD_disk_ioctl+0x76>
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d002      	beq.n	8008d88 <SD_disk_ioctl+0x40>
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d00b      	beq.n	8008d9e <SD_disk_ioctl+0x56>
 8008d86:	e01a      	b.n	8008dbe <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8008d88:	f7ff fd08 	bl	800879c <SD_CheckPower>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d001      	beq.n	8008d96 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8008d92:	f7ff fcf7 	bl	8008784 <SD_PowerOff>
      res = RES_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008d9c:	e100      	b.n	8008fa0 <SD_disk_ioctl+0x258>
    case 1:
      SD_PowerOn();             /* Power On */
 8008d9e:	f7ff fca5 	bl	80086ec <SD_PowerOn>
      res = RES_OK;
 8008da2:	2300      	movs	r3, #0
 8008da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008da8:	e0fa      	b.n	8008fa0 <SD_disk_ioctl+0x258>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8008daa:	6a3b      	ldr	r3, [r7, #32]
 8008dac:	1c5c      	adds	r4, r3, #1
 8008dae:	f7ff fcf5 	bl	800879c <SD_CheckPower>
 8008db2:	4603      	mov	r3, r0
 8008db4:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8008db6:	2300      	movs	r3, #0
 8008db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008dbc:	e0f0      	b.n	8008fa0 <SD_disk_ioctl+0x258>
    default:
      res = RES_PARERR;
 8008dbe:	2304      	movs	r3, #4
 8008dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008dc4:	e0ec      	b.n	8008fa0 <SD_disk_ioctl+0x258>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8008dc6:	4b79      	ldr	r3, [pc, #484]	; (8008fac <SD_disk_ioctl+0x264>)
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	f003 0301 	and.w	r3, r3, #1
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d001      	beq.n	8008dd8 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8008dd4:	2303      	movs	r3, #3
 8008dd6:	e0e5      	b.n	8008fa4 <SD_disk_ioctl+0x25c>

    SELECT();
 8008dd8:	f7ff fbee 	bl	80085b8 <SELECT>

    switch (ctrl)
 8008ddc:	79bb      	ldrb	r3, [r7, #6]
 8008dde:	2b0d      	cmp	r3, #13
 8008de0:	f200 80cd 	bhi.w	8008f7e <SD_disk_ioctl+0x236>
 8008de4:	a201      	add	r2, pc, #4	; (adr r2, 8008dec <SD_disk_ioctl+0xa4>)
 8008de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dea:	bf00      	nop
 8008dec:	08008ee7 	.word	0x08008ee7
 8008df0:	08008e25 	.word	0x08008e25
 8008df4:	08008ed7 	.word	0x08008ed7
 8008df8:	08008f7f 	.word	0x08008f7f
 8008dfc:	08008f7f 	.word	0x08008f7f
 8008e00:	08008f7f 	.word	0x08008f7f
 8008e04:	08008f7f 	.word	0x08008f7f
 8008e08:	08008f7f 	.word	0x08008f7f
 8008e0c:	08008f7f 	.word	0x08008f7f
 8008e10:	08008f7f 	.word	0x08008f7f
 8008e14:	08008f7f 	.word	0x08008f7f
 8008e18:	08008ef9 	.word	0x08008ef9
 8008e1c:	08008f1d 	.word	0x08008f1d
 8008e20:	08008f41 	.word	0x08008f41
    {
    case GET_SECTOR_COUNT:
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8008e24:	2100      	movs	r1, #0
 8008e26:	2049      	movs	r0, #73	; 0x49
 8008e28:	f7ff fd4e 	bl	80088c8 <SD_SendCmd>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f040 80a9 	bne.w	8008f86 <SD_disk_ioctl+0x23e>
 8008e34:	f107 030c 	add.w	r3, r7, #12
 8008e38:	2110      	movs	r1, #16
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7ff fcba 	bl	80087b4 <SD_RxDataBlock>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f000 809f 	beq.w	8008f86 <SD_disk_ioctl+0x23e>
      {
        if ((csd[0] >> 6) == 1)
 8008e48:	7b3b      	ldrb	r3, [r7, #12]
 8008e4a:	099b      	lsrs	r3, r3, #6
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d10e      	bne.n	8008e70 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8008e52:	7d7b      	ldrb	r3, [r7, #21]
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	7d3b      	ldrb	r3, [r7, #20]
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	021b      	lsls	r3, r3, #8
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	4413      	add	r3, r2
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	3301      	adds	r3, #1
 8008e64:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8008e66:	8bfb      	ldrh	r3, [r7, #30]
 8008e68:	029a      	lsls	r2, r3, #10
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	601a      	str	r2, [r3, #0]
 8008e6e:	e02e      	b.n	8008ece <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8008e70:	7c7b      	ldrb	r3, [r7, #17]
 8008e72:	f003 030f 	and.w	r3, r3, #15
 8008e76:	b2da      	uxtb	r2, r3
 8008e78:	7dbb      	ldrb	r3, [r7, #22]
 8008e7a:	09db      	lsrs	r3, r3, #7
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	4413      	add	r3, r2
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	7d7b      	ldrb	r3, [r7, #21]
 8008e84:	005b      	lsls	r3, r3, #1
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	f003 0306 	and.w	r3, r3, #6
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	4413      	add	r3, r2
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	3302      	adds	r3, #2
 8008e94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8008e98:	7d3b      	ldrb	r3, [r7, #20]
 8008e9a:	099b      	lsrs	r3, r3, #6
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	7cfb      	ldrb	r3, [r7, #19]
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	4413      	add	r3, r2
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	7cbb      	ldrb	r3, [r7, #18]
 8008eae:	029b      	lsls	r3, r3, #10
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	4413      	add	r3, r2
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8008ec0:	8bfa      	ldrh	r2, [r7, #30]
 8008ec2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ec6:	3b09      	subs	r3, #9
 8008ec8:	409a      	lsls	r2, r3
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8008ed4:	e057      	b.n	8008f86 <SD_disk_ioctl+0x23e>

    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008edc:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008ee4:	e058      	b.n	8008f98 <SD_disk_ioctl+0x250>

    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF)
 8008ee6:	f7ff fbe5 	bl	80086b4 <SD_ReadyWait>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2bff      	cmp	r3, #255	; 0xff
 8008eee:	d14c      	bne.n	8008f8a <SD_disk_ioctl+0x242>
        res = RES_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008ef6:	e048      	b.n	8008f8a <SD_disk_ioctl+0x242>

    case MMC_GET_CSD:
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8008ef8:	2100      	movs	r1, #0
 8008efa:	2049      	movs	r0, #73	; 0x49
 8008efc:	f7ff fce4 	bl	80088c8 <SD_SendCmd>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d143      	bne.n	8008f8e <SD_disk_ioctl+0x246>
 8008f06:	2110      	movs	r1, #16
 8008f08:	6a38      	ldr	r0, [r7, #32]
 8008f0a:	f7ff fc53 	bl	80087b4 <SD_RxDataBlock>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d03c      	beq.n	8008f8e <SD_disk_ioctl+0x246>
        res = RES_OK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008f1a:	e038      	b.n	8008f8e <SD_disk_ioctl+0x246>

    case MMC_GET_CID:
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	204a      	movs	r0, #74	; 0x4a
 8008f20:	f7ff fcd2 	bl	80088c8 <SD_SendCmd>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d133      	bne.n	8008f92 <SD_disk_ioctl+0x24a>
 8008f2a:	2110      	movs	r1, #16
 8008f2c:	6a38      	ldr	r0, [r7, #32]
 8008f2e:	f7ff fc41 	bl	80087b4 <SD_RxDataBlock>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d02c      	beq.n	8008f92 <SD_disk_ioctl+0x24a>
        res = RES_OK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008f3e:	e028      	b.n	8008f92 <SD_disk_ioctl+0x24a>

    case MMC_GET_OCR:
      if (SD_SendCmd(CMD58, 0) == 0)
 8008f40:	2100      	movs	r1, #0
 8008f42:	207a      	movs	r0, #122	; 0x7a
 8008f44:	f7ff fcc0 	bl	80088c8 <SD_SendCmd>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d123      	bne.n	8008f96 <SD_disk_ioctl+0x24e>
      {
        for (n = 0; n < 4; n++)
 8008f4e:	2300      	movs	r3, #0
 8008f50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008f54:	e00b      	b.n	8008f6e <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8008f56:	6a3c      	ldr	r4, [r7, #32]
 8008f58:	1c63      	adds	r3, r4, #1
 8008f5a:	623b      	str	r3, [r7, #32]
 8008f5c:	f7ff fb74 	bl	8008648 <SPI_RxByte>
 8008f60:	4603      	mov	r3, r0
 8008f62:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8008f64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008f68:	3301      	adds	r3, #1
 8008f6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008f6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008f72:	2b03      	cmp	r3, #3
 8008f74:	d9ef      	bls.n	8008f56 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8008f7c:	e00b      	b.n	8008f96 <SD_disk_ioctl+0x24e>

    default:
      res = RES_PARERR;
 8008f7e:	2304      	movs	r3, #4
 8008f80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008f84:	e008      	b.n	8008f98 <SD_disk_ioctl+0x250>
      break;
 8008f86:	bf00      	nop
 8008f88:	e006      	b.n	8008f98 <SD_disk_ioctl+0x250>
      break;
 8008f8a:	bf00      	nop
 8008f8c:	e004      	b.n	8008f98 <SD_disk_ioctl+0x250>
      break;
 8008f8e:	bf00      	nop
 8008f90:	e002      	b.n	8008f98 <SD_disk_ioctl+0x250>
      break;
 8008f92:	bf00      	nop
 8008f94:	e000      	b.n	8008f98 <SD_disk_ioctl+0x250>
      break;
 8008f96:	bf00      	nop
    }

    DESELECT();
 8008f98:	f7ff fb22 	bl	80085e0 <DESELECT>
    SPI_RxByte();
 8008f9c:	f7ff fb54 	bl	8008648 <SPI_RxByte>
  }

  return res;
 8008fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	372c      	adds	r7, #44	; 0x2c
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd90      	pop	{r4, r7, pc}
 8008fac:	20000071 	.word	0x20000071

08008fb0 <user_sd_init>:
		user_sd_t* self,
		SPI_HandleTypeDef* spi,
		GPIO_TypeDef* csPort,
		uint16_t csPin
		)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
 8008fbc:	807b      	strh	r3, [r7, #2]
	memset(self, 0, sizeof(*self));
 8008fbe:	f242 4284 	movw	r2, #9348	; 0x2484
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f003 f9a1 	bl	800c30c <memset>
	SD_set_spi_and_cs(spi, csPort, csPin);
 8008fca:	887b      	ldrh	r3, [r7, #2]
 8008fcc:	461a      	mov	r2, r3
 8008fce:	6879      	ldr	r1, [r7, #4]
 8008fd0:	68b8      	ldr	r0, [r7, #8]
 8008fd2:	f7ff fad5 	bl	8008580 <SD_set_spi_and_cs>
	return 0;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <user_sd_mount>:

int user_sd_mount(user_sd_t* self, BYTE opt)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	460b      	mov	r3, r1
 8008fea:	70fb      	strb	r3, [r7, #3]
	return f_mount(&self->fs, "", opt);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	78fa      	ldrb	r2, [r7, #3]
 8008ff0:	4904      	ldr	r1, [pc, #16]	; (8009004 <user_sd_mount+0x24>)
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f002 fa6e 	bl	800b4d4 <f_mount>
 8008ff8:	4603      	mov	r3, r0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	0800d3c0 	.word	0x0800d3c0

08009008 <user_sd_fopen>:
	self->free_space = (uint32_t)(self->fre_clust * self->pfs->csize * 0.5);
	return self->free_space;
}

int user_sd_fopen(user_sd_t* self, const TCHAR* path, BYTE mode)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	4613      	mov	r3, r2
 8009014:	71fb      	strb	r3, [r7, #7]
	return f_open(&self->fil, path, mode);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800901c:	3318      	adds	r3, #24
 800901e:	79fa      	ldrb	r2, [r7, #7]
 8009020:	68b9      	ldr	r1, [r7, #8]
 8009022:	4618      	mov	r0, r3
 8009024:	f002 fa9c 	bl	800b560 <f_open>
 8009028:	4603      	mov	r3, r0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <user_sd_fputs>:

int user_sd_fputs(user_sd_t* self, const TCHAR* str)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b082      	sub	sp, #8
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
 800903a:	6039      	str	r1, [r7, #0]
	return f_puts(str, &self->fil);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009042:	3318      	adds	r3, #24
 8009044:	4619      	mov	r1, r3
 8009046:	6838      	ldr	r0, [r7, #0]
 8009048:	f002 ff09 	bl	800be5e <f_puts>
 800904c:	4603      	mov	r3, r0
}
 800904e:	4618      	mov	r0, r3
 8009050:	3708      	adds	r7, #8
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <user_sd_fclose>:
{
	return f_gets(buff, size, &self->fil);
}

int user_sd_fclose(user_sd_t* self)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b082      	sub	sp, #8
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
	return f_close(&self->fil);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009064:	3318      	adds	r3, #24
 8009066:	4618      	mov	r0, r3
 8009068:	f002 fe58 	bl	800bd1c <f_close>
 800906c:	4603      	mov	r3, r0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b082      	sub	sp, #8
 800907a:	af00      	add	r7, sp, #0
 800907c:	4603      	mov	r3, r0
 800907e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_initialize (pdrv);
 8009080:	79fb      	ldrb	r3, [r7, #7]
 8009082:	4618      	mov	r0, r3
 8009084:	f7ff fc72 	bl	800896c <SD_disk_initialize>
 8009088:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800908a:	4618      	mov	r0, r3
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b082      	sub	sp, #8
 8009096:	af00      	add	r7, sp, #0
 8009098:	4603      	mov	r3, r0
 800909a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
   // return Stat;
	return SD_disk_status(pdrv);
 800909c:	79fb      	ldrb	r3, [r7, #7]
 800909e:	4618      	mov	r0, r3
 80090a0:	f7ff fd4e 	bl	8008b40 <SD_disk_status>
 80090a4:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b084      	sub	sp, #16
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
 80090b8:	603b      	str	r3, [r7, #0]
 80090ba:	4603      	mov	r3, r0
 80090bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 80090be:	7bf8      	ldrb	r0, [r7, #15]
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	68b9      	ldr	r1, [r7, #8]
 80090c6:	f7ff fd51 	bl	8008b6c <SD_disk_read>
 80090ca:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60b9      	str	r1, [r7, #8]
 80090dc:	607a      	str	r2, [r7, #4]
 80090de:	603b      	str	r3, [r7, #0]
 80090e0:	4603      	mov	r3, r0
 80090e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write (pdrv, buff, sector, count);
 80090e4:	7bf8      	ldrb	r0, [r7, #15]
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	68b9      	ldr	r1, [r7, #8]
 80090ec:	f7ff fda8 	bl	8008c40 <SD_disk_write>
 80090f0:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b082      	sub	sp, #8
 80090fe:	af00      	add	r7, sp, #0
 8009100:	4603      	mov	r3, r0
 8009102:	603a      	str	r2, [r7, #0]
 8009104:	71fb      	strb	r3, [r7, #7]
 8009106:	460b      	mov	r3, r1
 8009108:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl (pdrv, cmd, buff);
 800910a:	79b9      	ldrb	r1, [r7, #6]
 800910c:	79fb      	ldrb	r3, [r7, #7]
 800910e:	683a      	ldr	r2, [r7, #0]
 8009110:	4618      	mov	r0, r3
 8009112:	f7ff fe19 	bl	8008d48 <SD_disk_ioctl>
 8009116:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009118:	4618      	mov	r0, r3
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	4603      	mov	r3, r0
 8009128:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800912a:	79fb      	ldrb	r3, [r7, #7]
 800912c:	4a08      	ldr	r2, [pc, #32]	; (8009150 <disk_status+0x30>)
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	4413      	add	r3, r2
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	79fa      	ldrb	r2, [r7, #7]
 8009138:	4905      	ldr	r1, [pc, #20]	; (8009150 <disk_status+0x30>)
 800913a:	440a      	add	r2, r1
 800913c:	7a12      	ldrb	r2, [r2, #8]
 800913e:	4610      	mov	r0, r2
 8009140:	4798      	blx	r3
 8009142:	4603      	mov	r3, r0
 8009144:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009146:	7bfb      	ldrb	r3, [r7, #15]
}
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	200031a0 	.word	0x200031a0

08009154 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	4603      	mov	r3, r0
 800915c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800915e:	2300      	movs	r3, #0
 8009160:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009162:	79fb      	ldrb	r3, [r7, #7]
 8009164:	4a0e      	ldr	r2, [pc, #56]	; (80091a0 <disk_initialize+0x4c>)
 8009166:	5cd3      	ldrb	r3, [r2, r3]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d114      	bne.n	8009196 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800916c:	79fb      	ldrb	r3, [r7, #7]
 800916e:	4a0c      	ldr	r2, [pc, #48]	; (80091a0 <disk_initialize+0x4c>)
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	4413      	add	r3, r2
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	79fa      	ldrb	r2, [r7, #7]
 800917a:	4909      	ldr	r1, [pc, #36]	; (80091a0 <disk_initialize+0x4c>)
 800917c:	440a      	add	r2, r1
 800917e:	7a12      	ldrb	r2, [r2, #8]
 8009180:	4610      	mov	r0, r2
 8009182:	4798      	blx	r3
 8009184:	4603      	mov	r3, r0
 8009186:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8009188:	7bfb      	ldrb	r3, [r7, #15]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d103      	bne.n	8009196 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800918e:	79fb      	ldrb	r3, [r7, #7]
 8009190:	4a03      	ldr	r2, [pc, #12]	; (80091a0 <disk_initialize+0x4c>)
 8009192:	2101      	movs	r1, #1
 8009194:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8009196:	7bfb      	ldrb	r3, [r7, #15]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	200031a0 	.word	0x200031a0

080091a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80091a4:	b590      	push	{r4, r7, lr}
 80091a6:	b087      	sub	sp, #28
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60b9      	str	r1, [r7, #8]
 80091ac:	607a      	str	r2, [r7, #4]
 80091ae:	603b      	str	r3, [r7, #0]
 80091b0:	4603      	mov	r3, r0
 80091b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
 80091b6:	4a0a      	ldr	r2, [pc, #40]	; (80091e0 <disk_read+0x3c>)
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4413      	add	r3, r2
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	689c      	ldr	r4, [r3, #8]
 80091c0:	7bfb      	ldrb	r3, [r7, #15]
 80091c2:	4a07      	ldr	r2, [pc, #28]	; (80091e0 <disk_read+0x3c>)
 80091c4:	4413      	add	r3, r2
 80091c6:	7a18      	ldrb	r0, [r3, #8]
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	68b9      	ldr	r1, [r7, #8]
 80091ce:	47a0      	blx	r4
 80091d0:	4603      	mov	r3, r0
 80091d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80091d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	371c      	adds	r7, #28
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd90      	pop	{r4, r7, pc}
 80091de:	bf00      	nop
 80091e0:	200031a0 	.word	0x200031a0

080091e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80091e4:	b590      	push	{r4, r7, lr}
 80091e6:	b087      	sub	sp, #28
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	60b9      	str	r1, [r7, #8]
 80091ec:	607a      	str	r2, [r7, #4]
 80091ee:	603b      	str	r3, [r7, #0]
 80091f0:	4603      	mov	r3, r0
 80091f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80091f4:	7bfb      	ldrb	r3, [r7, #15]
 80091f6:	4a0a      	ldr	r2, [pc, #40]	; (8009220 <disk_write+0x3c>)
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	4413      	add	r3, r2
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	68dc      	ldr	r4, [r3, #12]
 8009200:	7bfb      	ldrb	r3, [r7, #15]
 8009202:	4a07      	ldr	r2, [pc, #28]	; (8009220 <disk_write+0x3c>)
 8009204:	4413      	add	r3, r2
 8009206:	7a18      	ldrb	r0, [r3, #8]
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	68b9      	ldr	r1, [r7, #8]
 800920e:	47a0      	blx	r4
 8009210:	4603      	mov	r3, r0
 8009212:	75fb      	strb	r3, [r7, #23]
  return res;
 8009214:	7dfb      	ldrb	r3, [r7, #23]
}
 8009216:	4618      	mov	r0, r3
 8009218:	371c      	adds	r7, #28
 800921a:	46bd      	mov	sp, r7
 800921c:	bd90      	pop	{r4, r7, pc}
 800921e:	bf00      	nop
 8009220:	200031a0 	.word	0x200031a0

08009224 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	4603      	mov	r3, r0
 800922c:	603a      	str	r2, [r7, #0]
 800922e:	71fb      	strb	r3, [r7, #7]
 8009230:	460b      	mov	r3, r1
 8009232:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009234:	79fb      	ldrb	r3, [r7, #7]
 8009236:	4a09      	ldr	r2, [pc, #36]	; (800925c <disk_ioctl+0x38>)
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	4413      	add	r3, r2
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	691b      	ldr	r3, [r3, #16]
 8009240:	79fa      	ldrb	r2, [r7, #7]
 8009242:	4906      	ldr	r1, [pc, #24]	; (800925c <disk_ioctl+0x38>)
 8009244:	440a      	add	r2, r1
 8009246:	7a10      	ldrb	r0, [r2, #8]
 8009248:	79b9      	ldrb	r1, [r7, #6]
 800924a:	683a      	ldr	r2, [r7, #0]
 800924c:	4798      	blx	r3
 800924e:	4603      	mov	r3, r0
 8009250:	73fb      	strb	r3, [r7, #15]
  return res;
 8009252:	7bfb      	ldrb	r3, [r7, #15]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	200031a0 	.word	0x200031a0

08009260 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	3301      	adds	r3, #1
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009270:	89fb      	ldrh	r3, [r7, #14]
 8009272:	021b      	lsls	r3, r3, #8
 8009274:	b21a      	sxth	r2, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	b21b      	sxth	r3, r3
 800927c:	4313      	orrs	r3, r2
 800927e:	b21b      	sxth	r3, r3
 8009280:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009282:	89fb      	ldrh	r3, [r7, #14]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3714      	adds	r7, #20
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	3303      	adds	r3, #3
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	021b      	lsls	r3, r3, #8
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	3202      	adds	r2, #2
 80092a8:	7812      	ldrb	r2, [r2, #0]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	021b      	lsls	r3, r3, #8
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	3201      	adds	r2, #1
 80092b6:	7812      	ldrb	r2, [r2, #0]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	021b      	lsls	r3, r3, #8
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	7812      	ldrb	r2, [r2, #0]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	60fb      	str	r3, [r7, #12]
	return rv;
 80092c8:	68fb      	ldr	r3, [r7, #12]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3714      	adds	r7, #20
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr

080092d6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80092d6:	b480      	push	{r7}
 80092d8:	b083      	sub	sp, #12
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	460b      	mov	r3, r1
 80092e0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	1c5a      	adds	r2, r3, #1
 80092e6:	607a      	str	r2, [r7, #4]
 80092e8:	887a      	ldrh	r2, [r7, #2]
 80092ea:	b2d2      	uxtb	r2, r2
 80092ec:	701a      	strb	r2, [r3, #0]
 80092ee:	887b      	ldrh	r3, [r7, #2]
 80092f0:	0a1b      	lsrs	r3, r3, #8
 80092f2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	1c5a      	adds	r2, r3, #1
 80092f8:	607a      	str	r2, [r7, #4]
 80092fa:	887a      	ldrh	r2, [r7, #2]
 80092fc:	b2d2      	uxtb	r2, r2
 80092fe:	701a      	strb	r2, [r3, #0]
}
 8009300:	bf00      	nop
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	1c5a      	adds	r2, r3, #1
 800931a:	607a      	str	r2, [r7, #4]
 800931c:	683a      	ldr	r2, [r7, #0]
 800931e:	b2d2      	uxtb	r2, r2
 8009320:	701a      	strb	r2, [r3, #0]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	0a1b      	lsrs	r3, r3, #8
 8009326:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	1c5a      	adds	r2, r3, #1
 800932c:	607a      	str	r2, [r7, #4]
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	b2d2      	uxtb	r2, r2
 8009332:	701a      	strb	r2, [r3, #0]
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	0a1b      	lsrs	r3, r3, #8
 8009338:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	1c5a      	adds	r2, r3, #1
 800933e:	607a      	str	r2, [r7, #4]
 8009340:	683a      	ldr	r2, [r7, #0]
 8009342:	b2d2      	uxtb	r2, r2
 8009344:	701a      	strb	r2, [r3, #0]
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	0a1b      	lsrs	r3, r3, #8
 800934a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	1c5a      	adds	r2, r3, #1
 8009350:	607a      	str	r2, [r7, #4]
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	b2d2      	uxtb	r2, r2
 8009356:	701a      	strb	r2, [r3, #0]
}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009364:	b480      	push	{r7}
 8009366:	b087      	sub	sp, #28
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00d      	beq.n	800939a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800937e:	693a      	ldr	r2, [r7, #16]
 8009380:	1c53      	adds	r3, r2, #1
 8009382:	613b      	str	r3, [r7, #16]
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	1c59      	adds	r1, r3, #1
 8009388:	6179      	str	r1, [r7, #20]
 800938a:	7812      	ldrb	r2, [r2, #0]
 800938c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	3b01      	subs	r3, #1
 8009392:	607b      	str	r3, [r7, #4]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1f1      	bne.n	800937e <mem_cpy+0x1a>
	}
}
 800939a:	bf00      	nop
 800939c:	371c      	adds	r7, #28
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr

080093a6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80093a6:	b480      	push	{r7}
 80093a8:	b087      	sub	sp, #28
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	60f8      	str	r0, [r7, #12]
 80093ae:	60b9      	str	r1, [r7, #8]
 80093b0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	1c5a      	adds	r2, r3, #1
 80093ba:	617a      	str	r2, [r7, #20]
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	b2d2      	uxtb	r2, r2
 80093c0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	3b01      	subs	r3, #1
 80093c6:	607b      	str	r3, [r7, #4]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1f3      	bne.n	80093b6 <mem_set+0x10>
}
 80093ce:	bf00      	nop
 80093d0:	bf00      	nop
 80093d2:	371c      	adds	r7, #28
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80093dc:	b480      	push	{r7}
 80093de:	b089      	sub	sp, #36	; 0x24
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	61fb      	str	r3, [r7, #28]
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80093f0:	2300      	movs	r3, #0
 80093f2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	1c5a      	adds	r2, r3, #1
 80093f8:	61fa      	str	r2, [r7, #28]
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	4619      	mov	r1, r3
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	1c5a      	adds	r2, r3, #1
 8009402:	61ba      	str	r2, [r7, #24]
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	1acb      	subs	r3, r1, r3
 8009408:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	3b01      	subs	r3, #1
 800940e:	607b      	str	r3, [r7, #4]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d002      	beq.n	800941c <mem_cmp+0x40>
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d0eb      	beq.n	80093f4 <mem_cmp+0x18>

	return r;
 800941c:	697b      	ldr	r3, [r7, #20]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3724      	adds	r7, #36	; 0x24
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr

0800942a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800942a:	b480      	push	{r7}
 800942c:	b083      	sub	sp, #12
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
 8009432:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009434:	e002      	b.n	800943c <chk_chr+0x12>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	3301      	adds	r3, #1
 800943a:	607b      	str	r3, [r7, #4]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d005      	beq.n	8009450 <chk_chr+0x26>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	461a      	mov	r2, r3
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	4293      	cmp	r3, r2
 800944e:	d1f2      	bne.n	8009436 <chk_chr+0xc>
	return *str;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	781b      	ldrb	r3, [r3, #0]
}
 8009454:	4618      	mov	r0, r3
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009460:	b480      	push	{r7}
 8009462:	b085      	sub	sp, #20
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800946a:	2300      	movs	r3, #0
 800946c:	60bb      	str	r3, [r7, #8]
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	60fb      	str	r3, [r7, #12]
 8009472:	e029      	b.n	80094c8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009474:	4a27      	ldr	r2, [pc, #156]	; (8009514 <chk_lock+0xb4>)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	011b      	lsls	r3, r3, #4
 800947a:	4413      	add	r3, r2
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d01d      	beq.n	80094be <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009482:	4a24      	ldr	r2, [pc, #144]	; (8009514 <chk_lock+0xb4>)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	011b      	lsls	r3, r3, #4
 8009488:	4413      	add	r3, r2
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	429a      	cmp	r2, r3
 8009492:	d116      	bne.n	80094c2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009494:	4a1f      	ldr	r2, [pc, #124]	; (8009514 <chk_lock+0xb4>)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	011b      	lsls	r3, r3, #4
 800949a:	4413      	add	r3, r2
 800949c:	3304      	adds	r3, #4
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d10c      	bne.n	80094c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80094a8:	4a1a      	ldr	r2, [pc, #104]	; (8009514 <chk_lock+0xb4>)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	011b      	lsls	r3, r3, #4
 80094ae:	4413      	add	r3, r2
 80094b0:	3308      	adds	r3, #8
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d102      	bne.n	80094c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80094bc:	e007      	b.n	80094ce <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80094be:	2301      	movs	r3, #1
 80094c0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	3301      	adds	r3, #1
 80094c6:	60fb      	str	r3, [r7, #12]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d9d2      	bls.n	8009474 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d109      	bne.n	80094e8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d102      	bne.n	80094e0 <chk_lock+0x80>
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	2b02      	cmp	r3, #2
 80094de:	d101      	bne.n	80094e4 <chk_lock+0x84>
 80094e0:	2300      	movs	r3, #0
 80094e2:	e010      	b.n	8009506 <chk_lock+0xa6>
 80094e4:	2312      	movs	r3, #18
 80094e6:	e00e      	b.n	8009506 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d108      	bne.n	8009500 <chk_lock+0xa0>
 80094ee:	4a09      	ldr	r2, [pc, #36]	; (8009514 <chk_lock+0xb4>)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	011b      	lsls	r3, r3, #4
 80094f4:	4413      	add	r3, r2
 80094f6:	330c      	adds	r3, #12
 80094f8:	881b      	ldrh	r3, [r3, #0]
 80094fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094fe:	d101      	bne.n	8009504 <chk_lock+0xa4>
 8009500:	2310      	movs	r3, #16
 8009502:	e000      	b.n	8009506 <chk_lock+0xa6>
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3714      	adds	r7, #20
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	20002f80 	.word	0x20002f80

08009518 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800951e:	2300      	movs	r3, #0
 8009520:	607b      	str	r3, [r7, #4]
 8009522:	e002      	b.n	800952a <enq_lock+0x12>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	3301      	adds	r3, #1
 8009528:	607b      	str	r3, [r7, #4]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d806      	bhi.n	800953e <enq_lock+0x26>
 8009530:	4a09      	ldr	r2, [pc, #36]	; (8009558 <enq_lock+0x40>)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	011b      	lsls	r3, r3, #4
 8009536:	4413      	add	r3, r2
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1f2      	bne.n	8009524 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2b02      	cmp	r3, #2
 8009542:	bf14      	ite	ne
 8009544:	2301      	movne	r3, #1
 8009546:	2300      	moveq	r3, #0
 8009548:	b2db      	uxtb	r3, r3
}
 800954a:	4618      	mov	r0, r3
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	20002f80 	.word	0x20002f80

0800955c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800955c:	b480      	push	{r7}
 800955e:	b085      	sub	sp, #20
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009566:	2300      	movs	r3, #0
 8009568:	60fb      	str	r3, [r7, #12]
 800956a:	e01f      	b.n	80095ac <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800956c:	4a41      	ldr	r2, [pc, #260]	; (8009674 <inc_lock+0x118>)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	011b      	lsls	r3, r3, #4
 8009572:	4413      	add	r3, r2
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	429a      	cmp	r2, r3
 800957c:	d113      	bne.n	80095a6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800957e:	4a3d      	ldr	r2, [pc, #244]	; (8009674 <inc_lock+0x118>)
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	011b      	lsls	r3, r3, #4
 8009584:	4413      	add	r3, r2
 8009586:	3304      	adds	r3, #4
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800958e:	429a      	cmp	r2, r3
 8009590:	d109      	bne.n	80095a6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009592:	4a38      	ldr	r2, [pc, #224]	; (8009674 <inc_lock+0x118>)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	011b      	lsls	r3, r3, #4
 8009598:	4413      	add	r3, r2
 800959a:	3308      	adds	r3, #8
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d006      	beq.n	80095b4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	3301      	adds	r3, #1
 80095aa:	60fb      	str	r3, [r7, #12]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d9dc      	bls.n	800956c <inc_lock+0x10>
 80095b2:	e000      	b.n	80095b6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80095b4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	d132      	bne.n	8009622 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80095bc:	2300      	movs	r3, #0
 80095be:	60fb      	str	r3, [r7, #12]
 80095c0:	e002      	b.n	80095c8 <inc_lock+0x6c>
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	3301      	adds	r3, #1
 80095c6:	60fb      	str	r3, [r7, #12]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d806      	bhi.n	80095dc <inc_lock+0x80>
 80095ce:	4a29      	ldr	r2, [pc, #164]	; (8009674 <inc_lock+0x118>)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	011b      	lsls	r3, r3, #4
 80095d4:	4413      	add	r3, r2
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1f2      	bne.n	80095c2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2b02      	cmp	r3, #2
 80095e0:	d101      	bne.n	80095e6 <inc_lock+0x8a>
 80095e2:	2300      	movs	r3, #0
 80095e4:	e040      	b.n	8009668 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	4922      	ldr	r1, [pc, #136]	; (8009674 <inc_lock+0x118>)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	011b      	lsls	r3, r3, #4
 80095f0:	440b      	add	r3, r1
 80095f2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	689a      	ldr	r2, [r3, #8]
 80095f8:	491e      	ldr	r1, [pc, #120]	; (8009674 <inc_lock+0x118>)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	011b      	lsls	r3, r3, #4
 80095fe:	440b      	add	r3, r1
 8009600:	3304      	adds	r3, #4
 8009602:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	695a      	ldr	r2, [r3, #20]
 8009608:	491a      	ldr	r1, [pc, #104]	; (8009674 <inc_lock+0x118>)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	011b      	lsls	r3, r3, #4
 800960e:	440b      	add	r3, r1
 8009610:	3308      	adds	r3, #8
 8009612:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009614:	4a17      	ldr	r2, [pc, #92]	; (8009674 <inc_lock+0x118>)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	011b      	lsls	r3, r3, #4
 800961a:	4413      	add	r3, r2
 800961c:	330c      	adds	r3, #12
 800961e:	2200      	movs	r2, #0
 8009620:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d009      	beq.n	800963c <inc_lock+0xe0>
 8009628:	4a12      	ldr	r2, [pc, #72]	; (8009674 <inc_lock+0x118>)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	011b      	lsls	r3, r3, #4
 800962e:	4413      	add	r3, r2
 8009630:	330c      	adds	r3, #12
 8009632:	881b      	ldrh	r3, [r3, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d001      	beq.n	800963c <inc_lock+0xe0>
 8009638:	2300      	movs	r3, #0
 800963a:	e015      	b.n	8009668 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d108      	bne.n	8009654 <inc_lock+0xf8>
 8009642:	4a0c      	ldr	r2, [pc, #48]	; (8009674 <inc_lock+0x118>)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	011b      	lsls	r3, r3, #4
 8009648:	4413      	add	r3, r2
 800964a:	330c      	adds	r3, #12
 800964c:	881b      	ldrh	r3, [r3, #0]
 800964e:	3301      	adds	r3, #1
 8009650:	b29a      	uxth	r2, r3
 8009652:	e001      	b.n	8009658 <inc_lock+0xfc>
 8009654:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009658:	4906      	ldr	r1, [pc, #24]	; (8009674 <inc_lock+0x118>)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	011b      	lsls	r3, r3, #4
 800965e:	440b      	add	r3, r1
 8009660:	330c      	adds	r3, #12
 8009662:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	3301      	adds	r3, #1
}
 8009668:	4618      	mov	r0, r3
 800966a:	3714      	adds	r7, #20
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr
 8009674:	20002f80 	.word	0x20002f80

08009678 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	3b01      	subs	r3, #1
 8009684:	607b      	str	r3, [r7, #4]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2b01      	cmp	r3, #1
 800968a:	d825      	bhi.n	80096d8 <dec_lock+0x60>
		n = Files[i].ctr;
 800968c:	4a17      	ldr	r2, [pc, #92]	; (80096ec <dec_lock+0x74>)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	011b      	lsls	r3, r3, #4
 8009692:	4413      	add	r3, r2
 8009694:	330c      	adds	r3, #12
 8009696:	881b      	ldrh	r3, [r3, #0]
 8009698:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800969a:	89fb      	ldrh	r3, [r7, #14]
 800969c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096a0:	d101      	bne.n	80096a6 <dec_lock+0x2e>
 80096a2:	2300      	movs	r3, #0
 80096a4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80096a6:	89fb      	ldrh	r3, [r7, #14]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d002      	beq.n	80096b2 <dec_lock+0x3a>
 80096ac:	89fb      	ldrh	r3, [r7, #14]
 80096ae:	3b01      	subs	r3, #1
 80096b0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80096b2:	4a0e      	ldr	r2, [pc, #56]	; (80096ec <dec_lock+0x74>)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	011b      	lsls	r3, r3, #4
 80096b8:	4413      	add	r3, r2
 80096ba:	330c      	adds	r3, #12
 80096bc:	89fa      	ldrh	r2, [r7, #14]
 80096be:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80096c0:	89fb      	ldrh	r3, [r7, #14]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d105      	bne.n	80096d2 <dec_lock+0x5a>
 80096c6:	4a09      	ldr	r2, [pc, #36]	; (80096ec <dec_lock+0x74>)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	011b      	lsls	r3, r3, #4
 80096cc:	4413      	add	r3, r2
 80096ce:	2200      	movs	r2, #0
 80096d0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80096d2:	2300      	movs	r3, #0
 80096d4:	737b      	strb	r3, [r7, #13]
 80096d6:	e001      	b.n	80096dc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80096d8:	2302      	movs	r3, #2
 80096da:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80096dc:	7b7b      	ldrb	r3, [r7, #13]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3714      	adds	r7, #20
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	20002f80 	.word	0x20002f80

080096f0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80096f8:	2300      	movs	r3, #0
 80096fa:	60fb      	str	r3, [r7, #12]
 80096fc:	e010      	b.n	8009720 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80096fe:	4a0d      	ldr	r2, [pc, #52]	; (8009734 <clear_lock+0x44>)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	011b      	lsls	r3, r3, #4
 8009704:	4413      	add	r3, r2
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	429a      	cmp	r2, r3
 800970c:	d105      	bne.n	800971a <clear_lock+0x2a>
 800970e:	4a09      	ldr	r2, [pc, #36]	; (8009734 <clear_lock+0x44>)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	011b      	lsls	r3, r3, #4
 8009714:	4413      	add	r3, r2
 8009716:	2200      	movs	r2, #0
 8009718:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	3301      	adds	r3, #1
 800971e:	60fb      	str	r3, [r7, #12]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2b01      	cmp	r3, #1
 8009724:	d9eb      	bls.n	80096fe <clear_lock+0xe>
	}
}
 8009726:	bf00      	nop
 8009728:	bf00      	nop
 800972a:	3714      	adds	r7, #20
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr
 8009734:	20002f80 	.word	0x20002f80

08009738 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009740:	2300      	movs	r3, #0
 8009742:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	78db      	ldrb	r3, [r3, #3]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d034      	beq.n	80097b6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009750:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	7858      	ldrb	r0, [r3, #1]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800975c:	2301      	movs	r3, #1
 800975e:	697a      	ldr	r2, [r7, #20]
 8009760:	f7ff fd40 	bl	80091e4 <disk_write>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d002      	beq.n	8009770 <sync_window+0x38>
			res = FR_DISK_ERR;
 800976a:	2301      	movs	r3, #1
 800976c:	73fb      	strb	r3, [r7, #15]
 800976e:	e022      	b.n	80097b6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800977a:	697a      	ldr	r2, [r7, #20]
 800977c:	1ad2      	subs	r2, r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a1b      	ldr	r3, [r3, #32]
 8009782:	429a      	cmp	r2, r3
 8009784:	d217      	bcs.n	80097b6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	789b      	ldrb	r3, [r3, #2]
 800978a:	613b      	str	r3, [r7, #16]
 800978c:	e010      	b.n	80097b0 <sync_window+0x78>
					wsect += fs->fsize;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6a1b      	ldr	r3, [r3, #32]
 8009792:	697a      	ldr	r2, [r7, #20]
 8009794:	4413      	add	r3, r2
 8009796:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	7858      	ldrb	r0, [r3, #1]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80097a2:	2301      	movs	r3, #1
 80097a4:	697a      	ldr	r2, [r7, #20]
 80097a6:	f7ff fd1d 	bl	80091e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	3b01      	subs	r3, #1
 80097ae:	613b      	str	r3, [r7, #16]
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d8eb      	bhi.n	800978e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80097b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3718      	adds	r7, #24
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80097ca:	2300      	movs	r3, #0
 80097cc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097d2:	683a      	ldr	r2, [r7, #0]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d01b      	beq.n	8009810 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f7ff ffad 	bl	8009738 <sync_window>
 80097de:	4603      	mov	r3, r0
 80097e0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80097e2:	7bfb      	ldrb	r3, [r7, #15]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d113      	bne.n	8009810 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	7858      	ldrb	r0, [r3, #1]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80097f2:	2301      	movs	r3, #1
 80097f4:	683a      	ldr	r2, [r7, #0]
 80097f6:	f7ff fcd5 	bl	80091a4 <disk_read>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d004      	beq.n	800980a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009800:	f04f 33ff 	mov.w	r3, #4294967295
 8009804:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009806:	2301      	movs	r3, #1
 8009808:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	683a      	ldr	r2, [r7, #0]
 800980e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8009810:	7bfb      	ldrb	r3, [r7, #15]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
	...

0800981c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f7ff ff87 	bl	8009738 <sync_window>
 800982a:	4603      	mov	r3, r0
 800982c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800982e:	7bfb      	ldrb	r3, [r7, #15]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d159      	bne.n	80098e8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	2b03      	cmp	r3, #3
 800983a:	d149      	bne.n	80098d0 <sync_fs+0xb4>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	791b      	ldrb	r3, [r3, #4]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d145      	bne.n	80098d0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	899b      	ldrh	r3, [r3, #12]
 800984e:	461a      	mov	r2, r3
 8009850:	2100      	movs	r1, #0
 8009852:	f7ff fda8 	bl	80093a6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	3338      	adds	r3, #56	; 0x38
 800985a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800985e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009862:	4618      	mov	r0, r3
 8009864:	f7ff fd37 	bl	80092d6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	3338      	adds	r3, #56	; 0x38
 800986c:	4921      	ldr	r1, [pc, #132]	; (80098f4 <sync_fs+0xd8>)
 800986e:	4618      	mov	r0, r3
 8009870:	f7ff fd4c 	bl	800930c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	3338      	adds	r3, #56	; 0x38
 8009878:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800987c:	491e      	ldr	r1, [pc, #120]	; (80098f8 <sync_fs+0xdc>)
 800987e:	4618      	mov	r0, r3
 8009880:	f7ff fd44 	bl	800930c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	3338      	adds	r3, #56	; 0x38
 8009888:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	699b      	ldr	r3, [r3, #24]
 8009890:	4619      	mov	r1, r3
 8009892:	4610      	mov	r0, r2
 8009894:	f7ff fd3a 	bl	800930c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	3338      	adds	r3, #56	; 0x38
 800989c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	695b      	ldr	r3, [r3, #20]
 80098a4:	4619      	mov	r1, r3
 80098a6:	4610      	mov	r0, r2
 80098a8:	f7ff fd30 	bl	800930c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b0:	1c5a      	adds	r2, r3, #1
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	7858      	ldrb	r0, [r3, #1]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098c4:	2301      	movs	r3, #1
 80098c6:	f7ff fc8d 	bl	80091e4 <disk_write>
			fs->fsi_flag = 0;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	785b      	ldrb	r3, [r3, #1]
 80098d4:	2200      	movs	r2, #0
 80098d6:	2100      	movs	r1, #0
 80098d8:	4618      	mov	r0, r3
 80098da:	f7ff fca3 	bl	8009224 <disk_ioctl>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d001      	beq.n	80098e8 <sync_fs+0xcc>
 80098e4:	2301      	movs	r3, #1
 80098e6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80098e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	41615252 	.word	0x41615252
 80098f8:	61417272 	.word	0x61417272

080098fc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	3b02      	subs	r3, #2
 800990a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	69db      	ldr	r3, [r3, #28]
 8009910:	3b02      	subs	r3, #2
 8009912:	683a      	ldr	r2, [r7, #0]
 8009914:	429a      	cmp	r2, r3
 8009916:	d301      	bcc.n	800991c <clust2sect+0x20>
 8009918:	2300      	movs	r3, #0
 800991a:	e008      	b.n	800992e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	895b      	ldrh	r3, [r3, #10]
 8009920:	461a      	mov	r2, r3
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	fb03 f202 	mul.w	r2, r3, r2
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800992c:	4413      	add	r3, r2
}
 800992e:	4618      	mov	r0, r3
 8009930:	370c      	adds	r7, #12
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr

0800993a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b086      	sub	sp, #24
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
 8009942:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	2b01      	cmp	r3, #1
 800994e:	d904      	bls.n	800995a <get_fat+0x20>
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	69db      	ldr	r3, [r3, #28]
 8009954:	683a      	ldr	r2, [r7, #0]
 8009956:	429a      	cmp	r2, r3
 8009958:	d302      	bcc.n	8009960 <get_fat+0x26>
		val = 1;	/* Internal error */
 800995a:	2301      	movs	r3, #1
 800995c:	617b      	str	r3, [r7, #20]
 800995e:	e0bb      	b.n	8009ad8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009960:	f04f 33ff 	mov.w	r3, #4294967295
 8009964:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	2b03      	cmp	r3, #3
 800996c:	f000 8083 	beq.w	8009a76 <get_fat+0x13c>
 8009970:	2b03      	cmp	r3, #3
 8009972:	f300 80a7 	bgt.w	8009ac4 <get_fat+0x18a>
 8009976:	2b01      	cmp	r3, #1
 8009978:	d002      	beq.n	8009980 <get_fat+0x46>
 800997a:	2b02      	cmp	r3, #2
 800997c:	d056      	beq.n	8009a2c <get_fat+0xf2>
 800997e:	e0a1      	b.n	8009ac4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	60fb      	str	r3, [r7, #12]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	085b      	lsrs	r3, r3, #1
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	4413      	add	r3, r2
 800998c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	899b      	ldrh	r3, [r3, #12]
 8009996:	4619      	mov	r1, r3
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	fbb3 f3f1 	udiv	r3, r3, r1
 800999e:	4413      	add	r3, r2
 80099a0:	4619      	mov	r1, r3
 80099a2:	6938      	ldr	r0, [r7, #16]
 80099a4:	f7ff ff0c 	bl	80097c0 <move_window>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f040 808d 	bne.w	8009aca <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	1c5a      	adds	r2, r3, #1
 80099b4:	60fa      	str	r2, [r7, #12]
 80099b6:	693a      	ldr	r2, [r7, #16]
 80099b8:	8992      	ldrh	r2, [r2, #12]
 80099ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80099be:	fb01 f202 	mul.w	r2, r1, r2
 80099c2:	1a9b      	subs	r3, r3, r2
 80099c4:	693a      	ldr	r2, [r7, #16]
 80099c6:	4413      	add	r3, r2
 80099c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80099cc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	899b      	ldrh	r3, [r3, #12]
 80099d6:	4619      	mov	r1, r3
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	fbb3 f3f1 	udiv	r3, r3, r1
 80099de:	4413      	add	r3, r2
 80099e0:	4619      	mov	r1, r3
 80099e2:	6938      	ldr	r0, [r7, #16]
 80099e4:	f7ff feec 	bl	80097c0 <move_window>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d16f      	bne.n	8009ace <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	899b      	ldrh	r3, [r3, #12]
 80099f2:	461a      	mov	r2, r3
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80099fa:	fb01 f202 	mul.w	r2, r1, r2
 80099fe:	1a9b      	subs	r3, r3, r2
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	4413      	add	r3, r2
 8009a04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009a08:	021b      	lsls	r3, r3, #8
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	f003 0301 	and.w	r3, r3, #1
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d002      	beq.n	8009a22 <get_fat+0xe8>
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	091b      	lsrs	r3, r3, #4
 8009a20:	e002      	b.n	8009a28 <get_fat+0xee>
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a28:	617b      	str	r3, [r7, #20]
			break;
 8009a2a:	e055      	b.n	8009ad8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	899b      	ldrh	r3, [r3, #12]
 8009a34:	085b      	lsrs	r3, r3, #1
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	4619      	mov	r1, r3
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009a40:	4413      	add	r3, r2
 8009a42:	4619      	mov	r1, r3
 8009a44:	6938      	ldr	r0, [r7, #16]
 8009a46:	f7ff febb 	bl	80097c0 <move_window>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d140      	bne.n	8009ad2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	005b      	lsls	r3, r3, #1
 8009a5a:	693a      	ldr	r2, [r7, #16]
 8009a5c:	8992      	ldrh	r2, [r2, #12]
 8009a5e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009a62:	fb00 f202 	mul.w	r2, r0, r2
 8009a66:	1a9b      	subs	r3, r3, r2
 8009a68:	440b      	add	r3, r1
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7ff fbf8 	bl	8009260 <ld_word>
 8009a70:	4603      	mov	r3, r0
 8009a72:	617b      	str	r3, [r7, #20]
			break;
 8009a74:	e030      	b.n	8009ad8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	899b      	ldrh	r3, [r3, #12]
 8009a7e:	089b      	lsrs	r3, r3, #2
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	4619      	mov	r1, r3
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8009a8a:	4413      	add	r3, r2
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6938      	ldr	r0, [r7, #16]
 8009a90:	f7ff fe96 	bl	80097c0 <move_window>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d11d      	bne.n	8009ad6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	693a      	ldr	r2, [r7, #16]
 8009aa6:	8992      	ldrh	r2, [r2, #12]
 8009aa8:	fbb3 f0f2 	udiv	r0, r3, r2
 8009aac:	fb00 f202 	mul.w	r2, r0, r2
 8009ab0:	1a9b      	subs	r3, r3, r2
 8009ab2:	440b      	add	r3, r1
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7ff fbeb 	bl	8009290 <ld_dword>
 8009aba:	4603      	mov	r3, r0
 8009abc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009ac0:	617b      	str	r3, [r7, #20]
			break;
 8009ac2:	e009      	b.n	8009ad8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	617b      	str	r3, [r7, #20]
 8009ac8:	e006      	b.n	8009ad8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009aca:	bf00      	nop
 8009acc:	e004      	b.n	8009ad8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009ace:	bf00      	nop
 8009ad0:	e002      	b.n	8009ad8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009ad2:	bf00      	nop
 8009ad4:	e000      	b.n	8009ad8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009ad6:	bf00      	nop
		}
	}

	return val;
 8009ad8:	697b      	ldr	r3, [r7, #20]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3718      	adds	r7, #24
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009ae2:	b590      	push	{r4, r7, lr}
 8009ae4:	b089      	sub	sp, #36	; 0x24
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	60f8      	str	r0, [r7, #12]
 8009aea:	60b9      	str	r1, [r7, #8]
 8009aec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009aee:	2302      	movs	r3, #2
 8009af0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	f240 8109 	bls.w	8009d0c <put_fat+0x22a>
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	69db      	ldr	r3, [r3, #28]
 8009afe:	68ba      	ldr	r2, [r7, #8]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	f080 8103 	bcs.w	8009d0c <put_fat+0x22a>
		switch (fs->fs_type) {
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	2b03      	cmp	r3, #3
 8009b0c:	f000 80b6 	beq.w	8009c7c <put_fat+0x19a>
 8009b10:	2b03      	cmp	r3, #3
 8009b12:	f300 80fb 	bgt.w	8009d0c <put_fat+0x22a>
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d003      	beq.n	8009b22 <put_fat+0x40>
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	f000 8083 	beq.w	8009c26 <put_fat+0x144>
 8009b20:	e0f4      	b.n	8009d0c <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	61bb      	str	r3, [r7, #24]
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	085b      	lsrs	r3, r3, #1
 8009b2a:	69ba      	ldr	r2, [r7, #24]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	899b      	ldrh	r3, [r3, #12]
 8009b38:	4619      	mov	r1, r3
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b40:	4413      	add	r3, r2
 8009b42:	4619      	mov	r1, r3
 8009b44:	68f8      	ldr	r0, [r7, #12]
 8009b46:	f7ff fe3b 	bl	80097c0 <move_window>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009b4e:	7ffb      	ldrb	r3, [r7, #31]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f040 80d4 	bne.w	8009cfe <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	1c5a      	adds	r2, r3, #1
 8009b60:	61ba      	str	r2, [r7, #24]
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	8992      	ldrh	r2, [r2, #12]
 8009b66:	fbb3 f0f2 	udiv	r0, r3, r2
 8009b6a:	fb00 f202 	mul.w	r2, r0, r2
 8009b6e:	1a9b      	subs	r3, r3, r2
 8009b70:	440b      	add	r3, r1
 8009b72:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	f003 0301 	and.w	r3, r3, #1
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d00d      	beq.n	8009b9a <put_fat+0xb8>
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	b25b      	sxtb	r3, r3
 8009b84:	f003 030f 	and.w	r3, r3, #15
 8009b88:	b25a      	sxtb	r2, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	011b      	lsls	r3, r3, #4
 8009b90:	b25b      	sxtb	r3, r3
 8009b92:	4313      	orrs	r3, r2
 8009b94:	b25b      	sxtb	r3, r3
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	e001      	b.n	8009b9e <put_fat+0xbc>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	697a      	ldr	r2, [r7, #20]
 8009ba0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	899b      	ldrh	r3, [r3, #12]
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	fbb3 f3f1 	udiv	r3, r3, r1
 8009bb8:	4413      	add	r3, r2
 8009bba:	4619      	mov	r1, r3
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f7ff fdff 	bl	80097c0 <move_window>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009bc6:	7ffb      	ldrb	r3, [r7, #31]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f040 809a 	bne.w	8009d02 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	899b      	ldrh	r3, [r3, #12]
 8009bd8:	461a      	mov	r2, r3
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	fbb3 f0f2 	udiv	r0, r3, r2
 8009be0:	fb00 f202 	mul.w	r2, r0, r2
 8009be4:	1a9b      	subs	r3, r3, r2
 8009be6:	440b      	add	r3, r1
 8009be8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	f003 0301 	and.w	r3, r3, #1
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d003      	beq.n	8009bfc <put_fat+0x11a>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	091b      	lsrs	r3, r3, #4
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	e00e      	b.n	8009c1a <put_fat+0x138>
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	b25b      	sxtb	r3, r3
 8009c02:	f023 030f 	bic.w	r3, r3, #15
 8009c06:	b25a      	sxtb	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	0a1b      	lsrs	r3, r3, #8
 8009c0c:	b25b      	sxtb	r3, r3
 8009c0e:	f003 030f 	and.w	r3, r3, #15
 8009c12:	b25b      	sxtb	r3, r3
 8009c14:	4313      	orrs	r3, r2
 8009c16:	b25b      	sxtb	r3, r3
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	697a      	ldr	r2, [r7, #20]
 8009c1c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2201      	movs	r2, #1
 8009c22:	70da      	strb	r2, [r3, #3]
			break;
 8009c24:	e072      	b.n	8009d0c <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	899b      	ldrh	r3, [r3, #12]
 8009c2e:	085b      	lsrs	r3, r3, #1
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	4619      	mov	r1, r3
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c3a:	4413      	add	r3, r2
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	68f8      	ldr	r0, [r7, #12]
 8009c40:	f7ff fdbe 	bl	80097c0 <move_window>
 8009c44:	4603      	mov	r3, r0
 8009c46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009c48:	7ffb      	ldrb	r3, [r7, #31]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d15b      	bne.n	8009d06 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	005b      	lsls	r3, r3, #1
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	8992      	ldrh	r2, [r2, #12]
 8009c5c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009c60:	fb00 f202 	mul.w	r2, r0, r2
 8009c64:	1a9b      	subs	r3, r3, r2
 8009c66:	440b      	add	r3, r1
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	b292      	uxth	r2, r2
 8009c6c:	4611      	mov	r1, r2
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7ff fb31 	bl	80092d6 <st_word>
			fs->wflag = 1;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2201      	movs	r2, #1
 8009c78:	70da      	strb	r2, [r3, #3]
			break;
 8009c7a:	e047      	b.n	8009d0c <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	899b      	ldrh	r3, [r3, #12]
 8009c84:	089b      	lsrs	r3, r3, #2
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	4619      	mov	r1, r3
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c90:	4413      	add	r3, r2
 8009c92:	4619      	mov	r1, r3
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f7ff fd93 	bl	80097c0 <move_window>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009c9e:	7ffb      	ldrb	r3, [r7, #31]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d132      	bne.n	8009d0a <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	68fa      	ldr	r2, [r7, #12]
 8009cb6:	8992      	ldrh	r2, [r2, #12]
 8009cb8:	fbb3 f0f2 	udiv	r0, r3, r2
 8009cbc:	fb00 f202 	mul.w	r2, r0, r2
 8009cc0:	1a9b      	subs	r3, r3, r2
 8009cc2:	440b      	add	r3, r1
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7ff fae3 	bl	8009290 <ld_dword>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009cd0:	4323      	orrs	r3, r4
 8009cd2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	8992      	ldrh	r2, [r2, #12]
 8009ce2:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ce6:	fb00 f202 	mul.w	r2, r0, r2
 8009cea:	1a9b      	subs	r3, r3, r2
 8009cec:	440b      	add	r3, r1
 8009cee:	6879      	ldr	r1, [r7, #4]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7ff fb0b 	bl	800930c <st_dword>
			fs->wflag = 1;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	70da      	strb	r2, [r3, #3]
			break;
 8009cfc:	e006      	b.n	8009d0c <put_fat+0x22a>
			if (res != FR_OK) break;
 8009cfe:	bf00      	nop
 8009d00:	e004      	b.n	8009d0c <put_fat+0x22a>
			if (res != FR_OK) break;
 8009d02:	bf00      	nop
 8009d04:	e002      	b.n	8009d0c <put_fat+0x22a>
			if (res != FR_OK) break;
 8009d06:	bf00      	nop
 8009d08:	e000      	b.n	8009d0c <put_fat+0x22a>
			if (res != FR_OK) break;
 8009d0a:	bf00      	nop
		}
	}
	return res;
 8009d0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3724      	adds	r7, #36	; 0x24
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd90      	pop	{r4, r7, pc}

08009d16 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b088      	sub	sp, #32
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	60f8      	str	r0, [r7, #12]
 8009d1e:	60b9      	str	r1, [r7, #8]
 8009d20:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009d22:	2300      	movs	r3, #0
 8009d24:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d904      	bls.n	8009d3c <remove_chain+0x26>
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	69db      	ldr	r3, [r3, #28]
 8009d36:	68ba      	ldr	r2, [r7, #8]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d301      	bcc.n	8009d40 <remove_chain+0x2a>
 8009d3c:	2302      	movs	r3, #2
 8009d3e:	e04b      	b.n	8009dd8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00c      	beq.n	8009d60 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009d46:	f04f 32ff 	mov.w	r2, #4294967295
 8009d4a:	6879      	ldr	r1, [r7, #4]
 8009d4c:	69b8      	ldr	r0, [r7, #24]
 8009d4e:	f7ff fec8 	bl	8009ae2 <put_fat>
 8009d52:	4603      	mov	r3, r0
 8009d54:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009d56:	7ffb      	ldrb	r3, [r7, #31]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d001      	beq.n	8009d60 <remove_chain+0x4a>
 8009d5c:	7ffb      	ldrb	r3, [r7, #31]
 8009d5e:	e03b      	b.n	8009dd8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009d60:	68b9      	ldr	r1, [r7, #8]
 8009d62:	68f8      	ldr	r0, [r7, #12]
 8009d64:	f7ff fde9 	bl	800993a <get_fat>
 8009d68:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d031      	beq.n	8009dd4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d101      	bne.n	8009d7a <remove_chain+0x64>
 8009d76:	2302      	movs	r3, #2
 8009d78:	e02e      	b.n	8009dd8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d80:	d101      	bne.n	8009d86 <remove_chain+0x70>
 8009d82:	2301      	movs	r3, #1
 8009d84:	e028      	b.n	8009dd8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009d86:	2200      	movs	r2, #0
 8009d88:	68b9      	ldr	r1, [r7, #8]
 8009d8a:	69b8      	ldr	r0, [r7, #24]
 8009d8c:	f7ff fea9 	bl	8009ae2 <put_fat>
 8009d90:	4603      	mov	r3, r0
 8009d92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009d94:	7ffb      	ldrb	r3, [r7, #31]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d001      	beq.n	8009d9e <remove_chain+0x88>
 8009d9a:	7ffb      	ldrb	r3, [r7, #31]
 8009d9c:	e01c      	b.n	8009dd8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009d9e:	69bb      	ldr	r3, [r7, #24]
 8009da0:	699a      	ldr	r2, [r3, #24]
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	69db      	ldr	r3, [r3, #28]
 8009da6:	3b02      	subs	r3, #2
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d20b      	bcs.n	8009dc4 <remove_chain+0xae>
			fs->free_clst++;
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	699b      	ldr	r3, [r3, #24]
 8009db0:	1c5a      	adds	r2, r3, #1
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	791b      	ldrb	r3, [r3, #4]
 8009dba:	f043 0301 	orr.w	r3, r3, #1
 8009dbe:	b2da      	uxtb	r2, r3
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009dc8:	69bb      	ldr	r3, [r7, #24]
 8009dca:	69db      	ldr	r3, [r3, #28]
 8009dcc:	68ba      	ldr	r2, [r7, #8]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d3c6      	bcc.n	8009d60 <remove_chain+0x4a>
 8009dd2:	e000      	b.n	8009dd6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009dd4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3720      	adds	r7, #32
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b088      	sub	sp, #32
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10d      	bne.n	8009e12 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	695b      	ldr	r3, [r3, #20]
 8009dfa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009dfc:	69bb      	ldr	r3, [r7, #24]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d004      	beq.n	8009e0c <create_chain+0x2c>
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	69db      	ldr	r3, [r3, #28]
 8009e06:	69ba      	ldr	r2, [r7, #24]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d31b      	bcc.n	8009e44 <create_chain+0x64>
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	61bb      	str	r3, [r7, #24]
 8009e10:	e018      	b.n	8009e44 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009e12:	6839      	ldr	r1, [r7, #0]
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f7ff fd90 	bl	800993a <get_fat>
 8009e1a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d801      	bhi.n	8009e26 <create_chain+0x46>
 8009e22:	2301      	movs	r3, #1
 8009e24:	e070      	b.n	8009f08 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e2c:	d101      	bne.n	8009e32 <create_chain+0x52>
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	e06a      	b.n	8009f08 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	69db      	ldr	r3, [r3, #28]
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d201      	bcs.n	8009e40 <create_chain+0x60>
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	e063      	b.n	8009f08 <create_chain+0x128>
		scl = clst;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	69db      	ldr	r3, [r3, #28]
 8009e52:	69fa      	ldr	r2, [r7, #28]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d307      	bcc.n	8009e68 <create_chain+0x88>
				ncl = 2;
 8009e58:	2302      	movs	r3, #2
 8009e5a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009e5c:	69fa      	ldr	r2, [r7, #28]
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d901      	bls.n	8009e68 <create_chain+0x88>
 8009e64:	2300      	movs	r3, #0
 8009e66:	e04f      	b.n	8009f08 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009e68:	69f9      	ldr	r1, [r7, #28]
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f7ff fd65 	bl	800993a <get_fat>
 8009e70:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d00e      	beq.n	8009e96 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d003      	beq.n	8009e86 <create_chain+0xa6>
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e84:	d101      	bne.n	8009e8a <create_chain+0xaa>
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	e03e      	b.n	8009f08 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009e8a:	69fa      	ldr	r2, [r7, #28]
 8009e8c:	69bb      	ldr	r3, [r7, #24]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d1da      	bne.n	8009e48 <create_chain+0x68>
 8009e92:	2300      	movs	r3, #0
 8009e94:	e038      	b.n	8009f08 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009e96:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009e98:	f04f 32ff 	mov.w	r2, #4294967295
 8009e9c:	69f9      	ldr	r1, [r7, #28]
 8009e9e:	6938      	ldr	r0, [r7, #16]
 8009ea0:	f7ff fe1f 	bl	8009ae2 <put_fat>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009ea8:	7dfb      	ldrb	r3, [r7, #23]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d109      	bne.n	8009ec2 <create_chain+0xe2>
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d006      	beq.n	8009ec2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009eb4:	69fa      	ldr	r2, [r7, #28]
 8009eb6:	6839      	ldr	r1, [r7, #0]
 8009eb8:	6938      	ldr	r0, [r7, #16]
 8009eba:	f7ff fe12 	bl	8009ae2 <put_fat>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009ec2:	7dfb      	ldrb	r3, [r7, #23]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d116      	bne.n	8009ef6 <create_chain+0x116>
		fs->last_clst = ncl;
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	69fa      	ldr	r2, [r7, #28]
 8009ecc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	699a      	ldr	r2, [r3, #24]
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	69db      	ldr	r3, [r3, #28]
 8009ed6:	3b02      	subs	r3, #2
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d804      	bhi.n	8009ee6 <create_chain+0x106>
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	699b      	ldr	r3, [r3, #24]
 8009ee0:	1e5a      	subs	r2, r3, #1
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	791b      	ldrb	r3, [r3, #4]
 8009eea:	f043 0301 	orr.w	r3, r3, #1
 8009eee:	b2da      	uxtb	r2, r3
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	711a      	strb	r2, [r3, #4]
 8009ef4:	e007      	b.n	8009f06 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009ef6:	7dfb      	ldrb	r3, [r7, #23]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d102      	bne.n	8009f02 <create_chain+0x122>
 8009efc:	f04f 33ff 	mov.w	r3, #4294967295
 8009f00:	e000      	b.n	8009f04 <create_chain+0x124>
 8009f02:	2301      	movs	r3, #1
 8009f04:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009f06:	69fb      	ldr	r3, [r7, #28]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3720      	adds	r7, #32
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b087      	sub	sp, #28
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f24:	3304      	adds	r3, #4
 8009f26:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	899b      	ldrh	r3, [r3, #12]
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	8952      	ldrh	r2, [r2, #10]
 8009f38:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f3c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	1d1a      	adds	r2, r3, #4
 8009f42:	613a      	str	r2, [r7, #16]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <clmt_clust+0x42>
 8009f4e:	2300      	movs	r3, #0
 8009f50:	e010      	b.n	8009f74 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009f52:	697a      	ldr	r2, [r7, #20]
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d307      	bcc.n	8009f6a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009f5a:	697a      	ldr	r2, [r7, #20]
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	1ad3      	subs	r3, r2, r3
 8009f60:	617b      	str	r3, [r7, #20]
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	3304      	adds	r3, #4
 8009f66:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009f68:	e7e9      	b.n	8009f3e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009f6a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	4413      	add	r3, r2
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	371c      	adds	r7, #28
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b086      	sub	sp, #24
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f96:	d204      	bcs.n	8009fa2 <dir_sdi+0x22>
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	f003 031f 	and.w	r3, r3, #31
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d001      	beq.n	8009fa6 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009fa2:	2302      	movs	r3, #2
 8009fa4:	e071      	b.n	800a08a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	683a      	ldr	r2, [r7, #0]
 8009faa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d106      	bne.n	8009fc6 <dir_sdi+0x46>
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	d902      	bls.n	8009fc6 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d10c      	bne.n	8009fe6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	095b      	lsrs	r3, r3, #5
 8009fd0:	693a      	ldr	r2, [r7, #16]
 8009fd2:	8912      	ldrh	r2, [r2, #8]
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d301      	bcc.n	8009fdc <dir_sdi+0x5c>
 8009fd8:	2302      	movs	r3, #2
 8009fda:	e056      	b.n	800a08a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	61da      	str	r2, [r3, #28]
 8009fe4:	e02d      	b.n	800a042 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	895b      	ldrh	r3, [r3, #10]
 8009fea:	461a      	mov	r2, r3
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	899b      	ldrh	r3, [r3, #12]
 8009ff0:	fb02 f303 	mul.w	r3, r2, r3
 8009ff4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009ff6:	e019      	b.n	800a02c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6979      	ldr	r1, [r7, #20]
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7ff fc9c 	bl	800993a <get_fat>
 800a002:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a00a:	d101      	bne.n	800a010 <dir_sdi+0x90>
 800a00c:	2301      	movs	r3, #1
 800a00e:	e03c      	b.n	800a08a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	2b01      	cmp	r3, #1
 800a014:	d904      	bls.n	800a020 <dir_sdi+0xa0>
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	69db      	ldr	r3, [r3, #28]
 800a01a:	697a      	ldr	r2, [r7, #20]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d301      	bcc.n	800a024 <dir_sdi+0xa4>
 800a020:	2302      	movs	r3, #2
 800a022:	e032      	b.n	800a08a <dir_sdi+0x10a>
			ofs -= csz;
 800a024:	683a      	ldr	r2, [r7, #0]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	1ad3      	subs	r3, r2, r3
 800a02a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a02c:	683a      	ldr	r2, [r7, #0]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	429a      	cmp	r2, r3
 800a032:	d2e1      	bcs.n	8009ff8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a034:	6979      	ldr	r1, [r7, #20]
 800a036:	6938      	ldr	r0, [r7, #16]
 800a038:	f7ff fc60 	bl	80098fc <clust2sect>
 800a03c:	4602      	mov	r2, r0
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	697a      	ldr	r2, [r7, #20]
 800a046:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	69db      	ldr	r3, [r3, #28]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d101      	bne.n	800a054 <dir_sdi+0xd4>
 800a050:	2302      	movs	r3, #2
 800a052:	e01a      	b.n	800a08a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	69da      	ldr	r2, [r3, #28]
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	899b      	ldrh	r3, [r3, #12]
 800a05c:	4619      	mov	r1, r3
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	fbb3 f3f1 	udiv	r3, r3, r1
 800a064:	441a      	add	r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	899b      	ldrh	r3, [r3, #12]
 800a074:	461a      	mov	r2, r3
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	fbb3 f0f2 	udiv	r0, r3, r2
 800a07c:	fb00 f202 	mul.w	r2, r0, r2
 800a080:	1a9b      	subs	r3, r3, r2
 800a082:	18ca      	adds	r2, r1, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3718      	adds	r7, #24
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b086      	sub	sp, #24
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
 800a09a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	695b      	ldr	r3, [r3, #20]
 800a0a6:	3320      	adds	r3, #32
 800a0a8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	69db      	ldr	r3, [r3, #28]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d003      	beq.n	800a0ba <dir_next+0x28>
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a0b8:	d301      	bcc.n	800a0be <dir_next+0x2c>
 800a0ba:	2304      	movs	r3, #4
 800a0bc:	e0bb      	b.n	800a236 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	899b      	ldrh	r3, [r3, #12]
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0ca:	fb01 f202 	mul.w	r2, r1, r2
 800a0ce:	1a9b      	subs	r3, r3, r2
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f040 809d 	bne.w	800a210 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	69db      	ldr	r3, [r3, #28]
 800a0da:	1c5a      	adds	r2, r3, #1
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	699b      	ldr	r3, [r3, #24]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10b      	bne.n	800a100 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	095b      	lsrs	r3, r3, #5
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	8912      	ldrh	r2, [r2, #8]
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	f0c0 808d 	bcc.w	800a210 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	61da      	str	r2, [r3, #28]
 800a0fc:	2304      	movs	r3, #4
 800a0fe:	e09a      	b.n	800a236 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	899b      	ldrh	r3, [r3, #12]
 800a104:	461a      	mov	r2, r3
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	fbb3 f3f2 	udiv	r3, r3, r2
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	8952      	ldrh	r2, [r2, #10]
 800a110:	3a01      	subs	r2, #1
 800a112:	4013      	ands	r3, r2
 800a114:	2b00      	cmp	r3, #0
 800a116:	d17b      	bne.n	800a210 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	699b      	ldr	r3, [r3, #24]
 800a11e:	4619      	mov	r1, r3
 800a120:	4610      	mov	r0, r2
 800a122:	f7ff fc0a 	bl	800993a <get_fat>
 800a126:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d801      	bhi.n	800a132 <dir_next+0xa0>
 800a12e:	2302      	movs	r3, #2
 800a130:	e081      	b.n	800a236 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a138:	d101      	bne.n	800a13e <dir_next+0xac>
 800a13a:	2301      	movs	r3, #1
 800a13c:	e07b      	b.n	800a236 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	69db      	ldr	r3, [r3, #28]
 800a142:	697a      	ldr	r2, [r7, #20]
 800a144:	429a      	cmp	r2, r3
 800a146:	d359      	bcc.n	800a1fc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d104      	bne.n	800a158 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	61da      	str	r2, [r3, #28]
 800a154:	2304      	movs	r3, #4
 800a156:	e06e      	b.n	800a236 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	699b      	ldr	r3, [r3, #24]
 800a15e:	4619      	mov	r1, r3
 800a160:	4610      	mov	r0, r2
 800a162:	f7ff fe3d 	bl	8009de0 <create_chain>
 800a166:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d101      	bne.n	800a172 <dir_next+0xe0>
 800a16e:	2307      	movs	r3, #7
 800a170:	e061      	b.n	800a236 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d101      	bne.n	800a17c <dir_next+0xea>
 800a178:	2302      	movs	r3, #2
 800a17a:	e05c      	b.n	800a236 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a182:	d101      	bne.n	800a188 <dir_next+0xf6>
 800a184:	2301      	movs	r3, #1
 800a186:	e056      	b.n	800a236 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a188:	68f8      	ldr	r0, [r7, #12]
 800a18a:	f7ff fad5 	bl	8009738 <sync_window>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d001      	beq.n	800a198 <dir_next+0x106>
 800a194:	2301      	movs	r3, #1
 800a196:	e04e      	b.n	800a236 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	899b      	ldrh	r3, [r3, #12]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	2100      	movs	r1, #0
 800a1a6:	f7ff f8fe 	bl	80093a6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	613b      	str	r3, [r7, #16]
 800a1ae:	6979      	ldr	r1, [r7, #20]
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f7ff fba3 	bl	80098fc <clust2sect>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	635a      	str	r2, [r3, #52]	; 0x34
 800a1bc:	e012      	b.n	800a1e4 <dir_next+0x152>
						fs->wflag = 1;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a1c4:	68f8      	ldr	r0, [r7, #12]
 800a1c6:	f7ff fab7 	bl	8009738 <sync_window>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d001      	beq.n	800a1d4 <dir_next+0x142>
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e030      	b.n	800a236 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	613b      	str	r3, [r7, #16]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1de:	1c5a      	adds	r2, r3, #1
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	635a      	str	r2, [r3, #52]	; 0x34
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	895b      	ldrh	r3, [r3, #10]
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d3e6      	bcc.n	800a1be <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	1ad2      	subs	r2, r2, r3
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	697a      	ldr	r2, [r7, #20]
 800a200:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a202:	6979      	ldr	r1, [r7, #20]
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f7ff fb79 	bl	80098fc <clust2sect>
 800a20a:	4602      	mov	r2, r0
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	68ba      	ldr	r2, [r7, #8]
 800a214:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	899b      	ldrh	r3, [r3, #12]
 800a220:	461a      	mov	r2, r3
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	fbb3 f0f2 	udiv	r0, r3, r2
 800a228:	fb00 f202 	mul.w	r2, r0, r2
 800a22c:	1a9b      	subs	r3, r3, r2
 800a22e:	18ca      	adds	r2, r1, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3718      	adds	r7, #24
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b086      	sub	sp, #24
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
 800a246:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a24e:	2100      	movs	r1, #0
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f7ff fe95 	bl	8009f80 <dir_sdi>
 800a256:	4603      	mov	r3, r0
 800a258:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a25a:	7dfb      	ldrb	r3, [r7, #23]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d12b      	bne.n	800a2b8 <dir_alloc+0x7a>
		n = 0;
 800a260:	2300      	movs	r3, #0
 800a262:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	69db      	ldr	r3, [r3, #28]
 800a268:	4619      	mov	r1, r3
 800a26a:	68f8      	ldr	r0, [r7, #12]
 800a26c:	f7ff faa8 	bl	80097c0 <move_window>
 800a270:	4603      	mov	r3, r0
 800a272:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a274:	7dfb      	ldrb	r3, [r7, #23]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d11d      	bne.n	800a2b6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a1b      	ldr	r3, [r3, #32]
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	2be5      	cmp	r3, #229	; 0xe5
 800a282:	d004      	beq.n	800a28e <dir_alloc+0x50>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6a1b      	ldr	r3, [r3, #32]
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d107      	bne.n	800a29e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	3301      	adds	r3, #1
 800a292:	613b      	str	r3, [r7, #16]
 800a294:	693a      	ldr	r2, [r7, #16]
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d102      	bne.n	800a2a2 <dir_alloc+0x64>
 800a29c:	e00c      	b.n	800a2b8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a29e:	2300      	movs	r3, #0
 800a2a0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a2a2:	2101      	movs	r1, #1
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f7ff fef4 	bl	800a092 <dir_next>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a2ae:	7dfb      	ldrb	r3, [r7, #23]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d0d7      	beq.n	800a264 <dir_alloc+0x26>
 800a2b4:	e000      	b.n	800a2b8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a2b6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a2b8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ba:	2b04      	cmp	r3, #4
 800a2bc:	d101      	bne.n	800a2c2 <dir_alloc+0x84>
 800a2be:	2307      	movs	r3, #7
 800a2c0:	75fb      	strb	r3, [r7, #23]
	return res;
 800a2c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3718      	adds	r7, #24
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	331a      	adds	r3, #26
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fe ffc0 	bl	8009260 <ld_word>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	2b03      	cmp	r3, #3
 800a2ea:	d109      	bne.n	800a300 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	3314      	adds	r3, #20
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7fe ffb5 	bl	8009260 <ld_word>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	041b      	lsls	r3, r3, #16
 800a2fa:	68fa      	ldr	r2, [r7, #12]
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a300:	68fb      	ldr	r3, [r7, #12]
}
 800a302:	4618      	mov	r0, r3
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b084      	sub	sp, #16
 800a30e:	af00      	add	r7, sp, #0
 800a310:	60f8      	str	r0, [r7, #12]
 800a312:	60b9      	str	r1, [r7, #8]
 800a314:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	331a      	adds	r3, #26
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	b292      	uxth	r2, r2
 800a31e:	4611      	mov	r1, r2
 800a320:	4618      	mov	r0, r3
 800a322:	f7fe ffd8 	bl	80092d6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	2b03      	cmp	r3, #3
 800a32c:	d109      	bne.n	800a342 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	f103 0214 	add.w	r2, r3, #20
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	0c1b      	lsrs	r3, r3, #16
 800a338:	b29b      	uxth	r3, r3
 800a33a:	4619      	mov	r1, r3
 800a33c:	4610      	mov	r0, r2
 800a33e:	f7fe ffca 	bl	80092d6 <st_word>
	}
}
 800a342:	bf00      	nop
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
	...

0800a34c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a34c:	b590      	push	{r4, r7, lr}
 800a34e:	b087      	sub	sp, #28
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	331a      	adds	r3, #26
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7fe ff80 	bl	8009260 <ld_word>
 800a360:	4603      	mov	r3, r0
 800a362:	2b00      	cmp	r3, #0
 800a364:	d001      	beq.n	800a36a <cmp_lfn+0x1e>
 800a366:	2300      	movs	r3, #0
 800a368:	e059      	b.n	800a41e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a372:	1e5a      	subs	r2, r3, #1
 800a374:	4613      	mov	r3, r2
 800a376:	005b      	lsls	r3, r3, #1
 800a378:	4413      	add	r3, r2
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	4413      	add	r3, r2
 800a37e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a380:	2301      	movs	r3, #1
 800a382:	81fb      	strh	r3, [r7, #14]
 800a384:	2300      	movs	r3, #0
 800a386:	613b      	str	r3, [r7, #16]
 800a388:	e033      	b.n	800a3f2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a38a:	4a27      	ldr	r2, [pc, #156]	; (800a428 <cmp_lfn+0xdc>)
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	4413      	add	r3, r2
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	461a      	mov	r2, r3
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	4413      	add	r3, r2
 800a398:	4618      	mov	r0, r3
 800a39a:	f7fe ff61 	bl	8009260 <ld_word>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a3a2:	89fb      	ldrh	r3, [r7, #14]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d01a      	beq.n	800a3de <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	2bfe      	cmp	r3, #254	; 0xfe
 800a3ac:	d812      	bhi.n	800a3d4 <cmp_lfn+0x88>
 800a3ae:	89bb      	ldrh	r3, [r7, #12]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f001 fe11 	bl	800bfd8 <ff_wtoupper>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	461c      	mov	r4, r3
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	1c5a      	adds	r2, r3, #1
 800a3be:	617a      	str	r2, [r7, #20]
 800a3c0:	005b      	lsls	r3, r3, #1
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	881b      	ldrh	r3, [r3, #0]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f001 fe05 	bl	800bfd8 <ff_wtoupper>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	429c      	cmp	r4, r3
 800a3d2:	d001      	beq.n	800a3d8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	e022      	b.n	800a41e <cmp_lfn+0xd2>
			}
			wc = uc;
 800a3d8:	89bb      	ldrh	r3, [r7, #12]
 800a3da:	81fb      	strh	r3, [r7, #14]
 800a3dc:	e006      	b.n	800a3ec <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a3de:	89bb      	ldrh	r3, [r7, #12]
 800a3e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d001      	beq.n	800a3ec <cmp_lfn+0xa0>
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	e018      	b.n	800a41e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	613b      	str	r3, [r7, #16]
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	2b0c      	cmp	r3, #12
 800a3f6:	d9c8      	bls.n	800a38a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a400:	2b00      	cmp	r3, #0
 800a402:	d00b      	beq.n	800a41c <cmp_lfn+0xd0>
 800a404:	89fb      	ldrh	r3, [r7, #14]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d008      	beq.n	800a41c <cmp_lfn+0xd0>
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	005b      	lsls	r3, r3, #1
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	4413      	add	r3, r2
 800a412:	881b      	ldrh	r3, [r3, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d001      	beq.n	800a41c <cmp_lfn+0xd0>
 800a418:	2300      	movs	r3, #0
 800a41a:	e000      	b.n	800a41e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a41c:	2301      	movs	r3, #1
}
 800a41e:	4618      	mov	r0, r3
 800a420:	371c      	adds	r7, #28
 800a422:	46bd      	mov	sp, r7
 800a424:	bd90      	pop	{r4, r7, pc}
 800a426:	bf00      	nop
 800a428:	0800dc28 	.word	0x0800dc28

0800a42c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b088      	sub	sp, #32
 800a430:	af00      	add	r7, sp, #0
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	4611      	mov	r1, r2
 800a438:	461a      	mov	r2, r3
 800a43a:	460b      	mov	r3, r1
 800a43c:	71fb      	strb	r3, [r7, #7]
 800a43e:	4613      	mov	r3, r2
 800a440:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	330d      	adds	r3, #13
 800a446:	79ba      	ldrb	r2, [r7, #6]
 800a448:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	330b      	adds	r3, #11
 800a44e:	220f      	movs	r2, #15
 800a450:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	330c      	adds	r3, #12
 800a456:	2200      	movs	r2, #0
 800a458:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	331a      	adds	r3, #26
 800a45e:	2100      	movs	r1, #0
 800a460:	4618      	mov	r0, r3
 800a462:	f7fe ff38 	bl	80092d6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a466:	79fb      	ldrb	r3, [r7, #7]
 800a468:	1e5a      	subs	r2, r3, #1
 800a46a:	4613      	mov	r3, r2
 800a46c:	005b      	lsls	r3, r3, #1
 800a46e:	4413      	add	r3, r2
 800a470:	009b      	lsls	r3, r3, #2
 800a472:	4413      	add	r3, r2
 800a474:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a476:	2300      	movs	r3, #0
 800a478:	82fb      	strh	r3, [r7, #22]
 800a47a:	2300      	movs	r3, #0
 800a47c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a47e:	8afb      	ldrh	r3, [r7, #22]
 800a480:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a484:	4293      	cmp	r3, r2
 800a486:	d007      	beq.n	800a498 <put_lfn+0x6c>
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	1c5a      	adds	r2, r3, #1
 800a48c:	61fa      	str	r2, [r7, #28]
 800a48e:	005b      	lsls	r3, r3, #1
 800a490:	68fa      	ldr	r2, [r7, #12]
 800a492:	4413      	add	r3, r2
 800a494:	881b      	ldrh	r3, [r3, #0]
 800a496:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a498:	4a17      	ldr	r2, [pc, #92]	; (800a4f8 <put_lfn+0xcc>)
 800a49a:	69bb      	ldr	r3, [r7, #24]
 800a49c:	4413      	add	r3, r2
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	8afa      	ldrh	r2, [r7, #22]
 800a4a8:	4611      	mov	r1, r2
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7fe ff13 	bl	80092d6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a4b0:	8afb      	ldrh	r3, [r7, #22]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d102      	bne.n	800a4bc <put_lfn+0x90>
 800a4b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a4ba:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	3301      	adds	r3, #1
 800a4c0:	61bb      	str	r3, [r7, #24]
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	2b0c      	cmp	r3, #12
 800a4c6:	d9da      	bls.n	800a47e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a4c8:	8afb      	ldrh	r3, [r7, #22]
 800a4ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d006      	beq.n	800a4e0 <put_lfn+0xb4>
 800a4d2:	69fb      	ldr	r3, [r7, #28]
 800a4d4:	005b      	lsls	r3, r3, #1
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	4413      	add	r3, r2
 800a4da:	881b      	ldrh	r3, [r3, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d103      	bne.n	800a4e8 <put_lfn+0xbc>
 800a4e0:	79fb      	ldrb	r3, [r7, #7]
 800a4e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4e6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	79fa      	ldrb	r2, [r7, #7]
 800a4ec:	701a      	strb	r2, [r3, #0]
}
 800a4ee:	bf00      	nop
 800a4f0:	3720      	adds	r7, #32
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	0800dc28 	.word	0x0800dc28

0800a4fc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b08c      	sub	sp, #48	; 0x30
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
 800a508:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a50a:	220b      	movs	r2, #11
 800a50c:	68b9      	ldr	r1, [r7, #8]
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f7fe ff28 	bl	8009364 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	2b05      	cmp	r3, #5
 800a518:	d92b      	bls.n	800a572 <gen_numname+0x76>
		sr = seq;
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a51e:	e022      	b.n	800a566 <gen_numname+0x6a>
			wc = *lfn++;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	1c9a      	adds	r2, r3, #2
 800a524:	607a      	str	r2, [r7, #4]
 800a526:	881b      	ldrh	r3, [r3, #0]
 800a528:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a52a:	2300      	movs	r3, #0
 800a52c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a52e:	e017      	b.n	800a560 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	005a      	lsls	r2, r3, #1
 800a534:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a536:	f003 0301 	and.w	r3, r3, #1
 800a53a:	4413      	add	r3, r2
 800a53c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a53e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a540:	085b      	lsrs	r3, r3, #1
 800a542:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d005      	beq.n	800a55a <gen_numname+0x5e>
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800a554:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800a558:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55c:	3301      	adds	r3, #1
 800a55e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a562:	2b0f      	cmp	r3, #15
 800a564:	d9e4      	bls.n	800a530 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	881b      	ldrh	r3, [r3, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d1d8      	bne.n	800a520 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a572:	2307      	movs	r3, #7
 800a574:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	f003 030f 	and.w	r3, r3, #15
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	3330      	adds	r3, #48	; 0x30
 800a582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a586:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a58a:	2b39      	cmp	r3, #57	; 0x39
 800a58c:	d904      	bls.n	800a598 <gen_numname+0x9c>
 800a58e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a592:	3307      	adds	r3, #7
 800a594:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59a:	1e5a      	subs	r2, r3, #1
 800a59c:	62ba      	str	r2, [r7, #40]	; 0x28
 800a59e:	3330      	adds	r3, #48	; 0x30
 800a5a0:	443b      	add	r3, r7
 800a5a2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a5a6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	091b      	lsrs	r3, r3, #4
 800a5ae:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d1df      	bne.n	800a576 <gen_numname+0x7a>
	ns[i] = '~';
 800a5b6:	f107 0214 	add.w	r2, r7, #20
 800a5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5bc:	4413      	add	r3, r2
 800a5be:	227e      	movs	r2, #126	; 0x7e
 800a5c0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a5c6:	e002      	b.n	800a5ce <gen_numname+0xd2>
 800a5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	627b      	str	r3, [r7, #36]	; 0x24
 800a5ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d205      	bcs.n	800a5e2 <gen_numname+0xe6>
 800a5d6:	68fa      	ldr	r2, [r7, #12]
 800a5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5da:	4413      	add	r3, r2
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	2b20      	cmp	r3, #32
 800a5e0:	d1f2      	bne.n	800a5c8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e4:	2b07      	cmp	r3, #7
 800a5e6:	d807      	bhi.n	800a5f8 <gen_numname+0xfc>
 800a5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ea:	1c5a      	adds	r2, r3, #1
 800a5ec:	62ba      	str	r2, [r7, #40]	; 0x28
 800a5ee:	3330      	adds	r3, #48	; 0x30
 800a5f0:	443b      	add	r3, r7
 800a5f2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a5f6:	e000      	b.n	800a5fa <gen_numname+0xfe>
 800a5f8:	2120      	movs	r1, #32
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fc:	1c5a      	adds	r2, r3, #1
 800a5fe:	627a      	str	r2, [r7, #36]	; 0x24
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	4413      	add	r3, r2
 800a604:	460a      	mov	r2, r1
 800a606:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60a:	2b07      	cmp	r3, #7
 800a60c:	d9e9      	bls.n	800a5e2 <gen_numname+0xe6>
}
 800a60e:	bf00      	nop
 800a610:	bf00      	nop
 800a612:	3730      	adds	r7, #48	; 0x30
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a620:	2300      	movs	r3, #0
 800a622:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a624:	230b      	movs	r3, #11
 800a626:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a628:	7bfb      	ldrb	r3, [r7, #15]
 800a62a:	b2da      	uxtb	r2, r3
 800a62c:	0852      	lsrs	r2, r2, #1
 800a62e:	01db      	lsls	r3, r3, #7
 800a630:	4313      	orrs	r3, r2
 800a632:	b2da      	uxtb	r2, r3
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	1c59      	adds	r1, r3, #1
 800a638:	6079      	str	r1, [r7, #4]
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	4413      	add	r3, r2
 800a63e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	3b01      	subs	r3, #1
 800a644:	60bb      	str	r3, [r7, #8]
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1ed      	bne.n	800a628 <sum_sfn+0x10>
	return sum;
 800a64c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3714      	adds	r7, #20
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr

0800a65a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b086      	sub	sp, #24
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a668:	2100      	movs	r1, #0
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f7ff fc88 	bl	8009f80 <dir_sdi>
 800a670:	4603      	mov	r3, r0
 800a672:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a674:	7dfb      	ldrb	r3, [r7, #23]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d001      	beq.n	800a67e <dir_find+0x24>
 800a67a:	7dfb      	ldrb	r3, [r7, #23]
 800a67c:	e0a9      	b.n	800a7d2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a67e:	23ff      	movs	r3, #255	; 0xff
 800a680:	753b      	strb	r3, [r7, #20]
 800a682:	7d3b      	ldrb	r3, [r7, #20]
 800a684:	757b      	strb	r3, [r7, #21]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f04f 32ff 	mov.w	r2, #4294967295
 800a68c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	69db      	ldr	r3, [r3, #28]
 800a692:	4619      	mov	r1, r3
 800a694:	6938      	ldr	r0, [r7, #16]
 800a696:	f7ff f893 	bl	80097c0 <move_window>
 800a69a:	4603      	mov	r3, r0
 800a69c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a69e:	7dfb      	ldrb	r3, [r7, #23]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	f040 8090 	bne.w	800a7c6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6a1b      	ldr	r3, [r3, #32]
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a6ae:	7dbb      	ldrb	r3, [r7, #22]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d102      	bne.n	800a6ba <dir_find+0x60>
 800a6b4:	2304      	movs	r3, #4
 800a6b6:	75fb      	strb	r3, [r7, #23]
 800a6b8:	e08a      	b.n	800a7d0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6a1b      	ldr	r3, [r3, #32]
 800a6be:	330b      	adds	r3, #11
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6c6:	73fb      	strb	r3, [r7, #15]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	7bfa      	ldrb	r2, [r7, #15]
 800a6cc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a6ce:	7dbb      	ldrb	r3, [r7, #22]
 800a6d0:	2be5      	cmp	r3, #229	; 0xe5
 800a6d2:	d007      	beq.n	800a6e4 <dir_find+0x8a>
 800a6d4:	7bfb      	ldrb	r3, [r7, #15]
 800a6d6:	f003 0308 	and.w	r3, r3, #8
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d009      	beq.n	800a6f2 <dir_find+0x98>
 800a6de:	7bfb      	ldrb	r3, [r7, #15]
 800a6e0:	2b0f      	cmp	r3, #15
 800a6e2:	d006      	beq.n	800a6f2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a6e4:	23ff      	movs	r3, #255	; 0xff
 800a6e6:	757b      	strb	r3, [r7, #21]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ee:	631a      	str	r2, [r3, #48]	; 0x30
 800a6f0:	e05e      	b.n	800a7b0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a6f2:	7bfb      	ldrb	r3, [r7, #15]
 800a6f4:	2b0f      	cmp	r3, #15
 800a6f6:	d136      	bne.n	800a766 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a6fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a702:	2b00      	cmp	r3, #0
 800a704:	d154      	bne.n	800a7b0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a706:	7dbb      	ldrb	r3, [r7, #22]
 800a708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00d      	beq.n	800a72c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6a1b      	ldr	r3, [r3, #32]
 800a714:	7b5b      	ldrb	r3, [r3, #13]
 800a716:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800a718:	7dbb      	ldrb	r3, [r7, #22]
 800a71a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a71e:	75bb      	strb	r3, [r7, #22]
 800a720:	7dbb      	ldrb	r3, [r7, #22]
 800a722:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	695a      	ldr	r2, [r3, #20]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a72c:	7dba      	ldrb	r2, [r7, #22]
 800a72e:	7d7b      	ldrb	r3, [r7, #21]
 800a730:	429a      	cmp	r2, r3
 800a732:	d115      	bne.n	800a760 <dir_find+0x106>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6a1b      	ldr	r3, [r3, #32]
 800a738:	330d      	adds	r3, #13
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	7d3a      	ldrb	r2, [r7, #20]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d10e      	bne.n	800a760 <dir_find+0x106>
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	691a      	ldr	r2, [r3, #16]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a1b      	ldr	r3, [r3, #32]
 800a74a:	4619      	mov	r1, r3
 800a74c:	4610      	mov	r0, r2
 800a74e:	f7ff fdfd 	bl	800a34c <cmp_lfn>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d003      	beq.n	800a760 <dir_find+0x106>
 800a758:	7d7b      	ldrb	r3, [r7, #21]
 800a75a:	3b01      	subs	r3, #1
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	e000      	b.n	800a762 <dir_find+0x108>
 800a760:	23ff      	movs	r3, #255	; 0xff
 800a762:	757b      	strb	r3, [r7, #21]
 800a764:	e024      	b.n	800a7b0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a766:	7d7b      	ldrb	r3, [r7, #21]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d109      	bne.n	800a780 <dir_find+0x126>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6a1b      	ldr	r3, [r3, #32]
 800a770:	4618      	mov	r0, r3
 800a772:	f7ff ff51 	bl	800a618 <sum_sfn>
 800a776:	4603      	mov	r3, r0
 800a778:	461a      	mov	r2, r3
 800a77a:	7d3b      	ldrb	r3, [r7, #20]
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d024      	beq.n	800a7ca <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a786:	f003 0301 	and.w	r3, r3, #1
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d10a      	bne.n	800a7a4 <dir_find+0x14a>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6a18      	ldr	r0, [r3, #32]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	3324      	adds	r3, #36	; 0x24
 800a796:	220b      	movs	r2, #11
 800a798:	4619      	mov	r1, r3
 800a79a:	f7fe fe1f 	bl	80093dc <mem_cmp>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d014      	beq.n	800a7ce <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a7a4:	23ff      	movs	r3, #255	; 0xff
 800a7a6:	757b      	strb	r3, [r7, #21]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ae:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f7ff fc6d 	bl	800a092 <dir_next>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a7bc:	7dfb      	ldrb	r3, [r7, #23]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	f43f af65 	beq.w	800a68e <dir_find+0x34>
 800a7c4:	e004      	b.n	800a7d0 <dir_find+0x176>
		if (res != FR_OK) break;
 800a7c6:	bf00      	nop
 800a7c8:	e002      	b.n	800a7d0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a7ca:	bf00      	nop
 800a7cc:	e000      	b.n	800a7d0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a7ce:	bf00      	nop

	return res;
 800a7d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3718      	adds	r7, #24
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
	...

0800a7dc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b08c      	sub	sp, #48	; 0x30
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a7f0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d001      	beq.n	800a7fc <dir_register+0x20>
 800a7f8:	2306      	movs	r3, #6
 800a7fa:	e0e0      	b.n	800a9be <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	627b      	str	r3, [r7, #36]	; 0x24
 800a800:	e002      	b.n	800a808 <dir_register+0x2c>
 800a802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a804:	3301      	adds	r3, #1
 800a806:	627b      	str	r3, [r7, #36]	; 0x24
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	691a      	ldr	r2, [r3, #16]
 800a80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80e:	005b      	lsls	r3, r3, #1
 800a810:	4413      	add	r3, r2
 800a812:	881b      	ldrh	r3, [r3, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d1f4      	bne.n	800a802 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800a81e:	f107 030c 	add.w	r3, r7, #12
 800a822:	220c      	movs	r2, #12
 800a824:	4618      	mov	r0, r3
 800a826:	f7fe fd9d 	bl	8009364 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a82a:	7dfb      	ldrb	r3, [r7, #23]
 800a82c:	f003 0301 	and.w	r3, r3, #1
 800a830:	2b00      	cmp	r3, #0
 800a832:	d032      	beq.n	800a89a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2240      	movs	r2, #64	; 0x40
 800a838:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800a83c:	2301      	movs	r3, #1
 800a83e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a840:	e016      	b.n	800a870 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800a848:	69fb      	ldr	r3, [r7, #28]
 800a84a:	691a      	ldr	r2, [r3, #16]
 800a84c:	f107 010c 	add.w	r1, r7, #12
 800a850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a852:	f7ff fe53 	bl	800a4fc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f7ff feff 	bl	800a65a <dir_find>
 800a85c:	4603      	mov	r3, r0
 800a85e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800a862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a866:	2b00      	cmp	r3, #0
 800a868:	d106      	bne.n	800a878 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800a86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86c:	3301      	adds	r3, #1
 800a86e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a872:	2b63      	cmp	r3, #99	; 0x63
 800a874:	d9e5      	bls.n	800a842 <dir_register+0x66>
 800a876:	e000      	b.n	800a87a <dir_register+0x9e>
			if (res != FR_OK) break;
 800a878:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87c:	2b64      	cmp	r3, #100	; 0x64
 800a87e:	d101      	bne.n	800a884 <dir_register+0xa8>
 800a880:	2307      	movs	r3, #7
 800a882:	e09c      	b.n	800a9be <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a884:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a888:	2b04      	cmp	r3, #4
 800a88a:	d002      	beq.n	800a892 <dir_register+0xb6>
 800a88c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a890:	e095      	b.n	800a9be <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800a892:	7dfa      	ldrb	r2, [r7, #23]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800a89a:	7dfb      	ldrb	r3, [r7, #23]
 800a89c:	f003 0302 	and.w	r3, r3, #2
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d007      	beq.n	800a8b4 <dir_register+0xd8>
 800a8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a6:	330c      	adds	r3, #12
 800a8a8:	4a47      	ldr	r2, [pc, #284]	; (800a9c8 <dir_register+0x1ec>)
 800a8aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ae:	089b      	lsrs	r3, r3, #2
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	e000      	b.n	800a8b6 <dir_register+0xda>
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a8b8:	6a39      	ldr	r1, [r7, #32]
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f7ff fcbf 	bl	800a23e <dir_alloc>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a8c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d148      	bne.n	800a960 <dir_register+0x184>
 800a8ce:	6a3b      	ldr	r3, [r7, #32]
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	623b      	str	r3, [r7, #32]
 800a8d4:	6a3b      	ldr	r3, [r7, #32]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d042      	beq.n	800a960 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	695a      	ldr	r2, [r3, #20]
 800a8de:	6a3b      	ldr	r3, [r7, #32]
 800a8e0:	015b      	lsls	r3, r3, #5
 800a8e2:	1ad3      	subs	r3, r2, r3
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f7ff fb4a 	bl	8009f80 <dir_sdi>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a8f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d132      	bne.n	800a960 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	3324      	adds	r3, #36	; 0x24
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7ff fe8a 	bl	800a618 <sum_sfn>
 800a904:	4603      	mov	r3, r0
 800a906:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	69db      	ldr	r3, [r3, #28]
 800a90c:	4619      	mov	r1, r3
 800a90e:	69f8      	ldr	r0, [r7, #28]
 800a910:	f7fe ff56 	bl	80097c0 <move_window>
 800a914:	4603      	mov	r3, r0
 800a916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800a91a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d11d      	bne.n	800a95e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800a922:	69fb      	ldr	r3, [r7, #28]
 800a924:	6918      	ldr	r0, [r3, #16]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6a19      	ldr	r1, [r3, #32]
 800a92a:	6a3b      	ldr	r3, [r7, #32]
 800a92c:	b2da      	uxtb	r2, r3
 800a92e:	7efb      	ldrb	r3, [r7, #27]
 800a930:	f7ff fd7c 	bl	800a42c <put_lfn>
				fs->wflag = 1;
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	2201      	movs	r2, #1
 800a938:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800a93a:	2100      	movs	r1, #0
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f7ff fba8 	bl	800a092 <dir_next>
 800a942:	4603      	mov	r3, r0
 800a944:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800a948:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d107      	bne.n	800a960 <dir_register+0x184>
 800a950:	6a3b      	ldr	r3, [r7, #32]
 800a952:	3b01      	subs	r3, #1
 800a954:	623b      	str	r3, [r7, #32]
 800a956:	6a3b      	ldr	r3, [r7, #32]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d1d5      	bne.n	800a908 <dir_register+0x12c>
 800a95c:	e000      	b.n	800a960 <dir_register+0x184>
				if (res != FR_OK) break;
 800a95e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a960:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a964:	2b00      	cmp	r3, #0
 800a966:	d128      	bne.n	800a9ba <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	69db      	ldr	r3, [r3, #28]
 800a96c:	4619      	mov	r1, r3
 800a96e:	69f8      	ldr	r0, [r7, #28]
 800a970:	f7fe ff26 	bl	80097c0 <move_window>
 800a974:	4603      	mov	r3, r0
 800a976:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a97a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d11b      	bne.n	800a9ba <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6a1b      	ldr	r3, [r3, #32]
 800a986:	2220      	movs	r2, #32
 800a988:	2100      	movs	r1, #0
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7fe fd0b 	bl	80093a6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6a18      	ldr	r0, [r3, #32]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	3324      	adds	r3, #36	; 0x24
 800a998:	220b      	movs	r2, #11
 800a99a:	4619      	mov	r1, r3
 800a99c:	f7fe fce2 	bl	8009364 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6a1b      	ldr	r3, [r3, #32]
 800a9aa:	330c      	adds	r3, #12
 800a9ac:	f002 0218 	and.w	r2, r2, #24
 800a9b0:	b2d2      	uxtb	r2, r2
 800a9b2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a9ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3730      	adds	r7, #48	; 0x30
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	4ec4ec4f 	.word	0x4ec4ec4f

0800a9cc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b08a      	sub	sp, #40	; 0x28
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	613b      	str	r3, [r7, #16]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	60fb      	str	r3, [r7, #12]
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	617b      	str	r3, [r7, #20]
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a9ec:	69bb      	ldr	r3, [r7, #24]
 800a9ee:	1c5a      	adds	r2, r3, #1
 800a9f0:	61ba      	str	r2, [r7, #24]
 800a9f2:	693a      	ldr	r2, [r7, #16]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800a9fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9fc:	2b1f      	cmp	r3, #31
 800a9fe:	d940      	bls.n	800aa82 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800aa00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa02:	2b2f      	cmp	r3, #47	; 0x2f
 800aa04:	d006      	beq.n	800aa14 <create_name+0x48>
 800aa06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa08:	2b5c      	cmp	r3, #92	; 0x5c
 800aa0a:	d110      	bne.n	800aa2e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800aa0c:	e002      	b.n	800aa14 <create_name+0x48>
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	3301      	adds	r3, #1
 800aa12:	61bb      	str	r3, [r7, #24]
 800aa14:	693a      	ldr	r2, [r7, #16]
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	4413      	add	r3, r2
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	2b2f      	cmp	r3, #47	; 0x2f
 800aa1e:	d0f6      	beq.n	800aa0e <create_name+0x42>
 800aa20:	693a      	ldr	r2, [r7, #16]
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	4413      	add	r3, r2
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	2b5c      	cmp	r3, #92	; 0x5c
 800aa2a:	d0f0      	beq.n	800aa0e <create_name+0x42>
			break;
 800aa2c:	e02a      	b.n	800aa84 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	2bfe      	cmp	r3, #254	; 0xfe
 800aa32:	d901      	bls.n	800aa38 <create_name+0x6c>
 800aa34:	2306      	movs	r3, #6
 800aa36:	e17d      	b.n	800ad34 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800aa38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800aa3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa40:	2101      	movs	r1, #1
 800aa42:	4618      	mov	r0, r3
 800aa44:	f001 fa8c 	bl	800bf60 <ff_convert>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800aa4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d101      	bne.n	800aa56 <create_name+0x8a>
 800aa52:	2306      	movs	r3, #6
 800aa54:	e16e      	b.n	800ad34 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800aa56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa58:	2b7f      	cmp	r3, #127	; 0x7f
 800aa5a:	d809      	bhi.n	800aa70 <create_name+0xa4>
 800aa5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa5e:	4619      	mov	r1, r3
 800aa60:	488d      	ldr	r0, [pc, #564]	; (800ac98 <create_name+0x2cc>)
 800aa62:	f7fe fce2 	bl	800942a <chk_chr>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d001      	beq.n	800aa70 <create_name+0xa4>
 800aa6c:	2306      	movs	r3, #6
 800aa6e:	e161      	b.n	800ad34 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	1c5a      	adds	r2, r3, #1
 800aa74:	617a      	str	r2, [r7, #20]
 800aa76:	005b      	lsls	r3, r3, #1
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aa7e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800aa80:	e7b4      	b.n	800a9ec <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800aa82:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	69bb      	ldr	r3, [r7, #24]
 800aa88:	441a      	add	r2, r3
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800aa8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa90:	2b1f      	cmp	r3, #31
 800aa92:	d801      	bhi.n	800aa98 <create_name+0xcc>
 800aa94:	2304      	movs	r3, #4
 800aa96:	e000      	b.n	800aa9a <create_name+0xce>
 800aa98:	2300      	movs	r3, #0
 800aa9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800aa9e:	e011      	b.n	800aac4 <create_name+0xf8>
		w = lfn[di - 1];
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aaa6:	3b01      	subs	r3, #1
 800aaa8:	005b      	lsls	r3, r3, #1
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	4413      	add	r3, r2
 800aaae:	881b      	ldrh	r3, [r3, #0]
 800aab0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800aab2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aab4:	2b20      	cmp	r3, #32
 800aab6:	d002      	beq.n	800aabe <create_name+0xf2>
 800aab8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aaba:	2b2e      	cmp	r3, #46	; 0x2e
 800aabc:	d106      	bne.n	800aacc <create_name+0x100>
		di--;
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	3b01      	subs	r3, #1
 800aac2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1ea      	bne.n	800aaa0 <create_name+0xd4>
 800aaca:	e000      	b.n	800aace <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800aacc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	005b      	lsls	r3, r3, #1
 800aad2:	68fa      	ldr	r2, [r7, #12]
 800aad4:	4413      	add	r3, r2
 800aad6:	2200      	movs	r2, #0
 800aad8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d101      	bne.n	800aae4 <create_name+0x118>
 800aae0:	2306      	movs	r3, #6
 800aae2:	e127      	b.n	800ad34 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	3324      	adds	r3, #36	; 0x24
 800aae8:	220b      	movs	r2, #11
 800aaea:	2120      	movs	r1, #32
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7fe fc5a 	bl	80093a6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	61bb      	str	r3, [r7, #24]
 800aaf6:	e002      	b.n	800aafe <create_name+0x132>
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	3301      	adds	r3, #1
 800aafc:	61bb      	str	r3, [r7, #24]
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	005b      	lsls	r3, r3, #1
 800ab02:	68fa      	ldr	r2, [r7, #12]
 800ab04:	4413      	add	r3, r2
 800ab06:	881b      	ldrh	r3, [r3, #0]
 800ab08:	2b20      	cmp	r3, #32
 800ab0a:	d0f5      	beq.n	800aaf8 <create_name+0x12c>
 800ab0c:	69bb      	ldr	r3, [r7, #24]
 800ab0e:	005b      	lsls	r3, r3, #1
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	4413      	add	r3, r2
 800ab14:	881b      	ldrh	r3, [r3, #0]
 800ab16:	2b2e      	cmp	r3, #46	; 0x2e
 800ab18:	d0ee      	beq.n	800aaf8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ab1a:	69bb      	ldr	r3, [r7, #24]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d009      	beq.n	800ab34 <create_name+0x168>
 800ab20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab24:	f043 0303 	orr.w	r3, r3, #3
 800ab28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ab2c:	e002      	b.n	800ab34 <create_name+0x168>
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	3b01      	subs	r3, #1
 800ab32:	617b      	str	r3, [r7, #20]
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d009      	beq.n	800ab4e <create_name+0x182>
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ab40:	3b01      	subs	r3, #1
 800ab42:	005b      	lsls	r3, r3, #1
 800ab44:	68fa      	ldr	r2, [r7, #12]
 800ab46:	4413      	add	r3, r2
 800ab48:	881b      	ldrh	r3, [r3, #0]
 800ab4a:	2b2e      	cmp	r3, #46	; 0x2e
 800ab4c:	d1ef      	bne.n	800ab2e <create_name+0x162>

	i = b = 0; ni = 8;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ab54:	2300      	movs	r3, #0
 800ab56:	623b      	str	r3, [r7, #32]
 800ab58:	2308      	movs	r3, #8
 800ab5a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ab5c:	69bb      	ldr	r3, [r7, #24]
 800ab5e:	1c5a      	adds	r2, r3, #1
 800ab60:	61ba      	str	r2, [r7, #24]
 800ab62:	005b      	lsls	r3, r3, #1
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	4413      	add	r3, r2
 800ab68:	881b      	ldrh	r3, [r3, #0]
 800ab6a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ab6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	f000 8090 	beq.w	800ac94 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ab74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab76:	2b20      	cmp	r3, #32
 800ab78:	d006      	beq.n	800ab88 <create_name+0x1bc>
 800ab7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab7c:	2b2e      	cmp	r3, #46	; 0x2e
 800ab7e:	d10a      	bne.n	800ab96 <create_name+0x1ca>
 800ab80:	69ba      	ldr	r2, [r7, #24]
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d006      	beq.n	800ab96 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ab88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab8c:	f043 0303 	orr.w	r3, r3, #3
 800ab90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ab94:	e07d      	b.n	800ac92 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ab96:	6a3a      	ldr	r2, [r7, #32]
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d203      	bcs.n	800aba6 <create_name+0x1da>
 800ab9e:	69ba      	ldr	r2, [r7, #24]
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d123      	bne.n	800abee <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	2b0b      	cmp	r3, #11
 800abaa:	d106      	bne.n	800abba <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800abac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abb0:	f043 0303 	orr.w	r3, r3, #3
 800abb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800abb8:	e075      	b.n	800aca6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800abba:	69ba      	ldr	r2, [r7, #24]
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d005      	beq.n	800abce <create_name+0x202>
 800abc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abc6:	f043 0303 	orr.w	r3, r3, #3
 800abca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800abce:	69ba      	ldr	r2, [r7, #24]
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d866      	bhi.n	800aca4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	61bb      	str	r3, [r7, #24]
 800abda:	2308      	movs	r3, #8
 800abdc:	623b      	str	r3, [r7, #32]
 800abde:	230b      	movs	r3, #11
 800abe0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800abe2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800abec:	e051      	b.n	800ac92 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800abee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800abf0:	2b7f      	cmp	r3, #127	; 0x7f
 800abf2:	d914      	bls.n	800ac1e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800abf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800abf6:	2100      	movs	r1, #0
 800abf8:	4618      	mov	r0, r3
 800abfa:	f001 f9b1 	bl	800bf60 <ff_convert>
 800abfe:	4603      	mov	r3, r0
 800ac00:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ac02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d004      	beq.n	800ac12 <create_name+0x246>
 800ac08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac0a:	3b80      	subs	r3, #128	; 0x80
 800ac0c:	4a23      	ldr	r2, [pc, #140]	; (800ac9c <create_name+0x2d0>)
 800ac0e:	5cd3      	ldrb	r3, [r2, r3]
 800ac10:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ac12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac16:	f043 0302 	orr.w	r3, r3, #2
 800ac1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ac1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d007      	beq.n	800ac34 <create_name+0x268>
 800ac24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac26:	4619      	mov	r1, r3
 800ac28:	481d      	ldr	r0, [pc, #116]	; (800aca0 <create_name+0x2d4>)
 800ac2a:	f7fe fbfe 	bl	800942a <chk_chr>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d008      	beq.n	800ac46 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ac34:	235f      	movs	r3, #95	; 0x5f
 800ac36:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ac38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac3c:	f043 0303 	orr.w	r3, r3, #3
 800ac40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ac44:	e01b      	b.n	800ac7e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ac46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac48:	2b40      	cmp	r3, #64	; 0x40
 800ac4a:	d909      	bls.n	800ac60 <create_name+0x294>
 800ac4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac4e:	2b5a      	cmp	r3, #90	; 0x5a
 800ac50:	d806      	bhi.n	800ac60 <create_name+0x294>
					b |= 2;
 800ac52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ac56:	f043 0302 	orr.w	r3, r3, #2
 800ac5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ac5e:	e00e      	b.n	800ac7e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ac60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac62:	2b60      	cmp	r3, #96	; 0x60
 800ac64:	d90b      	bls.n	800ac7e <create_name+0x2b2>
 800ac66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac68:	2b7a      	cmp	r3, #122	; 0x7a
 800ac6a:	d808      	bhi.n	800ac7e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ac6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ac70:	f043 0301 	orr.w	r3, r3, #1
 800ac74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ac78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac7a:	3b20      	subs	r3, #32
 800ac7c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ac7e:	6a3b      	ldr	r3, [r7, #32]
 800ac80:	1c5a      	adds	r2, r3, #1
 800ac82:	623a      	str	r2, [r7, #32]
 800ac84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ac86:	b2d1      	uxtb	r1, r2
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	4413      	add	r3, r2
 800ac8c:	460a      	mov	r2, r1
 800ac8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ac92:	e763      	b.n	800ab5c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ac94:	bf00      	nop
 800ac96:	e006      	b.n	800aca6 <create_name+0x2da>
 800ac98:	0800d3c4 	.word	0x0800d3c4
 800ac9c:	0800dba8 	.word	0x0800dba8
 800aca0:	0800d3d0 	.word	0x0800d3d0
			if (si > di) break;			/* No extension */
 800aca4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800acac:	2be5      	cmp	r3, #229	; 0xe5
 800acae:	d103      	bne.n	800acb8 <create_name+0x2ec>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2205      	movs	r2, #5
 800acb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800acb8:	69fb      	ldr	r3, [r7, #28]
 800acba:	2b08      	cmp	r3, #8
 800acbc:	d104      	bne.n	800acc8 <create_name+0x2fc>
 800acbe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800acc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800accc:	f003 030c 	and.w	r3, r3, #12
 800acd0:	2b0c      	cmp	r3, #12
 800acd2:	d005      	beq.n	800ace0 <create_name+0x314>
 800acd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800acd8:	f003 0303 	and.w	r3, r3, #3
 800acdc:	2b03      	cmp	r3, #3
 800acde:	d105      	bne.n	800acec <create_name+0x320>
 800ace0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ace4:	f043 0302 	orr.w	r3, r3, #2
 800ace8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800acec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acf0:	f003 0302 	and.w	r3, r3, #2
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d117      	bne.n	800ad28 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800acf8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800acfc:	f003 0303 	and.w	r3, r3, #3
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d105      	bne.n	800ad10 <create_name+0x344>
 800ad04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad08:	f043 0310 	orr.w	r3, r3, #16
 800ad0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ad10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ad14:	f003 030c 	and.w	r3, r3, #12
 800ad18:	2b04      	cmp	r3, #4
 800ad1a:	d105      	bne.n	800ad28 <create_name+0x35c>
 800ad1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad20:	f043 0308 	orr.w	r3, r3, #8
 800ad24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ad2e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800ad32:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3728      	adds	r7, #40	; 0x28
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b086      	sub	sp, #24
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ad50:	e002      	b.n	800ad58 <follow_path+0x1c>
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	3301      	adds	r3, #1
 800ad56:	603b      	str	r3, [r7, #0]
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	2b2f      	cmp	r3, #47	; 0x2f
 800ad5e:	d0f8      	beq.n	800ad52 <follow_path+0x16>
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	2b5c      	cmp	r3, #92	; 0x5c
 800ad66:	d0f4      	beq.n	800ad52 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	2b1f      	cmp	r3, #31
 800ad74:	d80a      	bhi.n	800ad8c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2280      	movs	r2, #128	; 0x80
 800ad7a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ad7e:	2100      	movs	r1, #0
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f7ff f8fd 	bl	8009f80 <dir_sdi>
 800ad86:	4603      	mov	r3, r0
 800ad88:	75fb      	strb	r3, [r7, #23]
 800ad8a:	e048      	b.n	800ae1e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ad8c:	463b      	mov	r3, r7
 800ad8e:	4619      	mov	r1, r3
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f7ff fe1b 	bl	800a9cc <create_name>
 800ad96:	4603      	mov	r3, r0
 800ad98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ad9a:	7dfb      	ldrb	r3, [r7, #23]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d139      	bne.n	800ae14 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f7ff fc5a 	bl	800a65a <dir_find>
 800ada6:	4603      	mov	r3, r0
 800ada8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800adb0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800adb2:	7dfb      	ldrb	r3, [r7, #23]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d00a      	beq.n	800adce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800adb8:	7dfb      	ldrb	r3, [r7, #23]
 800adba:	2b04      	cmp	r3, #4
 800adbc:	d12c      	bne.n	800ae18 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800adbe:	7afb      	ldrb	r3, [r7, #11]
 800adc0:	f003 0304 	and.w	r3, r3, #4
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d127      	bne.n	800ae18 <follow_path+0xdc>
 800adc8:	2305      	movs	r3, #5
 800adca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800adcc:	e024      	b.n	800ae18 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800adce:	7afb      	ldrb	r3, [r7, #11]
 800add0:	f003 0304 	and.w	r3, r3, #4
 800add4:	2b00      	cmp	r3, #0
 800add6:	d121      	bne.n	800ae1c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	799b      	ldrb	r3, [r3, #6]
 800addc:	f003 0310 	and.w	r3, r3, #16
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d102      	bne.n	800adea <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ade4:	2305      	movs	r3, #5
 800ade6:	75fb      	strb	r3, [r7, #23]
 800ade8:	e019      	b.n	800ae1e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	695b      	ldr	r3, [r3, #20]
 800adf4:	68fa      	ldr	r2, [r7, #12]
 800adf6:	8992      	ldrh	r2, [r2, #12]
 800adf8:	fbb3 f0f2 	udiv	r0, r3, r2
 800adfc:	fb00 f202 	mul.w	r2, r0, r2
 800ae00:	1a9b      	subs	r3, r3, r2
 800ae02:	440b      	add	r3, r1
 800ae04:	4619      	mov	r1, r3
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f7ff fa60 	bl	800a2cc <ld_clust>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ae12:	e7bb      	b.n	800ad8c <follow_path+0x50>
			if (res != FR_OK) break;
 800ae14:	bf00      	nop
 800ae16:	e002      	b.n	800ae1e <follow_path+0xe2>
				break;
 800ae18:	bf00      	nop
 800ae1a:	e000      	b.n	800ae1e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ae1c:	bf00      	nop
			}
		}
	}

	return res;
 800ae1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3718      	adds	r7, #24
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b087      	sub	sp, #28
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ae30:	f04f 33ff 	mov.w	r3, #4294967295
 800ae34:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d031      	beq.n	800aea2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	617b      	str	r3, [r7, #20]
 800ae44:	e002      	b.n	800ae4c <get_ldnumber+0x24>
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	617b      	str	r3, [r7, #20]
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	2b1f      	cmp	r3, #31
 800ae52:	d903      	bls.n	800ae5c <get_ldnumber+0x34>
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	2b3a      	cmp	r3, #58	; 0x3a
 800ae5a:	d1f4      	bne.n	800ae46 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	2b3a      	cmp	r3, #58	; 0x3a
 800ae62:	d11c      	bne.n	800ae9e <get_ldnumber+0x76>
			tp = *path;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	1c5a      	adds	r2, r3, #1
 800ae6e:	60fa      	str	r2, [r7, #12]
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	3b30      	subs	r3, #48	; 0x30
 800ae74:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	2b09      	cmp	r3, #9
 800ae7a:	d80e      	bhi.n	800ae9a <get_ldnumber+0x72>
 800ae7c:	68fa      	ldr	r2, [r7, #12]
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d10a      	bne.n	800ae9a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d107      	bne.n	800ae9a <get_ldnumber+0x72>
					vol = (int)i;
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	3301      	adds	r3, #1
 800ae92:	617b      	str	r3, [r7, #20]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	697a      	ldr	r2, [r7, #20]
 800ae98:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	e002      	b.n	800aea4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ae9e:	2300      	movs	r3, #0
 800aea0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800aea2:	693b      	ldr	r3, [r7, #16]
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	371c      	adds	r7, #28
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	70da      	strb	r2, [r3, #3]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f04f 32ff 	mov.w	r2, #4294967295
 800aec6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800aec8:	6839      	ldr	r1, [r7, #0]
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f7fe fc78 	bl	80097c0 <move_window>
 800aed0:	4603      	mov	r3, r0
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d001      	beq.n	800aeda <check_fs+0x2a>
 800aed6:	2304      	movs	r3, #4
 800aed8:	e038      	b.n	800af4c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	3338      	adds	r3, #56	; 0x38
 800aede:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7fe f9bc 	bl	8009260 <ld_word>
 800aee8:	4603      	mov	r3, r0
 800aeea:	461a      	mov	r2, r3
 800aeec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d001      	beq.n	800aef8 <check_fs+0x48>
 800aef4:	2303      	movs	r3, #3
 800aef6:	e029      	b.n	800af4c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aefe:	2be9      	cmp	r3, #233	; 0xe9
 800af00:	d009      	beq.n	800af16 <check_fs+0x66>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800af08:	2beb      	cmp	r3, #235	; 0xeb
 800af0a:	d11e      	bne.n	800af4a <check_fs+0x9a>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800af12:	2b90      	cmp	r3, #144	; 0x90
 800af14:	d119      	bne.n	800af4a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	3338      	adds	r3, #56	; 0x38
 800af1a:	3336      	adds	r3, #54	; 0x36
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7fe f9b7 	bl	8009290 <ld_dword>
 800af22:	4603      	mov	r3, r0
 800af24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800af28:	4a0a      	ldr	r2, [pc, #40]	; (800af54 <check_fs+0xa4>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d101      	bne.n	800af32 <check_fs+0x82>
 800af2e:	2300      	movs	r3, #0
 800af30:	e00c      	b.n	800af4c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	3338      	adds	r3, #56	; 0x38
 800af36:	3352      	adds	r3, #82	; 0x52
 800af38:	4618      	mov	r0, r3
 800af3a:	f7fe f9a9 	bl	8009290 <ld_dword>
 800af3e:	4603      	mov	r3, r0
 800af40:	4a05      	ldr	r2, [pc, #20]	; (800af58 <check_fs+0xa8>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d101      	bne.n	800af4a <check_fs+0x9a>
 800af46:	2300      	movs	r3, #0
 800af48:	e000      	b.n	800af4c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800af4a:	2302      	movs	r3, #2
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3708      	adds	r7, #8
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}
 800af54:	00544146 	.word	0x00544146
 800af58:	33544146 	.word	0x33544146

0800af5c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b096      	sub	sp, #88	; 0x58
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	4613      	mov	r3, r2
 800af68:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	2200      	movs	r2, #0
 800af6e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800af70:	68f8      	ldr	r0, [r7, #12]
 800af72:	f7ff ff59 	bl	800ae28 <get_ldnumber>
 800af76:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800af78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	da01      	bge.n	800af82 <find_volume+0x26>
 800af7e:	230b      	movs	r3, #11
 800af80:	e265      	b.n	800b44e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800af82:	4a9f      	ldr	r2, [pc, #636]	; (800b200 <find_volume+0x2a4>)
 800af84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af8a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800af8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d101      	bne.n	800af96 <find_volume+0x3a>
 800af92:	230c      	movs	r3, #12
 800af94:	e25b      	b.n	800b44e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af9a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800af9c:	79fb      	ldrb	r3, [r7, #7]
 800af9e:	f023 0301 	bic.w	r3, r3, #1
 800afa2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800afa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d01a      	beq.n	800afe2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800afac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afae:	785b      	ldrb	r3, [r3, #1]
 800afb0:	4618      	mov	r0, r3
 800afb2:	f7fe f8b5 	bl	8009120 <disk_status>
 800afb6:	4603      	mov	r3, r0
 800afb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800afbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800afc0:	f003 0301 	and.w	r3, r3, #1
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d10c      	bne.n	800afe2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800afc8:	79fb      	ldrb	r3, [r7, #7]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d007      	beq.n	800afde <find_volume+0x82>
 800afce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800afd2:	f003 0304 	and.w	r3, r3, #4
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d001      	beq.n	800afde <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800afda:	230a      	movs	r3, #10
 800afdc:	e237      	b.n	800b44e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800afde:	2300      	movs	r3, #0
 800afe0:	e235      	b.n	800b44e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800afe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe4:	2200      	movs	r2, #0
 800afe6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800afe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afea:	b2da      	uxtb	r2, r3
 800afec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800aff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff2:	785b      	ldrb	r3, [r3, #1]
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7fe f8ad 	bl	8009154 <disk_initialize>
 800affa:	4603      	mov	r3, r0
 800affc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b000:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b004:	f003 0301 	and.w	r3, r3, #1
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d001      	beq.n	800b010 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b00c:	2303      	movs	r3, #3
 800b00e:	e21e      	b.n	800b44e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b010:	79fb      	ldrb	r3, [r7, #7]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d007      	beq.n	800b026 <find_volume+0xca>
 800b016:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b01a:	f003 0304 	and.w	r3, r3, #4
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d001      	beq.n	800b026 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b022:	230a      	movs	r3, #10
 800b024:	e213      	b.n	800b44e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b028:	7858      	ldrb	r0, [r3, #1]
 800b02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02c:	330c      	adds	r3, #12
 800b02e:	461a      	mov	r2, r3
 800b030:	2102      	movs	r1, #2
 800b032:	f7fe f8f7 	bl	8009224 <disk_ioctl>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d001      	beq.n	800b040 <find_volume+0xe4>
 800b03c:	2301      	movs	r3, #1
 800b03e:	e206      	b.n	800b44e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b042:	899b      	ldrh	r3, [r3, #12]
 800b044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b048:	d80d      	bhi.n	800b066 <find_volume+0x10a>
 800b04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04c:	899b      	ldrh	r3, [r3, #12]
 800b04e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b052:	d308      	bcc.n	800b066 <find_volume+0x10a>
 800b054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b056:	899b      	ldrh	r3, [r3, #12]
 800b058:	461a      	mov	r2, r3
 800b05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05c:	899b      	ldrh	r3, [r3, #12]
 800b05e:	3b01      	subs	r3, #1
 800b060:	4013      	ands	r3, r2
 800b062:	2b00      	cmp	r3, #0
 800b064:	d001      	beq.n	800b06a <find_volume+0x10e>
 800b066:	2301      	movs	r3, #1
 800b068:	e1f1      	b.n	800b44e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b06a:	2300      	movs	r3, #0
 800b06c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b06e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b070:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b072:	f7ff ff1d 	bl	800aeb0 <check_fs>
 800b076:	4603      	mov	r3, r0
 800b078:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b07c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b080:	2b02      	cmp	r3, #2
 800b082:	d149      	bne.n	800b118 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b084:	2300      	movs	r3, #0
 800b086:	643b      	str	r3, [r7, #64]	; 0x40
 800b088:	e01e      	b.n	800b0c8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b092:	011b      	lsls	r3, r3, #4
 800b094:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b098:	4413      	add	r3, r2
 800b09a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09e:	3304      	adds	r3, #4
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d006      	beq.n	800b0b4 <find_volume+0x158>
 800b0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a8:	3308      	adds	r3, #8
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7fe f8f0 	bl	8009290 <ld_dword>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	e000      	b.n	800b0b6 <find_volume+0x15a>
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	3358      	adds	r3, #88	; 0x58
 800b0bc:	443b      	add	r3, r7
 800b0be:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b0c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	643b      	str	r3, [r7, #64]	; 0x40
 800b0c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0ca:	2b03      	cmp	r3, #3
 800b0cc:	d9dd      	bls.n	800b08a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b0d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d002      	beq.n	800b0de <find_volume+0x182>
 800b0d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0da:	3b01      	subs	r3, #1
 800b0dc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b0de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	3358      	adds	r3, #88	; 0x58
 800b0e4:	443b      	add	r3, r7
 800b0e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b0ea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b0ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d005      	beq.n	800b0fe <find_volume+0x1a2>
 800b0f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b0f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0f6:	f7ff fedb 	bl	800aeb0 <check_fs>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	e000      	b.n	800b100 <find_volume+0x1a4>
 800b0fe:	2303      	movs	r3, #3
 800b100:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b104:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d905      	bls.n	800b118 <find_volume+0x1bc>
 800b10c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b10e:	3301      	adds	r3, #1
 800b110:	643b      	str	r3, [r7, #64]	; 0x40
 800b112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b114:	2b03      	cmp	r3, #3
 800b116:	d9e2      	bls.n	800b0de <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b118:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b11c:	2b04      	cmp	r3, #4
 800b11e:	d101      	bne.n	800b124 <find_volume+0x1c8>
 800b120:	2301      	movs	r3, #1
 800b122:	e194      	b.n	800b44e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b124:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d901      	bls.n	800b130 <find_volume+0x1d4>
 800b12c:	230d      	movs	r3, #13
 800b12e:	e18e      	b.n	800b44e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b132:	3338      	adds	r3, #56	; 0x38
 800b134:	330b      	adds	r3, #11
 800b136:	4618      	mov	r0, r3
 800b138:	f7fe f892 	bl	8009260 <ld_word>
 800b13c:	4603      	mov	r3, r0
 800b13e:	461a      	mov	r2, r3
 800b140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b142:	899b      	ldrh	r3, [r3, #12]
 800b144:	429a      	cmp	r2, r3
 800b146:	d001      	beq.n	800b14c <find_volume+0x1f0>
 800b148:	230d      	movs	r3, #13
 800b14a:	e180      	b.n	800b44e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14e:	3338      	adds	r3, #56	; 0x38
 800b150:	3316      	adds	r3, #22
 800b152:	4618      	mov	r0, r3
 800b154:	f7fe f884 	bl	8009260 <ld_word>
 800b158:	4603      	mov	r3, r0
 800b15a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b15c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d106      	bne.n	800b170 <find_volume+0x214>
 800b162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b164:	3338      	adds	r3, #56	; 0x38
 800b166:	3324      	adds	r3, #36	; 0x24
 800b168:	4618      	mov	r0, r3
 800b16a:	f7fe f891 	bl	8009290 <ld_dword>
 800b16e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b172:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b174:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b178:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800b17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b182:	789b      	ldrb	r3, [r3, #2]
 800b184:	2b01      	cmp	r3, #1
 800b186:	d005      	beq.n	800b194 <find_volume+0x238>
 800b188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18a:	789b      	ldrb	r3, [r3, #2]
 800b18c:	2b02      	cmp	r3, #2
 800b18e:	d001      	beq.n	800b194 <find_volume+0x238>
 800b190:	230d      	movs	r3, #13
 800b192:	e15c      	b.n	800b44e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b196:	789b      	ldrb	r3, [r3, #2]
 800b198:	461a      	mov	r2, r3
 800b19a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b19c:	fb02 f303 	mul.w	r3, r2, r3
 800b1a0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1a8:	b29a      	uxth	r2, r3
 800b1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b0:	895b      	ldrh	r3, [r3, #10]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d008      	beq.n	800b1c8 <find_volume+0x26c>
 800b1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b8:	895b      	ldrh	r3, [r3, #10]
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1be:	895b      	ldrh	r3, [r3, #10]
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	4013      	ands	r3, r2
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d001      	beq.n	800b1cc <find_volume+0x270>
 800b1c8:	230d      	movs	r3, #13
 800b1ca:	e140      	b.n	800b44e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ce:	3338      	adds	r3, #56	; 0x38
 800b1d0:	3311      	adds	r3, #17
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7fe f844 	bl	8009260 <ld_word>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	461a      	mov	r2, r3
 800b1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e2:	891b      	ldrh	r3, [r3, #8]
 800b1e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1e6:	8992      	ldrh	r2, [r2, #12]
 800b1e8:	0952      	lsrs	r2, r2, #5
 800b1ea:	b292      	uxth	r2, r2
 800b1ec:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1f0:	fb01 f202 	mul.w	r2, r1, r2
 800b1f4:	1a9b      	subs	r3, r3, r2
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d003      	beq.n	800b204 <find_volume+0x2a8>
 800b1fc:	230d      	movs	r3, #13
 800b1fe:	e126      	b.n	800b44e <find_volume+0x4f2>
 800b200:	20002f78 	.word	0x20002f78

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b206:	3338      	adds	r3, #56	; 0x38
 800b208:	3313      	adds	r3, #19
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7fe f828 	bl	8009260 <ld_word>
 800b210:	4603      	mov	r3, r0
 800b212:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b216:	2b00      	cmp	r3, #0
 800b218:	d106      	bne.n	800b228 <find_volume+0x2cc>
 800b21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21c:	3338      	adds	r3, #56	; 0x38
 800b21e:	3320      	adds	r3, #32
 800b220:	4618      	mov	r0, r3
 800b222:	f7fe f835 	bl	8009290 <ld_dword>
 800b226:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b22a:	3338      	adds	r3, #56	; 0x38
 800b22c:	330e      	adds	r3, #14
 800b22e:	4618      	mov	r0, r3
 800b230:	f7fe f816 	bl	8009260 <ld_word>
 800b234:	4603      	mov	r3, r0
 800b236:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b238:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d101      	bne.n	800b242 <find_volume+0x2e6>
 800b23e:	230d      	movs	r3, #13
 800b240:	e105      	b.n	800b44e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b242:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b246:	4413      	add	r3, r2
 800b248:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b24a:	8911      	ldrh	r1, [r2, #8]
 800b24c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b24e:	8992      	ldrh	r2, [r2, #12]
 800b250:	0952      	lsrs	r2, r2, #5
 800b252:	b292      	uxth	r2, r2
 800b254:	fbb1 f2f2 	udiv	r2, r1, r2
 800b258:	b292      	uxth	r2, r2
 800b25a:	4413      	add	r3, r2
 800b25c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b25e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b262:	429a      	cmp	r2, r3
 800b264:	d201      	bcs.n	800b26a <find_volume+0x30e>
 800b266:	230d      	movs	r3, #13
 800b268:	e0f1      	b.n	800b44e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b26a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26e:	1ad3      	subs	r3, r2, r3
 800b270:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b272:	8952      	ldrh	r2, [r2, #10]
 800b274:	fbb3 f3f2 	udiv	r3, r3, r2
 800b278:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d101      	bne.n	800b284 <find_volume+0x328>
 800b280:	230d      	movs	r3, #13
 800b282:	e0e4      	b.n	800b44e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800b284:	2303      	movs	r3, #3
 800b286:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b290:	4293      	cmp	r3, r2
 800b292:	d802      	bhi.n	800b29a <find_volume+0x33e>
 800b294:	2302      	movs	r3, #2
 800b296:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d802      	bhi.n	800b2aa <find_volume+0x34e>
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ac:	1c9a      	adds	r2, r3, #2
 800b2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800b2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b2b6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b2b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b2ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2bc:	441a      	add	r2, r3
 800b2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b2c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c6:	441a      	add	r2, r3
 800b2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ca:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800b2cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2d0:	2b03      	cmp	r3, #3
 800b2d2:	d11e      	bne.n	800b312 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d6:	3338      	adds	r3, #56	; 0x38
 800b2d8:	332a      	adds	r3, #42	; 0x2a
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7fd ffc0 	bl	8009260 <ld_word>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d001      	beq.n	800b2ea <find_volume+0x38e>
 800b2e6:	230d      	movs	r3, #13
 800b2e8:	e0b1      	b.n	800b44e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ec:	891b      	ldrh	r3, [r3, #8]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d001      	beq.n	800b2f6 <find_volume+0x39a>
 800b2f2:	230d      	movs	r3, #13
 800b2f4:	e0ab      	b.n	800b44e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f8:	3338      	adds	r3, #56	; 0x38
 800b2fa:	332c      	adds	r3, #44	; 0x2c
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7fd ffc7 	bl	8009290 <ld_dword>
 800b302:	4602      	mov	r2, r0
 800b304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b306:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30a:	69db      	ldr	r3, [r3, #28]
 800b30c:	009b      	lsls	r3, r3, #2
 800b30e:	647b      	str	r3, [r7, #68]	; 0x44
 800b310:	e01f      	b.n	800b352 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b314:	891b      	ldrh	r3, [r3, #8]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d101      	bne.n	800b31e <find_volume+0x3c2>
 800b31a:	230d      	movs	r3, #13
 800b31c:	e097      	b.n	800b44e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b324:	441a      	add	r2, r3
 800b326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b328:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b32a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b32e:	2b02      	cmp	r3, #2
 800b330:	d103      	bne.n	800b33a <find_volume+0x3de>
 800b332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b334:	69db      	ldr	r3, [r3, #28]
 800b336:	005b      	lsls	r3, r3, #1
 800b338:	e00a      	b.n	800b350 <find_volume+0x3f4>
 800b33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33c:	69da      	ldr	r2, [r3, #28]
 800b33e:	4613      	mov	r3, r2
 800b340:	005b      	lsls	r3, r3, #1
 800b342:	4413      	add	r3, r2
 800b344:	085a      	lsrs	r2, r3, #1
 800b346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b348:	69db      	ldr	r3, [r3, #28]
 800b34a:	f003 0301 	and.w	r3, r3, #1
 800b34e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b350:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b354:	6a1a      	ldr	r2, [r3, #32]
 800b356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b358:	899b      	ldrh	r3, [r3, #12]
 800b35a:	4619      	mov	r1, r3
 800b35c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b35e:	440b      	add	r3, r1
 800b360:	3b01      	subs	r3, #1
 800b362:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b364:	8989      	ldrh	r1, [r1, #12]
 800b366:	fbb3 f3f1 	udiv	r3, r3, r1
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d201      	bcs.n	800b372 <find_volume+0x416>
 800b36e:	230d      	movs	r3, #13
 800b370:	e06d      	b.n	800b44e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b374:	f04f 32ff 	mov.w	r2, #4294967295
 800b378:	619a      	str	r2, [r3, #24]
 800b37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37c:	699a      	ldr	r2, [r3, #24]
 800b37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b380:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800b382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b384:	2280      	movs	r2, #128	; 0x80
 800b386:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b388:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b38c:	2b03      	cmp	r3, #3
 800b38e:	d149      	bne.n	800b424 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b392:	3338      	adds	r3, #56	; 0x38
 800b394:	3330      	adds	r3, #48	; 0x30
 800b396:	4618      	mov	r0, r3
 800b398:	f7fd ff62 	bl	8009260 <ld_word>
 800b39c:	4603      	mov	r3, r0
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	d140      	bne.n	800b424 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b3a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b3aa:	f7fe fa09 	bl	80097c0 <move_window>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d137      	bne.n	800b424 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800b3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3bc:	3338      	adds	r3, #56	; 0x38
 800b3be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7fd ff4c 	bl	8009260 <ld_word>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d127      	bne.n	800b424 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d6:	3338      	adds	r3, #56	; 0x38
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7fd ff59 	bl	8009290 <ld_dword>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	4a1d      	ldr	r2, [pc, #116]	; (800b458 <find_volume+0x4fc>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d11e      	bne.n	800b424 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e8:	3338      	adds	r3, #56	; 0x38
 800b3ea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f7fd ff4e 	bl	8009290 <ld_dword>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	4a19      	ldr	r2, [pc, #100]	; (800b45c <find_volume+0x500>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d113      	bne.n	800b424 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fe:	3338      	adds	r3, #56	; 0x38
 800b400:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b404:	4618      	mov	r0, r3
 800b406:	f7fd ff43 	bl	8009290 <ld_dword>
 800b40a:	4602      	mov	r2, r0
 800b40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b412:	3338      	adds	r3, #56	; 0x38
 800b414:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b418:	4618      	mov	r0, r3
 800b41a:	f7fd ff39 	bl	8009290 <ld_dword>
 800b41e:	4602      	mov	r2, r0
 800b420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b422:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b426:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b42a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b42c:	4b0c      	ldr	r3, [pc, #48]	; (800b460 <find_volume+0x504>)
 800b42e:	881b      	ldrh	r3, [r3, #0]
 800b430:	3301      	adds	r3, #1
 800b432:	b29a      	uxth	r2, r3
 800b434:	4b0a      	ldr	r3, [pc, #40]	; (800b460 <find_volume+0x504>)
 800b436:	801a      	strh	r2, [r3, #0]
 800b438:	4b09      	ldr	r3, [pc, #36]	; (800b460 <find_volume+0x504>)
 800b43a:	881a      	ldrh	r2, [r3, #0]
 800b43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800b440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b442:	4a08      	ldr	r2, [pc, #32]	; (800b464 <find_volume+0x508>)
 800b444:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b446:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b448:	f7fe f952 	bl	80096f0 <clear_lock>
#endif
	return FR_OK;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3758      	adds	r7, #88	; 0x58
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	41615252 	.word	0x41615252
 800b45c:	61417272 	.word	0x61417272
 800b460:	20002f7c 	.word	0x20002f7c
 800b464:	20002fa0 	.word	0x20002fa0

0800b468 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b472:	2309      	movs	r3, #9
 800b474:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d01c      	beq.n	800b4b6 <validate+0x4e>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d018      	beq.n	800b4b6 <validate+0x4e>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d013      	beq.n	800b4b6 <validate+0x4e>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	889a      	ldrh	r2, [r3, #4]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	88db      	ldrh	r3, [r3, #6]
 800b498:	429a      	cmp	r2, r3
 800b49a:	d10c      	bne.n	800b4b6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	785b      	ldrb	r3, [r3, #1]
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7fd fe3c 	bl	8009120 <disk_status>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	f003 0301 	and.w	r3, r3, #1
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d101      	bne.n	800b4b6 <validate+0x4e>
			res = FR_OK;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b4b6:	7bfb      	ldrb	r3, [r7, #15]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d102      	bne.n	800b4c2 <validate+0x5a>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	e000      	b.n	800b4c4 <validate+0x5c>
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	683a      	ldr	r2, [r7, #0]
 800b4c6:	6013      	str	r3, [r2, #0]
	return res;
 800b4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3710      	adds	r7, #16
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
	...

0800b4d4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b088      	sub	sp, #32
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	4613      	mov	r3, r2
 800b4e0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b4e6:	f107 0310 	add.w	r3, r7, #16
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7ff fc9c 	bl	800ae28 <get_ldnumber>
 800b4f0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	da01      	bge.n	800b4fc <f_mount+0x28>
 800b4f8:	230b      	movs	r3, #11
 800b4fa:	e02b      	b.n	800b554 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b4fc:	4a17      	ldr	r2, [pc, #92]	; (800b55c <f_mount+0x88>)
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b504:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b506:	69bb      	ldr	r3, [r7, #24]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d005      	beq.n	800b518 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b50c:	69b8      	ldr	r0, [r7, #24]
 800b50e:	f7fe f8ef 	bl	80096f0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b512:	69bb      	ldr	r3, [r7, #24]
 800b514:	2200      	movs	r2, #0
 800b516:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d002      	beq.n	800b524 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2200      	movs	r2, #0
 800b522:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b524:	68fa      	ldr	r2, [r7, #12]
 800b526:	490d      	ldr	r1, [pc, #52]	; (800b55c <f_mount+0x88>)
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d002      	beq.n	800b53a <f_mount+0x66>
 800b534:	79fb      	ldrb	r3, [r7, #7]
 800b536:	2b01      	cmp	r3, #1
 800b538:	d001      	beq.n	800b53e <f_mount+0x6a>
 800b53a:	2300      	movs	r3, #0
 800b53c:	e00a      	b.n	800b554 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b53e:	f107 010c 	add.w	r1, r7, #12
 800b542:	f107 0308 	add.w	r3, r7, #8
 800b546:	2200      	movs	r2, #0
 800b548:	4618      	mov	r0, r3
 800b54a:	f7ff fd07 	bl	800af5c <find_volume>
 800b54e:	4603      	mov	r3, r0
 800b550:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b552:	7dfb      	ldrb	r3, [r7, #23]
}
 800b554:	4618      	mov	r0, r3
 800b556:	3720      	adds	r7, #32
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}
 800b55c:	20002f78 	.word	0x20002f78

0800b560 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b09a      	sub	sp, #104	; 0x68
 800b564:	af00      	add	r7, sp, #0
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	4613      	mov	r3, r2
 800b56c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d101      	bne.n	800b578 <f_open+0x18>
 800b574:	2309      	movs	r3, #9
 800b576:	e1bb      	b.n	800b8f0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b578:	79fb      	ldrb	r3, [r7, #7]
 800b57a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b57e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b580:	79fa      	ldrb	r2, [r7, #7]
 800b582:	f107 0114 	add.w	r1, r7, #20
 800b586:	f107 0308 	add.w	r3, r7, #8
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7ff fce6 	bl	800af5c <find_volume>
 800b590:	4603      	mov	r3, r0
 800b592:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800b596:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	f040 819f 	bne.w	800b8de <f_open+0x37e>
		dj.obj.fs = fs;
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b5a4:	68ba      	ldr	r2, [r7, #8]
 800b5a6:	f107 0318 	add.w	r3, r7, #24
 800b5aa:	4611      	mov	r1, r2
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7ff fbc5 	bl	800ad3c <follow_path>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b5b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d11a      	bne.n	800b5f6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b5c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b5c4:	b25b      	sxtb	r3, r3
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	da03      	bge.n	800b5d2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b5ca:	2306      	movs	r3, #6
 800b5cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b5d0:	e011      	b.n	800b5f6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b5d2:	79fb      	ldrb	r3, [r7, #7]
 800b5d4:	f023 0301 	bic.w	r3, r3, #1
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	bf14      	ite	ne
 800b5dc:	2301      	movne	r3, #1
 800b5de:	2300      	moveq	r3, #0
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	f107 0318 	add.w	r3, r7, #24
 800b5e8:	4611      	mov	r1, r2
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7fd ff38 	bl	8009460 <chk_lock>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b5f6:	79fb      	ldrb	r3, [r7, #7]
 800b5f8:	f003 031c 	and.w	r3, r3, #28
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d07f      	beq.n	800b700 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b600:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b604:	2b00      	cmp	r3, #0
 800b606:	d017      	beq.n	800b638 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b608:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b60c:	2b04      	cmp	r3, #4
 800b60e:	d10e      	bne.n	800b62e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b610:	f7fd ff82 	bl	8009518 <enq_lock>
 800b614:	4603      	mov	r3, r0
 800b616:	2b00      	cmp	r3, #0
 800b618:	d006      	beq.n	800b628 <f_open+0xc8>
 800b61a:	f107 0318 	add.w	r3, r7, #24
 800b61e:	4618      	mov	r0, r3
 800b620:	f7ff f8dc 	bl	800a7dc <dir_register>
 800b624:	4603      	mov	r3, r0
 800b626:	e000      	b.n	800b62a <f_open+0xca>
 800b628:	2312      	movs	r3, #18
 800b62a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b62e:	79fb      	ldrb	r3, [r7, #7]
 800b630:	f043 0308 	orr.w	r3, r3, #8
 800b634:	71fb      	strb	r3, [r7, #7]
 800b636:	e010      	b.n	800b65a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b638:	7fbb      	ldrb	r3, [r7, #30]
 800b63a:	f003 0311 	and.w	r3, r3, #17
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d003      	beq.n	800b64a <f_open+0xea>
					res = FR_DENIED;
 800b642:	2307      	movs	r3, #7
 800b644:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b648:	e007      	b.n	800b65a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b64a:	79fb      	ldrb	r3, [r7, #7]
 800b64c:	f003 0304 	and.w	r3, r3, #4
 800b650:	2b00      	cmp	r3, #0
 800b652:	d002      	beq.n	800b65a <f_open+0xfa>
 800b654:	2308      	movs	r3, #8
 800b656:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b65a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d168      	bne.n	800b734 <f_open+0x1d4>
 800b662:	79fb      	ldrb	r3, [r7, #7]
 800b664:	f003 0308 	and.w	r3, r3, #8
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d063      	beq.n	800b734 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b66c:	f7fc ff80 	bl	8008570 <get_fattime>
 800b670:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b674:	330e      	adds	r3, #14
 800b676:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b678:	4618      	mov	r0, r3
 800b67a:	f7fd fe47 	bl	800930c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b680:	3316      	adds	r3, #22
 800b682:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b684:	4618      	mov	r0, r3
 800b686:	f7fd fe41 	bl	800930c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68c:	330b      	adds	r3, #11
 800b68e:	2220      	movs	r2, #32
 800b690:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b696:	4611      	mov	r1, r2
 800b698:	4618      	mov	r0, r3
 800b69a:	f7fe fe17 	bl	800a2cc <ld_clust>
 800b69e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7fe fe2f 	bl	800a30a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ae:	331c      	adds	r3, #28
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f7fd fe2a 	bl	800930c <st_dword>
					fs->wflag = 1;
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b6be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d037      	beq.n	800b734 <f_open+0x1d4>
						dw = fs->winsect;
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6c8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800b6ca:	f107 0318 	add.w	r3, r7, #24
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7fe fb1f 	bl	8009d16 <remove_chain>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800b6de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d126      	bne.n	800b734 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7fe f868 	bl	80097c0 <move_window>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b6fa:	3a01      	subs	r2, #1
 800b6fc:	615a      	str	r2, [r3, #20]
 800b6fe:	e019      	b.n	800b734 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b700:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b704:	2b00      	cmp	r3, #0
 800b706:	d115      	bne.n	800b734 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b708:	7fbb      	ldrb	r3, [r7, #30]
 800b70a:	f003 0310 	and.w	r3, r3, #16
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d003      	beq.n	800b71a <f_open+0x1ba>
					res = FR_NO_FILE;
 800b712:	2304      	movs	r3, #4
 800b714:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b718:	e00c      	b.n	800b734 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b71a:	79fb      	ldrb	r3, [r7, #7]
 800b71c:	f003 0302 	and.w	r3, r3, #2
 800b720:	2b00      	cmp	r3, #0
 800b722:	d007      	beq.n	800b734 <f_open+0x1d4>
 800b724:	7fbb      	ldrb	r3, [r7, #30]
 800b726:	f003 0301 	and.w	r3, r3, #1
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d002      	beq.n	800b734 <f_open+0x1d4>
						res = FR_DENIED;
 800b72e:	2307      	movs	r3, #7
 800b730:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800b734:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d128      	bne.n	800b78e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b73c:	79fb      	ldrb	r3, [r7, #7]
 800b73e:	f003 0308 	and.w	r3, r3, #8
 800b742:	2b00      	cmp	r3, #0
 800b744:	d003      	beq.n	800b74e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b746:	79fb      	ldrb	r3, [r7, #7]
 800b748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b74c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b756:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b75c:	79fb      	ldrb	r3, [r7, #7]
 800b75e:	f023 0301 	bic.w	r3, r3, #1
 800b762:	2b00      	cmp	r3, #0
 800b764:	bf14      	ite	ne
 800b766:	2301      	movne	r3, #1
 800b768:	2300      	moveq	r3, #0
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	461a      	mov	r2, r3
 800b76e:	f107 0318 	add.w	r3, r7, #24
 800b772:	4611      	mov	r1, r2
 800b774:	4618      	mov	r0, r3
 800b776:	f7fd fef1 	bl	800955c <inc_lock>
 800b77a:	4602      	mov	r2, r0
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	691b      	ldr	r3, [r3, #16]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d102      	bne.n	800b78e <f_open+0x22e>
 800b788:	2302      	movs	r3, #2
 800b78a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b78e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b792:	2b00      	cmp	r3, #0
 800b794:	f040 80a3 	bne.w	800b8de <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b79c:	4611      	mov	r1, r2
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7fe fd94 	bl	800a2cc <ld_clust>
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ac:	331c      	adds	r3, #28
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f7fd fd6e 	bl	8009290 <ld_dword>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b7c0:	697a      	ldr	r2, [r7, #20]
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	88da      	ldrh	r2, [r3, #6]
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	79fa      	ldrb	r2, [r7, #7]
 800b7d2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	3330      	adds	r3, #48	; 0x30
 800b7ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b7ee:	2100      	movs	r1, #0
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7fd fdd8 	bl	80093a6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b7f6:	79fb      	ldrb	r3, [r7, #7]
 800b7f8:	f003 0320 	and.w	r3, r3, #32
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d06e      	beq.n	800b8de <f_open+0x37e>
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d06a      	beq.n	800b8de <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	68da      	ldr	r2, [r3, #12]
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	895b      	ldrh	r3, [r3, #10]
 800b814:	461a      	mov	r2, r3
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	899b      	ldrh	r3, [r3, #12]
 800b81a:	fb02 f303 	mul.w	r3, r2, r3
 800b81e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	68db      	ldr	r3, [r3, #12]
 800b82a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b82c:	e016      	b.n	800b85c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b832:	4618      	mov	r0, r3
 800b834:	f7fe f881 	bl	800993a <get_fat>
 800b838:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800b83a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d802      	bhi.n	800b846 <f_open+0x2e6>
 800b840:	2302      	movs	r3, #2
 800b842:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b846:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b84c:	d102      	bne.n	800b854 <f_open+0x2f4>
 800b84e:	2301      	movs	r3, #1
 800b850:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b854:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b858:	1ad3      	subs	r3, r2, r3
 800b85a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b85c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b860:	2b00      	cmp	r3, #0
 800b862:	d103      	bne.n	800b86c <f_open+0x30c>
 800b864:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b868:	429a      	cmp	r2, r3
 800b86a:	d8e0      	bhi.n	800b82e <f_open+0x2ce>
				}
				fp->clust = clst;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b870:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b872:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b876:	2b00      	cmp	r3, #0
 800b878:	d131      	bne.n	800b8de <f_open+0x37e>
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	899b      	ldrh	r3, [r3, #12]
 800b87e:	461a      	mov	r2, r3
 800b880:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b882:	fbb3 f1f2 	udiv	r1, r3, r2
 800b886:	fb01 f202 	mul.w	r2, r1, r2
 800b88a:	1a9b      	subs	r3, r3, r2
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d026      	beq.n	800b8de <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b894:	4618      	mov	r0, r3
 800b896:	f7fe f831 	bl	80098fc <clust2sect>
 800b89a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b89c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d103      	bne.n	800b8aa <f_open+0x34a>
						res = FR_INT_ERR;
 800b8a2:	2302      	movs	r3, #2
 800b8a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b8a8:	e019      	b.n	800b8de <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	899b      	ldrh	r3, [r3, #12]
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8b2:	fbb3 f2f2 	udiv	r2, r3, r2
 800b8b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8b8:	441a      	add	r2, r3
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	7858      	ldrb	r0, [r3, #1]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	6a1a      	ldr	r2, [r3, #32]
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	f7fd fc69 	bl	80091a4 <disk_read>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d002      	beq.n	800b8de <f_open+0x37e>
 800b8d8:	2301      	movs	r3, #1
 800b8da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b8de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d002      	beq.n	800b8ec <f_open+0x38c>
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b8ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3768      	adds	r7, #104	; 0x68
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b08c      	sub	sp, #48	; 0x30
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	60b9      	str	r1, [r7, #8]
 800b902:	607a      	str	r2, [r7, #4]
 800b904:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	2200      	movs	r2, #0
 800b90e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f107 0210 	add.w	r2, r7, #16
 800b916:	4611      	mov	r1, r2
 800b918:	4618      	mov	r0, r3
 800b91a:	f7ff fda5 	bl	800b468 <validate>
 800b91e:	4603      	mov	r3, r0
 800b920:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b924:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d107      	bne.n	800b93c <f_write+0x44>
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	7d5b      	ldrb	r3, [r3, #21]
 800b930:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b934:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d002      	beq.n	800b942 <f_write+0x4a>
 800b93c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b940:	e16a      	b.n	800bc18 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	7d1b      	ldrb	r3, [r3, #20]
 800b946:	f003 0302 	and.w	r3, r3, #2
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d101      	bne.n	800b952 <f_write+0x5a>
 800b94e:	2307      	movs	r3, #7
 800b950:	e162      	b.n	800bc18 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	699a      	ldr	r2, [r3, #24]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	441a      	add	r2, r3
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	699b      	ldr	r3, [r3, #24]
 800b95e:	429a      	cmp	r2, r3
 800b960:	f080 814c 	bcs.w	800bbfc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	699b      	ldr	r3, [r3, #24]
 800b968:	43db      	mvns	r3, r3
 800b96a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b96c:	e146      	b.n	800bbfc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	699b      	ldr	r3, [r3, #24]
 800b972:	693a      	ldr	r2, [r7, #16]
 800b974:	8992      	ldrh	r2, [r2, #12]
 800b976:	fbb3 f1f2 	udiv	r1, r3, r2
 800b97a:	fb01 f202 	mul.w	r2, r1, r2
 800b97e:	1a9b      	subs	r3, r3, r2
 800b980:	2b00      	cmp	r3, #0
 800b982:	f040 80f1 	bne.w	800bb68 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	699b      	ldr	r3, [r3, #24]
 800b98a:	693a      	ldr	r2, [r7, #16]
 800b98c:	8992      	ldrh	r2, [r2, #12]
 800b98e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b992:	693a      	ldr	r2, [r7, #16]
 800b994:	8952      	ldrh	r2, [r2, #10]
 800b996:	3a01      	subs	r2, #1
 800b998:	4013      	ands	r3, r2
 800b99a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b99c:	69bb      	ldr	r3, [r7, #24]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d143      	bne.n	800ba2a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	699b      	ldr	r3, [r3, #24]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d10c      	bne.n	800b9c4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	689b      	ldr	r3, [r3, #8]
 800b9ae:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d11a      	bne.n	800b9ec <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2100      	movs	r1, #0
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7fe fa10 	bl	8009de0 <create_chain>
 800b9c0:	62b8      	str	r0, [r7, #40]	; 0x28
 800b9c2:	e013      	b.n	800b9ec <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d007      	beq.n	800b9dc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	699b      	ldr	r3, [r3, #24]
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	68f8      	ldr	r0, [r7, #12]
 800b9d4:	f7fe fa9c 	bl	8009f10 <clmt_clust>
 800b9d8:	62b8      	str	r0, [r7, #40]	; 0x28
 800b9da:	e007      	b.n	800b9ec <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b9dc:	68fa      	ldr	r2, [r7, #12]
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	69db      	ldr	r3, [r3, #28]
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	4610      	mov	r0, r2
 800b9e6:	f7fe f9fb 	bl	8009de0 <create_chain>
 800b9ea:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	f000 8109 	beq.w	800bc06 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d104      	bne.n	800ba04 <f_write+0x10c>
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2202      	movs	r2, #2
 800b9fe:	755a      	strb	r2, [r3, #21]
 800ba00:	2302      	movs	r3, #2
 800ba02:	e109      	b.n	800bc18 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ba04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba0a:	d104      	bne.n	800ba16 <f_write+0x11e>
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	755a      	strb	r2, [r3, #21]
 800ba12:	2301      	movs	r3, #1
 800ba14:	e100      	b.n	800bc18 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba1a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d102      	bne.n	800ba2a <f_write+0x132>
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba28:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	7d1b      	ldrb	r3, [r3, #20]
 800ba2e:	b25b      	sxtb	r3, r3
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	da18      	bge.n	800ba66 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	7858      	ldrb	r0, [r3, #1]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	6a1a      	ldr	r2, [r3, #32]
 800ba42:	2301      	movs	r3, #1
 800ba44:	f7fd fbce 	bl	80091e4 <disk_write>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d004      	beq.n	800ba58 <f_write+0x160>
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2201      	movs	r2, #1
 800ba52:	755a      	strb	r2, [r3, #21]
 800ba54:	2301      	movs	r3, #1
 800ba56:	e0df      	b.n	800bc18 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	7d1b      	ldrb	r3, [r3, #20]
 800ba5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba60:	b2da      	uxtb	r2, r3
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ba66:	693a      	ldr	r2, [r7, #16]
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	69db      	ldr	r3, [r3, #28]
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	4610      	mov	r0, r2
 800ba70:	f7fd ff44 	bl	80098fc <clust2sect>
 800ba74:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d104      	bne.n	800ba86 <f_write+0x18e>
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	2202      	movs	r2, #2
 800ba80:	755a      	strb	r2, [r3, #21]
 800ba82:	2302      	movs	r3, #2
 800ba84:	e0c8      	b.n	800bc18 <f_write+0x320>
			sect += csect;
 800ba86:	697a      	ldr	r2, [r7, #20]
 800ba88:	69bb      	ldr	r3, [r7, #24]
 800ba8a:	4413      	add	r3, r2
 800ba8c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	899b      	ldrh	r3, [r3, #12]
 800ba92:	461a      	mov	r2, r3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba9a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ba9c:	6a3b      	ldr	r3, [r7, #32]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d043      	beq.n	800bb2a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800baa2:	69ba      	ldr	r2, [r7, #24]
 800baa4:	6a3b      	ldr	r3, [r7, #32]
 800baa6:	4413      	add	r3, r2
 800baa8:	693a      	ldr	r2, [r7, #16]
 800baaa:	8952      	ldrh	r2, [r2, #10]
 800baac:	4293      	cmp	r3, r2
 800baae:	d905      	bls.n	800babc <f_write+0x1c4>
					cc = fs->csize - csect;
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	895b      	ldrh	r3, [r3, #10]
 800bab4:	461a      	mov	r2, r3
 800bab6:	69bb      	ldr	r3, [r7, #24]
 800bab8:	1ad3      	subs	r3, r2, r3
 800baba:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	7858      	ldrb	r0, [r3, #1]
 800bac0:	6a3b      	ldr	r3, [r7, #32]
 800bac2:	697a      	ldr	r2, [r7, #20]
 800bac4:	69f9      	ldr	r1, [r7, #28]
 800bac6:	f7fd fb8d 	bl	80091e4 <disk_write>
 800baca:	4603      	mov	r3, r0
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d004      	beq.n	800bada <f_write+0x1e2>
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2201      	movs	r2, #1
 800bad4:	755a      	strb	r2, [r3, #21]
 800bad6:	2301      	movs	r3, #1
 800bad8:	e09e      	b.n	800bc18 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	6a1a      	ldr	r2, [r3, #32]
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	1ad3      	subs	r3, r2, r3
 800bae2:	6a3a      	ldr	r2, [r7, #32]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d918      	bls.n	800bb1a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	6a1a      	ldr	r2, [r3, #32]
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	1ad3      	subs	r3, r2, r3
 800baf6:	693a      	ldr	r2, [r7, #16]
 800baf8:	8992      	ldrh	r2, [r2, #12]
 800bafa:	fb02 f303 	mul.w	r3, r2, r3
 800bafe:	69fa      	ldr	r2, [r7, #28]
 800bb00:	18d1      	adds	r1, r2, r3
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	899b      	ldrh	r3, [r3, #12]
 800bb06:	461a      	mov	r2, r3
 800bb08:	f7fd fc2c 	bl	8009364 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	7d1b      	ldrb	r3, [r3, #20]
 800bb10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb14:	b2da      	uxtb	r2, r3
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	899b      	ldrh	r3, [r3, #12]
 800bb1e:	461a      	mov	r2, r3
 800bb20:	6a3b      	ldr	r3, [r7, #32]
 800bb22:	fb02 f303 	mul.w	r3, r2, r3
 800bb26:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800bb28:	e04b      	b.n	800bbc2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	6a1b      	ldr	r3, [r3, #32]
 800bb2e:	697a      	ldr	r2, [r7, #20]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d016      	beq.n	800bb62 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	699a      	ldr	r2, [r3, #24]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d210      	bcs.n	800bb62 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	7858      	ldrb	r0, [r3, #1]
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	697a      	ldr	r2, [r7, #20]
 800bb4e:	f7fd fb29 	bl	80091a4 <disk_read>
 800bb52:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d004      	beq.n	800bb62 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	755a      	strb	r2, [r3, #21]
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e05a      	b.n	800bc18 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	697a      	ldr	r2, [r7, #20]
 800bb66:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	899b      	ldrh	r3, [r3, #12]
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	699b      	ldr	r3, [r3, #24]
 800bb72:	693a      	ldr	r2, [r7, #16]
 800bb74:	8992      	ldrh	r2, [r2, #12]
 800bb76:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb7a:	fb01 f202 	mul.w	r2, r1, r2
 800bb7e:	1a9b      	subs	r3, r3, r2
 800bb80:	1ac3      	subs	r3, r0, r3
 800bb82:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bb84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d901      	bls.n	800bb90 <f_write+0x298>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	699b      	ldr	r3, [r3, #24]
 800bb9a:	693a      	ldr	r2, [r7, #16]
 800bb9c:	8992      	ldrh	r2, [r2, #12]
 800bb9e:	fbb3 f0f2 	udiv	r0, r3, r2
 800bba2:	fb00 f202 	mul.w	r2, r0, r2
 800bba6:	1a9b      	subs	r3, r3, r2
 800bba8:	440b      	add	r3, r1
 800bbaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbac:	69f9      	ldr	r1, [r7, #28]
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7fd fbd8 	bl	8009364 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	7d1b      	ldrb	r3, [r3, #20]
 800bbb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bbbc:	b2da      	uxtb	r2, r3
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bbc2:	69fa      	ldr	r2, [r7, #28]
 800bbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc6:	4413      	add	r3, r2
 800bbc8:	61fb      	str	r3, [r7, #28]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	699a      	ldr	r2, [r3, #24]
 800bbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd0:	441a      	add	r2, r3
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	619a      	str	r2, [r3, #24]
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	68da      	ldr	r2, [r3, #12]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	699b      	ldr	r3, [r3, #24]
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	bf38      	it	cc
 800bbe2:	461a      	movcc	r2, r3
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	60da      	str	r2, [r3, #12]
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbee:	441a      	add	r2, r3
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	601a      	str	r2, [r3, #0]
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf8:	1ad3      	subs	r3, r2, r3
 800bbfa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	f47f aeb5 	bne.w	800b96e <f_write+0x76>
 800bc04:	e000      	b.n	800bc08 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bc06:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	7d1b      	ldrb	r3, [r3, #20]
 800bc0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc10:	b2da      	uxtb	r2, r3
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bc16:	2300      	movs	r3, #0
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3730      	adds	r7, #48	; 0x30
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b086      	sub	sp, #24
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f107 0208 	add.w	r2, r7, #8
 800bc2e:	4611      	mov	r1, r2
 800bc30:	4618      	mov	r0, r3
 800bc32:	f7ff fc19 	bl	800b468 <validate>
 800bc36:	4603      	mov	r3, r0
 800bc38:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bc3a:	7dfb      	ldrb	r3, [r7, #23]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d168      	bne.n	800bd12 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	7d1b      	ldrb	r3, [r3, #20]
 800bc44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d062      	beq.n	800bd12 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	7d1b      	ldrb	r3, [r3, #20]
 800bc50:	b25b      	sxtb	r3, r3
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	da15      	bge.n	800bc82 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	7858      	ldrb	r0, [r3, #1]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6a1a      	ldr	r2, [r3, #32]
 800bc64:	2301      	movs	r3, #1
 800bc66:	f7fd fabd 	bl	80091e4 <disk_write>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d001      	beq.n	800bc74 <f_sync+0x54>
 800bc70:	2301      	movs	r3, #1
 800bc72:	e04f      	b.n	800bd14 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	7d1b      	ldrb	r3, [r3, #20]
 800bc78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc7c:	b2da      	uxtb	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bc82:	f7fc fc75 	bl	8008570 <get_fattime>
 800bc86:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bc88:	68ba      	ldr	r2, [r7, #8]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc8e:	4619      	mov	r1, r3
 800bc90:	4610      	mov	r0, r2
 800bc92:	f7fd fd95 	bl	80097c0 <move_window>
 800bc96:	4603      	mov	r3, r0
 800bc98:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bc9a:	7dfb      	ldrb	r3, [r7, #23]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d138      	bne.n	800bd12 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bca4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	330b      	adds	r3, #11
 800bcaa:	781a      	ldrb	r2, [r3, #0]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	330b      	adds	r3, #11
 800bcb0:	f042 0220 	orr.w	r2, r2, #32
 800bcb4:	b2d2      	uxtb	r2, r2
 800bcb6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6818      	ldr	r0, [r3, #0]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	68f9      	ldr	r1, [r7, #12]
 800bcc4:	f7fe fb21 	bl	800a30a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f103 021c 	add.w	r2, r3, #28
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	68db      	ldr	r3, [r3, #12]
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	4610      	mov	r0, r2
 800bcd6:	f7fd fb19 	bl	800930c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	3316      	adds	r3, #22
 800bcde:	6939      	ldr	r1, [r7, #16]
 800bce0:	4618      	mov	r0, r3
 800bce2:	f7fd fb13 	bl	800930c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	3312      	adds	r3, #18
 800bcea:	2100      	movs	r1, #0
 800bcec:	4618      	mov	r0, r3
 800bcee:	f7fd faf2 	bl	80092d6 <st_word>
					fs->wflag = 1;
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7fd fd8e 	bl	800981c <sync_fs>
 800bd00:	4603      	mov	r3, r0
 800bd02:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	7d1b      	ldrb	r3, [r3, #20]
 800bd08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd0c:	b2da      	uxtb	r2, r3
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bd12:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3718      	adds	r7, #24
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f7ff ff7b 	bl	800bc20 <f_sync>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bd2e:	7bfb      	ldrb	r3, [r7, #15]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d118      	bne.n	800bd66 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f107 0208 	add.w	r2, r7, #8
 800bd3a:	4611      	mov	r1, r2
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f7ff fb93 	bl	800b468 <validate>
 800bd42:	4603      	mov	r3, r0
 800bd44:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bd46:	7bfb      	ldrb	r3, [r7, #15]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d10c      	bne.n	800bd66 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	691b      	ldr	r3, [r3, #16]
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7fd fc91 	bl	8009678 <dec_lock>
 800bd56:	4603      	mov	r3, r0
 800bd58:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bd5a:	7bfb      	ldrb	r3, [r7, #15]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d102      	bne.n	800bd66 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2200      	movs	r2, #0
 800bd64:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bd66:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3710      	adds	r7, #16
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b084      	sub	sp, #16
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	460b      	mov	r3, r1
 800bd7a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800bd7c:	78fb      	ldrb	r3, [r7, #3]
 800bd7e:	2b0a      	cmp	r3, #10
 800bd80:	d103      	bne.n	800bd8a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800bd82:	210d      	movs	r1, #13
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f7ff fff3 	bl	800bd70 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	db25      	blt.n	800bde2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	1c5a      	adds	r2, r3, #1
 800bd9a:	60fa      	str	r2, [r7, #12]
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	4413      	add	r3, r2
 800bda0:	78fa      	ldrb	r2, [r7, #3]
 800bda2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2b3c      	cmp	r3, #60	; 0x3c
 800bda8:	dd12      	ble.n	800bdd0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6818      	ldr	r0, [r3, #0]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f103 010c 	add.w	r1, r3, #12
 800bdb4:	68fa      	ldr	r2, [r7, #12]
 800bdb6:	f107 0308 	add.w	r3, r7, #8
 800bdba:	f7ff fd9d 	bl	800b8f8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800bdbe:	68ba      	ldr	r2, [r7, #8]
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d101      	bne.n	800bdca <putc_bfd+0x5a>
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	e001      	b.n	800bdce <putc_bfd+0x5e>
 800bdca:	f04f 33ff 	mov.w	r3, #4294967295
 800bdce:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	68fa      	ldr	r2, [r7, #12]
 800bdd4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	689b      	ldr	r3, [r3, #8]
 800bdda:	1c5a      	adds	r2, r3, #1
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	609a      	str	r2, [r3, #8]
 800bde0:	e000      	b.n	800bde4 <putc_bfd+0x74>
	if (i < 0) return;
 800bde2:	bf00      	nop
}
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}

0800bdea <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800bdea:	b580      	push	{r7, lr}
 800bdec:	b084      	sub	sp, #16
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	db16      	blt.n	800be28 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6818      	ldr	r0, [r3, #0]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f103 010c 	add.w	r1, r3, #12
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	461a      	mov	r2, r3
 800be0a:	f107 030c 	add.w	r3, r7, #12
 800be0e:	f7ff fd73 	bl	800b8f8 <f_write>
 800be12:	4603      	mov	r3, r0
 800be14:	2b00      	cmp	r3, #0
 800be16:	d107      	bne.n	800be28 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	68fa      	ldr	r2, [r7, #12]
 800be1e:	4293      	cmp	r3, r2
 800be20:	d102      	bne.n	800be28 <putc_flush+0x3e>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	689b      	ldr	r3, [r3, #8]
 800be26:	e001      	b.n	800be2c <putc_flush+0x42>
	return EOF;
 800be28:	f04f 33ff 	mov.w	r3, #4294967295
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3710      	adds	r7, #16
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	683a      	ldr	r2, [r7, #0]
 800be42:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2200      	movs	r2, #0
 800be48:	605a      	str	r2, [r3, #4]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	685a      	ldr	r2, [r3, #4]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	609a      	str	r2, [r3, #8]
}
 800be52:	bf00      	nop
 800be54:	370c      	adds	r7, #12
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr

0800be5e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800be5e:	b580      	push	{r7, lr}
 800be60:	b096      	sub	sp, #88	; 0x58
 800be62:	af00      	add	r7, sp, #0
 800be64:	6078      	str	r0, [r7, #4]
 800be66:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800be68:	f107 030c 	add.w	r3, r7, #12
 800be6c:	6839      	ldr	r1, [r7, #0]
 800be6e:	4618      	mov	r0, r3
 800be70:	f7ff ffe0 	bl	800be34 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800be74:	e009      	b.n	800be8a <f_puts+0x2c>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	1c5a      	adds	r2, r3, #1
 800be7a:	607a      	str	r2, [r7, #4]
 800be7c:	781a      	ldrb	r2, [r3, #0]
 800be7e:	f107 030c 	add.w	r3, r7, #12
 800be82:	4611      	mov	r1, r2
 800be84:	4618      	mov	r0, r3
 800be86:	f7ff ff73 	bl	800bd70 <putc_bfd>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d1f1      	bne.n	800be76 <f_puts+0x18>
	return putc_flush(&pb);
 800be92:	f107 030c 	add.w	r3, r7, #12
 800be96:	4618      	mov	r0, r3
 800be98:	f7ff ffa7 	bl	800bdea <putc_flush>
 800be9c:	4603      	mov	r3, r0
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3758      	adds	r7, #88	; 0x58
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
	...

0800bea8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b087      	sub	sp, #28
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	4613      	mov	r3, r2
 800beb4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800beb6:	2301      	movs	r3, #1
 800beb8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800beba:	2300      	movs	r3, #0
 800bebc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bebe:	4b1f      	ldr	r3, [pc, #124]	; (800bf3c <FATFS_LinkDriverEx+0x94>)
 800bec0:	7a5b      	ldrb	r3, [r3, #9]
 800bec2:	b2db      	uxtb	r3, r3
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d131      	bne.n	800bf2c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bec8:	4b1c      	ldr	r3, [pc, #112]	; (800bf3c <FATFS_LinkDriverEx+0x94>)
 800beca:	7a5b      	ldrb	r3, [r3, #9]
 800becc:	b2db      	uxtb	r3, r3
 800bece:	461a      	mov	r2, r3
 800bed0:	4b1a      	ldr	r3, [pc, #104]	; (800bf3c <FATFS_LinkDriverEx+0x94>)
 800bed2:	2100      	movs	r1, #0
 800bed4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bed6:	4b19      	ldr	r3, [pc, #100]	; (800bf3c <FATFS_LinkDriverEx+0x94>)
 800bed8:	7a5b      	ldrb	r3, [r3, #9]
 800beda:	b2db      	uxtb	r3, r3
 800bedc:	4a17      	ldr	r2, [pc, #92]	; (800bf3c <FATFS_LinkDriverEx+0x94>)
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	4413      	add	r3, r2
 800bee2:	68fa      	ldr	r2, [r7, #12]
 800bee4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bee6:	4b15      	ldr	r3, [pc, #84]	; (800bf3c <FATFS_LinkDriverEx+0x94>)
 800bee8:	7a5b      	ldrb	r3, [r3, #9]
 800beea:	b2db      	uxtb	r3, r3
 800beec:	461a      	mov	r2, r3
 800beee:	4b13      	ldr	r3, [pc, #76]	; (800bf3c <FATFS_LinkDriverEx+0x94>)
 800bef0:	4413      	add	r3, r2
 800bef2:	79fa      	ldrb	r2, [r7, #7]
 800bef4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bef6:	4b11      	ldr	r3, [pc, #68]	; (800bf3c <FATFS_LinkDriverEx+0x94>)
 800bef8:	7a5b      	ldrb	r3, [r3, #9]
 800befa:	b2db      	uxtb	r3, r3
 800befc:	1c5a      	adds	r2, r3, #1
 800befe:	b2d1      	uxtb	r1, r2
 800bf00:	4a0e      	ldr	r2, [pc, #56]	; (800bf3c <FATFS_LinkDriverEx+0x94>)
 800bf02:	7251      	strb	r1, [r2, #9]
 800bf04:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bf06:	7dbb      	ldrb	r3, [r7, #22]
 800bf08:	3330      	adds	r3, #48	; 0x30
 800bf0a:	b2da      	uxtb	r2, r3
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	3301      	adds	r3, #1
 800bf14:	223a      	movs	r2, #58	; 0x3a
 800bf16:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	3302      	adds	r3, #2
 800bf1c:	222f      	movs	r2, #47	; 0x2f
 800bf1e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	3303      	adds	r3, #3
 800bf24:	2200      	movs	r2, #0
 800bf26:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bf2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	371c      	adds	r7, #28
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr
 800bf3a:	bf00      	nop
 800bf3c:	200031a0 	.word	0x200031a0

0800bf40 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b082      	sub	sp, #8
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	6839      	ldr	r1, [r7, #0]
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f7ff ffaa 	bl	800bea8 <FATFS_LinkDriverEx>
 800bf54:	4603      	mov	r3, r0
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3708      	adds	r7, #8
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
	...

0800bf60 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b085      	sub	sp, #20
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	4603      	mov	r3, r0
 800bf68:	6039      	str	r1, [r7, #0]
 800bf6a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800bf6c:	88fb      	ldrh	r3, [r7, #6]
 800bf6e:	2b7f      	cmp	r3, #127	; 0x7f
 800bf70:	d802      	bhi.n	800bf78 <ff_convert+0x18>
		c = chr;
 800bf72:	88fb      	ldrh	r3, [r7, #6]
 800bf74:	81fb      	strh	r3, [r7, #14]
 800bf76:	e025      	b.n	800bfc4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d00b      	beq.n	800bf96 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800bf7e:	88fb      	ldrh	r3, [r7, #6]
 800bf80:	2bff      	cmp	r3, #255	; 0xff
 800bf82:	d805      	bhi.n	800bf90 <ff_convert+0x30>
 800bf84:	88fb      	ldrh	r3, [r7, #6]
 800bf86:	3b80      	subs	r3, #128	; 0x80
 800bf88:	4a12      	ldr	r2, [pc, #72]	; (800bfd4 <ff_convert+0x74>)
 800bf8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf8e:	e000      	b.n	800bf92 <ff_convert+0x32>
 800bf90:	2300      	movs	r3, #0
 800bf92:	81fb      	strh	r3, [r7, #14]
 800bf94:	e016      	b.n	800bfc4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800bf96:	2300      	movs	r3, #0
 800bf98:	81fb      	strh	r3, [r7, #14]
 800bf9a:	e009      	b.n	800bfb0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800bf9c:	89fb      	ldrh	r3, [r7, #14]
 800bf9e:	4a0d      	ldr	r2, [pc, #52]	; (800bfd4 <ff_convert+0x74>)
 800bfa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bfa4:	88fa      	ldrh	r2, [r7, #6]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d006      	beq.n	800bfb8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800bfaa:	89fb      	ldrh	r3, [r7, #14]
 800bfac:	3301      	adds	r3, #1
 800bfae:	81fb      	strh	r3, [r7, #14]
 800bfb0:	89fb      	ldrh	r3, [r7, #14]
 800bfb2:	2b7f      	cmp	r3, #127	; 0x7f
 800bfb4:	d9f2      	bls.n	800bf9c <ff_convert+0x3c>
 800bfb6:	e000      	b.n	800bfba <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800bfb8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800bfba:	89fb      	ldrh	r3, [r7, #14]
 800bfbc:	3380      	adds	r3, #128	; 0x80
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800bfc4:	89fb      	ldrh	r3, [r7, #14]
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3714      	adds	r7, #20
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr
 800bfd2:	bf00      	nop
 800bfd4:	0800dc38 	.word	0x0800dc38

0800bfd8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b087      	sub	sp, #28
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	4603      	mov	r3, r0
 800bfe0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800bfe2:	88fb      	ldrh	r3, [r7, #6]
 800bfe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfe8:	d201      	bcs.n	800bfee <ff_wtoupper+0x16>
 800bfea:	4b3e      	ldr	r3, [pc, #248]	; (800c0e4 <ff_wtoupper+0x10c>)
 800bfec:	e000      	b.n	800bff0 <ff_wtoupper+0x18>
 800bfee:	4b3e      	ldr	r3, [pc, #248]	; (800c0e8 <ff_wtoupper+0x110>)
 800bff0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	1c9a      	adds	r2, r3, #2
 800bff6:	617a      	str	r2, [r7, #20]
 800bff8:	881b      	ldrh	r3, [r3, #0]
 800bffa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800bffc:	8a7b      	ldrh	r3, [r7, #18]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d068      	beq.n	800c0d4 <ff_wtoupper+0xfc>
 800c002:	88fa      	ldrh	r2, [r7, #6]
 800c004:	8a7b      	ldrh	r3, [r7, #18]
 800c006:	429a      	cmp	r2, r3
 800c008:	d364      	bcc.n	800c0d4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	1c9a      	adds	r2, r3, #2
 800c00e:	617a      	str	r2, [r7, #20]
 800c010:	881b      	ldrh	r3, [r3, #0]
 800c012:	823b      	strh	r3, [r7, #16]
 800c014:	8a3b      	ldrh	r3, [r7, #16]
 800c016:	0a1b      	lsrs	r3, r3, #8
 800c018:	81fb      	strh	r3, [r7, #14]
 800c01a:	8a3b      	ldrh	r3, [r7, #16]
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800c020:	88fa      	ldrh	r2, [r7, #6]
 800c022:	8a79      	ldrh	r1, [r7, #18]
 800c024:	8a3b      	ldrh	r3, [r7, #16]
 800c026:	440b      	add	r3, r1
 800c028:	429a      	cmp	r2, r3
 800c02a:	da49      	bge.n	800c0c0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800c02c:	89fb      	ldrh	r3, [r7, #14]
 800c02e:	2b08      	cmp	r3, #8
 800c030:	d84f      	bhi.n	800c0d2 <ff_wtoupper+0xfa>
 800c032:	a201      	add	r2, pc, #4	; (adr r2, 800c038 <ff_wtoupper+0x60>)
 800c034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c038:	0800c05d 	.word	0x0800c05d
 800c03c:	0800c06f 	.word	0x0800c06f
 800c040:	0800c085 	.word	0x0800c085
 800c044:	0800c08d 	.word	0x0800c08d
 800c048:	0800c095 	.word	0x0800c095
 800c04c:	0800c09d 	.word	0x0800c09d
 800c050:	0800c0a5 	.word	0x0800c0a5
 800c054:	0800c0ad 	.word	0x0800c0ad
 800c058:	0800c0b5 	.word	0x0800c0b5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c05c:	88fa      	ldrh	r2, [r7, #6]
 800c05e:	8a7b      	ldrh	r3, [r7, #18]
 800c060:	1ad3      	subs	r3, r2, r3
 800c062:	005b      	lsls	r3, r3, #1
 800c064:	697a      	ldr	r2, [r7, #20]
 800c066:	4413      	add	r3, r2
 800c068:	881b      	ldrh	r3, [r3, #0]
 800c06a:	80fb      	strh	r3, [r7, #6]
 800c06c:	e027      	b.n	800c0be <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c06e:	88fa      	ldrh	r2, [r7, #6]
 800c070:	8a7b      	ldrh	r3, [r7, #18]
 800c072:	1ad3      	subs	r3, r2, r3
 800c074:	b29b      	uxth	r3, r3
 800c076:	f003 0301 	and.w	r3, r3, #1
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	88fa      	ldrh	r2, [r7, #6]
 800c07e:	1ad3      	subs	r3, r2, r3
 800c080:	80fb      	strh	r3, [r7, #6]
 800c082:	e01c      	b.n	800c0be <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c084:	88fb      	ldrh	r3, [r7, #6]
 800c086:	3b10      	subs	r3, #16
 800c088:	80fb      	strh	r3, [r7, #6]
 800c08a:	e018      	b.n	800c0be <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c08c:	88fb      	ldrh	r3, [r7, #6]
 800c08e:	3b20      	subs	r3, #32
 800c090:	80fb      	strh	r3, [r7, #6]
 800c092:	e014      	b.n	800c0be <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c094:	88fb      	ldrh	r3, [r7, #6]
 800c096:	3b30      	subs	r3, #48	; 0x30
 800c098:	80fb      	strh	r3, [r7, #6]
 800c09a:	e010      	b.n	800c0be <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c09c:	88fb      	ldrh	r3, [r7, #6]
 800c09e:	3b1a      	subs	r3, #26
 800c0a0:	80fb      	strh	r3, [r7, #6]
 800c0a2:	e00c      	b.n	800c0be <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c0a4:	88fb      	ldrh	r3, [r7, #6]
 800c0a6:	3308      	adds	r3, #8
 800c0a8:	80fb      	strh	r3, [r7, #6]
 800c0aa:	e008      	b.n	800c0be <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c0ac:	88fb      	ldrh	r3, [r7, #6]
 800c0ae:	3b50      	subs	r3, #80	; 0x50
 800c0b0:	80fb      	strh	r3, [r7, #6]
 800c0b2:	e004      	b.n	800c0be <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c0b4:	88fb      	ldrh	r3, [r7, #6]
 800c0b6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800c0ba:	80fb      	strh	r3, [r7, #6]
 800c0bc:	bf00      	nop
			}
			break;
 800c0be:	e008      	b.n	800c0d2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800c0c0:	89fb      	ldrh	r3, [r7, #14]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d195      	bne.n	800bff2 <ff_wtoupper+0x1a>
 800c0c6:	8a3b      	ldrh	r3, [r7, #16]
 800c0c8:	005b      	lsls	r3, r3, #1
 800c0ca:	697a      	ldr	r2, [r7, #20]
 800c0cc:	4413      	add	r3, r2
 800c0ce:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800c0d0:	e78f      	b.n	800bff2 <ff_wtoupper+0x1a>
			break;
 800c0d2:	bf00      	nop
	}

	return chr;
 800c0d4:	88fb      	ldrh	r3, [r7, #6]
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	371c      	adds	r7, #28
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr
 800c0e2:	bf00      	nop
 800c0e4:	0800dd38 	.word	0x0800dd38
 800c0e8:	0800df2c 	.word	0x0800df2c

0800c0ec <__itoa>:
 800c0ec:	1e93      	subs	r3, r2, #2
 800c0ee:	2b22      	cmp	r3, #34	; 0x22
 800c0f0:	b510      	push	{r4, lr}
 800c0f2:	460c      	mov	r4, r1
 800c0f4:	d904      	bls.n	800c100 <__itoa+0x14>
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	700b      	strb	r3, [r1, #0]
 800c0fa:	461c      	mov	r4, r3
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	bd10      	pop	{r4, pc}
 800c100:	2a0a      	cmp	r2, #10
 800c102:	d109      	bne.n	800c118 <__itoa+0x2c>
 800c104:	2800      	cmp	r0, #0
 800c106:	da07      	bge.n	800c118 <__itoa+0x2c>
 800c108:	232d      	movs	r3, #45	; 0x2d
 800c10a:	700b      	strb	r3, [r1, #0]
 800c10c:	4240      	negs	r0, r0
 800c10e:	2101      	movs	r1, #1
 800c110:	4421      	add	r1, r4
 800c112:	f000 f8b9 	bl	800c288 <__utoa>
 800c116:	e7f1      	b.n	800c0fc <__itoa+0x10>
 800c118:	2100      	movs	r1, #0
 800c11a:	e7f9      	b.n	800c110 <__itoa+0x24>

0800c11c <itoa>:
 800c11c:	f7ff bfe6 	b.w	800c0ec <__itoa>

0800c120 <malloc>:
 800c120:	4b02      	ldr	r3, [pc, #8]	; (800c12c <malloc+0xc>)
 800c122:	4601      	mov	r1, r0
 800c124:	6818      	ldr	r0, [r3, #0]
 800c126:	f000 b823 	b.w	800c170 <_malloc_r>
 800c12a:	bf00      	nop
 800c12c:	200000d4 	.word	0x200000d4

0800c130 <sbrk_aligned>:
 800c130:	b570      	push	{r4, r5, r6, lr}
 800c132:	4e0e      	ldr	r6, [pc, #56]	; (800c16c <sbrk_aligned+0x3c>)
 800c134:	460c      	mov	r4, r1
 800c136:	6831      	ldr	r1, [r6, #0]
 800c138:	4605      	mov	r5, r0
 800c13a:	b911      	cbnz	r1, 800c142 <sbrk_aligned+0x12>
 800c13c:	f000 f8ee 	bl	800c31c <_sbrk_r>
 800c140:	6030      	str	r0, [r6, #0]
 800c142:	4621      	mov	r1, r4
 800c144:	4628      	mov	r0, r5
 800c146:	f000 f8e9 	bl	800c31c <_sbrk_r>
 800c14a:	1c43      	adds	r3, r0, #1
 800c14c:	d00a      	beq.n	800c164 <sbrk_aligned+0x34>
 800c14e:	1cc4      	adds	r4, r0, #3
 800c150:	f024 0403 	bic.w	r4, r4, #3
 800c154:	42a0      	cmp	r0, r4
 800c156:	d007      	beq.n	800c168 <sbrk_aligned+0x38>
 800c158:	1a21      	subs	r1, r4, r0
 800c15a:	4628      	mov	r0, r5
 800c15c:	f000 f8de 	bl	800c31c <_sbrk_r>
 800c160:	3001      	adds	r0, #1
 800c162:	d101      	bne.n	800c168 <sbrk_aligned+0x38>
 800c164:	f04f 34ff 	mov.w	r4, #4294967295
 800c168:	4620      	mov	r0, r4
 800c16a:	bd70      	pop	{r4, r5, r6, pc}
 800c16c:	200031b0 	.word	0x200031b0

0800c170 <_malloc_r>:
 800c170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c174:	1ccd      	adds	r5, r1, #3
 800c176:	f025 0503 	bic.w	r5, r5, #3
 800c17a:	3508      	adds	r5, #8
 800c17c:	2d0c      	cmp	r5, #12
 800c17e:	bf38      	it	cc
 800c180:	250c      	movcc	r5, #12
 800c182:	2d00      	cmp	r5, #0
 800c184:	4607      	mov	r7, r0
 800c186:	db01      	blt.n	800c18c <_malloc_r+0x1c>
 800c188:	42a9      	cmp	r1, r5
 800c18a:	d905      	bls.n	800c198 <_malloc_r+0x28>
 800c18c:	230c      	movs	r3, #12
 800c18e:	603b      	str	r3, [r7, #0]
 800c190:	2600      	movs	r6, #0
 800c192:	4630      	mov	r0, r6
 800c194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c198:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c26c <_malloc_r+0xfc>
 800c19c:	f000 f868 	bl	800c270 <__malloc_lock>
 800c1a0:	f8d8 3000 	ldr.w	r3, [r8]
 800c1a4:	461c      	mov	r4, r3
 800c1a6:	bb5c      	cbnz	r4, 800c200 <_malloc_r+0x90>
 800c1a8:	4629      	mov	r1, r5
 800c1aa:	4638      	mov	r0, r7
 800c1ac:	f7ff ffc0 	bl	800c130 <sbrk_aligned>
 800c1b0:	1c43      	adds	r3, r0, #1
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	d155      	bne.n	800c262 <_malloc_r+0xf2>
 800c1b6:	f8d8 4000 	ldr.w	r4, [r8]
 800c1ba:	4626      	mov	r6, r4
 800c1bc:	2e00      	cmp	r6, #0
 800c1be:	d145      	bne.n	800c24c <_malloc_r+0xdc>
 800c1c0:	2c00      	cmp	r4, #0
 800c1c2:	d048      	beq.n	800c256 <_malloc_r+0xe6>
 800c1c4:	6823      	ldr	r3, [r4, #0]
 800c1c6:	4631      	mov	r1, r6
 800c1c8:	4638      	mov	r0, r7
 800c1ca:	eb04 0903 	add.w	r9, r4, r3
 800c1ce:	f000 f8a5 	bl	800c31c <_sbrk_r>
 800c1d2:	4581      	cmp	r9, r0
 800c1d4:	d13f      	bne.n	800c256 <_malloc_r+0xe6>
 800c1d6:	6821      	ldr	r1, [r4, #0]
 800c1d8:	1a6d      	subs	r5, r5, r1
 800c1da:	4629      	mov	r1, r5
 800c1dc:	4638      	mov	r0, r7
 800c1de:	f7ff ffa7 	bl	800c130 <sbrk_aligned>
 800c1e2:	3001      	adds	r0, #1
 800c1e4:	d037      	beq.n	800c256 <_malloc_r+0xe6>
 800c1e6:	6823      	ldr	r3, [r4, #0]
 800c1e8:	442b      	add	r3, r5
 800c1ea:	6023      	str	r3, [r4, #0]
 800c1ec:	f8d8 3000 	ldr.w	r3, [r8]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d038      	beq.n	800c266 <_malloc_r+0xf6>
 800c1f4:	685a      	ldr	r2, [r3, #4]
 800c1f6:	42a2      	cmp	r2, r4
 800c1f8:	d12b      	bne.n	800c252 <_malloc_r+0xe2>
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	605a      	str	r2, [r3, #4]
 800c1fe:	e00f      	b.n	800c220 <_malloc_r+0xb0>
 800c200:	6822      	ldr	r2, [r4, #0]
 800c202:	1b52      	subs	r2, r2, r5
 800c204:	d41f      	bmi.n	800c246 <_malloc_r+0xd6>
 800c206:	2a0b      	cmp	r2, #11
 800c208:	d917      	bls.n	800c23a <_malloc_r+0xca>
 800c20a:	1961      	adds	r1, r4, r5
 800c20c:	42a3      	cmp	r3, r4
 800c20e:	6025      	str	r5, [r4, #0]
 800c210:	bf18      	it	ne
 800c212:	6059      	strne	r1, [r3, #4]
 800c214:	6863      	ldr	r3, [r4, #4]
 800c216:	bf08      	it	eq
 800c218:	f8c8 1000 	streq.w	r1, [r8]
 800c21c:	5162      	str	r2, [r4, r5]
 800c21e:	604b      	str	r3, [r1, #4]
 800c220:	4638      	mov	r0, r7
 800c222:	f104 060b 	add.w	r6, r4, #11
 800c226:	f000 f829 	bl	800c27c <__malloc_unlock>
 800c22a:	f026 0607 	bic.w	r6, r6, #7
 800c22e:	1d23      	adds	r3, r4, #4
 800c230:	1af2      	subs	r2, r6, r3
 800c232:	d0ae      	beq.n	800c192 <_malloc_r+0x22>
 800c234:	1b9b      	subs	r3, r3, r6
 800c236:	50a3      	str	r3, [r4, r2]
 800c238:	e7ab      	b.n	800c192 <_malloc_r+0x22>
 800c23a:	42a3      	cmp	r3, r4
 800c23c:	6862      	ldr	r2, [r4, #4]
 800c23e:	d1dd      	bne.n	800c1fc <_malloc_r+0x8c>
 800c240:	f8c8 2000 	str.w	r2, [r8]
 800c244:	e7ec      	b.n	800c220 <_malloc_r+0xb0>
 800c246:	4623      	mov	r3, r4
 800c248:	6864      	ldr	r4, [r4, #4]
 800c24a:	e7ac      	b.n	800c1a6 <_malloc_r+0x36>
 800c24c:	4634      	mov	r4, r6
 800c24e:	6876      	ldr	r6, [r6, #4]
 800c250:	e7b4      	b.n	800c1bc <_malloc_r+0x4c>
 800c252:	4613      	mov	r3, r2
 800c254:	e7cc      	b.n	800c1f0 <_malloc_r+0x80>
 800c256:	230c      	movs	r3, #12
 800c258:	603b      	str	r3, [r7, #0]
 800c25a:	4638      	mov	r0, r7
 800c25c:	f000 f80e 	bl	800c27c <__malloc_unlock>
 800c260:	e797      	b.n	800c192 <_malloc_r+0x22>
 800c262:	6025      	str	r5, [r4, #0]
 800c264:	e7dc      	b.n	800c220 <_malloc_r+0xb0>
 800c266:	605b      	str	r3, [r3, #4]
 800c268:	deff      	udf	#255	; 0xff
 800c26a:	bf00      	nop
 800c26c:	200031ac 	.word	0x200031ac

0800c270 <__malloc_lock>:
 800c270:	4801      	ldr	r0, [pc, #4]	; (800c278 <__malloc_lock+0x8>)
 800c272:	f000 b88d 	b.w	800c390 <__retarget_lock_acquire_recursive>
 800c276:	bf00      	nop
 800c278:	200032f0 	.word	0x200032f0

0800c27c <__malloc_unlock>:
 800c27c:	4801      	ldr	r0, [pc, #4]	; (800c284 <__malloc_unlock+0x8>)
 800c27e:	f000 b888 	b.w	800c392 <__retarget_lock_release_recursive>
 800c282:	bf00      	nop
 800c284:	200032f0 	.word	0x200032f0

0800c288 <__utoa>:
 800c288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c28a:	4c1f      	ldr	r4, [pc, #124]	; (800c308 <__utoa+0x80>)
 800c28c:	b08b      	sub	sp, #44	; 0x2c
 800c28e:	4605      	mov	r5, r0
 800c290:	460b      	mov	r3, r1
 800c292:	466e      	mov	r6, sp
 800c294:	f104 0c20 	add.w	ip, r4, #32
 800c298:	6820      	ldr	r0, [r4, #0]
 800c29a:	6861      	ldr	r1, [r4, #4]
 800c29c:	4637      	mov	r7, r6
 800c29e:	c703      	stmia	r7!, {r0, r1}
 800c2a0:	3408      	adds	r4, #8
 800c2a2:	4564      	cmp	r4, ip
 800c2a4:	463e      	mov	r6, r7
 800c2a6:	d1f7      	bne.n	800c298 <__utoa+0x10>
 800c2a8:	7921      	ldrb	r1, [r4, #4]
 800c2aa:	7139      	strb	r1, [r7, #4]
 800c2ac:	1e91      	subs	r1, r2, #2
 800c2ae:	6820      	ldr	r0, [r4, #0]
 800c2b0:	6038      	str	r0, [r7, #0]
 800c2b2:	2922      	cmp	r1, #34	; 0x22
 800c2b4:	f04f 0100 	mov.w	r1, #0
 800c2b8:	d904      	bls.n	800c2c4 <__utoa+0x3c>
 800c2ba:	7019      	strb	r1, [r3, #0]
 800c2bc:	460b      	mov	r3, r1
 800c2be:	4618      	mov	r0, r3
 800c2c0:	b00b      	add	sp, #44	; 0x2c
 800c2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2c4:	1e58      	subs	r0, r3, #1
 800c2c6:	4684      	mov	ip, r0
 800c2c8:	fbb5 f7f2 	udiv	r7, r5, r2
 800c2cc:	fb02 5617 	mls	r6, r2, r7, r5
 800c2d0:	3628      	adds	r6, #40	; 0x28
 800c2d2:	446e      	add	r6, sp
 800c2d4:	460c      	mov	r4, r1
 800c2d6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c2da:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c2de:	462e      	mov	r6, r5
 800c2e0:	42b2      	cmp	r2, r6
 800c2e2:	f101 0101 	add.w	r1, r1, #1
 800c2e6:	463d      	mov	r5, r7
 800c2e8:	d9ee      	bls.n	800c2c8 <__utoa+0x40>
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	545a      	strb	r2, [r3, r1]
 800c2ee:	1919      	adds	r1, r3, r4
 800c2f0:	1aa5      	subs	r5, r4, r2
 800c2f2:	42aa      	cmp	r2, r5
 800c2f4:	dae3      	bge.n	800c2be <__utoa+0x36>
 800c2f6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c2fa:	780e      	ldrb	r6, [r1, #0]
 800c2fc:	7006      	strb	r6, [r0, #0]
 800c2fe:	3201      	adds	r2, #1
 800c300:	f801 5901 	strb.w	r5, [r1], #-1
 800c304:	e7f4      	b.n	800c2f0 <__utoa+0x68>
 800c306:	bf00      	nop
 800c308:	0800dfe8 	.word	0x0800dfe8

0800c30c <memset>:
 800c30c:	4402      	add	r2, r0
 800c30e:	4603      	mov	r3, r0
 800c310:	4293      	cmp	r3, r2
 800c312:	d100      	bne.n	800c316 <memset+0xa>
 800c314:	4770      	bx	lr
 800c316:	f803 1b01 	strb.w	r1, [r3], #1
 800c31a:	e7f9      	b.n	800c310 <memset+0x4>

0800c31c <_sbrk_r>:
 800c31c:	b538      	push	{r3, r4, r5, lr}
 800c31e:	4d06      	ldr	r5, [pc, #24]	; (800c338 <_sbrk_r+0x1c>)
 800c320:	2300      	movs	r3, #0
 800c322:	4604      	mov	r4, r0
 800c324:	4608      	mov	r0, r1
 800c326:	602b      	str	r3, [r5, #0]
 800c328:	f7f6 ffc2 	bl	80032b0 <_sbrk>
 800c32c:	1c43      	adds	r3, r0, #1
 800c32e:	d102      	bne.n	800c336 <_sbrk_r+0x1a>
 800c330:	682b      	ldr	r3, [r5, #0]
 800c332:	b103      	cbz	r3, 800c336 <_sbrk_r+0x1a>
 800c334:	6023      	str	r3, [r4, #0]
 800c336:	bd38      	pop	{r3, r4, r5, pc}
 800c338:	200032ec 	.word	0x200032ec

0800c33c <__errno>:
 800c33c:	4b01      	ldr	r3, [pc, #4]	; (800c344 <__errno+0x8>)
 800c33e:	6818      	ldr	r0, [r3, #0]
 800c340:	4770      	bx	lr
 800c342:	bf00      	nop
 800c344:	200000d4 	.word	0x200000d4

0800c348 <__libc_init_array>:
 800c348:	b570      	push	{r4, r5, r6, lr}
 800c34a:	4d0d      	ldr	r5, [pc, #52]	; (800c380 <__libc_init_array+0x38>)
 800c34c:	4c0d      	ldr	r4, [pc, #52]	; (800c384 <__libc_init_array+0x3c>)
 800c34e:	1b64      	subs	r4, r4, r5
 800c350:	10a4      	asrs	r4, r4, #2
 800c352:	2600      	movs	r6, #0
 800c354:	42a6      	cmp	r6, r4
 800c356:	d109      	bne.n	800c36c <__libc_init_array+0x24>
 800c358:	4d0b      	ldr	r5, [pc, #44]	; (800c388 <__libc_init_array+0x40>)
 800c35a:	4c0c      	ldr	r4, [pc, #48]	; (800c38c <__libc_init_array+0x44>)
 800c35c:	f000 fff8 	bl	800d350 <_init>
 800c360:	1b64      	subs	r4, r4, r5
 800c362:	10a4      	asrs	r4, r4, #2
 800c364:	2600      	movs	r6, #0
 800c366:	42a6      	cmp	r6, r4
 800c368:	d105      	bne.n	800c376 <__libc_init_array+0x2e>
 800c36a:	bd70      	pop	{r4, r5, r6, pc}
 800c36c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c370:	4798      	blx	r3
 800c372:	3601      	adds	r6, #1
 800c374:	e7ee      	b.n	800c354 <__libc_init_array+0xc>
 800c376:	f855 3b04 	ldr.w	r3, [r5], #4
 800c37a:	4798      	blx	r3
 800c37c:	3601      	adds	r6, #1
 800c37e:	e7f2      	b.n	800c366 <__libc_init_array+0x1e>
 800c380:	0800e048 	.word	0x0800e048
 800c384:	0800e048 	.word	0x0800e048
 800c388:	0800e048 	.word	0x0800e048
 800c38c:	0800e04c 	.word	0x0800e04c

0800c390 <__retarget_lock_acquire_recursive>:
 800c390:	4770      	bx	lr

0800c392 <__retarget_lock_release_recursive>:
 800c392:	4770      	bx	lr

0800c394 <memcpy>:
 800c394:	440a      	add	r2, r1
 800c396:	4291      	cmp	r1, r2
 800c398:	f100 33ff 	add.w	r3, r0, #4294967295
 800c39c:	d100      	bne.n	800c3a0 <memcpy+0xc>
 800c39e:	4770      	bx	lr
 800c3a0:	b510      	push	{r4, lr}
 800c3a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3aa:	4291      	cmp	r1, r2
 800c3ac:	d1f9      	bne.n	800c3a2 <memcpy+0xe>
 800c3ae:	bd10      	pop	{r4, pc}

0800c3b0 <pow>:
 800c3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3b2:	ed2d 8b02 	vpush	{d8}
 800c3b6:	eeb0 8a40 	vmov.f32	s16, s0
 800c3ba:	eef0 8a60 	vmov.f32	s17, s1
 800c3be:	ec55 4b11 	vmov	r4, r5, d1
 800c3c2:	f000 f909 	bl	800c5d8 <__ieee754_pow>
 800c3c6:	4622      	mov	r2, r4
 800c3c8:	462b      	mov	r3, r5
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	4629      	mov	r1, r5
 800c3ce:	ec57 6b10 	vmov	r6, r7, d0
 800c3d2:	f7f4 fb4f 	bl	8000a74 <__aeabi_dcmpun>
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	d13b      	bne.n	800c452 <pow+0xa2>
 800c3da:	ec51 0b18 	vmov	r0, r1, d8
 800c3de:	2200      	movs	r2, #0
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	f7f4 fb15 	bl	8000a10 <__aeabi_dcmpeq>
 800c3e6:	b1b8      	cbz	r0, 800c418 <pow+0x68>
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	4629      	mov	r1, r5
 800c3f0:	f7f4 fb0e 	bl	8000a10 <__aeabi_dcmpeq>
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	d146      	bne.n	800c486 <pow+0xd6>
 800c3f8:	ec45 4b10 	vmov	d0, r4, r5
 800c3fc:	f000 f848 	bl	800c490 <finite>
 800c400:	b338      	cbz	r0, 800c452 <pow+0xa2>
 800c402:	2200      	movs	r2, #0
 800c404:	2300      	movs	r3, #0
 800c406:	4620      	mov	r0, r4
 800c408:	4629      	mov	r1, r5
 800c40a:	f7f4 fb0b 	bl	8000a24 <__aeabi_dcmplt>
 800c40e:	b300      	cbz	r0, 800c452 <pow+0xa2>
 800c410:	f7ff ff94 	bl	800c33c <__errno>
 800c414:	2322      	movs	r3, #34	; 0x22
 800c416:	e01b      	b.n	800c450 <pow+0xa0>
 800c418:	ec47 6b10 	vmov	d0, r6, r7
 800c41c:	f000 f838 	bl	800c490 <finite>
 800c420:	b9e0      	cbnz	r0, 800c45c <pow+0xac>
 800c422:	eeb0 0a48 	vmov.f32	s0, s16
 800c426:	eef0 0a68 	vmov.f32	s1, s17
 800c42a:	f000 f831 	bl	800c490 <finite>
 800c42e:	b1a8      	cbz	r0, 800c45c <pow+0xac>
 800c430:	ec45 4b10 	vmov	d0, r4, r5
 800c434:	f000 f82c 	bl	800c490 <finite>
 800c438:	b180      	cbz	r0, 800c45c <pow+0xac>
 800c43a:	4632      	mov	r2, r6
 800c43c:	463b      	mov	r3, r7
 800c43e:	4630      	mov	r0, r6
 800c440:	4639      	mov	r1, r7
 800c442:	f7f4 fb17 	bl	8000a74 <__aeabi_dcmpun>
 800c446:	2800      	cmp	r0, #0
 800c448:	d0e2      	beq.n	800c410 <pow+0x60>
 800c44a:	f7ff ff77 	bl	800c33c <__errno>
 800c44e:	2321      	movs	r3, #33	; 0x21
 800c450:	6003      	str	r3, [r0, #0]
 800c452:	ecbd 8b02 	vpop	{d8}
 800c456:	ec47 6b10 	vmov	d0, r6, r7
 800c45a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c45c:	2200      	movs	r2, #0
 800c45e:	2300      	movs	r3, #0
 800c460:	4630      	mov	r0, r6
 800c462:	4639      	mov	r1, r7
 800c464:	f7f4 fad4 	bl	8000a10 <__aeabi_dcmpeq>
 800c468:	2800      	cmp	r0, #0
 800c46a:	d0f2      	beq.n	800c452 <pow+0xa2>
 800c46c:	eeb0 0a48 	vmov.f32	s0, s16
 800c470:	eef0 0a68 	vmov.f32	s1, s17
 800c474:	f000 f80c 	bl	800c490 <finite>
 800c478:	2800      	cmp	r0, #0
 800c47a:	d0ea      	beq.n	800c452 <pow+0xa2>
 800c47c:	ec45 4b10 	vmov	d0, r4, r5
 800c480:	f000 f806 	bl	800c490 <finite>
 800c484:	e7c3      	b.n	800c40e <pow+0x5e>
 800c486:	4f01      	ldr	r7, [pc, #4]	; (800c48c <pow+0xdc>)
 800c488:	2600      	movs	r6, #0
 800c48a:	e7e2      	b.n	800c452 <pow+0xa2>
 800c48c:	3ff00000 	.word	0x3ff00000

0800c490 <finite>:
 800c490:	b082      	sub	sp, #8
 800c492:	ed8d 0b00 	vstr	d0, [sp]
 800c496:	9801      	ldr	r0, [sp, #4]
 800c498:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c49c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c4a0:	0fc0      	lsrs	r0, r0, #31
 800c4a2:	b002      	add	sp, #8
 800c4a4:	4770      	bx	lr

0800c4a6 <fmin>:
 800c4a6:	b508      	push	{r3, lr}
 800c4a8:	ed2d 8b04 	vpush	{d8-d9}
 800c4ac:	eeb0 8a40 	vmov.f32	s16, s0
 800c4b0:	eef0 8a60 	vmov.f32	s17, s1
 800c4b4:	eeb0 9a41 	vmov.f32	s18, s2
 800c4b8:	eef0 9a61 	vmov.f32	s19, s3
 800c4bc:	f000 f81a 	bl	800c4f4 <__fpclassifyd>
 800c4c0:	b168      	cbz	r0, 800c4de <fmin+0x38>
 800c4c2:	eeb0 0a49 	vmov.f32	s0, s18
 800c4c6:	eef0 0a69 	vmov.f32	s1, s19
 800c4ca:	f000 f813 	bl	800c4f4 <__fpclassifyd>
 800c4ce:	b150      	cbz	r0, 800c4e6 <fmin+0x40>
 800c4d0:	ec53 2b19 	vmov	r2, r3, d9
 800c4d4:	ec51 0b18 	vmov	r0, r1, d8
 800c4d8:	f7f4 faa4 	bl	8000a24 <__aeabi_dcmplt>
 800c4dc:	b918      	cbnz	r0, 800c4e6 <fmin+0x40>
 800c4de:	eeb0 8a49 	vmov.f32	s16, s18
 800c4e2:	eef0 8a69 	vmov.f32	s17, s19
 800c4e6:	eeb0 0a48 	vmov.f32	s0, s16
 800c4ea:	eef0 0a68 	vmov.f32	s1, s17
 800c4ee:	ecbd 8b04 	vpop	{d8-d9}
 800c4f2:	bd08      	pop	{r3, pc}

0800c4f4 <__fpclassifyd>:
 800c4f4:	ec51 0b10 	vmov	r0, r1, d0
 800c4f8:	b510      	push	{r4, lr}
 800c4fa:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800c4fe:	460b      	mov	r3, r1
 800c500:	d019      	beq.n	800c536 <__fpclassifyd+0x42>
 800c502:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 800c506:	490e      	ldr	r1, [pc, #56]	; (800c540 <__fpclassifyd+0x4c>)
 800c508:	428a      	cmp	r2, r1
 800c50a:	d90e      	bls.n	800c52a <__fpclassifyd+0x36>
 800c50c:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 800c510:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 800c514:	428a      	cmp	r2, r1
 800c516:	d908      	bls.n	800c52a <__fpclassifyd+0x36>
 800c518:	4a0a      	ldr	r2, [pc, #40]	; (800c544 <__fpclassifyd+0x50>)
 800c51a:	4213      	tst	r3, r2
 800c51c:	d007      	beq.n	800c52e <__fpclassifyd+0x3a>
 800c51e:	4294      	cmp	r4, r2
 800c520:	d107      	bne.n	800c532 <__fpclassifyd+0x3e>
 800c522:	fab0 f080 	clz	r0, r0
 800c526:	0940      	lsrs	r0, r0, #5
 800c528:	bd10      	pop	{r4, pc}
 800c52a:	2004      	movs	r0, #4
 800c52c:	e7fc      	b.n	800c528 <__fpclassifyd+0x34>
 800c52e:	2003      	movs	r0, #3
 800c530:	e7fa      	b.n	800c528 <__fpclassifyd+0x34>
 800c532:	2000      	movs	r0, #0
 800c534:	e7f8      	b.n	800c528 <__fpclassifyd+0x34>
 800c536:	2800      	cmp	r0, #0
 800c538:	d1ee      	bne.n	800c518 <__fpclassifyd+0x24>
 800c53a:	2002      	movs	r0, #2
 800c53c:	e7f4      	b.n	800c528 <__fpclassifyd+0x34>
 800c53e:	bf00      	nop
 800c540:	7fdfffff 	.word	0x7fdfffff
 800c544:	7ff00000 	.word	0x7ff00000

0800c548 <round>:
 800c548:	ec53 2b10 	vmov	r2, r3, d0
 800c54c:	b570      	push	{r4, r5, r6, lr}
 800c54e:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800c552:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800c556:	2813      	cmp	r0, #19
 800c558:	ee10 5a10 	vmov	r5, s0
 800c55c:	4619      	mov	r1, r3
 800c55e:	dc18      	bgt.n	800c592 <round+0x4a>
 800c560:	2800      	cmp	r0, #0
 800c562:	da09      	bge.n	800c578 <round+0x30>
 800c564:	3001      	adds	r0, #1
 800c566:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800c56a:	d103      	bne.n	800c574 <round+0x2c>
 800c56c:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800c570:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c574:	2300      	movs	r3, #0
 800c576:	e02a      	b.n	800c5ce <round+0x86>
 800c578:	4c16      	ldr	r4, [pc, #88]	; (800c5d4 <round+0x8c>)
 800c57a:	4104      	asrs	r4, r0
 800c57c:	ea03 0604 	and.w	r6, r3, r4
 800c580:	4316      	orrs	r6, r2
 800c582:	d011      	beq.n	800c5a8 <round+0x60>
 800c584:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c588:	4103      	asrs	r3, r0
 800c58a:	440b      	add	r3, r1
 800c58c:	ea23 0104 	bic.w	r1, r3, r4
 800c590:	e7f0      	b.n	800c574 <round+0x2c>
 800c592:	2833      	cmp	r0, #51	; 0x33
 800c594:	dd0b      	ble.n	800c5ae <round+0x66>
 800c596:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800c59a:	d105      	bne.n	800c5a8 <round+0x60>
 800c59c:	ee10 0a10 	vmov	r0, s0
 800c5a0:	f7f3 fe18 	bl	80001d4 <__adddf3>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	460b      	mov	r3, r1
 800c5a8:	ec43 2b10 	vmov	d0, r2, r3
 800c5ac:	bd70      	pop	{r4, r5, r6, pc}
 800c5ae:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800c5b2:	f04f 34ff 	mov.w	r4, #4294967295
 800c5b6:	40f4      	lsrs	r4, r6
 800c5b8:	4214      	tst	r4, r2
 800c5ba:	d0f5      	beq.n	800c5a8 <round+0x60>
 800c5bc:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	4083      	lsls	r3, r0
 800c5c4:	195b      	adds	r3, r3, r5
 800c5c6:	bf28      	it	cs
 800c5c8:	3101      	addcs	r1, #1
 800c5ca:	ea23 0304 	bic.w	r3, r3, r4
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	e7e9      	b.n	800c5a8 <round+0x60>
 800c5d4:	000fffff 	.word	0x000fffff

0800c5d8 <__ieee754_pow>:
 800c5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5dc:	ed2d 8b06 	vpush	{d8-d10}
 800c5e0:	b089      	sub	sp, #36	; 0x24
 800c5e2:	ed8d 1b00 	vstr	d1, [sp]
 800c5e6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c5ea:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c5ee:	ea58 0102 	orrs.w	r1, r8, r2
 800c5f2:	ec57 6b10 	vmov	r6, r7, d0
 800c5f6:	d115      	bne.n	800c624 <__ieee754_pow+0x4c>
 800c5f8:	19b3      	adds	r3, r6, r6
 800c5fa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c5fe:	4152      	adcs	r2, r2
 800c600:	4299      	cmp	r1, r3
 800c602:	4b89      	ldr	r3, [pc, #548]	; (800c828 <__ieee754_pow+0x250>)
 800c604:	4193      	sbcs	r3, r2
 800c606:	f080 84d1 	bcs.w	800cfac <__ieee754_pow+0x9d4>
 800c60a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c60e:	4630      	mov	r0, r6
 800c610:	4639      	mov	r1, r7
 800c612:	f7f3 fddf 	bl	80001d4 <__adddf3>
 800c616:	ec41 0b10 	vmov	d0, r0, r1
 800c61a:	b009      	add	sp, #36	; 0x24
 800c61c:	ecbd 8b06 	vpop	{d8-d10}
 800c620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c624:	4b81      	ldr	r3, [pc, #516]	; (800c82c <__ieee754_pow+0x254>)
 800c626:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c62a:	429c      	cmp	r4, r3
 800c62c:	ee10 aa10 	vmov	sl, s0
 800c630:	463d      	mov	r5, r7
 800c632:	dc06      	bgt.n	800c642 <__ieee754_pow+0x6a>
 800c634:	d101      	bne.n	800c63a <__ieee754_pow+0x62>
 800c636:	2e00      	cmp	r6, #0
 800c638:	d1e7      	bne.n	800c60a <__ieee754_pow+0x32>
 800c63a:	4598      	cmp	r8, r3
 800c63c:	dc01      	bgt.n	800c642 <__ieee754_pow+0x6a>
 800c63e:	d10f      	bne.n	800c660 <__ieee754_pow+0x88>
 800c640:	b172      	cbz	r2, 800c660 <__ieee754_pow+0x88>
 800c642:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c646:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c64a:	ea55 050a 	orrs.w	r5, r5, sl
 800c64e:	d1dc      	bne.n	800c60a <__ieee754_pow+0x32>
 800c650:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c654:	18db      	adds	r3, r3, r3
 800c656:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c65a:	4152      	adcs	r2, r2
 800c65c:	429d      	cmp	r5, r3
 800c65e:	e7d0      	b.n	800c602 <__ieee754_pow+0x2a>
 800c660:	2d00      	cmp	r5, #0
 800c662:	da3b      	bge.n	800c6dc <__ieee754_pow+0x104>
 800c664:	4b72      	ldr	r3, [pc, #456]	; (800c830 <__ieee754_pow+0x258>)
 800c666:	4598      	cmp	r8, r3
 800c668:	dc51      	bgt.n	800c70e <__ieee754_pow+0x136>
 800c66a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c66e:	4598      	cmp	r8, r3
 800c670:	f340 84ab 	ble.w	800cfca <__ieee754_pow+0x9f2>
 800c674:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c678:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c67c:	2b14      	cmp	r3, #20
 800c67e:	dd0f      	ble.n	800c6a0 <__ieee754_pow+0xc8>
 800c680:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c684:	fa22 f103 	lsr.w	r1, r2, r3
 800c688:	fa01 f303 	lsl.w	r3, r1, r3
 800c68c:	4293      	cmp	r3, r2
 800c68e:	f040 849c 	bne.w	800cfca <__ieee754_pow+0x9f2>
 800c692:	f001 0101 	and.w	r1, r1, #1
 800c696:	f1c1 0302 	rsb	r3, r1, #2
 800c69a:	9304      	str	r3, [sp, #16]
 800c69c:	b182      	cbz	r2, 800c6c0 <__ieee754_pow+0xe8>
 800c69e:	e05f      	b.n	800c760 <__ieee754_pow+0x188>
 800c6a0:	2a00      	cmp	r2, #0
 800c6a2:	d15b      	bne.n	800c75c <__ieee754_pow+0x184>
 800c6a4:	f1c3 0314 	rsb	r3, r3, #20
 800c6a8:	fa48 f103 	asr.w	r1, r8, r3
 800c6ac:	fa01 f303 	lsl.w	r3, r1, r3
 800c6b0:	4543      	cmp	r3, r8
 800c6b2:	f040 8487 	bne.w	800cfc4 <__ieee754_pow+0x9ec>
 800c6b6:	f001 0101 	and.w	r1, r1, #1
 800c6ba:	f1c1 0302 	rsb	r3, r1, #2
 800c6be:	9304      	str	r3, [sp, #16]
 800c6c0:	4b5c      	ldr	r3, [pc, #368]	; (800c834 <__ieee754_pow+0x25c>)
 800c6c2:	4598      	cmp	r8, r3
 800c6c4:	d132      	bne.n	800c72c <__ieee754_pow+0x154>
 800c6c6:	f1b9 0f00 	cmp.w	r9, #0
 800c6ca:	f280 8477 	bge.w	800cfbc <__ieee754_pow+0x9e4>
 800c6ce:	4959      	ldr	r1, [pc, #356]	; (800c834 <__ieee754_pow+0x25c>)
 800c6d0:	4632      	mov	r2, r6
 800c6d2:	463b      	mov	r3, r7
 800c6d4:	2000      	movs	r0, #0
 800c6d6:	f7f4 f85d 	bl	8000794 <__aeabi_ddiv>
 800c6da:	e79c      	b.n	800c616 <__ieee754_pow+0x3e>
 800c6dc:	2300      	movs	r3, #0
 800c6de:	9304      	str	r3, [sp, #16]
 800c6e0:	2a00      	cmp	r2, #0
 800c6e2:	d13d      	bne.n	800c760 <__ieee754_pow+0x188>
 800c6e4:	4b51      	ldr	r3, [pc, #324]	; (800c82c <__ieee754_pow+0x254>)
 800c6e6:	4598      	cmp	r8, r3
 800c6e8:	d1ea      	bne.n	800c6c0 <__ieee754_pow+0xe8>
 800c6ea:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c6ee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c6f2:	ea53 030a 	orrs.w	r3, r3, sl
 800c6f6:	f000 8459 	beq.w	800cfac <__ieee754_pow+0x9d4>
 800c6fa:	4b4f      	ldr	r3, [pc, #316]	; (800c838 <__ieee754_pow+0x260>)
 800c6fc:	429c      	cmp	r4, r3
 800c6fe:	dd08      	ble.n	800c712 <__ieee754_pow+0x13a>
 800c700:	f1b9 0f00 	cmp.w	r9, #0
 800c704:	f2c0 8456 	blt.w	800cfb4 <__ieee754_pow+0x9dc>
 800c708:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c70c:	e783      	b.n	800c616 <__ieee754_pow+0x3e>
 800c70e:	2302      	movs	r3, #2
 800c710:	e7e5      	b.n	800c6de <__ieee754_pow+0x106>
 800c712:	f1b9 0f00 	cmp.w	r9, #0
 800c716:	f04f 0000 	mov.w	r0, #0
 800c71a:	f04f 0100 	mov.w	r1, #0
 800c71e:	f6bf af7a 	bge.w	800c616 <__ieee754_pow+0x3e>
 800c722:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c726:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c72a:	e774      	b.n	800c616 <__ieee754_pow+0x3e>
 800c72c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c730:	d106      	bne.n	800c740 <__ieee754_pow+0x168>
 800c732:	4632      	mov	r2, r6
 800c734:	463b      	mov	r3, r7
 800c736:	4630      	mov	r0, r6
 800c738:	4639      	mov	r1, r7
 800c73a:	f7f3 ff01 	bl	8000540 <__aeabi_dmul>
 800c73e:	e76a      	b.n	800c616 <__ieee754_pow+0x3e>
 800c740:	4b3e      	ldr	r3, [pc, #248]	; (800c83c <__ieee754_pow+0x264>)
 800c742:	4599      	cmp	r9, r3
 800c744:	d10c      	bne.n	800c760 <__ieee754_pow+0x188>
 800c746:	2d00      	cmp	r5, #0
 800c748:	db0a      	blt.n	800c760 <__ieee754_pow+0x188>
 800c74a:	ec47 6b10 	vmov	d0, r6, r7
 800c74e:	b009      	add	sp, #36	; 0x24
 800c750:	ecbd 8b06 	vpop	{d8-d10}
 800c754:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c758:	f000 bd20 	b.w	800d19c <__ieee754_sqrt>
 800c75c:	2300      	movs	r3, #0
 800c75e:	9304      	str	r3, [sp, #16]
 800c760:	ec47 6b10 	vmov	d0, r6, r7
 800c764:	f000 fc62 	bl	800d02c <fabs>
 800c768:	ec51 0b10 	vmov	r0, r1, d0
 800c76c:	f1ba 0f00 	cmp.w	sl, #0
 800c770:	d129      	bne.n	800c7c6 <__ieee754_pow+0x1ee>
 800c772:	b124      	cbz	r4, 800c77e <__ieee754_pow+0x1a6>
 800c774:	4b2f      	ldr	r3, [pc, #188]	; (800c834 <__ieee754_pow+0x25c>)
 800c776:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d123      	bne.n	800c7c6 <__ieee754_pow+0x1ee>
 800c77e:	f1b9 0f00 	cmp.w	r9, #0
 800c782:	da05      	bge.n	800c790 <__ieee754_pow+0x1b8>
 800c784:	4602      	mov	r2, r0
 800c786:	460b      	mov	r3, r1
 800c788:	2000      	movs	r0, #0
 800c78a:	492a      	ldr	r1, [pc, #168]	; (800c834 <__ieee754_pow+0x25c>)
 800c78c:	f7f4 f802 	bl	8000794 <__aeabi_ddiv>
 800c790:	2d00      	cmp	r5, #0
 800c792:	f6bf af40 	bge.w	800c616 <__ieee754_pow+0x3e>
 800c796:	9b04      	ldr	r3, [sp, #16]
 800c798:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c79c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c7a0:	431c      	orrs	r4, r3
 800c7a2:	d108      	bne.n	800c7b6 <__ieee754_pow+0x1de>
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	4610      	mov	r0, r2
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	f7f3 fd10 	bl	80001d0 <__aeabi_dsub>
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	460b      	mov	r3, r1
 800c7b4:	e78f      	b.n	800c6d6 <__ieee754_pow+0xfe>
 800c7b6:	9b04      	ldr	r3, [sp, #16]
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	f47f af2c 	bne.w	800c616 <__ieee754_pow+0x3e>
 800c7be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	e727      	b.n	800c616 <__ieee754_pow+0x3e>
 800c7c6:	0feb      	lsrs	r3, r5, #31
 800c7c8:	3b01      	subs	r3, #1
 800c7ca:	9306      	str	r3, [sp, #24]
 800c7cc:	9a06      	ldr	r2, [sp, #24]
 800c7ce:	9b04      	ldr	r3, [sp, #16]
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	d102      	bne.n	800c7da <__ieee754_pow+0x202>
 800c7d4:	4632      	mov	r2, r6
 800c7d6:	463b      	mov	r3, r7
 800c7d8:	e7e6      	b.n	800c7a8 <__ieee754_pow+0x1d0>
 800c7da:	4b19      	ldr	r3, [pc, #100]	; (800c840 <__ieee754_pow+0x268>)
 800c7dc:	4598      	cmp	r8, r3
 800c7de:	f340 80fb 	ble.w	800c9d8 <__ieee754_pow+0x400>
 800c7e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c7e6:	4598      	cmp	r8, r3
 800c7e8:	4b13      	ldr	r3, [pc, #76]	; (800c838 <__ieee754_pow+0x260>)
 800c7ea:	dd0c      	ble.n	800c806 <__ieee754_pow+0x22e>
 800c7ec:	429c      	cmp	r4, r3
 800c7ee:	dc0f      	bgt.n	800c810 <__ieee754_pow+0x238>
 800c7f0:	f1b9 0f00 	cmp.w	r9, #0
 800c7f4:	da0f      	bge.n	800c816 <__ieee754_pow+0x23e>
 800c7f6:	2000      	movs	r0, #0
 800c7f8:	b009      	add	sp, #36	; 0x24
 800c7fa:	ecbd 8b06 	vpop	{d8-d10}
 800c7fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c802:	f000 bcc2 	b.w	800d18a <__math_oflow>
 800c806:	429c      	cmp	r4, r3
 800c808:	dbf2      	blt.n	800c7f0 <__ieee754_pow+0x218>
 800c80a:	4b0a      	ldr	r3, [pc, #40]	; (800c834 <__ieee754_pow+0x25c>)
 800c80c:	429c      	cmp	r4, r3
 800c80e:	dd19      	ble.n	800c844 <__ieee754_pow+0x26c>
 800c810:	f1b9 0f00 	cmp.w	r9, #0
 800c814:	dcef      	bgt.n	800c7f6 <__ieee754_pow+0x21e>
 800c816:	2000      	movs	r0, #0
 800c818:	b009      	add	sp, #36	; 0x24
 800c81a:	ecbd 8b06 	vpop	{d8-d10}
 800c81e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c822:	f000 bca9 	b.w	800d178 <__math_uflow>
 800c826:	bf00      	nop
 800c828:	fff00000 	.word	0xfff00000
 800c82c:	7ff00000 	.word	0x7ff00000
 800c830:	433fffff 	.word	0x433fffff
 800c834:	3ff00000 	.word	0x3ff00000
 800c838:	3fefffff 	.word	0x3fefffff
 800c83c:	3fe00000 	.word	0x3fe00000
 800c840:	41e00000 	.word	0x41e00000
 800c844:	4b60      	ldr	r3, [pc, #384]	; (800c9c8 <__ieee754_pow+0x3f0>)
 800c846:	2200      	movs	r2, #0
 800c848:	f7f3 fcc2 	bl	80001d0 <__aeabi_dsub>
 800c84c:	a354      	add	r3, pc, #336	; (adr r3, 800c9a0 <__ieee754_pow+0x3c8>)
 800c84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c852:	4604      	mov	r4, r0
 800c854:	460d      	mov	r5, r1
 800c856:	f7f3 fe73 	bl	8000540 <__aeabi_dmul>
 800c85a:	a353      	add	r3, pc, #332	; (adr r3, 800c9a8 <__ieee754_pow+0x3d0>)
 800c85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c860:	4606      	mov	r6, r0
 800c862:	460f      	mov	r7, r1
 800c864:	4620      	mov	r0, r4
 800c866:	4629      	mov	r1, r5
 800c868:	f7f3 fe6a 	bl	8000540 <__aeabi_dmul>
 800c86c:	4b57      	ldr	r3, [pc, #348]	; (800c9cc <__ieee754_pow+0x3f4>)
 800c86e:	4682      	mov	sl, r0
 800c870:	468b      	mov	fp, r1
 800c872:	2200      	movs	r2, #0
 800c874:	4620      	mov	r0, r4
 800c876:	4629      	mov	r1, r5
 800c878:	f7f3 fe62 	bl	8000540 <__aeabi_dmul>
 800c87c:	4602      	mov	r2, r0
 800c87e:	460b      	mov	r3, r1
 800c880:	a14b      	add	r1, pc, #300	; (adr r1, 800c9b0 <__ieee754_pow+0x3d8>)
 800c882:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c886:	f7f3 fca3 	bl	80001d0 <__aeabi_dsub>
 800c88a:	4622      	mov	r2, r4
 800c88c:	462b      	mov	r3, r5
 800c88e:	f7f3 fe57 	bl	8000540 <__aeabi_dmul>
 800c892:	4602      	mov	r2, r0
 800c894:	460b      	mov	r3, r1
 800c896:	2000      	movs	r0, #0
 800c898:	494d      	ldr	r1, [pc, #308]	; (800c9d0 <__ieee754_pow+0x3f8>)
 800c89a:	f7f3 fc99 	bl	80001d0 <__aeabi_dsub>
 800c89e:	4622      	mov	r2, r4
 800c8a0:	4680      	mov	r8, r0
 800c8a2:	4689      	mov	r9, r1
 800c8a4:	462b      	mov	r3, r5
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	4629      	mov	r1, r5
 800c8aa:	f7f3 fe49 	bl	8000540 <__aeabi_dmul>
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	4640      	mov	r0, r8
 800c8b4:	4649      	mov	r1, r9
 800c8b6:	f7f3 fe43 	bl	8000540 <__aeabi_dmul>
 800c8ba:	a33f      	add	r3, pc, #252	; (adr r3, 800c9b8 <__ieee754_pow+0x3e0>)
 800c8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c0:	f7f3 fe3e 	bl	8000540 <__aeabi_dmul>
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	460b      	mov	r3, r1
 800c8c8:	4650      	mov	r0, sl
 800c8ca:	4659      	mov	r1, fp
 800c8cc:	f7f3 fc80 	bl	80001d0 <__aeabi_dsub>
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	4680      	mov	r8, r0
 800c8d6:	4689      	mov	r9, r1
 800c8d8:	4630      	mov	r0, r6
 800c8da:	4639      	mov	r1, r7
 800c8dc:	f7f3 fc7a 	bl	80001d4 <__adddf3>
 800c8e0:	2000      	movs	r0, #0
 800c8e2:	4632      	mov	r2, r6
 800c8e4:	463b      	mov	r3, r7
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	460d      	mov	r5, r1
 800c8ea:	f7f3 fc71 	bl	80001d0 <__aeabi_dsub>
 800c8ee:	4602      	mov	r2, r0
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	4640      	mov	r0, r8
 800c8f4:	4649      	mov	r1, r9
 800c8f6:	f7f3 fc6b 	bl	80001d0 <__aeabi_dsub>
 800c8fa:	9b04      	ldr	r3, [sp, #16]
 800c8fc:	9a06      	ldr	r2, [sp, #24]
 800c8fe:	3b01      	subs	r3, #1
 800c900:	4313      	orrs	r3, r2
 800c902:	4682      	mov	sl, r0
 800c904:	468b      	mov	fp, r1
 800c906:	f040 81e7 	bne.w	800ccd8 <__ieee754_pow+0x700>
 800c90a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c9c0 <__ieee754_pow+0x3e8>
 800c90e:	eeb0 8a47 	vmov.f32	s16, s14
 800c912:	eef0 8a67 	vmov.f32	s17, s15
 800c916:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c91a:	2600      	movs	r6, #0
 800c91c:	4632      	mov	r2, r6
 800c91e:	463b      	mov	r3, r7
 800c920:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c924:	f7f3 fc54 	bl	80001d0 <__aeabi_dsub>
 800c928:	4622      	mov	r2, r4
 800c92a:	462b      	mov	r3, r5
 800c92c:	f7f3 fe08 	bl	8000540 <__aeabi_dmul>
 800c930:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c934:	4680      	mov	r8, r0
 800c936:	4689      	mov	r9, r1
 800c938:	4650      	mov	r0, sl
 800c93a:	4659      	mov	r1, fp
 800c93c:	f7f3 fe00 	bl	8000540 <__aeabi_dmul>
 800c940:	4602      	mov	r2, r0
 800c942:	460b      	mov	r3, r1
 800c944:	4640      	mov	r0, r8
 800c946:	4649      	mov	r1, r9
 800c948:	f7f3 fc44 	bl	80001d4 <__adddf3>
 800c94c:	4632      	mov	r2, r6
 800c94e:	463b      	mov	r3, r7
 800c950:	4680      	mov	r8, r0
 800c952:	4689      	mov	r9, r1
 800c954:	4620      	mov	r0, r4
 800c956:	4629      	mov	r1, r5
 800c958:	f7f3 fdf2 	bl	8000540 <__aeabi_dmul>
 800c95c:	460b      	mov	r3, r1
 800c95e:	4604      	mov	r4, r0
 800c960:	460d      	mov	r5, r1
 800c962:	4602      	mov	r2, r0
 800c964:	4649      	mov	r1, r9
 800c966:	4640      	mov	r0, r8
 800c968:	f7f3 fc34 	bl	80001d4 <__adddf3>
 800c96c:	4b19      	ldr	r3, [pc, #100]	; (800c9d4 <__ieee754_pow+0x3fc>)
 800c96e:	4299      	cmp	r1, r3
 800c970:	ec45 4b19 	vmov	d9, r4, r5
 800c974:	4606      	mov	r6, r0
 800c976:	460f      	mov	r7, r1
 800c978:	468b      	mov	fp, r1
 800c97a:	f340 82f0 	ble.w	800cf5e <__ieee754_pow+0x986>
 800c97e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c982:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c986:	4303      	orrs	r3, r0
 800c988:	f000 81e4 	beq.w	800cd54 <__ieee754_pow+0x77c>
 800c98c:	ec51 0b18 	vmov	r0, r1, d8
 800c990:	2200      	movs	r2, #0
 800c992:	2300      	movs	r3, #0
 800c994:	f7f4 f846 	bl	8000a24 <__aeabi_dcmplt>
 800c998:	3800      	subs	r0, #0
 800c99a:	bf18      	it	ne
 800c99c:	2001      	movne	r0, #1
 800c99e:	e72b      	b.n	800c7f8 <__ieee754_pow+0x220>
 800c9a0:	60000000 	.word	0x60000000
 800c9a4:	3ff71547 	.word	0x3ff71547
 800c9a8:	f85ddf44 	.word	0xf85ddf44
 800c9ac:	3e54ae0b 	.word	0x3e54ae0b
 800c9b0:	55555555 	.word	0x55555555
 800c9b4:	3fd55555 	.word	0x3fd55555
 800c9b8:	652b82fe 	.word	0x652b82fe
 800c9bc:	3ff71547 	.word	0x3ff71547
 800c9c0:	00000000 	.word	0x00000000
 800c9c4:	bff00000 	.word	0xbff00000
 800c9c8:	3ff00000 	.word	0x3ff00000
 800c9cc:	3fd00000 	.word	0x3fd00000
 800c9d0:	3fe00000 	.word	0x3fe00000
 800c9d4:	408fffff 	.word	0x408fffff
 800c9d8:	4bd5      	ldr	r3, [pc, #852]	; (800cd30 <__ieee754_pow+0x758>)
 800c9da:	402b      	ands	r3, r5
 800c9dc:	2200      	movs	r2, #0
 800c9de:	b92b      	cbnz	r3, 800c9ec <__ieee754_pow+0x414>
 800c9e0:	4bd4      	ldr	r3, [pc, #848]	; (800cd34 <__ieee754_pow+0x75c>)
 800c9e2:	f7f3 fdad 	bl	8000540 <__aeabi_dmul>
 800c9e6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c9ea:	460c      	mov	r4, r1
 800c9ec:	1523      	asrs	r3, r4, #20
 800c9ee:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c9f2:	4413      	add	r3, r2
 800c9f4:	9305      	str	r3, [sp, #20]
 800c9f6:	4bd0      	ldr	r3, [pc, #832]	; (800cd38 <__ieee754_pow+0x760>)
 800c9f8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c9fc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ca00:	429c      	cmp	r4, r3
 800ca02:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ca06:	dd08      	ble.n	800ca1a <__ieee754_pow+0x442>
 800ca08:	4bcc      	ldr	r3, [pc, #816]	; (800cd3c <__ieee754_pow+0x764>)
 800ca0a:	429c      	cmp	r4, r3
 800ca0c:	f340 8162 	ble.w	800ccd4 <__ieee754_pow+0x6fc>
 800ca10:	9b05      	ldr	r3, [sp, #20]
 800ca12:	3301      	adds	r3, #1
 800ca14:	9305      	str	r3, [sp, #20]
 800ca16:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ca1a:	2400      	movs	r4, #0
 800ca1c:	00e3      	lsls	r3, r4, #3
 800ca1e:	9307      	str	r3, [sp, #28]
 800ca20:	4bc7      	ldr	r3, [pc, #796]	; (800cd40 <__ieee754_pow+0x768>)
 800ca22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ca26:	ed93 7b00 	vldr	d7, [r3]
 800ca2a:	4629      	mov	r1, r5
 800ca2c:	ec53 2b17 	vmov	r2, r3, d7
 800ca30:	eeb0 9a47 	vmov.f32	s18, s14
 800ca34:	eef0 9a67 	vmov.f32	s19, s15
 800ca38:	4682      	mov	sl, r0
 800ca3a:	f7f3 fbc9 	bl	80001d0 <__aeabi_dsub>
 800ca3e:	4652      	mov	r2, sl
 800ca40:	4606      	mov	r6, r0
 800ca42:	460f      	mov	r7, r1
 800ca44:	462b      	mov	r3, r5
 800ca46:	ec51 0b19 	vmov	r0, r1, d9
 800ca4a:	f7f3 fbc3 	bl	80001d4 <__adddf3>
 800ca4e:	4602      	mov	r2, r0
 800ca50:	460b      	mov	r3, r1
 800ca52:	2000      	movs	r0, #0
 800ca54:	49bb      	ldr	r1, [pc, #748]	; (800cd44 <__ieee754_pow+0x76c>)
 800ca56:	f7f3 fe9d 	bl	8000794 <__aeabi_ddiv>
 800ca5a:	ec41 0b1a 	vmov	d10, r0, r1
 800ca5e:	4602      	mov	r2, r0
 800ca60:	460b      	mov	r3, r1
 800ca62:	4630      	mov	r0, r6
 800ca64:	4639      	mov	r1, r7
 800ca66:	f7f3 fd6b 	bl	8000540 <__aeabi_dmul>
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca70:	9302      	str	r3, [sp, #8]
 800ca72:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ca76:	46ab      	mov	fp, r5
 800ca78:	106d      	asrs	r5, r5, #1
 800ca7a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ca7e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ca82:	ec41 0b18 	vmov	d8, r0, r1
 800ca86:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	4640      	mov	r0, r8
 800ca8e:	4649      	mov	r1, r9
 800ca90:	4614      	mov	r4, r2
 800ca92:	461d      	mov	r5, r3
 800ca94:	f7f3 fd54 	bl	8000540 <__aeabi_dmul>
 800ca98:	4602      	mov	r2, r0
 800ca9a:	460b      	mov	r3, r1
 800ca9c:	4630      	mov	r0, r6
 800ca9e:	4639      	mov	r1, r7
 800caa0:	f7f3 fb96 	bl	80001d0 <__aeabi_dsub>
 800caa4:	ec53 2b19 	vmov	r2, r3, d9
 800caa8:	4606      	mov	r6, r0
 800caaa:	460f      	mov	r7, r1
 800caac:	4620      	mov	r0, r4
 800caae:	4629      	mov	r1, r5
 800cab0:	f7f3 fb8e 	bl	80001d0 <__aeabi_dsub>
 800cab4:	4602      	mov	r2, r0
 800cab6:	460b      	mov	r3, r1
 800cab8:	4650      	mov	r0, sl
 800caba:	4659      	mov	r1, fp
 800cabc:	f7f3 fb88 	bl	80001d0 <__aeabi_dsub>
 800cac0:	4642      	mov	r2, r8
 800cac2:	464b      	mov	r3, r9
 800cac4:	f7f3 fd3c 	bl	8000540 <__aeabi_dmul>
 800cac8:	4602      	mov	r2, r0
 800caca:	460b      	mov	r3, r1
 800cacc:	4630      	mov	r0, r6
 800cace:	4639      	mov	r1, r7
 800cad0:	f7f3 fb7e 	bl	80001d0 <__aeabi_dsub>
 800cad4:	ec53 2b1a 	vmov	r2, r3, d10
 800cad8:	f7f3 fd32 	bl	8000540 <__aeabi_dmul>
 800cadc:	ec53 2b18 	vmov	r2, r3, d8
 800cae0:	ec41 0b19 	vmov	d9, r0, r1
 800cae4:	ec51 0b18 	vmov	r0, r1, d8
 800cae8:	f7f3 fd2a 	bl	8000540 <__aeabi_dmul>
 800caec:	a37c      	add	r3, pc, #496	; (adr r3, 800cce0 <__ieee754_pow+0x708>)
 800caee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf2:	4604      	mov	r4, r0
 800caf4:	460d      	mov	r5, r1
 800caf6:	f7f3 fd23 	bl	8000540 <__aeabi_dmul>
 800cafa:	a37b      	add	r3, pc, #492	; (adr r3, 800cce8 <__ieee754_pow+0x710>)
 800cafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb00:	f7f3 fb68 	bl	80001d4 <__adddf3>
 800cb04:	4622      	mov	r2, r4
 800cb06:	462b      	mov	r3, r5
 800cb08:	f7f3 fd1a 	bl	8000540 <__aeabi_dmul>
 800cb0c:	a378      	add	r3, pc, #480	; (adr r3, 800ccf0 <__ieee754_pow+0x718>)
 800cb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb12:	f7f3 fb5f 	bl	80001d4 <__adddf3>
 800cb16:	4622      	mov	r2, r4
 800cb18:	462b      	mov	r3, r5
 800cb1a:	f7f3 fd11 	bl	8000540 <__aeabi_dmul>
 800cb1e:	a376      	add	r3, pc, #472	; (adr r3, 800ccf8 <__ieee754_pow+0x720>)
 800cb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb24:	f7f3 fb56 	bl	80001d4 <__adddf3>
 800cb28:	4622      	mov	r2, r4
 800cb2a:	462b      	mov	r3, r5
 800cb2c:	f7f3 fd08 	bl	8000540 <__aeabi_dmul>
 800cb30:	a373      	add	r3, pc, #460	; (adr r3, 800cd00 <__ieee754_pow+0x728>)
 800cb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb36:	f7f3 fb4d 	bl	80001d4 <__adddf3>
 800cb3a:	4622      	mov	r2, r4
 800cb3c:	462b      	mov	r3, r5
 800cb3e:	f7f3 fcff 	bl	8000540 <__aeabi_dmul>
 800cb42:	a371      	add	r3, pc, #452	; (adr r3, 800cd08 <__ieee754_pow+0x730>)
 800cb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb48:	f7f3 fb44 	bl	80001d4 <__adddf3>
 800cb4c:	4622      	mov	r2, r4
 800cb4e:	4606      	mov	r6, r0
 800cb50:	460f      	mov	r7, r1
 800cb52:	462b      	mov	r3, r5
 800cb54:	4620      	mov	r0, r4
 800cb56:	4629      	mov	r1, r5
 800cb58:	f7f3 fcf2 	bl	8000540 <__aeabi_dmul>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	460b      	mov	r3, r1
 800cb60:	4630      	mov	r0, r6
 800cb62:	4639      	mov	r1, r7
 800cb64:	f7f3 fcec 	bl	8000540 <__aeabi_dmul>
 800cb68:	4642      	mov	r2, r8
 800cb6a:	4604      	mov	r4, r0
 800cb6c:	460d      	mov	r5, r1
 800cb6e:	464b      	mov	r3, r9
 800cb70:	ec51 0b18 	vmov	r0, r1, d8
 800cb74:	f7f3 fb2e 	bl	80001d4 <__adddf3>
 800cb78:	ec53 2b19 	vmov	r2, r3, d9
 800cb7c:	f7f3 fce0 	bl	8000540 <__aeabi_dmul>
 800cb80:	4622      	mov	r2, r4
 800cb82:	462b      	mov	r3, r5
 800cb84:	f7f3 fb26 	bl	80001d4 <__adddf3>
 800cb88:	4642      	mov	r2, r8
 800cb8a:	4682      	mov	sl, r0
 800cb8c:	468b      	mov	fp, r1
 800cb8e:	464b      	mov	r3, r9
 800cb90:	4640      	mov	r0, r8
 800cb92:	4649      	mov	r1, r9
 800cb94:	f7f3 fcd4 	bl	8000540 <__aeabi_dmul>
 800cb98:	4b6b      	ldr	r3, [pc, #428]	; (800cd48 <__ieee754_pow+0x770>)
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	4606      	mov	r6, r0
 800cb9e:	460f      	mov	r7, r1
 800cba0:	f7f3 fb18 	bl	80001d4 <__adddf3>
 800cba4:	4652      	mov	r2, sl
 800cba6:	465b      	mov	r3, fp
 800cba8:	f7f3 fb14 	bl	80001d4 <__adddf3>
 800cbac:	2000      	movs	r0, #0
 800cbae:	4604      	mov	r4, r0
 800cbb0:	460d      	mov	r5, r1
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	4640      	mov	r0, r8
 800cbb8:	4649      	mov	r1, r9
 800cbba:	f7f3 fcc1 	bl	8000540 <__aeabi_dmul>
 800cbbe:	4b62      	ldr	r3, [pc, #392]	; (800cd48 <__ieee754_pow+0x770>)
 800cbc0:	4680      	mov	r8, r0
 800cbc2:	4689      	mov	r9, r1
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	4629      	mov	r1, r5
 800cbca:	f7f3 fb01 	bl	80001d0 <__aeabi_dsub>
 800cbce:	4632      	mov	r2, r6
 800cbd0:	463b      	mov	r3, r7
 800cbd2:	f7f3 fafd 	bl	80001d0 <__aeabi_dsub>
 800cbd6:	4602      	mov	r2, r0
 800cbd8:	460b      	mov	r3, r1
 800cbda:	4650      	mov	r0, sl
 800cbdc:	4659      	mov	r1, fp
 800cbde:	f7f3 faf7 	bl	80001d0 <__aeabi_dsub>
 800cbe2:	ec53 2b18 	vmov	r2, r3, d8
 800cbe6:	f7f3 fcab 	bl	8000540 <__aeabi_dmul>
 800cbea:	4622      	mov	r2, r4
 800cbec:	4606      	mov	r6, r0
 800cbee:	460f      	mov	r7, r1
 800cbf0:	462b      	mov	r3, r5
 800cbf2:	ec51 0b19 	vmov	r0, r1, d9
 800cbf6:	f7f3 fca3 	bl	8000540 <__aeabi_dmul>
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	4630      	mov	r0, r6
 800cc00:	4639      	mov	r1, r7
 800cc02:	f7f3 fae7 	bl	80001d4 <__adddf3>
 800cc06:	4606      	mov	r6, r0
 800cc08:	460f      	mov	r7, r1
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	4640      	mov	r0, r8
 800cc10:	4649      	mov	r1, r9
 800cc12:	f7f3 fadf 	bl	80001d4 <__adddf3>
 800cc16:	a33e      	add	r3, pc, #248	; (adr r3, 800cd10 <__ieee754_pow+0x738>)
 800cc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1c:	2000      	movs	r0, #0
 800cc1e:	4604      	mov	r4, r0
 800cc20:	460d      	mov	r5, r1
 800cc22:	f7f3 fc8d 	bl	8000540 <__aeabi_dmul>
 800cc26:	4642      	mov	r2, r8
 800cc28:	ec41 0b18 	vmov	d8, r0, r1
 800cc2c:	464b      	mov	r3, r9
 800cc2e:	4620      	mov	r0, r4
 800cc30:	4629      	mov	r1, r5
 800cc32:	f7f3 facd 	bl	80001d0 <__aeabi_dsub>
 800cc36:	4602      	mov	r2, r0
 800cc38:	460b      	mov	r3, r1
 800cc3a:	4630      	mov	r0, r6
 800cc3c:	4639      	mov	r1, r7
 800cc3e:	f7f3 fac7 	bl	80001d0 <__aeabi_dsub>
 800cc42:	a335      	add	r3, pc, #212	; (adr r3, 800cd18 <__ieee754_pow+0x740>)
 800cc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc48:	f7f3 fc7a 	bl	8000540 <__aeabi_dmul>
 800cc4c:	a334      	add	r3, pc, #208	; (adr r3, 800cd20 <__ieee754_pow+0x748>)
 800cc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc52:	4606      	mov	r6, r0
 800cc54:	460f      	mov	r7, r1
 800cc56:	4620      	mov	r0, r4
 800cc58:	4629      	mov	r1, r5
 800cc5a:	f7f3 fc71 	bl	8000540 <__aeabi_dmul>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	460b      	mov	r3, r1
 800cc62:	4630      	mov	r0, r6
 800cc64:	4639      	mov	r1, r7
 800cc66:	f7f3 fab5 	bl	80001d4 <__adddf3>
 800cc6a:	9a07      	ldr	r2, [sp, #28]
 800cc6c:	4b37      	ldr	r3, [pc, #220]	; (800cd4c <__ieee754_pow+0x774>)
 800cc6e:	4413      	add	r3, r2
 800cc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc74:	f7f3 faae 	bl	80001d4 <__adddf3>
 800cc78:	4682      	mov	sl, r0
 800cc7a:	9805      	ldr	r0, [sp, #20]
 800cc7c:	468b      	mov	fp, r1
 800cc7e:	f7f3 fbf5 	bl	800046c <__aeabi_i2d>
 800cc82:	9a07      	ldr	r2, [sp, #28]
 800cc84:	4b32      	ldr	r3, [pc, #200]	; (800cd50 <__ieee754_pow+0x778>)
 800cc86:	4413      	add	r3, r2
 800cc88:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc8c:	4606      	mov	r6, r0
 800cc8e:	460f      	mov	r7, r1
 800cc90:	4652      	mov	r2, sl
 800cc92:	465b      	mov	r3, fp
 800cc94:	ec51 0b18 	vmov	r0, r1, d8
 800cc98:	f7f3 fa9c 	bl	80001d4 <__adddf3>
 800cc9c:	4642      	mov	r2, r8
 800cc9e:	464b      	mov	r3, r9
 800cca0:	f7f3 fa98 	bl	80001d4 <__adddf3>
 800cca4:	4632      	mov	r2, r6
 800cca6:	463b      	mov	r3, r7
 800cca8:	f7f3 fa94 	bl	80001d4 <__adddf3>
 800ccac:	2000      	movs	r0, #0
 800ccae:	4632      	mov	r2, r6
 800ccb0:	463b      	mov	r3, r7
 800ccb2:	4604      	mov	r4, r0
 800ccb4:	460d      	mov	r5, r1
 800ccb6:	f7f3 fa8b 	bl	80001d0 <__aeabi_dsub>
 800ccba:	4642      	mov	r2, r8
 800ccbc:	464b      	mov	r3, r9
 800ccbe:	f7f3 fa87 	bl	80001d0 <__aeabi_dsub>
 800ccc2:	ec53 2b18 	vmov	r2, r3, d8
 800ccc6:	f7f3 fa83 	bl	80001d0 <__aeabi_dsub>
 800ccca:	4602      	mov	r2, r0
 800cccc:	460b      	mov	r3, r1
 800ccce:	4650      	mov	r0, sl
 800ccd0:	4659      	mov	r1, fp
 800ccd2:	e610      	b.n	800c8f6 <__ieee754_pow+0x31e>
 800ccd4:	2401      	movs	r4, #1
 800ccd6:	e6a1      	b.n	800ca1c <__ieee754_pow+0x444>
 800ccd8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800cd28 <__ieee754_pow+0x750>
 800ccdc:	e617      	b.n	800c90e <__ieee754_pow+0x336>
 800ccde:	bf00      	nop
 800cce0:	4a454eef 	.word	0x4a454eef
 800cce4:	3fca7e28 	.word	0x3fca7e28
 800cce8:	93c9db65 	.word	0x93c9db65
 800ccec:	3fcd864a 	.word	0x3fcd864a
 800ccf0:	a91d4101 	.word	0xa91d4101
 800ccf4:	3fd17460 	.word	0x3fd17460
 800ccf8:	518f264d 	.word	0x518f264d
 800ccfc:	3fd55555 	.word	0x3fd55555
 800cd00:	db6fabff 	.word	0xdb6fabff
 800cd04:	3fdb6db6 	.word	0x3fdb6db6
 800cd08:	33333303 	.word	0x33333303
 800cd0c:	3fe33333 	.word	0x3fe33333
 800cd10:	e0000000 	.word	0xe0000000
 800cd14:	3feec709 	.word	0x3feec709
 800cd18:	dc3a03fd 	.word	0xdc3a03fd
 800cd1c:	3feec709 	.word	0x3feec709
 800cd20:	145b01f5 	.word	0x145b01f5
 800cd24:	be3e2fe0 	.word	0xbe3e2fe0
 800cd28:	00000000 	.word	0x00000000
 800cd2c:	3ff00000 	.word	0x3ff00000
 800cd30:	7ff00000 	.word	0x7ff00000
 800cd34:	43400000 	.word	0x43400000
 800cd38:	0003988e 	.word	0x0003988e
 800cd3c:	000bb679 	.word	0x000bb679
 800cd40:	0800e010 	.word	0x0800e010
 800cd44:	3ff00000 	.word	0x3ff00000
 800cd48:	40080000 	.word	0x40080000
 800cd4c:	0800e030 	.word	0x0800e030
 800cd50:	0800e020 	.word	0x0800e020
 800cd54:	a3b3      	add	r3, pc, #716	; (adr r3, 800d024 <__ieee754_pow+0xa4c>)
 800cd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5a:	4640      	mov	r0, r8
 800cd5c:	4649      	mov	r1, r9
 800cd5e:	f7f3 fa39 	bl	80001d4 <__adddf3>
 800cd62:	4622      	mov	r2, r4
 800cd64:	ec41 0b1a 	vmov	d10, r0, r1
 800cd68:	462b      	mov	r3, r5
 800cd6a:	4630      	mov	r0, r6
 800cd6c:	4639      	mov	r1, r7
 800cd6e:	f7f3 fa2f 	bl	80001d0 <__aeabi_dsub>
 800cd72:	4602      	mov	r2, r0
 800cd74:	460b      	mov	r3, r1
 800cd76:	ec51 0b1a 	vmov	r0, r1, d10
 800cd7a:	f7f3 fe71 	bl	8000a60 <__aeabi_dcmpgt>
 800cd7e:	2800      	cmp	r0, #0
 800cd80:	f47f ae04 	bne.w	800c98c <__ieee754_pow+0x3b4>
 800cd84:	4aa2      	ldr	r2, [pc, #648]	; (800d010 <__ieee754_pow+0xa38>)
 800cd86:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	f340 8107 	ble.w	800cf9e <__ieee754_pow+0x9c6>
 800cd90:	151b      	asrs	r3, r3, #20
 800cd92:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800cd96:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800cd9a:	fa4a fa03 	asr.w	sl, sl, r3
 800cd9e:	44da      	add	sl, fp
 800cda0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800cda4:	489b      	ldr	r0, [pc, #620]	; (800d014 <__ieee754_pow+0xa3c>)
 800cda6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800cdaa:	4108      	asrs	r0, r1
 800cdac:	ea00 030a 	and.w	r3, r0, sl
 800cdb0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800cdb4:	f1c1 0114 	rsb	r1, r1, #20
 800cdb8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800cdbc:	fa4a fa01 	asr.w	sl, sl, r1
 800cdc0:	f1bb 0f00 	cmp.w	fp, #0
 800cdc4:	f04f 0200 	mov.w	r2, #0
 800cdc8:	4620      	mov	r0, r4
 800cdca:	4629      	mov	r1, r5
 800cdcc:	bfb8      	it	lt
 800cdce:	f1ca 0a00 	rsblt	sl, sl, #0
 800cdd2:	f7f3 f9fd 	bl	80001d0 <__aeabi_dsub>
 800cdd6:	ec41 0b19 	vmov	d9, r0, r1
 800cdda:	4642      	mov	r2, r8
 800cddc:	464b      	mov	r3, r9
 800cdde:	ec51 0b19 	vmov	r0, r1, d9
 800cde2:	f7f3 f9f7 	bl	80001d4 <__adddf3>
 800cde6:	a37a      	add	r3, pc, #488	; (adr r3, 800cfd0 <__ieee754_pow+0x9f8>)
 800cde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdec:	2000      	movs	r0, #0
 800cdee:	4604      	mov	r4, r0
 800cdf0:	460d      	mov	r5, r1
 800cdf2:	f7f3 fba5 	bl	8000540 <__aeabi_dmul>
 800cdf6:	ec53 2b19 	vmov	r2, r3, d9
 800cdfa:	4606      	mov	r6, r0
 800cdfc:	460f      	mov	r7, r1
 800cdfe:	4620      	mov	r0, r4
 800ce00:	4629      	mov	r1, r5
 800ce02:	f7f3 f9e5 	bl	80001d0 <__aeabi_dsub>
 800ce06:	4602      	mov	r2, r0
 800ce08:	460b      	mov	r3, r1
 800ce0a:	4640      	mov	r0, r8
 800ce0c:	4649      	mov	r1, r9
 800ce0e:	f7f3 f9df 	bl	80001d0 <__aeabi_dsub>
 800ce12:	a371      	add	r3, pc, #452	; (adr r3, 800cfd8 <__ieee754_pow+0xa00>)
 800ce14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce18:	f7f3 fb92 	bl	8000540 <__aeabi_dmul>
 800ce1c:	a370      	add	r3, pc, #448	; (adr r3, 800cfe0 <__ieee754_pow+0xa08>)
 800ce1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce22:	4680      	mov	r8, r0
 800ce24:	4689      	mov	r9, r1
 800ce26:	4620      	mov	r0, r4
 800ce28:	4629      	mov	r1, r5
 800ce2a:	f7f3 fb89 	bl	8000540 <__aeabi_dmul>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	460b      	mov	r3, r1
 800ce32:	4640      	mov	r0, r8
 800ce34:	4649      	mov	r1, r9
 800ce36:	f7f3 f9cd 	bl	80001d4 <__adddf3>
 800ce3a:	4604      	mov	r4, r0
 800ce3c:	460d      	mov	r5, r1
 800ce3e:	4602      	mov	r2, r0
 800ce40:	460b      	mov	r3, r1
 800ce42:	4630      	mov	r0, r6
 800ce44:	4639      	mov	r1, r7
 800ce46:	f7f3 f9c5 	bl	80001d4 <__adddf3>
 800ce4a:	4632      	mov	r2, r6
 800ce4c:	463b      	mov	r3, r7
 800ce4e:	4680      	mov	r8, r0
 800ce50:	4689      	mov	r9, r1
 800ce52:	f7f3 f9bd 	bl	80001d0 <__aeabi_dsub>
 800ce56:	4602      	mov	r2, r0
 800ce58:	460b      	mov	r3, r1
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	4629      	mov	r1, r5
 800ce5e:	f7f3 f9b7 	bl	80001d0 <__aeabi_dsub>
 800ce62:	4642      	mov	r2, r8
 800ce64:	4606      	mov	r6, r0
 800ce66:	460f      	mov	r7, r1
 800ce68:	464b      	mov	r3, r9
 800ce6a:	4640      	mov	r0, r8
 800ce6c:	4649      	mov	r1, r9
 800ce6e:	f7f3 fb67 	bl	8000540 <__aeabi_dmul>
 800ce72:	a35d      	add	r3, pc, #372	; (adr r3, 800cfe8 <__ieee754_pow+0xa10>)
 800ce74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce78:	4604      	mov	r4, r0
 800ce7a:	460d      	mov	r5, r1
 800ce7c:	f7f3 fb60 	bl	8000540 <__aeabi_dmul>
 800ce80:	a35b      	add	r3, pc, #364	; (adr r3, 800cff0 <__ieee754_pow+0xa18>)
 800ce82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce86:	f7f3 f9a3 	bl	80001d0 <__aeabi_dsub>
 800ce8a:	4622      	mov	r2, r4
 800ce8c:	462b      	mov	r3, r5
 800ce8e:	f7f3 fb57 	bl	8000540 <__aeabi_dmul>
 800ce92:	a359      	add	r3, pc, #356	; (adr r3, 800cff8 <__ieee754_pow+0xa20>)
 800ce94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce98:	f7f3 f99c 	bl	80001d4 <__adddf3>
 800ce9c:	4622      	mov	r2, r4
 800ce9e:	462b      	mov	r3, r5
 800cea0:	f7f3 fb4e 	bl	8000540 <__aeabi_dmul>
 800cea4:	a356      	add	r3, pc, #344	; (adr r3, 800d000 <__ieee754_pow+0xa28>)
 800cea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceaa:	f7f3 f991 	bl	80001d0 <__aeabi_dsub>
 800ceae:	4622      	mov	r2, r4
 800ceb0:	462b      	mov	r3, r5
 800ceb2:	f7f3 fb45 	bl	8000540 <__aeabi_dmul>
 800ceb6:	a354      	add	r3, pc, #336	; (adr r3, 800d008 <__ieee754_pow+0xa30>)
 800ceb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cebc:	f7f3 f98a 	bl	80001d4 <__adddf3>
 800cec0:	4622      	mov	r2, r4
 800cec2:	462b      	mov	r3, r5
 800cec4:	f7f3 fb3c 	bl	8000540 <__aeabi_dmul>
 800cec8:	4602      	mov	r2, r0
 800ceca:	460b      	mov	r3, r1
 800cecc:	4640      	mov	r0, r8
 800cece:	4649      	mov	r1, r9
 800ced0:	f7f3 f97e 	bl	80001d0 <__aeabi_dsub>
 800ced4:	4604      	mov	r4, r0
 800ced6:	460d      	mov	r5, r1
 800ced8:	4602      	mov	r2, r0
 800ceda:	460b      	mov	r3, r1
 800cedc:	4640      	mov	r0, r8
 800cede:	4649      	mov	r1, r9
 800cee0:	f7f3 fb2e 	bl	8000540 <__aeabi_dmul>
 800cee4:	2200      	movs	r2, #0
 800cee6:	ec41 0b19 	vmov	d9, r0, r1
 800ceea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ceee:	4620      	mov	r0, r4
 800cef0:	4629      	mov	r1, r5
 800cef2:	f7f3 f96d 	bl	80001d0 <__aeabi_dsub>
 800cef6:	4602      	mov	r2, r0
 800cef8:	460b      	mov	r3, r1
 800cefa:	ec51 0b19 	vmov	r0, r1, d9
 800cefe:	f7f3 fc49 	bl	8000794 <__aeabi_ddiv>
 800cf02:	4632      	mov	r2, r6
 800cf04:	4604      	mov	r4, r0
 800cf06:	460d      	mov	r5, r1
 800cf08:	463b      	mov	r3, r7
 800cf0a:	4640      	mov	r0, r8
 800cf0c:	4649      	mov	r1, r9
 800cf0e:	f7f3 fb17 	bl	8000540 <__aeabi_dmul>
 800cf12:	4632      	mov	r2, r6
 800cf14:	463b      	mov	r3, r7
 800cf16:	f7f3 f95d 	bl	80001d4 <__adddf3>
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	4620      	mov	r0, r4
 800cf20:	4629      	mov	r1, r5
 800cf22:	f7f3 f955 	bl	80001d0 <__aeabi_dsub>
 800cf26:	4642      	mov	r2, r8
 800cf28:	464b      	mov	r3, r9
 800cf2a:	f7f3 f951 	bl	80001d0 <__aeabi_dsub>
 800cf2e:	460b      	mov	r3, r1
 800cf30:	4602      	mov	r2, r0
 800cf32:	4939      	ldr	r1, [pc, #228]	; (800d018 <__ieee754_pow+0xa40>)
 800cf34:	2000      	movs	r0, #0
 800cf36:	f7f3 f94b 	bl	80001d0 <__aeabi_dsub>
 800cf3a:	ec41 0b10 	vmov	d0, r0, r1
 800cf3e:	ee10 3a90 	vmov	r3, s1
 800cf42:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cf46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf4a:	da2b      	bge.n	800cfa4 <__ieee754_pow+0x9cc>
 800cf4c:	4650      	mov	r0, sl
 800cf4e:	f000 f877 	bl	800d040 <scalbn>
 800cf52:	ec51 0b10 	vmov	r0, r1, d0
 800cf56:	ec53 2b18 	vmov	r2, r3, d8
 800cf5a:	f7ff bbee 	b.w	800c73a <__ieee754_pow+0x162>
 800cf5e:	4b2f      	ldr	r3, [pc, #188]	; (800d01c <__ieee754_pow+0xa44>)
 800cf60:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cf64:	429e      	cmp	r6, r3
 800cf66:	f77f af0d 	ble.w	800cd84 <__ieee754_pow+0x7ac>
 800cf6a:	4b2d      	ldr	r3, [pc, #180]	; (800d020 <__ieee754_pow+0xa48>)
 800cf6c:	440b      	add	r3, r1
 800cf6e:	4303      	orrs	r3, r0
 800cf70:	d009      	beq.n	800cf86 <__ieee754_pow+0x9ae>
 800cf72:	ec51 0b18 	vmov	r0, r1, d8
 800cf76:	2200      	movs	r2, #0
 800cf78:	2300      	movs	r3, #0
 800cf7a:	f7f3 fd53 	bl	8000a24 <__aeabi_dcmplt>
 800cf7e:	3800      	subs	r0, #0
 800cf80:	bf18      	it	ne
 800cf82:	2001      	movne	r0, #1
 800cf84:	e448      	b.n	800c818 <__ieee754_pow+0x240>
 800cf86:	4622      	mov	r2, r4
 800cf88:	462b      	mov	r3, r5
 800cf8a:	f7f3 f921 	bl	80001d0 <__aeabi_dsub>
 800cf8e:	4642      	mov	r2, r8
 800cf90:	464b      	mov	r3, r9
 800cf92:	f7f3 fd5b 	bl	8000a4c <__aeabi_dcmpge>
 800cf96:	2800      	cmp	r0, #0
 800cf98:	f43f aef4 	beq.w	800cd84 <__ieee754_pow+0x7ac>
 800cf9c:	e7e9      	b.n	800cf72 <__ieee754_pow+0x99a>
 800cf9e:	f04f 0a00 	mov.w	sl, #0
 800cfa2:	e71a      	b.n	800cdda <__ieee754_pow+0x802>
 800cfa4:	ec51 0b10 	vmov	r0, r1, d0
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	e7d4      	b.n	800cf56 <__ieee754_pow+0x97e>
 800cfac:	491a      	ldr	r1, [pc, #104]	; (800d018 <__ieee754_pow+0xa40>)
 800cfae:	2000      	movs	r0, #0
 800cfb0:	f7ff bb31 	b.w	800c616 <__ieee754_pow+0x3e>
 800cfb4:	2000      	movs	r0, #0
 800cfb6:	2100      	movs	r1, #0
 800cfb8:	f7ff bb2d 	b.w	800c616 <__ieee754_pow+0x3e>
 800cfbc:	4630      	mov	r0, r6
 800cfbe:	4639      	mov	r1, r7
 800cfc0:	f7ff bb29 	b.w	800c616 <__ieee754_pow+0x3e>
 800cfc4:	9204      	str	r2, [sp, #16]
 800cfc6:	f7ff bb7b 	b.w	800c6c0 <__ieee754_pow+0xe8>
 800cfca:	2300      	movs	r3, #0
 800cfcc:	f7ff bb65 	b.w	800c69a <__ieee754_pow+0xc2>
 800cfd0:	00000000 	.word	0x00000000
 800cfd4:	3fe62e43 	.word	0x3fe62e43
 800cfd8:	fefa39ef 	.word	0xfefa39ef
 800cfdc:	3fe62e42 	.word	0x3fe62e42
 800cfe0:	0ca86c39 	.word	0x0ca86c39
 800cfe4:	be205c61 	.word	0xbe205c61
 800cfe8:	72bea4d0 	.word	0x72bea4d0
 800cfec:	3e663769 	.word	0x3e663769
 800cff0:	c5d26bf1 	.word	0xc5d26bf1
 800cff4:	3ebbbd41 	.word	0x3ebbbd41
 800cff8:	af25de2c 	.word	0xaf25de2c
 800cffc:	3f11566a 	.word	0x3f11566a
 800d000:	16bebd93 	.word	0x16bebd93
 800d004:	3f66c16c 	.word	0x3f66c16c
 800d008:	5555553e 	.word	0x5555553e
 800d00c:	3fc55555 	.word	0x3fc55555
 800d010:	3fe00000 	.word	0x3fe00000
 800d014:	fff00000 	.word	0xfff00000
 800d018:	3ff00000 	.word	0x3ff00000
 800d01c:	4090cbff 	.word	0x4090cbff
 800d020:	3f6f3400 	.word	0x3f6f3400
 800d024:	652b82fe 	.word	0x652b82fe
 800d028:	3c971547 	.word	0x3c971547

0800d02c <fabs>:
 800d02c:	ec51 0b10 	vmov	r0, r1, d0
 800d030:	ee10 2a10 	vmov	r2, s0
 800d034:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d038:	ec43 2b10 	vmov	d0, r2, r3
 800d03c:	4770      	bx	lr
	...

0800d040 <scalbn>:
 800d040:	b570      	push	{r4, r5, r6, lr}
 800d042:	ec55 4b10 	vmov	r4, r5, d0
 800d046:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d04a:	4606      	mov	r6, r0
 800d04c:	462b      	mov	r3, r5
 800d04e:	b999      	cbnz	r1, 800d078 <scalbn+0x38>
 800d050:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d054:	4323      	orrs	r3, r4
 800d056:	d03f      	beq.n	800d0d8 <scalbn+0x98>
 800d058:	4b35      	ldr	r3, [pc, #212]	; (800d130 <scalbn+0xf0>)
 800d05a:	4629      	mov	r1, r5
 800d05c:	ee10 0a10 	vmov	r0, s0
 800d060:	2200      	movs	r2, #0
 800d062:	f7f3 fa6d 	bl	8000540 <__aeabi_dmul>
 800d066:	4b33      	ldr	r3, [pc, #204]	; (800d134 <scalbn+0xf4>)
 800d068:	429e      	cmp	r6, r3
 800d06a:	4604      	mov	r4, r0
 800d06c:	460d      	mov	r5, r1
 800d06e:	da10      	bge.n	800d092 <scalbn+0x52>
 800d070:	a327      	add	r3, pc, #156	; (adr r3, 800d110 <scalbn+0xd0>)
 800d072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d076:	e01f      	b.n	800d0b8 <scalbn+0x78>
 800d078:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d07c:	4291      	cmp	r1, r2
 800d07e:	d10c      	bne.n	800d09a <scalbn+0x5a>
 800d080:	ee10 2a10 	vmov	r2, s0
 800d084:	4620      	mov	r0, r4
 800d086:	4629      	mov	r1, r5
 800d088:	f7f3 f8a4 	bl	80001d4 <__adddf3>
 800d08c:	4604      	mov	r4, r0
 800d08e:	460d      	mov	r5, r1
 800d090:	e022      	b.n	800d0d8 <scalbn+0x98>
 800d092:	460b      	mov	r3, r1
 800d094:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d098:	3936      	subs	r1, #54	; 0x36
 800d09a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800d09e:	4296      	cmp	r6, r2
 800d0a0:	dd0d      	ble.n	800d0be <scalbn+0x7e>
 800d0a2:	2d00      	cmp	r5, #0
 800d0a4:	a11c      	add	r1, pc, #112	; (adr r1, 800d118 <scalbn+0xd8>)
 800d0a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0aa:	da02      	bge.n	800d0b2 <scalbn+0x72>
 800d0ac:	a11c      	add	r1, pc, #112	; (adr r1, 800d120 <scalbn+0xe0>)
 800d0ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0b2:	a319      	add	r3, pc, #100	; (adr r3, 800d118 <scalbn+0xd8>)
 800d0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b8:	f7f3 fa42 	bl	8000540 <__aeabi_dmul>
 800d0bc:	e7e6      	b.n	800d08c <scalbn+0x4c>
 800d0be:	1872      	adds	r2, r6, r1
 800d0c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d0c4:	428a      	cmp	r2, r1
 800d0c6:	dcec      	bgt.n	800d0a2 <scalbn+0x62>
 800d0c8:	2a00      	cmp	r2, #0
 800d0ca:	dd08      	ble.n	800d0de <scalbn+0x9e>
 800d0cc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d0d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d0d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d0d8:	ec45 4b10 	vmov	d0, r4, r5
 800d0dc:	bd70      	pop	{r4, r5, r6, pc}
 800d0de:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d0e2:	da08      	bge.n	800d0f6 <scalbn+0xb6>
 800d0e4:	2d00      	cmp	r5, #0
 800d0e6:	a10a      	add	r1, pc, #40	; (adr r1, 800d110 <scalbn+0xd0>)
 800d0e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0ec:	dac0      	bge.n	800d070 <scalbn+0x30>
 800d0ee:	a10e      	add	r1, pc, #56	; (adr r1, 800d128 <scalbn+0xe8>)
 800d0f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0f4:	e7bc      	b.n	800d070 <scalbn+0x30>
 800d0f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d0fa:	3236      	adds	r2, #54	; 0x36
 800d0fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d100:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d104:	4620      	mov	r0, r4
 800d106:	4b0c      	ldr	r3, [pc, #48]	; (800d138 <scalbn+0xf8>)
 800d108:	2200      	movs	r2, #0
 800d10a:	e7d5      	b.n	800d0b8 <scalbn+0x78>
 800d10c:	f3af 8000 	nop.w
 800d110:	c2f8f359 	.word	0xc2f8f359
 800d114:	01a56e1f 	.word	0x01a56e1f
 800d118:	8800759c 	.word	0x8800759c
 800d11c:	7e37e43c 	.word	0x7e37e43c
 800d120:	8800759c 	.word	0x8800759c
 800d124:	fe37e43c 	.word	0xfe37e43c
 800d128:	c2f8f359 	.word	0xc2f8f359
 800d12c:	81a56e1f 	.word	0x81a56e1f
 800d130:	43500000 	.word	0x43500000
 800d134:	ffff3cb0 	.word	0xffff3cb0
 800d138:	3c900000 	.word	0x3c900000

0800d13c <with_errno>:
 800d13c:	b570      	push	{r4, r5, r6, lr}
 800d13e:	4604      	mov	r4, r0
 800d140:	460d      	mov	r5, r1
 800d142:	4616      	mov	r6, r2
 800d144:	f7ff f8fa 	bl	800c33c <__errno>
 800d148:	4629      	mov	r1, r5
 800d14a:	6006      	str	r6, [r0, #0]
 800d14c:	4620      	mov	r0, r4
 800d14e:	bd70      	pop	{r4, r5, r6, pc}

0800d150 <xflow>:
 800d150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d152:	4614      	mov	r4, r2
 800d154:	461d      	mov	r5, r3
 800d156:	b108      	cbz	r0, 800d15c <xflow+0xc>
 800d158:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d15c:	e9cd 2300 	strd	r2, r3, [sp]
 800d160:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d164:	4620      	mov	r0, r4
 800d166:	4629      	mov	r1, r5
 800d168:	f7f3 f9ea 	bl	8000540 <__aeabi_dmul>
 800d16c:	2222      	movs	r2, #34	; 0x22
 800d16e:	b003      	add	sp, #12
 800d170:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d174:	f7ff bfe2 	b.w	800d13c <with_errno>

0800d178 <__math_uflow>:
 800d178:	b508      	push	{r3, lr}
 800d17a:	2200      	movs	r2, #0
 800d17c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d180:	f7ff ffe6 	bl	800d150 <xflow>
 800d184:	ec41 0b10 	vmov	d0, r0, r1
 800d188:	bd08      	pop	{r3, pc}

0800d18a <__math_oflow>:
 800d18a:	b508      	push	{r3, lr}
 800d18c:	2200      	movs	r2, #0
 800d18e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d192:	f7ff ffdd 	bl	800d150 <xflow>
 800d196:	ec41 0b10 	vmov	d0, r0, r1
 800d19a:	bd08      	pop	{r3, pc}

0800d19c <__ieee754_sqrt>:
 800d19c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a0:	ec55 4b10 	vmov	r4, r5, d0
 800d1a4:	4e67      	ldr	r6, [pc, #412]	; (800d344 <__ieee754_sqrt+0x1a8>)
 800d1a6:	43ae      	bics	r6, r5
 800d1a8:	ee10 0a10 	vmov	r0, s0
 800d1ac:	ee10 2a10 	vmov	r2, s0
 800d1b0:	4629      	mov	r1, r5
 800d1b2:	462b      	mov	r3, r5
 800d1b4:	d10d      	bne.n	800d1d2 <__ieee754_sqrt+0x36>
 800d1b6:	f7f3 f9c3 	bl	8000540 <__aeabi_dmul>
 800d1ba:	4602      	mov	r2, r0
 800d1bc:	460b      	mov	r3, r1
 800d1be:	4620      	mov	r0, r4
 800d1c0:	4629      	mov	r1, r5
 800d1c2:	f7f3 f807 	bl	80001d4 <__adddf3>
 800d1c6:	4604      	mov	r4, r0
 800d1c8:	460d      	mov	r5, r1
 800d1ca:	ec45 4b10 	vmov	d0, r4, r5
 800d1ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1d2:	2d00      	cmp	r5, #0
 800d1d4:	dc0b      	bgt.n	800d1ee <__ieee754_sqrt+0x52>
 800d1d6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d1da:	4326      	orrs	r6, r4
 800d1dc:	d0f5      	beq.n	800d1ca <__ieee754_sqrt+0x2e>
 800d1de:	b135      	cbz	r5, 800d1ee <__ieee754_sqrt+0x52>
 800d1e0:	f7f2 fff6 	bl	80001d0 <__aeabi_dsub>
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	f7f3 fad4 	bl	8000794 <__aeabi_ddiv>
 800d1ec:	e7eb      	b.n	800d1c6 <__ieee754_sqrt+0x2a>
 800d1ee:	1509      	asrs	r1, r1, #20
 800d1f0:	f000 808d 	beq.w	800d30e <__ieee754_sqrt+0x172>
 800d1f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d1f8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800d1fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d200:	07c9      	lsls	r1, r1, #31
 800d202:	bf5c      	itt	pl
 800d204:	005b      	lslpl	r3, r3, #1
 800d206:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800d20a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d20e:	bf58      	it	pl
 800d210:	0052      	lslpl	r2, r2, #1
 800d212:	2500      	movs	r5, #0
 800d214:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d218:	1076      	asrs	r6, r6, #1
 800d21a:	0052      	lsls	r2, r2, #1
 800d21c:	f04f 0e16 	mov.w	lr, #22
 800d220:	46ac      	mov	ip, r5
 800d222:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d226:	eb0c 0001 	add.w	r0, ip, r1
 800d22a:	4298      	cmp	r0, r3
 800d22c:	bfde      	ittt	le
 800d22e:	1a1b      	suble	r3, r3, r0
 800d230:	eb00 0c01 	addle.w	ip, r0, r1
 800d234:	186d      	addle	r5, r5, r1
 800d236:	005b      	lsls	r3, r3, #1
 800d238:	f1be 0e01 	subs.w	lr, lr, #1
 800d23c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d240:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d244:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d248:	d1ed      	bne.n	800d226 <__ieee754_sqrt+0x8a>
 800d24a:	4674      	mov	r4, lr
 800d24c:	2720      	movs	r7, #32
 800d24e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d252:	4563      	cmp	r3, ip
 800d254:	eb01 000e 	add.w	r0, r1, lr
 800d258:	dc02      	bgt.n	800d260 <__ieee754_sqrt+0xc4>
 800d25a:	d113      	bne.n	800d284 <__ieee754_sqrt+0xe8>
 800d25c:	4290      	cmp	r0, r2
 800d25e:	d811      	bhi.n	800d284 <__ieee754_sqrt+0xe8>
 800d260:	2800      	cmp	r0, #0
 800d262:	eb00 0e01 	add.w	lr, r0, r1
 800d266:	da57      	bge.n	800d318 <__ieee754_sqrt+0x17c>
 800d268:	f1be 0f00 	cmp.w	lr, #0
 800d26c:	db54      	blt.n	800d318 <__ieee754_sqrt+0x17c>
 800d26e:	f10c 0801 	add.w	r8, ip, #1
 800d272:	eba3 030c 	sub.w	r3, r3, ip
 800d276:	4290      	cmp	r0, r2
 800d278:	bf88      	it	hi
 800d27a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d27e:	1a12      	subs	r2, r2, r0
 800d280:	440c      	add	r4, r1
 800d282:	46c4      	mov	ip, r8
 800d284:	005b      	lsls	r3, r3, #1
 800d286:	3f01      	subs	r7, #1
 800d288:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d28c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d290:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d294:	d1dd      	bne.n	800d252 <__ieee754_sqrt+0xb6>
 800d296:	4313      	orrs	r3, r2
 800d298:	d01b      	beq.n	800d2d2 <__ieee754_sqrt+0x136>
 800d29a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d348 <__ieee754_sqrt+0x1ac>
 800d29e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d34c <__ieee754_sqrt+0x1b0>
 800d2a2:	e9da 0100 	ldrd	r0, r1, [sl]
 800d2a6:	e9db 2300 	ldrd	r2, r3, [fp]
 800d2aa:	f7f2 ff91 	bl	80001d0 <__aeabi_dsub>
 800d2ae:	e9da 8900 	ldrd	r8, r9, [sl]
 800d2b2:	4602      	mov	r2, r0
 800d2b4:	460b      	mov	r3, r1
 800d2b6:	4640      	mov	r0, r8
 800d2b8:	4649      	mov	r1, r9
 800d2ba:	f7f3 fbbd 	bl	8000a38 <__aeabi_dcmple>
 800d2be:	b140      	cbz	r0, 800d2d2 <__ieee754_sqrt+0x136>
 800d2c0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d2c4:	e9da 0100 	ldrd	r0, r1, [sl]
 800d2c8:	e9db 2300 	ldrd	r2, r3, [fp]
 800d2cc:	d126      	bne.n	800d31c <__ieee754_sqrt+0x180>
 800d2ce:	3501      	adds	r5, #1
 800d2d0:	463c      	mov	r4, r7
 800d2d2:	106a      	asrs	r2, r5, #1
 800d2d4:	0863      	lsrs	r3, r4, #1
 800d2d6:	07e9      	lsls	r1, r5, #31
 800d2d8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d2dc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d2e0:	bf48      	it	mi
 800d2e2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d2e6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d2ea:	461c      	mov	r4, r3
 800d2ec:	e76d      	b.n	800d1ca <__ieee754_sqrt+0x2e>
 800d2ee:	0ad3      	lsrs	r3, r2, #11
 800d2f0:	3815      	subs	r0, #21
 800d2f2:	0552      	lsls	r2, r2, #21
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d0fa      	beq.n	800d2ee <__ieee754_sqrt+0x152>
 800d2f8:	02dc      	lsls	r4, r3, #11
 800d2fa:	d50a      	bpl.n	800d312 <__ieee754_sqrt+0x176>
 800d2fc:	f1c1 0420 	rsb	r4, r1, #32
 800d300:	fa22 f404 	lsr.w	r4, r2, r4
 800d304:	1e4d      	subs	r5, r1, #1
 800d306:	408a      	lsls	r2, r1
 800d308:	4323      	orrs	r3, r4
 800d30a:	1b41      	subs	r1, r0, r5
 800d30c:	e772      	b.n	800d1f4 <__ieee754_sqrt+0x58>
 800d30e:	4608      	mov	r0, r1
 800d310:	e7f0      	b.n	800d2f4 <__ieee754_sqrt+0x158>
 800d312:	005b      	lsls	r3, r3, #1
 800d314:	3101      	adds	r1, #1
 800d316:	e7ef      	b.n	800d2f8 <__ieee754_sqrt+0x15c>
 800d318:	46e0      	mov	r8, ip
 800d31a:	e7aa      	b.n	800d272 <__ieee754_sqrt+0xd6>
 800d31c:	f7f2 ff5a 	bl	80001d4 <__adddf3>
 800d320:	e9da 8900 	ldrd	r8, r9, [sl]
 800d324:	4602      	mov	r2, r0
 800d326:	460b      	mov	r3, r1
 800d328:	4640      	mov	r0, r8
 800d32a:	4649      	mov	r1, r9
 800d32c:	f7f3 fb7a 	bl	8000a24 <__aeabi_dcmplt>
 800d330:	b120      	cbz	r0, 800d33c <__ieee754_sqrt+0x1a0>
 800d332:	1ca0      	adds	r0, r4, #2
 800d334:	bf08      	it	eq
 800d336:	3501      	addeq	r5, #1
 800d338:	3402      	adds	r4, #2
 800d33a:	e7ca      	b.n	800d2d2 <__ieee754_sqrt+0x136>
 800d33c:	3401      	adds	r4, #1
 800d33e:	f024 0401 	bic.w	r4, r4, #1
 800d342:	e7c6      	b.n	800d2d2 <__ieee754_sqrt+0x136>
 800d344:	7ff00000 	.word	0x7ff00000
 800d348:	200000d8 	.word	0x200000d8
 800d34c:	200000e0 	.word	0x200000e0

0800d350 <_init>:
 800d350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d352:	bf00      	nop
 800d354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d356:	bc08      	pop	{r3}
 800d358:	469e      	mov	lr, r3
 800d35a:	4770      	bx	lr

0800d35c <_fini>:
 800d35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d35e:	bf00      	nop
 800d360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d362:	bc08      	pop	{r3}
 800d364:	469e      	mov	lr, r3
 800d366:	4770      	bx	lr
