
RT7_Chamber.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad50  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  0800aed8  0800aed8  0001aed8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b728  0800b728  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b728  0800b728  0001b728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b730  0800b730  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b730  0800b730  0001b730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b734  0800b734  0001b734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  0800b738  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200e0  2**0
                  CONTENTS
 10 .bss          00000b48  200000e0  200000e0  000200e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000c28  20000c28  000200e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f4f5  00000000  00000000  00020153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005585  00000000  00000000  0003f648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ad0  00000000  00000000  00044bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000148b  00000000  00000000  000466a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00007dcb  00000000  00000000  00047b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00025140  00000000  00000000  0004f8f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6fb3  00000000  00000000  00074a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000076b0  00000000  00000000  0014b9ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0015309c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000e0 	.word	0x200000e0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800aec0 	.word	0x0800aec0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000e4 	.word	0x200000e4
 80001c4:	0800aec0 	.word	0x0800aec0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b9a6 	b.w	8000f34 <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f83c 	bl	8000c6c <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__aeabi_d2lz>:
 8000c00:	b538      	push	{r3, r4, r5, lr}
 8000c02:	2200      	movs	r2, #0
 8000c04:	2300      	movs	r3, #0
 8000c06:	4604      	mov	r4, r0
 8000c08:	460d      	mov	r5, r1
 8000c0a:	f7ff ff0b 	bl	8000a24 <__aeabi_dcmplt>
 8000c0e:	b928      	cbnz	r0, 8000c1c <__aeabi_d2lz+0x1c>
 8000c10:	4620      	mov	r0, r4
 8000c12:	4629      	mov	r1, r5
 8000c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c18:	f000 b80a 	b.w	8000c30 <__aeabi_d2ulz>
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c22:	f000 f805 	bl	8000c30 <__aeabi_d2ulz>
 8000c26:	4240      	negs	r0, r0
 8000c28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2c:	bd38      	pop	{r3, r4, r5, pc}
 8000c2e:	bf00      	nop

08000c30 <__aeabi_d2ulz>:
 8000c30:	b5d0      	push	{r4, r6, r7, lr}
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <__aeabi_d2ulz+0x34>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	4606      	mov	r6, r0
 8000c38:	460f      	mov	r7, r1
 8000c3a:	f7ff fc81 	bl	8000540 <__aeabi_dmul>
 8000c3e:	f7ff ff57 	bl	8000af0 <__aeabi_d2uiz>
 8000c42:	4604      	mov	r4, r0
 8000c44:	f7ff fc02 	bl	800044c <__aeabi_ui2d>
 8000c48:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <__aeabi_d2ulz+0x38>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f7ff fc78 	bl	8000540 <__aeabi_dmul>
 8000c50:	4602      	mov	r2, r0
 8000c52:	460b      	mov	r3, r1
 8000c54:	4630      	mov	r0, r6
 8000c56:	4639      	mov	r1, r7
 8000c58:	f7ff faba 	bl	80001d0 <__aeabi_dsub>
 8000c5c:	f7ff ff48 	bl	8000af0 <__aeabi_d2uiz>
 8000c60:	4621      	mov	r1, r4
 8000c62:	bdd0      	pop	{r4, r6, r7, pc}
 8000c64:	3df00000 	.word	0x3df00000
 8000c68:	41f00000 	.word	0x41f00000

08000c6c <__udivmoddi4>:
 8000c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c70:	9e08      	ldr	r6, [sp, #32]
 8000c72:	460d      	mov	r5, r1
 8000c74:	4604      	mov	r4, r0
 8000c76:	460f      	mov	r7, r1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d14a      	bne.n	8000d12 <__udivmoddi4+0xa6>
 8000c7c:	428a      	cmp	r2, r1
 8000c7e:	4694      	mov	ip, r2
 8000c80:	d965      	bls.n	8000d4e <__udivmoddi4+0xe2>
 8000c82:	fab2 f382 	clz	r3, r2
 8000c86:	b143      	cbz	r3, 8000c9a <__udivmoddi4+0x2e>
 8000c88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c8c:	f1c3 0220 	rsb	r2, r3, #32
 8000c90:	409f      	lsls	r7, r3
 8000c92:	fa20 f202 	lsr.w	r2, r0, r2
 8000c96:	4317      	orrs	r7, r2
 8000c98:	409c      	lsls	r4, r3
 8000c9a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c9e:	fa1f f58c 	uxth.w	r5, ip
 8000ca2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ca6:	0c22      	lsrs	r2, r4, #16
 8000ca8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cac:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cb0:	fb01 f005 	mul.w	r0, r1, r5
 8000cb4:	4290      	cmp	r0, r2
 8000cb6:	d90a      	bls.n	8000cce <__udivmoddi4+0x62>
 8000cb8:	eb1c 0202 	adds.w	r2, ip, r2
 8000cbc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cc0:	f080 811c 	bcs.w	8000efc <__udivmoddi4+0x290>
 8000cc4:	4290      	cmp	r0, r2
 8000cc6:	f240 8119 	bls.w	8000efc <__udivmoddi4+0x290>
 8000cca:	3902      	subs	r1, #2
 8000ccc:	4462      	add	r2, ip
 8000cce:	1a12      	subs	r2, r2, r0
 8000cd0:	b2a4      	uxth	r4, r4
 8000cd2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cd6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cda:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cde:	fb00 f505 	mul.w	r5, r0, r5
 8000ce2:	42a5      	cmp	r5, r4
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x90>
 8000ce6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cea:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cee:	f080 8107 	bcs.w	8000f00 <__udivmoddi4+0x294>
 8000cf2:	42a5      	cmp	r5, r4
 8000cf4:	f240 8104 	bls.w	8000f00 <__udivmoddi4+0x294>
 8000cf8:	4464      	add	r4, ip
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d00:	1b64      	subs	r4, r4, r5
 8000d02:	2100      	movs	r1, #0
 8000d04:	b11e      	cbz	r6, 8000d0e <__udivmoddi4+0xa2>
 8000d06:	40dc      	lsrs	r4, r3
 8000d08:	2300      	movs	r3, #0
 8000d0a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0xbc>
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	f000 80ed 	beq.w	8000ef6 <__udivmoddi4+0x28a>
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d22:	4608      	mov	r0, r1
 8000d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d28:	fab3 f183 	clz	r1, r3
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	d149      	bne.n	8000dc4 <__udivmoddi4+0x158>
 8000d30:	42ab      	cmp	r3, r5
 8000d32:	d302      	bcc.n	8000d3a <__udivmoddi4+0xce>
 8000d34:	4282      	cmp	r2, r0
 8000d36:	f200 80f8 	bhi.w	8000f2a <__udivmoddi4+0x2be>
 8000d3a:	1a84      	subs	r4, r0, r2
 8000d3c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d40:	2001      	movs	r0, #1
 8000d42:	4617      	mov	r7, r2
 8000d44:	2e00      	cmp	r6, #0
 8000d46:	d0e2      	beq.n	8000d0e <__udivmoddi4+0xa2>
 8000d48:	e9c6 4700 	strd	r4, r7, [r6]
 8000d4c:	e7df      	b.n	8000d0e <__udivmoddi4+0xa2>
 8000d4e:	b902      	cbnz	r2, 8000d52 <__udivmoddi4+0xe6>
 8000d50:	deff      	udf	#255	; 0xff
 8000d52:	fab2 f382 	clz	r3, r2
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x210>
 8000d5c:	1a8a      	subs	r2, r1, r2
 8000d5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	2101      	movs	r1, #1
 8000d68:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d6c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d70:	0c22      	lsrs	r2, r4, #16
 8000d72:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d76:	fb0e f005 	mul.w	r0, lr, r5
 8000d7a:	4290      	cmp	r0, r2
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x124>
 8000d7e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d82:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d86:	d202      	bcs.n	8000d8e <__udivmoddi4+0x122>
 8000d88:	4290      	cmp	r0, r2
 8000d8a:	f200 80cb 	bhi.w	8000f24 <__udivmoddi4+0x2b8>
 8000d8e:	4645      	mov	r5, r8
 8000d90:	1a12      	subs	r2, r2, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d98:	fb07 2210 	mls	r2, r7, r0, r2
 8000d9c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da0:	fb0e fe00 	mul.w	lr, lr, r0
 8000da4:	45a6      	cmp	lr, r4
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x14e>
 8000da8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dac:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db0:	d202      	bcs.n	8000db8 <__udivmoddi4+0x14c>
 8000db2:	45a6      	cmp	lr, r4
 8000db4:	f200 80bb 	bhi.w	8000f2e <__udivmoddi4+0x2c2>
 8000db8:	4610      	mov	r0, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dc2:	e79f      	b.n	8000d04 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0720 	rsb	r7, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dce:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dd2:	fa05 f401 	lsl.w	r4, r5, r1
 8000dd6:	fa20 f307 	lsr.w	r3, r0, r7
 8000dda:	40fd      	lsrs	r5, r7
 8000ddc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	fb09 5518 	mls	r5, r9, r8, r5
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000df4:	fb08 f50e 	mul.w	r5, r8, lr
 8000df8:	42a5      	cmp	r5, r4
 8000dfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfe:	fa00 f001 	lsl.w	r0, r0, r1
 8000e02:	d90b      	bls.n	8000e1c <__udivmoddi4+0x1b0>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e0c:	f080 8088 	bcs.w	8000f20 <__udivmoddi4+0x2b4>
 8000e10:	42a5      	cmp	r5, r4
 8000e12:	f240 8085 	bls.w	8000f20 <__udivmoddi4+0x2b4>
 8000e16:	f1a8 0802 	sub.w	r8, r8, #2
 8000e1a:	4464      	add	r4, ip
 8000e1c:	1b64      	subs	r4, r4, r5
 8000e1e:	b29d      	uxth	r5, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e2c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e30:	45a6      	cmp	lr, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1da>
 8000e34:	eb1c 0404 	adds.w	r4, ip, r4
 8000e38:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e3c:	d26c      	bcs.n	8000f18 <__udivmoddi4+0x2ac>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	d96a      	bls.n	8000f18 <__udivmoddi4+0x2ac>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	4464      	add	r4, ip
 8000e46:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e4a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	42ac      	cmp	r4, r5
 8000e54:	46c8      	mov	r8, r9
 8000e56:	46ae      	mov	lr, r5
 8000e58:	d356      	bcc.n	8000f08 <__udivmoddi4+0x29c>
 8000e5a:	d053      	beq.n	8000f04 <__udivmoddi4+0x298>
 8000e5c:	b156      	cbz	r6, 8000e74 <__udivmoddi4+0x208>
 8000e5e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e62:	eb64 040e 	sbc.w	r4, r4, lr
 8000e66:	fa04 f707 	lsl.w	r7, r4, r7
 8000e6a:	40ca      	lsrs	r2, r1
 8000e6c:	40cc      	lsrs	r4, r1
 8000e6e:	4317      	orrs	r7, r2
 8000e70:	e9c6 7400 	strd	r7, r4, [r6]
 8000e74:	4618      	mov	r0, r3
 8000e76:	2100      	movs	r1, #0
 8000e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7c:	f1c3 0120 	rsb	r1, r3, #32
 8000e80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e84:	fa20 f201 	lsr.w	r2, r0, r1
 8000e88:	fa25 f101 	lsr.w	r1, r5, r1
 8000e8c:	409d      	lsls	r5, r3
 8000e8e:	432a      	orrs	r2, r5
 8000e90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e94:	fa1f fe8c 	uxth.w	lr, ip
 8000e98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e9c:	fb07 1510 	mls	r5, r7, r0, r1
 8000ea0:	0c11      	lsrs	r1, r2, #16
 8000ea2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ea6:	fb00 f50e 	mul.w	r5, r0, lr
 8000eaa:	428d      	cmp	r5, r1
 8000eac:	fa04 f403 	lsl.w	r4, r4, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x258>
 8000eb2:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eba:	d22f      	bcs.n	8000f1c <__udivmoddi4+0x2b0>
 8000ebc:	428d      	cmp	r5, r1
 8000ebe:	d92d      	bls.n	8000f1c <__udivmoddi4+0x2b0>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4461      	add	r1, ip
 8000ec4:	1b49      	subs	r1, r1, r5
 8000ec6:	b292      	uxth	r2, r2
 8000ec8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ecc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ed0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ed4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ed8:	4291      	cmp	r1, r2
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x282>
 8000edc:	eb1c 0202 	adds.w	r2, ip, r2
 8000ee0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ee4:	d216      	bcs.n	8000f14 <__udivmoddi4+0x2a8>
 8000ee6:	4291      	cmp	r1, r2
 8000ee8:	d914      	bls.n	8000f14 <__udivmoddi4+0x2a8>
 8000eea:	3d02      	subs	r5, #2
 8000eec:	4462      	add	r2, ip
 8000eee:	1a52      	subs	r2, r2, r1
 8000ef0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ef4:	e738      	b.n	8000d68 <__udivmoddi4+0xfc>
 8000ef6:	4631      	mov	r1, r6
 8000ef8:	4630      	mov	r0, r6
 8000efa:	e708      	b.n	8000d0e <__udivmoddi4+0xa2>
 8000efc:	4639      	mov	r1, r7
 8000efe:	e6e6      	b.n	8000cce <__udivmoddi4+0x62>
 8000f00:	4610      	mov	r0, r2
 8000f02:	e6fb      	b.n	8000cfc <__udivmoddi4+0x90>
 8000f04:	4548      	cmp	r0, r9
 8000f06:	d2a9      	bcs.n	8000e5c <__udivmoddi4+0x1f0>
 8000f08:	ebb9 0802 	subs.w	r8, r9, r2
 8000f0c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f10:	3b01      	subs	r3, #1
 8000f12:	e7a3      	b.n	8000e5c <__udivmoddi4+0x1f0>
 8000f14:	4645      	mov	r5, r8
 8000f16:	e7ea      	b.n	8000eee <__udivmoddi4+0x282>
 8000f18:	462b      	mov	r3, r5
 8000f1a:	e794      	b.n	8000e46 <__udivmoddi4+0x1da>
 8000f1c:	4640      	mov	r0, r8
 8000f1e:	e7d1      	b.n	8000ec4 <__udivmoddi4+0x258>
 8000f20:	46d0      	mov	r8, sl
 8000f22:	e77b      	b.n	8000e1c <__udivmoddi4+0x1b0>
 8000f24:	3d02      	subs	r5, #2
 8000f26:	4462      	add	r2, ip
 8000f28:	e732      	b.n	8000d90 <__udivmoddi4+0x124>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e70a      	b.n	8000d44 <__udivmoddi4+0xd8>
 8000f2e:	4464      	add	r4, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e742      	b.n	8000dba <__udivmoddi4+0x14e>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <adc_init>:


#include "adc.h"

void adc_init(adc_t* self)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	self->vtable->init(self);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	4798      	blx	r3
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <adc_update>:

void adc_update(adc_t* self, void* option)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
	self->vtable->update(self, option);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	6839      	ldr	r1, [r7, #0]
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	4798      	blx	r3
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <adc_get_cnt>:

uint32_t adc_get_cnt(adc_t* self)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	return self->vtable->get_cnt(self);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	4798      	blx	r3
 8000f82:	4603      	mov	r3, r0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <adc_get_vout>:

double adc_get_vout(adc_t* self)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	return self->vtable->get_vout(self);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	4798      	blx	r3
 8000f9e:	eeb0 7a40 	vmov.f32	s14, s0
 8000fa2:	eef0 7a60 	vmov.f32	s15, s1
}
 8000fa6:	eeb0 0a47 	vmov.f32	s0, s14
 8000faa:	eef0 0a67 	vmov.f32	s1, s15
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <init>:

	ADS1246_state_t state;
};

static void init(adc_t* self)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	spi_deselect(self);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f000 fa03 	bl	80013c8 <spi_deselect>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <update>:

static void update(adc_t* self, void* option)
{
 8000fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fd0:	b089      	sub	sp, #36	; 0x24
 8000fd2:	af02      	add	r7, sp, #8
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	6039      	str	r1, [r7, #0]
	switch(self->data->state)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000fe0:	2b04      	cmp	r3, #4
 8000fe2:	f200 8105 	bhi.w	80011f0 <update+0x224>
 8000fe6:	a201      	add	r2, pc, #4	; (adr r2, 8000fec <update+0x20>)
 8000fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fec:	08001001 	.word	0x08001001
 8000ff0:	08001065 	.word	0x08001065
 8000ff4:	08001089 	.word	0x08001089
 8000ff8:	080010cd 	.word	0x080010cd
 8000ffc:	08001109 	.word	0x08001109
	{
		case ADS1246_WAIT:
			spi_deselect(self);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 f9e1 	bl	80013c8 <spi_deselect>
			self->data->waitCycles--;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800100c:	3a01      	subs	r2, #1
 800100e:	641a      	str	r2, [r3, #64]	; 0x40
			if(self->data->portSTART)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d009      	beq.n	800102e <update+0x62>
			{
				HAL_GPIO_WritePin(self->data->portSTART, self->data->pinSTART, 1);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	6958      	ldr	r0, [r3, #20]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	8b1b      	ldrh	r3, [r3, #24]
 8001026:	2201      	movs	r2, #1
 8001028:	4619      	mov	r1, r3
 800102a:	f005 fba7 	bl	800677c <HAL_GPIO_WritePin>
			}

			if(self->data->portRESET)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	69db      	ldr	r3, [r3, #28]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d009      	beq.n	800104c <update+0x80>
			{
				HAL_GPIO_WritePin(self->data->portRESET, self->data->pinRESET, 1);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	69d8      	ldr	r0, [r3, #28]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	8c1b      	ldrh	r3, [r3, #32]
 8001044:	2201      	movs	r2, #1
 8001046:	4619      	mov	r1, r3
 8001048:	f005 fb98 	bl	800677c <HAL_GPIO_WritePin>
			}


			if(!self->data->waitCycles)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	2b00      	cmp	r3, #0
 8001054:	f040 80c9 	bne.w	80011ea <update+0x21e>
			{
				self->data->state = ADS1246_WAKEUP;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2201      	movs	r2, #1
 800105e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			}
			break;
 8001062:	e0c2      	b.n	80011ea <update+0x21e>
		case ADS1246_WAKEUP:
			spi_select(self);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f000 f99d 	bl	80013a4 <spi_select>
			spi_hw_command(self, CMD_WAKEUP);
 800106a:	4b69      	ldr	r3, [pc, #420]	; (8001210 <update+0x244>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	4619      	mov	r1, r3
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f9bb 	bl	80013ec <spi_hw_command>
			spi_deselect(self);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f9a6 	bl	80013c8 <spi_deselect>
			self->data->state = ADS1246_SETUP_SYS0;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2202      	movs	r2, #2
 8001082:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			break;
 8001086:	e0b3      	b.n	80011f0 <update+0x224>
		case ADS1246_SETUP_SYS0:
			spi_select(self);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f000 f98b 	bl	80013a4 <spi_select>
			spi_hw_command(self, CMD_WREG | REG_SYS0);
 800108e:	4b61      	ldr	r3, [pc, #388]	; (8001214 <update+0x248>)
 8001090:	781a      	ldrb	r2, [r3, #0]
 8001092:	4b61      	ldr	r3, [pc, #388]	; (8001218 <update+0x24c>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	4313      	orrs	r3, r2
 8001098:	b2db      	uxtb	r3, r3
 800109a:	4619      	mov	r1, r3
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 f9a5 	bl	80013ec <spi_hw_command>
			spi_hw_command(self, 0); // 1 byte
 80010a2:	2100      	movs	r1, #0
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f000 f9a1 	bl	80013ec <spi_hw_command>
			spi_hw_command(self, self->data->SYS0_conf);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010b2:	4619      	mov	r1, r3
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f999 	bl	80013ec <spi_hw_command>
			spi_deselect(self);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 f984 	bl	80013c8 <spi_deselect>
			self->data->state = ADS1246_CHECK_xDRDY;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2203      	movs	r2, #3
 80010c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			break;
 80010ca:	e091      	b.n	80011f0 <update+0x224>
		case ADS1246_CHECK_xDRDY:
			if(self->data->portDRDY)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d012      	beq.n	80010fc <update+0x130>
			{
				// check xDRDY state before transit
				if(!HAL_GPIO_ReadPin(self->data->portDRDY, self->data->pinDRDY))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	68da      	ldr	r2, [r3, #12]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	8a1b      	ldrh	r3, [r3, #16]
 80010e2:	4619      	mov	r1, r3
 80010e4:	4610      	mov	r0, r2
 80010e6:	f005 fb31 	bl	800674c <HAL_GPIO_ReadPin>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d17e      	bne.n	80011ee <update+0x222>
				{
					self->data->state = ADS1246_MEASURE;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2204      	movs	r2, #4
 80010f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			{
				// transit unconditionally
				self->data->state = ADS1246_MEASURE;
			}

			break;
 80010fa:	e078      	b.n	80011ee <update+0x222>
				self->data->state = ADS1246_MEASURE;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2204      	movs	r2, #4
 8001102:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			break;
 8001106:	e072      	b.n	80011ee <update+0x222>
		case ADS1246_MEASURE:
			const uint8_t kDataSizeBytes = 3;
 8001108:	2303      	movs	r3, #3
 800110a:	74fb      	strb	r3, [r7, #19]
			const uint8_t kBufferSizeBytes = 4;
 800110c:	2304      	movs	r3, #4
 800110e:	74bb      	strb	r3, [r7, #18]
			uint8_t rxBytes [kBufferSizeBytes];
 8001110:	466b      	mov	r3, sp
 8001112:	461e      	mov	r6, r3
 8001114:	7cbb      	ldrb	r3, [r7, #18]
 8001116:	3b01      	subs	r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	7cbb      	ldrb	r3, [r7, #18]
 800111c:	2200      	movs	r2, #0
 800111e:	4698      	mov	r8, r3
 8001120:	4691      	mov	r9, r2
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	f04f 0300 	mov.w	r3, #0
 800112a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800112e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001132:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001136:	7cbb      	ldrb	r3, [r7, #18]
 8001138:	2200      	movs	r2, #0
 800113a:	461c      	mov	r4, r3
 800113c:	4615      	mov	r5, r2
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	00eb      	lsls	r3, r5, #3
 8001148:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800114c:	00e2      	lsls	r2, r4, #3
 800114e:	7cbb      	ldrb	r3, [r7, #18]
 8001150:	3307      	adds	r3, #7
 8001152:	08db      	lsrs	r3, r3, #3
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	ebad 0d03 	sub.w	sp, sp, r3
 800115a:	ab02      	add	r3, sp, #8
 800115c:	3300      	adds	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]
			memset(rxBytes, 0, kBufferSizeBytes);
 8001160:	7cbb      	ldrb	r3, [r7, #18]
 8001162:	461a      	mov	r2, r3
 8001164:	2100      	movs	r1, #0
 8001166:	68b8      	ldr	r0, [r7, #8]
 8001168:	f008 fe86 	bl	8009e78 <memset>
			spi_select(self);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 f919 	bl	80013a4 <spi_select>
			spi_hw_command(self, CMD_RDATA); // can avoid sending command???
 8001172:	4b2a      	ldr	r3, [pc, #168]	; (800121c <update+0x250>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	4619      	mov	r1, r3
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 f937 	bl	80013ec <spi_hw_command>
			int i;
			for(i = 0; i < kDataSizeBytes; ++i)
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	e01b      	b.n	80011bc <update+0x1f0>
			{
				HAL_SPI_TransmitReceive(self->data->hspi, &CMD_NOP, rxBytes + kDataSizeBytes - i - 1, 1, ADC_ADS1246_SPI_TIMEOUT);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	6818      	ldr	r0, [r3, #0]
 800118a:	7cfa      	ldrb	r2, [r7, #19]
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	3b01      	subs	r3, #1
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	441a      	add	r2, r3
 8001196:	230a      	movs	r3, #10
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2301      	movs	r3, #1
 800119c:	4920      	ldr	r1, [pc, #128]	; (8001220 <update+0x254>)
 800119e:	f006 fef1 	bl	8007f84 <HAL_SPI_TransmitReceive>
				while(HAL_SPI_GetState(self->data->hspi) != HAL_SPI_STATE_READY)
 80011a2:	bf00      	nop
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f007 f89a 	bl	80082e4 <HAL_SPI_GetState>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d1f6      	bne.n	80011a4 <update+0x1d8>
			for(i = 0; i < kDataSizeBytes; ++i)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	3301      	adds	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	7cfb      	ldrb	r3, [r7, #19]
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	dbdf      	blt.n	8001184 <update+0x1b8>
					;
			}
			spi_deselect(self);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 f8ff 	bl	80013c8 <spi_deselect>
			check_negative_24_to_32((int32_t*)rxBytes);
 80011ca:	68b8      	ldr	r0, [r7, #8]
 80011cc:	f000 f92b 	bl	8001426 <check_negative_24_to_32>
			self->data->lastOutputValue = *(int32_t*)rxBytes;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	68ba      	ldr	r2, [r7, #8]
 80011d6:	6812      	ldr	r2, [r2, #0]
 80011d8:	631a      	str	r2, [r3, #48]	; 0x30
			self->data->state = ADS1246_CHECK_xDRDY;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2203      	movs	r2, #3
 80011e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			break;
 80011e4:	bf00      	nop
 80011e6:	46b5      	mov	sp, r6
 80011e8:	e002      	b.n	80011f0 <update+0x224>
			break;
 80011ea:	bf00      	nop
 80011ec:	e000      	b.n	80011f0 <update+0x224>
			break;
 80011ee:	bf00      	nop
	}
	// return state
	if(option) *(int*)option = self->data->state;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d006      	beq.n	8001204 <update+0x238>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80011fe:	461a      	mov	r2, r3
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	601a      	str	r2, [r3, #0]
}
 8001204:	bf00      	nop
 8001206:	371c      	adds	r7, #28
 8001208:	46bd      	mov	sp, r7
 800120a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800120e:	bf00      	nop
 8001210:	200000fc 	.word	0x200000fc
 8001214:	20000002 	.word	0x20000002
 8001218:	20000003 	.word	0x20000003
 800121c:	20000001 	.word	0x20000001
 8001220:	20000000 	.word	0x20000000

08001224 <get_cnt>:

static uint32_t get_cnt(adc_t* self)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	return self->data->lastOutputValue;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <get_vout>:

static double get_vout(adc_t* self)
{
 800123e:	b5b0      	push	{r4, r5, r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
	return self->data->Vref * get_cnt(self) / self->data->maxOutputValue;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ffe8 	bl	8001224 <get_cnt>
 8001254:	4603      	mov	r3, r0
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f8f8 	bl	800044c <__aeabi_ui2d>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4620      	mov	r0, r4
 8001262:	4629      	mov	r1, r5
 8001264:	f7ff f96c 	bl	8000540 <__aeabi_dmul>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4614      	mov	r4, r2
 800126e:	461d      	mov	r5, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f8f8 	bl	800046c <__aeabi_i2d>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4620      	mov	r0, r4
 8001282:	4629      	mov	r1, r5
 8001284:	f7ff fa86 	bl	8000794 <__aeabi_ddiv>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001290:	eeb0 0a47 	vmov.f32	s0, s14
 8001294:	eef0 0a67 	vmov.f32	s1, s15
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bdb0      	pop	{r4, r5, r7, pc}
	...

080012a0 <adc_ADS1246_create>:
		uint16_t pinRESET,
		double Vref,
		uint8_t SYS0_conf,
		uint32_t waitCycles
		)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6178      	str	r0, [r7, #20]
 80012a8:	6139      	str	r1, [r7, #16]
 80012aa:	60fa      	str	r2, [r7, #12]
 80012ac:	ed87 0b00 	vstr	d0, [r7]
 80012b0:	817b      	strh	r3, [r7, #10]
	adc_t adc;
	adc.vtable = &methods;
 80012b2:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <adc_ADS1246_create+0x100>)
 80012b4:	61fb      	str	r3, [r7, #28]
	struct adc_data_t* pdata =
			(struct adc_data_t*)malloc(sizeof(struct adc_data_t));
 80012b6:	2050      	movs	r0, #80	; 0x50
 80012b8:	f008 fce8 	bl	8009c8c <malloc>
 80012bc:	4603      	mov	r3, r0
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
	if(pdata)
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d05c      	beq.n	8001380 <adc_ADS1246_create+0xe0>
	{
		memset(pdata, 0, sizeof(*pdata));
 80012c6:	2250      	movs	r2, #80	; 0x50
 80012c8:	2100      	movs	r1, #0
 80012ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012cc:	f008 fdd4 	bl	8009e78 <memset>
		pdata->hspi = hspi;
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	601a      	str	r2, [r3, #0]
		pdata->portCS = portCS;
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	68fa      	ldr	r2, [r7, #12]
 80012da:	605a      	str	r2, [r3, #4]
		pdata->pinCS = pinCS;
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	897a      	ldrh	r2, [r7, #10]
 80012e0:	811a      	strh	r2, [r3, #8]
		pdata->portDRDY = portDRDY;
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012e6:	60da      	str	r2, [r3, #12]
		pdata->pinDRDY = pinDRDY;
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80012ec:	821a      	strh	r2, [r3, #16]
		pdata->portSTART = portSTART;
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012f2:	615a      	str	r2, [r3, #20]
		pdata->pinSTART = pinSTART;
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80012f8:	831a      	strh	r2, [r3, #24]
		pdata->portRESET = portRESET;
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80012fe:	61da      	str	r2, [r3, #28]
		pdata->pinRESET = pinRESET;
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001306:	841a      	strh	r2, [r3, #32]
		pdata->Vref = Vref;
 8001308:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800130a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800130e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		pdata->lastOutputValue = 0;
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	2200      	movs	r2, #0
 8001316:	631a      	str	r2, [r3, #48]	; 0x30
		pdata->bitResolution = 24;
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	2218      	movs	r2, #24
 800131c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		pdata->maxOutputValue = (uint32_t)pow(2, pdata->bitResolution);
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f890 	bl	800044c <__aeabi_ui2d>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	ec43 2b11 	vmov	d1, r2, r3
 8001334:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8001398 <adc_ADS1246_create+0xf8>
 8001338:	f008 fdf0 	bl	8009f1c <pow>
 800133c:	ec53 2b10 	vmov	r2, r3, d0
 8001340:	4610      	mov	r0, r2
 8001342:	4619      	mov	r1, r3
 8001344:	f7ff fbd4 	bl	8000af0 <__aeabi_d2uiz>
 8001348:	4603      	mov	r3, r0
 800134a:	461a      	mov	r2, r3
 800134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134e:	635a      	str	r2, [r3, #52]	; 0x34
		pdata->frameNo = 0;
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	2200      	movs	r2, #0
 8001354:	639a      	str	r2, [r3, #56]	; 0x38
		pdata->SYS0_conf = SYS0_conf;
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800135c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		pdata->waitCycles = waitCycles;
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001364:	641a      	str	r2, [r3, #64]	; 0x40
		pdata->setupWaitCyclesMax = 5;
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	2205      	movs	r2, #5
 800136a:	649a      	str	r2, [r3, #72]	; 0x48
		pdata->setupWaitCycles = pdata->setupWaitCycles;
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	645a      	str	r2, [r3, #68]	; 0x44
		pdata->state = ADS1246_WAIT;
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	2200      	movs	r2, #0
 8001378:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		adc.data = pdata;
 800137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137e:	623b      	str	r3, [r7, #32]
	}
	// init
	return adc;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	461a      	mov	r2, r3
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	e893 0003 	ldmia.w	r3, {r0, r1}
 800138c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001390:	6978      	ldr	r0, [r7, #20]
 8001392:	3728      	adds	r7, #40	; 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	00000000 	.word	0x00000000
 800139c:	40000000 	.word	0x40000000
 80013a0:	20000004 	.word	0x20000004

080013a4 <spi_select>:

static void spi_select(adc_t* self)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
			self->data->portCS,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 80013b0:	6858      	ldr	r0, [r3, #4]
			self->data->pinCS,
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 80013b6:	891b      	ldrh	r3, [r3, #8]
 80013b8:	2200      	movs	r2, #0
 80013ba:	4619      	mov	r1, r3
 80013bc:	f005 f9de 	bl	800677c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET
			);
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <spi_deselect>:
static void spi_deselect(adc_t* self)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
			self->data->portCS,
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 80013d4:	6858      	ldr	r0, [r3, #4]
			self->data->pinCS,
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 80013da:	891b      	ldrh	r3, [r3, #8]
 80013dc:	2201      	movs	r2, #1
 80013de:	4619      	mov	r1, r3
 80013e0:	f005 f9cc 	bl	800677c <HAL_GPIO_WritePin>
			GPIO_PIN_SET
			);
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <spi_hw_command>:

static void spi_hw_command(adc_t *self, uint8_t cmd)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(self->data->hspi, &cmd, 1, ADC_ADS1246_SPI_TIMEOUT);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	6818      	ldr	r0, [r3, #0]
 80013fe:	1cf9      	adds	r1, r7, #3
 8001400:	230a      	movs	r3, #10
 8001402:	2201      	movs	r2, #1
 8001404:	f006 fb63 	bl	8007ace <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(self->data->hspi) != HAL_SPI_STATE_READY)
 8001408:	bf00      	nop
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f006 ff67 	bl	80082e4 <HAL_SPI_GetState>
 8001416:	4603      	mov	r3, r0
 8001418:	2b01      	cmp	r3, #1
 800141a:	d1f6      	bne.n	800140a <spi_hw_command+0x1e>
		;
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <check_negative_24_to_32>:

static void check_negative_24_to_32(int32_t* val)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
	if ((*val >> 23) & (int)1)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d006      	beq.n	8001448 <check_negative_24_to_32+0x22>
	{
		*val |= 0xFF000000;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001442:	461a      	mov	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	601a      	str	r2, [r3, #0]
	}

}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <adc_monitor_init>:
#include <string.h>
#include <math.h>


void adc_monitor_init(adc_monitor_t* self, adc_t* adc, IRQn_Type IRQn)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	4613      	mov	r3, r2
 8001460:	71fb      	strb	r3, [r7, #7]
	memset(self, 0, sizeof(*self));
 8001462:	2228      	movs	r2, #40	; 0x28
 8001464:	2100      	movs	r1, #0
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f008 fd06 	bl	8009e78 <memset>
	self->adc = adc;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	601a      	str	r2, [r3, #0]
	self->IRQn = IRQn;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	79fa      	ldrb	r2, [r7, #7]
 8001476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	self->state = ADC_STANDBY;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2200      	movs	r2, #0
 800147e:	761a      	strb	r2, [r3, #24]
}
 8001480:	bf00      	nop
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <adc_monitor_update>:

void adc_monitor_update(adc_monitor_t* self)
{
 8001488:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
	self->currValue = adc_get_vout(self->adc);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fd78 	bl	8000f8c <adc_get_vout>
 800149c:	eeb0 7a40 	vmov.f32	s14, s0
 80014a0:	eef0 7a60 	vmov.f32	s15, s1
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	ed83 7b02 	vstr	d7, [r3, #8]
	switch(self->state)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	7e1b      	ldrb	r3, [r3, #24]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d062      	beq.n	8001578 <adc_monitor_update+0xf0>
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	dc63      	bgt.n	800157e <adc_monitor_update+0xf6>
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d002      	beq.n	80014c0 <adc_monitor_update+0x38>
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d00e      	beq.n	80014dc <adc_monitor_update+0x54>
		}
		break;
	case ADC_COMPLETED:
		break;
	}
}
 80014be:	e05e      	b.n	800157e <adc_monitor_update+0xf6>
		self->averageValue 			= 0;
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	f04f 0300 	mov.w	r3, #0
 80014ca:	e9c1 2304 	strd	r2, r3, [r1, #16]
		self->measurementCycles 	= 0;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	61da      	str	r2, [r3, #28]
		self->measurementCyclesMax	= 0;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	621a      	str	r2, [r3, #32]
		break;
 80014da:	e050      	b.n	800157e <adc_monitor_update+0xf6>
		self->measurementCycles++;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	1c5a      	adds	r2, r3, #1
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	61da      	str	r2, [r3, #28]
				((double)self->measurementCycles - 1) / self->measurementCycles * self->averageValue +
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7fe ffae 	bl	800044c <__aeabi_ui2d>
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	4b24      	ldr	r3, [pc, #144]	; (8001588 <adc_monitor_update+0x100>)
 80014f6:	f7fe fe6b 	bl	80001d0 <__aeabi_dsub>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4614      	mov	r4, r2
 8001500:	461d      	mov	r5, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	4618      	mov	r0, r3
 8001508:	f7fe ffa0 	bl	800044c <__aeabi_ui2d>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4620      	mov	r0, r4
 8001512:	4629      	mov	r1, r5
 8001514:	f7ff f93e 	bl	8000794 <__aeabi_ddiv>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001526:	f7ff f80b 	bl	8000540 <__aeabi_dmul>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4690      	mov	r8, r2
 8001530:	4699      	mov	r9, r3
				self->currValue / self->measurementCycles;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	69db      	ldr	r3, [r3, #28]
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe ff85 	bl	800044c <__aeabi_ui2d>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4620      	mov	r0, r4
 8001548:	4629      	mov	r1, r5
 800154a:	f7ff f923 	bl	8000794 <__aeabi_ddiv>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
				((double)self->measurementCycles - 1) / self->measurementCycles * self->averageValue +
 8001552:	4640      	mov	r0, r8
 8001554:	4649      	mov	r1, r9
 8001556:	f7fe fe3d 	bl	80001d4 <__adddf3>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
		self->averageValue =
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	e9c1 2304 	strd	r2, r3, [r1, #16]
		if(self->measurementCycles >= self->measurementCyclesMax)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69da      	ldr	r2, [r3, #28]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	429a      	cmp	r2, r3
 800156e:	d305      	bcc.n	800157c <adc_monitor_update+0xf4>
			self->state = ADC_COMPLETED;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2202      	movs	r2, #2
 8001574:	761a      	strb	r2, [r3, #24]
		break;
 8001576:	e001      	b.n	800157c <adc_monitor_update+0xf4>
		break;
 8001578:	bf00      	nop
 800157a:	e000      	b.n	800157e <adc_monitor_update+0xf6>
		break;
 800157c:	bf00      	nop
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001588:	3ff00000 	.word	0x3ff00000

0800158c <adc_monitor_start_measurement>:

void adc_monitor_start_measurement(adc_monitor_t* self, uint32_t cycles)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
	HAL_NVIC_DisableIRQ(self->IRQn);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800159c:	4618      	mov	r0, r3
 800159e:	f004 fbb4 	bl	8005d0a <HAL_NVIC_DisableIRQ>
	if(self->state == ADC_STANDBY)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	7e1b      	ldrb	r3, [r3, #24]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d108      	bne.n	80015bc <adc_monitor_start_measurement+0x30>
	{
		self->measurementCycles = 0;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	61da      	str	r2, [r3, #28]
		self->measurementCyclesMax = cycles;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	621a      	str	r2, [r3, #32]
		self->state = ADC_PROCESS;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	761a      	strb	r2, [r3, #24]
	}
	HAL_NVIC_EnableIRQ(self->IRQn);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 80015c2:	4618      	mov	r0, r3
 80015c4:	f004 fb93 	bl	8005cee <HAL_NVIC_EnableIRQ>
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <adc_monitor_reset_measurement>:

void adc_monitor_reset_measurement(adc_monitor_t* self)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(self->IRQn);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 80015de:	4618      	mov	r0, r3
 80015e0:	f004 fb93 	bl	8005d0a <HAL_NVIC_DisableIRQ>
	self->state = ADC_STANDBY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	761a      	strb	r2, [r3, #24]
	HAL_NVIC_EnableIRQ(self->IRQn);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 80015f0:	4618      	mov	r0, r3
 80015f2:	f004 fb7c 	bl	8005cee <HAL_NVIC_EnableIRQ>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <adc_monitor_get_average_signal_value>:

double adc_monitor_get_average_signal_value(adc_monitor_t* self)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
	return self->averageValue;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800160c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001610:	eeb0 0a47 	vmov.f32	s0, s14
 8001614:	eef0 0a67 	vmov.f32	s1, s15
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <adc_monitor_get_measurement_cycle_no>:

uint32_t adc_monitor_get_measurement_cycle_no(adc_monitor_t* self)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
	return self->measurementCycles;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69db      	ldr	r3, [r3, #28]
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <adc_monitor_get_measurement_state>:

int8_t adc_monitor_get_measurement_state(adc_monitor_t* self)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
	return self->state;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7e1b      	ldrb	r3, [r3, #24]
 8001646:	b25b      	sxtb	r3, r3
}
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <set_adc_dose_range_select_pin>:

static const int BROAD_RANGE_PIN_STATE = 0;
static const int NARROW_RANGE_PIN_STATE = 1;

void set_adc_dose_range_select_pin(GPIO_TypeDef* port, uint16_t pin)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	807b      	strh	r3, [r7, #2]
	rangeSelectPort = port;
 8001660:	4a05      	ldr	r2, [pc, #20]	; (8001678 <set_adc_dose_range_select_pin+0x24>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6013      	str	r3, [r2, #0]
	rangeSelectPin = pin;
 8001666:	4a05      	ldr	r2, [pc, #20]	; (800167c <set_adc_dose_range_select_pin+0x28>)
 8001668:	887b      	ldrh	r3, [r7, #2]
 800166a:	8013      	strh	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	20000100 	.word	0x20000100
 800167c:	20000104 	.word	0x20000104

08001680 <select_broad_adc_dose_range>:

void select_broad_adc_dose_range()
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	if(rangeSelectPort)
 8001684:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <select_broad_adc_dose_range+0x24>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d008      	beq.n	800169e <select_broad_adc_dose_range+0x1e>
	{
		HAL_GPIO_WritePin(rangeSelectPort, rangeSelectPin, BROAD_RANGE_PIN_STATE);
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <select_broad_adc_dose_range+0x24>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <select_broad_adc_dose_range+0x28>)
 8001692:	8811      	ldrh	r1, [r2, #0]
 8001694:	2200      	movs	r2, #0
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f005 f86f 	bl	800677c <HAL_GPIO_WritePin>
	}
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000100 	.word	0x20000100
 80016a8:	20000104 	.word	0x20000104

080016ac <select_narrow_adc_dose_range>:

void select_narrow_adc_dose_range()
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
	if(rangeSelectPort)
 80016b0:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <select_narrow_adc_dose_range+0x24>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d008      	beq.n	80016ca <select_narrow_adc_dose_range+0x1e>
	{
		HAL_GPIO_WritePin(rangeSelectPort, rangeSelectPin, NARROW_RANGE_PIN_STATE);
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <select_narrow_adc_dose_range+0x24>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <select_narrow_adc_dose_range+0x28>)
 80016be:	8811      	ldrh	r1, [r2, #0]
 80016c0:	2201      	movs	r2, #1
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f005 f859 	bl	800677c <HAL_GPIO_WritePin>
	}
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000100 	.word	0x20000100
 80016d4:	20000104 	.word	0x20000104

080016d8 <dac_init>:
 */

#include "dac.h"

void dac_init(dac_t* self)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	self->vtable->init(self);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	4798      	blx	r3
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <dac_set_input_value>:

void dac_set_input_value(dac_t* self, uint32_t digital_value)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	6039      	str	r1, [r7, #0]
	self->vtable->set_input_value(self, digital_value);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	6839      	ldr	r1, [r7, #0]
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	4798      	blx	r3
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <init>:
	double Vref;
	uint32_t maxInputValue;
};

static void init(dac_t* self)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	spi_deselect(self);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 f8f5 	bl	8001908 <spi_deselect>
	HAL_Delay(10);
 800171e:	200a      	movs	r0, #10
 8001720:	f004 f9a6 	bl	8005a70 <HAL_Delay>

	if(self->data->portLDAC)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d009      	beq.n	8001742 <init+0x32>
	{
		HAL_GPIO_WritePin(self->data->portLDAC, self->data->pinLDAC, 0);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	68d8      	ldr	r0, [r3, #12]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	8a1b      	ldrh	r3, [r3, #16]
 800173a:	2200      	movs	r2, #0
 800173c:	4619      	mov	r1, r3
 800173e:	f005 f81d 	bl	800677c <HAL_GPIO_WritePin>
	}

	if(self->data->portSHDW)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d009      	beq.n	8001760 <init+0x50>
	{
		HAL_GPIO_WritePin(self->data->portSHDW, self->data->pinSHDW, 1);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	6958      	ldr	r0, [r3, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	8b1b      	ldrh	r3, [r3, #24]
 8001758:	2201      	movs	r2, #1
 800175a:	4619      	mov	r1, r3
 800175c:	f005 f80e 	bl	800677c <HAL_GPIO_WritePin>
	// SPI config begin
	//spi_select(self);
	//spi_deselect(self);

	// SPI config end
	self->data->Vref = 2.048;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6859      	ldr	r1, [r3, #4]
 8001764:	a306      	add	r3, pc, #24	; (adr r3, 8001780 <init+0x70>)
 8001766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176a:	e9c1 2308 	strd	r2, r3, [r1, #32]

	// always send zero after init
	set_digital_value(self, 0);
 800176e:	2100      	movs	r1, #0
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 f809 	bl	8001788 <set_digital_value>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	d2f1a9fc 	.word	0xd2f1a9fc
 8001784:	4000624d 	.word	0x4000624d

08001788 <set_digital_value>:

static void set_digital_value(dac_t* self, uint32_t digital_value)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
	if(digital_value < self->data->maxInputValue)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d230      	bcs.n	8001800 <set_digital_value+0x78>
	{
	    uint16_t shdw = 1;
 800179e:	2301      	movs	r3, #1
 80017a0:	81fb      	strh	r3, [r7, #14]
	    uint16_t gain = 1;
 80017a2:	2301      	movs	r3, #1
 80017a4:	81bb      	strh	r3, [r7, #12]
	    uint16_t x = digital_value;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	817b      	strh	r3, [r7, #10]
	    uint16_t val = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	813b      	strh	r3, [r7, #8]
	    val += (shdw <<= 12);
 80017ae:	89fb      	ldrh	r3, [r7, #14]
 80017b0:	031b      	lsls	r3, r3, #12
 80017b2:	81fb      	strh	r3, [r7, #14]
 80017b4:	89fa      	ldrh	r2, [r7, #14]
 80017b6:	893b      	ldrh	r3, [r7, #8]
 80017b8:	4413      	add	r3, r2
 80017ba:	813b      	strh	r3, [r7, #8]
	    val += (gain <<= 13);
 80017bc:	89bb      	ldrh	r3, [r7, #12]
 80017be:	035b      	lsls	r3, r3, #13
 80017c0:	81bb      	strh	r3, [r7, #12]
 80017c2:	89ba      	ldrh	r2, [r7, #12]
 80017c4:	893b      	ldrh	r3, [r7, #8]
 80017c6:	4413      	add	r3, r2
 80017c8:	813b      	strh	r3, [r7, #8]
	    val += (x <<= 2);
 80017ca:	897b      	ldrh	r3, [r7, #10]
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	817b      	strh	r3, [r7, #10]
 80017d0:	897a      	ldrh	r2, [r7, #10]
 80017d2:	893b      	ldrh	r3, [r7, #8]
 80017d4:	4413      	add	r3, r2
 80017d6:	813b      	strh	r3, [r7, #8]

		// SPI Transmit digital value begin
		spi_select(self);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f883 	bl	80018e4 <spi_select>
		//spi_hw_command(self, (uint8_t)val);
		spi_hw_command(self, (uint8_t)(val >> 8));
 80017de:	893b      	ldrh	r3, [r7, #8]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	4619      	mov	r1, r3
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f89f 	bl	800192c <spi_hw_command>
		spi_hw_command(self, (uint8_t)val);
 80017ee:	893b      	ldrh	r3, [r7, #8]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	4619      	mov	r1, r3
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 f899 	bl	800192c <spi_hw_command>
		spi_deselect(self);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f884 	bl	8001908 <spi_deselect>
		// SPI Transmit digital value end

	}
}
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <get_reference_voltage>:

static double get_reference_voltage(dac_t* self)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	return self->data->Vref;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001818:	ec43 2b17 	vmov	d7, r2, r3
}
 800181c:	eeb0 0a47 	vmov.f32	s0, s14
 8001820:	eef0 0a67 	vmov.f32	s1, s15
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
	...

08001830 <dac_MCP4811EP_create>:
		GPIO_TypeDef* portLDAC,
		uint16_t pinLDAC,
		GPIO_TypeDef* portSHDW,
		uint16_t pinSHDW
		)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
 800183c:	807b      	strh	r3, [r7, #2]
	dac_t dac;
	dac.vtable = &methods;
 800183e:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <dac_MCP4811EP_create+0xb0>)
 8001840:	617b      	str	r3, [r7, #20]
	struct dac_data_t* pdata =
			(struct dac_data_t*)malloc(sizeof(struct dac_data_t));
 8001842:	2030      	movs	r0, #48	; 0x30
 8001844:	f008 fa22 	bl	8009c8c <malloc>
 8001848:	4603      	mov	r3, r0
 800184a:	61fb      	str	r3, [r7, #28]
	if(pdata)
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d034      	beq.n	80018bc <dac_MCP4811EP_create+0x8c>
	{
		memset(pdata, 0, sizeof(*pdata));
 8001852:	2230      	movs	r2, #48	; 0x30
 8001854:	2100      	movs	r1, #0
 8001856:	69f8      	ldr	r0, [r7, #28]
 8001858:	f008 fb0e 	bl	8009e78 <memset>
		// fill data structure
		pdata->hspi = hspi;
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	601a      	str	r2, [r3, #0]
		pdata->portCS = portCS;
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	605a      	str	r2, [r3, #4]
		pdata->pinCS = pinCS;
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	887a      	ldrh	r2, [r7, #2]
 800186c:	811a      	strh	r2, [r3, #8]
		pdata->portLDAC = portLDAC;
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001872:	60da      	str	r2, [r3, #12]
		pdata->pinLDAC = pinLDAC;
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001878:	821a      	strh	r2, [r3, #16]
		pdata->portSHDW = portSHDW;
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800187e:	615a      	str	r2, [r3, #20]
		pdata->pinSHDW = pinSHDW;
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001884:	831a      	strh	r2, [r3, #24]
		pdata->bitResolution = 10;
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	220a      	movs	r2, #10
 800188a:	769a      	strb	r2, [r3, #26]
		pdata->maxInputValue = (uint32_t)pow(2, pdata->bitResolution);
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	7e9b      	ldrb	r3, [r3, #26]
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fddb 	bl	800044c <__aeabi_ui2d>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	ec43 2b11 	vmov	d1, r2, r3
 800189e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80018d8 <dac_MCP4811EP_create+0xa8>
 80018a2:	f008 fb3b 	bl	8009f1c <pow>
 80018a6:	ec53 2b10 	vmov	r2, r3, d0
 80018aa:	4610      	mov	r0, r2
 80018ac:	4619      	mov	r1, r3
 80018ae:	f7ff f91f 	bl	8000af0 <__aeabi_d2uiz>
 80018b2:	4602      	mov	r2, r0
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	629a      	str	r2, [r3, #40]	; 0x28
		dac.data = pdata;
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	61bb      	str	r3, [r7, #24]
	}
	return dac;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	461a      	mov	r2, r3
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018c8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	3720      	adds	r7, #32
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	f3af 8000 	nop.w
 80018d8:	00000000 	.word	0x00000000
 80018dc:	40000000 	.word	0x40000000
 80018e0:	20000014 	.word	0x20000014

080018e4 <spi_select>:

static void spi_select(dac_t* self)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
			self->data->portCS,
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 80018f0:	6858      	ldr	r0, [r3, #4]
			self->data->pinCS,
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 80018f6:	891b      	ldrh	r3, [r3, #8]
 80018f8:	2200      	movs	r2, #0
 80018fa:	4619      	mov	r1, r3
 80018fc:	f004 ff3e 	bl	800677c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET
			);
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <spi_deselect>:

static void spi_deselect(dac_t* self)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
			self->data->portCS,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 8001914:	6858      	ldr	r0, [r3, #4]
			self->data->pinCS,
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(
 800191a:	891b      	ldrh	r3, [r3, #8]
 800191c:	2201      	movs	r2, #1
 800191e:	4619      	mov	r1, r3
 8001920:	f004 ff2c 	bl	800677c <HAL_GPIO_WritePin>
			GPIO_PIN_SET
			);
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <spi_hw_command>:

static void spi_hw_command(dac_t *self, uint8_t cmd)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(self->data->hspi, &cmd, 1, SPI_TIMEOUT);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	6818      	ldr	r0, [r3, #0]
 800193e:	1cf9      	adds	r1, r7, #3
 8001940:	230a      	movs	r3, #10
 8001942:	2201      	movs	r2, #1
 8001944:	f006 f8c3 	bl	8007ace <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(self->data->hspi) != HAL_SPI_STATE_READY)
 8001948:	bf00      	nop
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f006 fcc7 	bl	80082e4 <HAL_SPI_GetState>
 8001956:	4603      	mov	r3, r0
 8001958:	2b01      	cmp	r3, #1
 800195a:	d1f6      	bne.n	800194a <spi_hw_command+0x1e>
		;
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <screen_init>:
 */

#include "screen.h"

void screen_init(screen_t* self)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
	self->vtable_->init(self);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	4798      	blx	r3
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <screen_draw>:

void screen_draw(screen_t* self)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	self->vtable_->draw(self);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	4798      	blx	r3
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <screen_update>:

void screen_update(screen_t* self)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
	self->vtable_->update(self);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	4798      	blx	r3
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <init_>:
};

static struct screen_data_t data;

static void init_(screen_t* self)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	memset(&data, 0, sizeof(data));
 80019bc:	2250      	movs	r2, #80	; 0x50
 80019be:	2100      	movs	r1, #0
 80019c0:	4813      	ldr	r0, [pc, #76]	; (8001a10 <init_+0x5c>)
 80019c2:	f008 fa59 	bl	8009e78 <memset>

	self->data->adcDRValueCurr = 0;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6859      	ldr	r1, [r3, #4]
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	self->data->adcDRValuePrev = 0;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6859      	ldr	r1, [r3, #4]
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	self->data->adcHVValueCurr = 0;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6859      	ldr	r1, [r3, #4]
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	self->data->adcHVValuePrev = 0;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6859      	ldr	r1, [r3, #4]
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000108 	.word	0x20000108
 8001a14:	00000000 	.word	0x00000000

08001a18 <update_>:

static void update_(screen_t* self)
{
 8001a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af02      	add	r7, sp, #8
 8001a20:	6078      	str	r0, [r7, #4]

	self->data->adcDRValueCurr = adc_get_cnt(&task.adcDoseRate);
 8001a22:	4891      	ldr	r0, [pc, #580]	; (8001c68 <update_+0x250>)
 8001a24:	f7ff faa4 	bl	8000f70 <adc_get_cnt>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4692      	mov	sl, r2
 8001a32:	468b      	mov	fp, r1
 8001a34:	e9c3 ab02 	strd	sl, fp, [r3, #8]
	self->data->adcHVValueCurr = adc_get_cnt(&task.adcHV);
 8001a38:	488c      	ldr	r0, [pc, #560]	; (8001c6c <update_+0x254>)
 8001a3a:	f7ff fa99 	bl	8000f70 <adc_get_cnt>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2100      	movs	r1, #0
 8001a46:	4690      	mov	r8, r2
 8001a48:	4689      	mov	r9, r1
 8001a4a:	e9c3 8906 	strd	r8, r9, [r3, #24]
	self->data->adcPRValueCurr = adc_get_cnt(&task.adcPressure);
 8001a4e:	4888      	ldr	r0, [pc, #544]	; (8001c70 <update_+0x258>)
 8001a50:	f7ff fa8e 	bl	8000f70 <adc_get_cnt>
 8001a54:	4602      	mov	r2, r0
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4614      	mov	r4, r2
 8001a5e:	460d      	mov	r5, r1
 8001a60:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28

	self->data->adcDRAverValueCurr = adc_monitor_get_average_signal_value(&task.adcDRMonitor) * 1e+6;
 8001a64:	4883      	ldr	r0, [pc, #524]	; (8001c74 <update_+0x25c>)
 8001a66:	f7ff fdca 	bl	80015fe <adc_monitor_get_average_signal_value>
 8001a6a:	ec51 0b10 	vmov	r0, r1, d0
 8001a6e:	a37c      	add	r3, pc, #496	; (adr r3, 8001c60 <update_+0x248>)
 8001a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a74:	f7fe fd64 	bl	8000540 <__aeabi_dmul>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685c      	ldr	r4, [r3, #4]
 8001a84:	f7ff f8bc 	bl	8000c00 <__aeabi_d2lz>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38

	if(self->data->adcPRValuePrev != self->data->adcPRValueCurr)
	{
	}*/

	ssd1306_Fill(Black);
 8001a90:	2000      	movs	r0, #0
 8001a92:	f001 ff0d 	bl	80038b0 <ssd1306_Fill>

	// HEAD
	ssd1306_SetCursor(HEAD_X, HEAD_Y);
 8001a96:	2303      	movs	r3, #3
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f002 f851 	bl	8003b48 <ssd1306_SetCursor>
	ssd1306_WriteInt(self->data->counter++,*TEXT_FONT, White);//("________________", *TEXT_FONT, White);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	1c42      	adds	r2, r0, #1
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	4b71      	ldr	r3, [pc, #452]	; (8001c78 <update_+0x260>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	9200      	str	r2, [sp, #0]
 8001ab8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aba:	f002 f88f 	bl	8003bdc <ssd1306_WriteInt>

	// DR
	ssd1306_SetCursor(DR_DESC_X, DR_DESC_Y);
 8001abe:	2303      	movs	r3, #3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	221a      	movs	r2, #26
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f002 f83d 	bl	8003b48 <ssd1306_SetCursor>
	ssd1306_WriteString("DR:", *TEXT_FONT, White);
 8001ace:	4b6a      	ldr	r3, [pc, #424]	; (8001c78 <update_+0x260>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	9200      	str	r2, [sp, #0]
 8001ad6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ad8:	4868      	ldr	r0, [pc, #416]	; (8001c7c <update_+0x264>)
 8001ada:	f002 f80f 	bl	8003afc <ssd1306_WriteString>
	ssd1306_SetCursor(DR_VAL_X, DR_VAL_Y);
 8001ade:	231e      	movs	r3, #30
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	221a      	movs	r2, #26
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f002 f82d 	bl	8003b48 <ssd1306_SetCursor>
	//ssd1306_WriteInt((int)adc_get_vout(&task.adcDoseRate) * 1e+6, *TEXT_FONT, White);
	ssd1306_WriteInt(adc_get_cnt(&task.adcDoseRate), *TEXT_FONT, White);
 8001aee:	485e      	ldr	r0, [pc, #376]	; (8001c68 <update_+0x250>)
 8001af0:	f7ff fa3e 	bl	8000f70 <adc_get_cnt>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4618      	mov	r0, r3
 8001af8:	4b5f      	ldr	r3, [pc, #380]	; (8001c78 <update_+0x260>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2201      	movs	r2, #1
 8001afe:	9200      	str	r2, [sp, #0]
 8001b00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b02:	f002 f86b 	bl	8003bdc <ssd1306_WriteInt>
	ssd1306_SetCursor(DR_UNIT_X, DR_UNIT_Y);
 8001b06:	235a      	movs	r3, #90	; 0x5a
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	221a      	movs	r2, #26
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f002 f819 	bl	8003b48 <ssd1306_SetCursor>
	ssd1306_WriteString("uV", *TEXT_FONT, White);
 8001b16:	4b58      	ldr	r3, [pc, #352]	; (8001c78 <update_+0x260>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	9200      	str	r2, [sp, #0]
 8001b1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b20:	4857      	ldr	r0, [pc, #348]	; (8001c80 <update_+0x268>)
 8001b22:	f001 ffeb 	bl	8003afc <ssd1306_WriteString>

	// HV
	ssd1306_SetCursor(HV_DESC_X, HV_DESC_Y);
 8001b26:	2303      	movs	r3, #3
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2228      	movs	r2, #40	; 0x28
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f002 f809 	bl	8003b48 <ssd1306_SetCursor>
	ssd1306_WriteString("HV:", *TEXT_FONT, White);
 8001b36:	4b50      	ldr	r3, [pc, #320]	; (8001c78 <update_+0x260>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	9200      	str	r2, [sp, #0]
 8001b3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b40:	4850      	ldr	r0, [pc, #320]	; (8001c84 <update_+0x26c>)
 8001b42:	f001 ffdb 	bl	8003afc <ssd1306_WriteString>
	ssd1306_SetCursor(HV_VAL_X, HV_VAL_Y);
 8001b46:	231e      	movs	r3, #30
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2228      	movs	r2, #40	; 0x28
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f001 fff9 	bl	8003b48 <ssd1306_SetCursor>
	ssd1306_WriteInt((int)(hv_get_output_voltage_V(&task.hv_system)), *TEXT_FONT, White);
 8001b56:	484c      	ldr	r0, [pc, #304]	; (8001c88 <update_+0x270>)
 8001b58:	f000 fe9c 	bl	8002894 <hv_get_output_voltage_V>
 8001b5c:	ec53 2b10 	vmov	r2, r3, d0
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	f7fe ff9c 	bl	8000aa0 <__aeabi_d2iz>
 8001b68:	4b43      	ldr	r3, [pc, #268]	; (8001c78 <update_+0x260>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	9200      	str	r2, [sp, #0]
 8001b70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b72:	f002 f833 	bl	8003bdc <ssd1306_WriteInt>
	//ssd1306_WriteInt(adc_get_cnt(&task.adcHV), *TEXT_FONT, White);
	ssd1306_SetCursor(HV_UNIT_X, HV_UNIT_Y);
 8001b76:	235a      	movs	r3, #90	; 0x5a
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2228      	movs	r2, #40	; 0x28
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f001 ffe1 	bl	8003b48 <ssd1306_SetCursor>
	ssd1306_WriteString("V", *TEXT_FONT, White);
 8001b86:	4b3c      	ldr	r3, [pc, #240]	; (8001c78 <update_+0x260>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	9200      	str	r2, [sp, #0]
 8001b8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b90:	483e      	ldr	r0, [pc, #248]	; (8001c8c <update_+0x274>)
 8001b92:	f001 ffb3 	bl	8003afc <ssd1306_WriteString>

	// Pressure
	ssd1306_SetCursor(PRESS_DESC_X, PRESS_DESC_Y);
 8001b96:	2303      	movs	r3, #3
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2236      	movs	r2, #54	; 0x36
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f001 ffd1 	bl	8003b48 <ssd1306_SetCursor>
	ssd1306_WriteString("PR:", *TEXT_FONT, White);
 8001ba6:	4b34      	ldr	r3, [pc, #208]	; (8001c78 <update_+0x260>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2201      	movs	r2, #1
 8001bac:	9200      	str	r2, [sp, #0]
 8001bae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bb0:	4837      	ldr	r0, [pc, #220]	; (8001c90 <update_+0x278>)
 8001bb2:	f001 ffa3 	bl	8003afc <ssd1306_WriteString>
	ssd1306_SetCursor(PRESS_VAL_X, PRESS_VAL_Y);
 8001bb6:	231e      	movs	r3, #30
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2236      	movs	r2, #54	; 0x36
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f001 ffc1 	bl	8003b48 <ssd1306_SetCursor>
	ssd1306_WriteInt(pressure_sensor_get_Pa(&task.pressureSensor) / 1000, *TEXT_FONT, White);
 8001bc6:	4833      	ldr	r0, [pc, #204]	; (8001c94 <update_+0x27c>)
 8001bc8:	f001 fd9c 	bl	8003704 <pressure_sensor_get_Pa>
 8001bcc:	eeb0 7a40 	vmov.f32	s14, s0
 8001bd0:	eddf 6a31 	vldr	s13, [pc, #196]	; 8001c98 <update_+0x280>
 8001bd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bdc:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <update_+0x260>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2201      	movs	r2, #1
 8001be2:	9200      	str	r2, [sp, #0]
 8001be4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001be6:	ee17 0a90 	vmov	r0, s15
 8001bea:	f001 fff7 	bl	8003bdc <ssd1306_WriteInt>
	//ssd1306_WriteInt(adc_get_vout(&task.adcPressure), *TEXT_FONT, White);
	ssd1306_SetCursor(PRESS_UNIT_X, PRESS_UNIT_Y);
 8001bee:	235a      	movs	r3, #90	; 0x5a
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2236      	movs	r2, #54	; 0x36
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f001 ffa5 	bl	8003b48 <ssd1306_SetCursor>
	ssd1306_WriteString("kPa", *TEXT_FONT, White);
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <update_+0x260>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2201      	movs	r2, #1
 8001c04:	9200      	str	r2, [sp, #0]
 8001c06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c08:	4824      	ldr	r0, [pc, #144]	; (8001c9c <update_+0x284>)
 8001c0a:	f001 ff77 	bl	8003afc <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8001c0e:	f001 fe67 	bl	80038e0 <ssd1306_UpdateScreen>
	/*if(self->data->adcDRAverValuePrev != self->data->adcDRAverValueCurr)
	{
	} */


	self->data->adcDRValuePrev = self->data->adcDRValueCurr;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6851      	ldr	r1, [r2, #4]
 8001c1a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c1e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	self->data->adcHVValuePrev = self->data->adcHVValueCurr;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6851      	ldr	r1, [r2, #4]
 8001c2a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001c2e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	self->data->adcPRValuePrev = self->data->adcPRValueCurr;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6851      	ldr	r1, [r2, #4]
 8001c3a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001c3e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	self->data->adcDRAverValuePrev = self->data->adcDRAverValueCurr;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6851      	ldr	r1, [r2, #4]
 8001c4a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001c4e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c5c:	f3af 8000 	nop.w
 8001c60:	00000000 	.word	0x00000000
 8001c64:	412e8480 	.word	0x412e8480
 8001c68:	20000554 	.word	0x20000554
 8001c6c:	2000055c 	.word	0x2000055c
 8001c70:	20000564 	.word	0x20000564
 8001c74:	20000570 	.word	0x20000570
 8001c78:	20000020 	.word	0x20000020
 8001c7c:	0800aed8 	.word	0x0800aed8
 8001c80:	0800aedc 	.word	0x0800aedc
 8001c84:	0800aee0 	.word	0x0800aee0
 8001c88:	20000600 	.word	0x20000600
 8001c8c:	0800aee4 	.word	0x0800aee4
 8001c90:	0800aee8 	.word	0x0800aee8
 8001c94:	200005e8 	.word	0x200005e8
 8001c98:	447a0000 	.word	0x447a0000
 8001c9c:	0800aeec 	.word	0x0800aeec

08001ca0 <draw_>:

static void draw_(screen_t* self)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af02      	add	r7, sp, #8
 8001ca6:	6078      	str	r0, [r7, #4]
	ssd1306_Fill(Black);
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f001 fe01 	bl	80038b0 <ssd1306_Fill>
	ssd1306_SetCursor(3, 3);
 8001cae:	2103      	movs	r1, #3
 8001cb0:	2003      	movs	r0, #3
 8001cb2:	f001 ff49 	bl	8003b48 <ssd1306_SetCursor>
	ssd1306_WriteString("Loading...", *TEXT_FONT, White);
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <draw_+0x34>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	9200      	str	r2, [sp, #0]
 8001cbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cc0:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <draw_+0x38>)
 8001cc2:	f001 ff1b 	bl	8003afc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001cc6:	f001 fe0b 	bl	80038e0 <ssd1306_UpdateScreen>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000020 	.word	0x20000020
 8001cd8:	0800aef0 	.word	0x0800aef0

08001cdc <reg_keyboard_cbs_>:

static void reg_keyboard_cbs_(screen_t* self, keyboard_t* keyboard)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
	if(keyboard)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d002      	beq.n	8001cf2 <reg_keyboard_cbs_+0x16>
	{
		keyboard_reset_cbs(keyboard);
 8001cec:	6838      	ldr	r0, [r7, #0]
 8001cee:	f000 feee 	bl	8002ace <keyboard_reset_cbs>
	}
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <screen_1_instance>:
	&methods,
	&data
};

screen_t* screen_1_instance()
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
	if(!initialized)
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <screen_1_instance+0x20>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d105      	bne.n	8001d14 <screen_1_instance+0x18>
	{
		screen_init(&single_screen);
 8001d08:	4805      	ldr	r0, [pc, #20]	; (8001d20 <screen_1_instance+0x24>)
 8001d0a:	f7ff fe2c 	bl	8001966 <screen_init>
		initialized = 1;
 8001d0e:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <screen_1_instance+0x20>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	701a      	strb	r2, [r3, #0]
	}
	return &single_screen;
 8001d14:	4b02      	ldr	r3, [pc, #8]	; (8001d20 <screen_1_instance+0x24>)
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000106 	.word	0x20000106
 8001d20:	20000034 	.word	0x20000034

08001d24 <flash_data_erase_sector>:

#define FLASH_DATA_SECTOR FLASH_SECTOR_11 /* Sector  0x080E0000 - 0x080FFFFF */
#define FLASH_DATA_BASE_ADDR 0x080E0000

static void flash_data_erase_sector()
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef FlashErase;
	uint32_t sectorError = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	603b      	str	r3, [r7, #0]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d2e:	b672      	cpsid	i
}
 8001d30:	bf00      	nop

	__disable_irq();
	HAL_FLASH_Unlock();
 8001d32:	f004 f8eb 	bl	8005f0c <HAL_FLASH_Unlock>

	FlashErase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
	FlashErase.NbSectors = 1;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	613b      	str	r3, [r7, #16]
	FlashErase.Sector = FLASH_DATA_SECTOR;
 8001d3e:	230b      	movs	r3, #11
 8001d40:	60fb      	str	r3, [r7, #12]
	FlashErase.VoltageRange = VOLTAGE_RANGE_3;
 8001d42:	2302      	movs	r3, #2
 8001d44:	617b      	str	r3, [r7, #20]
	if (HAL_FLASHEx_Erase(&FlashErase, &sectorError) != HAL_OK)
 8001d46:	463a      	mov	r2, r7
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f004 fa3f 	bl	80061d0 <HAL_FLASHEx_Erase>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <flash_data_erase_sector+0x3c>
	{
		HAL_FLASH_Lock();
 8001d58:	f004 f8fa 	bl	8005f50 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8001d5c:	b662      	cpsie	i
}
 8001d5e:	bf00      	nop
        __enable_irq();
		//return HAL_ERROR;
	}
	HAL_FLASH_Lock();
 8001d60:	f004 f8f6 	bl	8005f50 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8001d64:	b662      	cpsie	i
}
 8001d66:	bf00      	nop
    __enable_irq();
}
 8001d68:	bf00      	nop
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <flash_data_write>:

void flash_data_write(flash_data_t data)
{
 8001d70:	b5b0      	push	{r4, r5, r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	463b      	mov	r3, r7
 8001d78:	e883 0003 	stmia.w	r3, {r0, r1}
	flash_data_erase_sector();
 8001d7c:	f7ff ffd2 	bl	8001d24 <flash_data_erase_sector>
  __ASM volatile ("cpsid i" : : : "memory");
 8001d80:	b672      	cpsid	i
}
 8001d82:	bf00      	nop

	HAL_StatusTypeDef status;
	__disable_irq();
	status = HAL_FLASH_Unlock();
 8001d84:	f004 f8c2 	bl	8005f0c <HAL_FLASH_Unlock>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	75fb      	strb	r3, [r7, #23]

	uint32_t addr = FLASH_DATA_BASE_ADDR;
 8001d8c:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <flash_data_write+0x74>)
 8001d8e:	613b      	str	r3, [r7, #16]
	uint8_t* ptr = (uint8_t*)&data;
 8001d90:	463b      	mov	r3, r7
 8001d92:	60bb      	str	r3, [r7, #8]
	int i;
	for(i = 0; i < sizeof(flash_data_t); i++)
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	e018      	b.n	8001dcc <flash_data_write+0x5c>
	{
		status += HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr, ptr[i]);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	4413      	add	r3, r2
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2200      	movs	r2, #0
 8001da6:	461c      	mov	r4, r3
 8001da8:	4615      	mov	r5, r2
 8001daa:	4622      	mov	r2, r4
 8001dac:	462b      	mov	r3, r5
 8001dae:	6939      	ldr	r1, [r7, #16]
 8001db0:	2000      	movs	r0, #0
 8001db2:	f004 f857 	bl	8005e64 <HAL_FLASH_Program>
 8001db6:	4603      	mov	r3, r0
 8001db8:	461a      	mov	r2, r3
 8001dba:	7dfb      	ldrb	r3, [r7, #23]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	75fb      	strb	r3, [r7, #23]
		addr++;
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	613b      	str	r3, [r7, #16]
	for(i = 0; i < sizeof(flash_data_t); i++)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2b07      	cmp	r3, #7
 8001dd0:	d9e3      	bls.n	8001d9a <flash_data_write+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001dd2:	b662      	cpsie	i
}
 8001dd4:	bf00      	nop
	}
	__enable_irq();
	HAL_FLASH_Lock();
 8001dd6:	f004 f8bb 	bl	8005f50 <HAL_FLASH_Lock>
}
 8001dda:	bf00      	nop
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bdb0      	pop	{r4, r5, r7, pc}
 8001de2:	bf00      	nop
 8001de4:	080e0000 	.word	0x080e0000

08001de8 <flash_data_read>:

flash_data_t flash_data_read()
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	flash_data_t data;
	memset((void*)&data, 0, sizeof(data));
 8001df0:	f107 030c 	add.w	r3, r7, #12
 8001df4:	2208      	movs	r2, #8
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f008 f83d 	bl	8009e78 <memset>

	uint8_t* ptr = (uint8_t*)&data;
 8001dfe:	f107 030c 	add.w	r3, r7, #12
 8001e02:	617b      	str	r3, [r7, #20]
	uint32_t addr = FLASH_DATA_BASE_ADDR;
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <flash_data_read+0x5c>)
 8001e06:	61fb      	str	r3, [r7, #28]
	int i;
	for(i = 0; i < sizeof(flash_data_t); i++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]
 8001e0c:	e00c      	b.n	8001e28 <flash_data_read+0x40>
	{
		*(ptr + i) = *(__IO uint8_t*)addr;
 8001e0e:	69fa      	ldr	r2, [r7, #28]
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	6979      	ldr	r1, [r7, #20]
 8001e14:	440b      	add	r3, r1
 8001e16:	7812      	ldrb	r2, [r2, #0]
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	701a      	strb	r2, [r3, #0]
		addr++;
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < sizeof(flash_data_t); i++)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	3301      	adds	r3, #1
 8001e26:	61bb      	str	r3, [r7, #24]
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	2b07      	cmp	r3, #7
 8001e2c:	d9ef      	bls.n	8001e0e <flash_data_read+0x26>
	}
	return data;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	461a      	mov	r2, r3
 8001e32:	f107 030c 	add.w	r3, r7, #12
 8001e36:	cb03      	ldmia	r3!, {r0, r1}
 8001e38:	6010      	str	r0, [r2, #0]
 8001e3a:	6051      	str	r1, [r2, #4]
}
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	3720      	adds	r7, #32
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	080e0000 	.word	0x080e0000

08001e48 <general_task_init>:
#define TIMER_FREQUENCY (uint32_t)84000000

//extern TIM_HandleTypeDef htim7;

void general_task_init(general_task_t* self)
{
 8001e48:	b590      	push	{r4, r7, lr}
 8001e4a:	b0ad      	sub	sp, #180	; 0xb4
 8001e4c:	af08      	add	r7, sp, #32
 8001e4e:	60f8      	str	r0, [r7, #12]
	HAL_Delay(100);
 8001e50:	2064      	movs	r0, #100	; 0x64
 8001e52:	f003 fe0d 	bl	8005a70 <HAL_Delay>
	memset(self, 0, sizeof(*self));
 8001e56:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f008 f80b 	bl	8009e78 <memset>

	self->loopPeriod_ms = 1;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2201      	movs	r2, #1
 8001e66:	801a      	strh	r2, [r3, #0]
	self->freqIT = TIMER_FREQUENCY / (adctim->Init.Period + 1) / (adctim->Init.Prescaler + 1);
 8001e68:	4bc7      	ldr	r3, [pc, #796]	; (8002188 <general_task_init+0x340>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	4ac6      	ldr	r2, [pc, #792]	; (800218c <general_task_init+0x344>)
 8001e72:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e76:	4bc4      	ldr	r3, [pc, #784]	; (8002188 <general_task_init+0x340>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	805a      	strh	r2, [r3, #2]
	self->adcNoCnt = 0;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8

	/* ADC */
	uint32_t adcWaitCycles = 120;
 8001e90:	2378      	movs	r3, #120	; 0x78
 8001e92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	self->adcDoseRate = adc_AD7791_create(&hspi3, ADC_DOSE_SPI_CS_GPIO_Port, ADC_DOSE_SPI_CS_Pin, Vref_dose, FR_word, MR_word, adcWaitCycles);
	adc_init(&self->adcDoseRate);
	HAL_Delay(5);
#endif
#if ADS1246_EN
	double Vref_dose = 2.5;
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	4bbd      	ldr	r3, [pc, #756]	; (8002190 <general_task_init+0x348>)
 8001e9c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

	uint8_t PGA_dose = 0b000;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t DR_dose = 0b0010; // was 0b0010
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	uint8_t SYS0_dose = DR_dose | (PGA_dose << 4);
 8001eac:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	b25a      	sxtb	r2, r3
 8001eb4:	f997 307e 	ldrsb.w	r3, [r7, #126]	; 0x7e
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	b25b      	sxtb	r3, r3
 8001ebc:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	self->adcDoseRate = adc_ADS1246_create(&hspi3,
 8001ec0:	68fc      	ldr	r4, [r7, #12]
 8001ec2:	4638      	mov	r0, r7
 8001ec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ec8:	9307      	str	r3, [sp, #28]
 8001eca:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8001ece:	9306      	str	r3, [sp, #24]
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	9305      	str	r3, [sp, #20]
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	9304      	str	r3, [sp, #16]
 8001ed8:	2300      	movs	r3, #0
 8001eda:	9303      	str	r3, [sp, #12]
 8001edc:	2300      	movs	r3, #0
 8001ede:	9302      	str	r3, [sp, #8]
 8001ee0:	2310      	movs	r3, #16
 8001ee2:	9301      	str	r3, [sp, #4]
 8001ee4:	4bab      	ldr	r3, [pc, #684]	; (8002194 <general_task_init+0x34c>)
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	ed97 0b20 	vldr	d0, [r7, #128]	; 0x80
 8001eec:	2304      	movs	r3, #4
 8001eee:	4aaa      	ldr	r2, [pc, #680]	; (8002198 <general_task_init+0x350>)
 8001ef0:	49aa      	ldr	r1, [pc, #680]	; (800219c <general_task_init+0x354>)
 8001ef2:	f7ff f9d5 	bl	80012a0 <adc_ADS1246_create>
 8001ef6:	f504 73de 	add.w	r3, r4, #444	; 0x1bc
 8001efa:	463a      	mov	r2, r7
 8001efc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f00:	e883 0003 	stmia.w	r3, {r0, r1}
			Vref_dose,
			adcWaitCycles
			);
#endif

	adc_init(&self->adcDoseRate);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff f814 	bl	8000f38 <adc_init>
	HAL_Delay(5);
 8001f10:	2005      	movs	r0, #5
 8001f12:	f003 fdad 	bl	8005a70 <HAL_Delay>


	/* ADC HV - bipolar */
	//self->adcHV = adc_AD7791_create(&hspi1, ADC_HV_SPI_CS_GPIO_Port, ADC_HV_SPI_CS_Pin, Vref_hv, FR_word, MR_word, adcWaitCycles + 10);

	double Vref_hv = 2.5;
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	4b9d      	ldr	r3, [pc, #628]	; (8002190 <general_task_init+0x348>)
 8001f1c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	uint8_t PGA_hv = 0b000;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t DR_hv = 0b0010; // was 0b0010
 8001f26:	2302      	movs	r3, #2
 8001f28:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	uint8_t SYS0_hv = DR_hv | (PGA_hv << 4);
 8001f2c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	b25a      	sxtb	r2, r3
 8001f34:	f997 306e 	ldrsb.w	r3, [r7, #110]	; 0x6e
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	b25b      	sxtb	r3, r3
 8001f3c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	self->adcHV = adc_ADS1246_create(&hspi1,
 8001f40:	68fc      	ldr	r4, [r7, #12]
 8001f42:	4638      	mov	r0, r7
 8001f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f48:	9307      	str	r3, [sp, #28]
 8001f4a:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001f4e:	9306      	str	r3, [sp, #24]
 8001f50:	2300      	movs	r3, #0
 8001f52:	9305      	str	r3, [sp, #20]
 8001f54:	2300      	movs	r3, #0
 8001f56:	9304      	str	r3, [sp, #16]
 8001f58:	2300      	movs	r3, #0
 8001f5a:	9303      	str	r3, [sp, #12]
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	9302      	str	r3, [sp, #8]
 8001f60:	2320      	movs	r3, #32
 8001f62:	9301      	str	r3, [sp, #4]
 8001f64:	4b8b      	ldr	r3, [pc, #556]	; (8002194 <general_task_init+0x34c>)
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	ed97 0b1c 	vldr	d0, [r7, #112]	; 0x70
 8001f6c:	2308      	movs	r3, #8
 8001f6e:	4a8a      	ldr	r2, [pc, #552]	; (8002198 <general_task_init+0x350>)
 8001f70:	498b      	ldr	r1, [pc, #556]	; (80021a0 <general_task_init+0x358>)
 8001f72:	f7ff f995 	bl	80012a0 <adc_ADS1246_create>
 8001f76:	f504 73e2 	add.w	r3, r4, #452	; 0x1c4
 8001f7a:	463a      	mov	r2, r7
 8001f7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f80:	e883 0003 	stmia.w	r3, {r0, r1}
			Vref_hv,
			SYS0_hv,
			adcWaitCycles
			);

	adc_init(&self->adcHV);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe ffd4 	bl	8000f38 <adc_init>
	HAL_Delay(5);
 8001f90:	2005      	movs	r0, #5
 8001f92:	f003 fd6d 	bl	8005a70 <HAL_Delay>

	/* ADC Pressure - unipolar */
	// Filter register mode
	double Vref_press = 2.5;
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	4b7d      	ldr	r3, [pc, #500]	; (8002190 <general_task_init+0x348>)
 8001f9c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint8_t PGA_press = 0b000;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t DR_press = 0b0010; // was 0b0010
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t SYS0_press = DR_press | (PGA_press << 4);
 8001fac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	b25a      	sxtb	r2, r3
 8001fb4:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	b25b      	sxtb	r3, r3
 8001fbc:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	self->adcPressure= adc_ADS1246_create(&hspi1,
 8001fc0:	68fc      	ldr	r4, [r7, #12]
 8001fc2:	4638      	mov	r0, r7
 8001fc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fc8:	9307      	str	r3, [sp, #28]
 8001fca:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001fce:	9306      	str	r3, [sp, #24]
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	9305      	str	r3, [sp, #20]
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	9304      	str	r3, [sp, #16]
 8001fd8:	2300      	movs	r3, #0
 8001fda:	9303      	str	r3, [sp, #12]
 8001fdc:	2300      	movs	r3, #0
 8001fde:	9302      	str	r3, [sp, #8]
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	9301      	str	r3, [sp, #4]
 8001fe4:	4b6b      	ldr	r3, [pc, #428]	; (8002194 <general_task_init+0x34c>)
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001fec:	2302      	movs	r3, #2
 8001fee:	4a6a      	ldr	r2, [pc, #424]	; (8002198 <general_task_init+0x350>)
 8001ff0:	496b      	ldr	r1, [pc, #428]	; (80021a0 <general_task_init+0x358>)
 8001ff2:	f7ff f955 	bl	80012a0 <adc_ADS1246_create>
 8001ff6:	f504 73e6 	add.w	r3, r4, #460	; 0x1cc
 8001ffa:	463a      	mov	r2, r7
 8001ffc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002000:	e883 0003 	stmia.w	r3, {r0, r1}
			Vref_press,
			SYS0_press,
			adcWaitCycles
			);

	adc_init(&self->adcPressure);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe ff94 	bl	8000f38 <adc_init>

	/* ADC Dose Rate monitor */
	adc_monitor_init(&self->adcDRMonitor, &self->adcDoseRate, USR_ADC_TIM_IRQn);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800201c:	2236      	movs	r2, #54	; 0x36
 800201e:	4619      	mov	r1, r3
 8002020:	f7ff fa18 	bl	8001454 <adc_monitor_init>

	/* ADC HV monitor */
	adc_monitor_init(&self->adcHVMonitor, &self->adcHV, USR_ADC_TIM_IRQn);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f503 7000 	add.w	r0, r3, #512	; 0x200
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8002030:	2236      	movs	r2, #54	; 0x36
 8002032:	4619      	mov	r1, r3
 8002034:	f7ff fa0e 	bl	8001454 <adc_monitor_init>

	/* ADC Pressure monitor */
	adc_monitor_init(&self->adcPRMonitor, &self->adcPressure, USR_ADC_TIM_IRQn);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f503 700a 	add.w	r0, r3, #552	; 0x228
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8002044:	2236      	movs	r2, #54	; 0x36
 8002046:	4619      	mov	r1, r3
 8002048:	f7ff fa04 	bl	8001454 <adc_monitor_init>

	/* Pressure sensor */
	float pressureOffsetPa = -1e+5;
 800204c:	4b55      	ldr	r3, [pc, #340]	; (80021a4 <general_task_init+0x35c>)
 800204e:	65bb      	str	r3, [r7, #88]	; 0x58
	float PaPerV = 20 * 1e+5 / 2.5;
 8002050:	4b55      	ldr	r3, [pc, #340]	; (80021a8 <general_task_init+0x360>)
 8002052:	657b      	str	r3, [r7, #84]	; 0x54

	pressure_sensor_init(&self->pressureSensor, pressureOffsetPa, PaPerV, &self->adcPressure);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f503 7214 	add.w	r2, r3, #592	; 0x250
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8002060:	4619      	mov	r1, r3
 8002062:	edd7 0a15 	vldr	s1, [r7, #84]	; 0x54
 8002066:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 800206a:	4610      	mov	r0, r2
 800206c:	f001 fb2e 	bl	80036cc <pressure_sensor_init>

	/* DAC HV Input */
	//self->dacInputHV = dac_emulator_create(); // emulator
	self->dacInputHV = dac_MCP4811EP_create(&hspi2,
 8002070:	68fc      	ldr	r4, [r7, #12]
 8002072:	4638      	mov	r0, r7
 8002074:	2300      	movs	r3, #0
 8002076:	9303      	str	r3, [sp, #12]
 8002078:	2300      	movs	r3, #0
 800207a:	9302      	str	r3, [sp, #8]
 800207c:	2300      	movs	r3, #0
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	2300      	movs	r3, #0
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	2302      	movs	r3, #2
 8002086:	4a49      	ldr	r2, [pc, #292]	; (80021ac <general_task_init+0x364>)
 8002088:	4949      	ldr	r1, [pc, #292]	; (80021b0 <general_task_init+0x368>)
 800208a:	f7ff fbd1 	bl	8001830 <dac_MCP4811EP_create>
 800208e:	f504 7317 	add.w	r3, r4, #604	; 0x25c
 8002092:	463a      	mov	r2, r7
 8002094:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002098:	e883 0003 	stmia.w	r3, {r0, r1}
			DAC_SPI_CS_GPIO_Port, DAC_SPI_CS_Pin,
			NULL, 0,
			NULL, 0
			); // real

	dac_init(&self->dacInputHV);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fb18 	bl	80016d8 <dac_init>

	/* HV System */
	hv_init(&self->hv_system,
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f503 701a 	add.w	r0, r3, #616	; 0x268
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f503 7117 	add.w	r1, r3, #604	; 0x25c
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f503 72e2 	add.w	r2, r3, #452	; 0x1c4
 80020ba:	2308      	movs	r3, #8
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	ed9f 2b2c 	vldr	d2, [pc, #176]	; 8002170 <general_task_init+0x328>
 80020c2:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 8002178 <general_task_init+0x330>
 80020c6:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 8002180 <general_task_init+0x338>
 80020ca:	4b3a      	ldr	r3, [pc, #232]	; (80021b4 <general_task_init+0x36c>)
 80020cc:	f000 fb4c 	bl	8002768 <hv_init>
			500. / 1024, // Vmax = 500, 922  = 1024 * 0.9 // 922
 			0.535 / 500, //1. / 233.645, // 43k/10M //0.002,
			500
			);

	hv_set_output_voltage_adc_offset(&self->hv_system, Vref_hv / 2);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f503 741a 	add.w	r4, r3, #616	; 0x268
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020de:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80020e2:	f7fe fb57 	bl	8000794 <__aeabi_ddiv>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	ec43 2b17 	vmov	d7, r2, r3
 80020ee:	eeb0 0a47 	vmov.f32	s0, s14
 80020f2:	eef0 0a67 	vmov.f32	s1, s15
 80020f6:	4620      	mov	r0, r4
 80020f8:	f000 fbf0 	bl	80028dc <hv_set_output_voltage_adc_offset>

	/* Select range pin */
	set_adc_dose_range_select_pin(SENSOR_RANGE_SELECT_GPIO_Port, SENSOR_RANGE_SELECT_Pin);
 80020fc:	2104      	movs	r1, #4
 80020fe:	482d      	ldr	r0, [pc, #180]	; (80021b4 <general_task_init+0x36c>)
 8002100:	f7ff faa8 	bl	8001654 <set_adc_dose_range_select_pin>
	select_broad_adc_dose_range();
 8002104:	f7ff fabc 	bl	8001680 <select_broad_adc_dose_range>


	HAL_Delay(5);
 8002108:	2005      	movs	r0, #5
 800210a:	f003 fcb1 	bl	8005a70 <HAL_Delay>
	/* Ethernet */	// default values
	uint8_t defIP[4] = {169, 254, 206, 12};
 800210e:	4b2a      	ldr	r3, [pc, #168]	; (80021b8 <general_task_init+0x370>)
 8002110:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t defInputPort = 22252;
 8002112:	f245 63ec 	movw	r3, #22252	; 0x56ec
 8002116:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	uint16_t defOutputPort = 22251;
 800211a:	f245 63eb 	movw	r3, #22251	; 0x56eb
 800211e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50


	// actual values
	memcpy(self->ip, defIP, 4);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f203 23c9 	addw	r3, r3, #713	; 0x2c9
 8002128:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800212a:	601a      	str	r2, [r3, #0]
	self->inputPort = defInputPort;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8002132:	f8a3 22ce 	strh.w	r2, [r3, #718]	; 0x2ce
	self->outputPort = defOutputPort;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800213c:	f8a3 22d0 	strh.w	r2, [r3, #720]	; 0x2d0

	// reading from flash
	flash_data_t fdata = flash_data_read();
 8002140:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff fe4f 	bl	8001de8 <flash_data_read>
	if(fdata.input_port != 0xFFFF && fdata.input_port != 0x0000)
 800214a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800214e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002152:	4293      	cmp	r3, r2
 8002154:	d032      	beq.n	80021bc <general_task_init+0x374>
 8002156:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800215a:	2b00      	cmp	r3, #0
 800215c:	d02e      	beq.n	80021bc <general_task_init+0x374>
	{
		self->inputPort = fdata.input_port;
 800215e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f8a3 22ce 	strh.w	r2, [r3, #718]	; 0x2ce
 8002168:	e028      	b.n	80021bc <general_task_init+0x374>
 800216a:	bf00      	nop
 800216c:	f3af 8000 	nop.w
 8002170:	00000000 	.word	0x00000000
 8002174:	407f4000 	.word	0x407f4000
 8002178:	c06e19b9 	.word	0xc06e19b9
 800217c:	3f5187e7 	.word	0x3f5187e7
 8002180:	00000000 	.word	0x00000000
 8002184:	3fdf4000 	.word	0x3fdf4000
 8002188:	2000003c 	.word	0x2000003c
 800218c:	0501bd00 	.word	0x0501bd00
 8002190:	40040000 	.word	0x40040000
 8002194:	40021000 	.word	0x40021000
 8002198:	40020000 	.word	0x40020000
 800219c:	200002b0 	.word	0x200002b0
 80021a0:	20000200 	.word	0x20000200
 80021a4:	c7c35000 	.word	0xc7c35000
 80021a8:	49435000 	.word	0x49435000
 80021ac:	40020c00 	.word	0x40020c00
 80021b0:	20000258 	.word	0x20000258
 80021b4:	40020800 	.word	0x40020800
 80021b8:	0ccefea9 	.word	0x0ccefea9
	}
	if(fdata.output_port != 0xFFFF && fdata.output_port != 0x0000)
 80021bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80021c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d008      	beq.n	80021da <general_task_init+0x392>
 80021c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d004      	beq.n	80021da <general_task_init+0x392>
	{
		self->outputPort = fdata.output_port;
 80021d0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f8a3 22d0 	strh.w	r2, [r3, #720]	; 0x2d0
	}
	if(*(uint32_t*)fdata.ip != 0xFFFFFFFF && *(uint32_t*)fdata.ip != 0x00000000)
 80021da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e4:	d009      	beq.n	80021fa <general_task_init+0x3b2>
 80021e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d004      	beq.n	80021fa <general_task_init+0x3b2>
	{
		memcpy(self->ip, fdata.ip, 4);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f203 23c9 	addw	r3, r3, #713	; 0x2c9
 80021f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021f8:	601a      	str	r2, [r3, #0]
	}


	wiz_NetInfo gWIZNETINFO = {
 80021fa:	4a43      	ldr	r2, [pc, #268]	; (8002308 <general_task_init+0x4c0>)
 80021fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002200:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002204:	6018      	str	r0, [r3, #0]
 8002206:	3304      	adds	r3, #4
 8002208:	8019      	strh	r1, [r3, #0]
			.mac 	= {0xed, 0xa2, 0xb3, 0xff, 0xfe, 0xa9},
			.ip 	= {self->ip[0], self->ip[1], self->ip[2], self->ip[3]}, // 169.254.206.240
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 32c9 	ldrb.w	r3, [r3, #713]	; 0x2c9
	wiz_NetInfo gWIZNETINFO = {
 8002210:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			.ip 	= {self->ip[0], self->ip[1], self->ip[2], self->ip[3]}, // 169.254.206.240
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
	wiz_NetInfo gWIZNETINFO = {
 800221a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			.ip 	= {self->ip[0], self->ip[1], self->ip[2], self->ip[3]}, // 169.254.206.240
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
	wiz_NetInfo gWIZNETINFO = {
 8002224:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			.ip 	= {self->ip[0], self->ip[1], self->ip[2], self->ip[3]}, // 169.254.206.240
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
	wiz_NetInfo gWIZNETINFO = {
 800222e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002232:	4a36      	ldr	r2, [pc, #216]	; (800230c <general_task_init+0x4c4>)
 8002234:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8002238:	6810      	ldr	r0, [r2, #0]
 800223a:	6018      	str	r0, [r3, #0]
			.sn 	= {255, 255, 255, 0},
			.gw		= {self->ip[0], self->ip[1], self->ip[2], self->ip[3]}, // {169, 254, 206, 1},
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f893 32c9 	ldrb.w	r3, [r3, #713]	; 0x2c9
	wiz_NetInfo gWIZNETINFO = {
 8002242:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
			.gw		= {self->ip[0], self->ip[1], self->ip[2], self->ip[3]}, // {169, 254, 206, 1},
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
	wiz_NetInfo gWIZNETINFO = {
 800224c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			.gw		= {self->ip[0], self->ip[1], self->ip[2], self->ip[3]}, // {169, 254, 206, 1},
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
	wiz_NetInfo gWIZNETINFO = {
 8002256:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			.gw		= {self->ip[0], self->ip[1], self->ip[2], self->ip[3]}, // {169, 254, 206, 1},
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
	wiz_NetInfo gWIZNETINFO = {
 8002260:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8002264:	4a2a      	ldr	r2, [pc, #168]	; (8002310 <general_task_init+0x4c8>)
 8002266:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 800226a:	6810      	ldr	r0, [r2, #0]
 800226c:	6018      	str	r0, [r3, #0]
 800226e:	2301      	movs	r3, #1
 8002270:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			.gw		= {169, 254, 206, 240}, // {169, 254, 206, 1},
			.dns 	= {0, 0, 0, 0},
			.dhcp 	= NETINFO_STATIC
	}; */

	W5500_SetAddress(gWIZNETINFO);
 8002274:	466b      	mov	r3, sp
 8002276:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800227a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800227e:	6018      	str	r0, [r3, #0]
 8002280:	3304      	adds	r3, #4
 8002282:	8019      	strh	r1, [r3, #0]
 8002284:	3302      	adds	r3, #2
 8002286:	0c0a      	lsrs	r2, r1, #16
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800228e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002290:	f003 faee 	bl	8005870 <W5500_SetAddress>
	W5500_Reboot();
 8002294:	f003 fb08 	bl	80058a8 <W5500_Reboot>

	/* TCP server sockets */
	tcp_output_stream_init_data_t tcpOutputInit;
	tcpOutputInit.sn = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	773b      	strb	r3, [r7, #28]
	tcpOutputInit.port = self->outputPort;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f8b3 32d0 	ldrh.w	r3, [r3, #720]	; 0x2d0
 80022a2:	83fb      	strh	r3, [r7, #30]
	//tcpOutputInit.port = 11151;
	tcpOutputInit.flag = SF_IO_NONBLOCK;
 80022a4:	2301      	movs	r3, #1
 80022a6:	f887 3020 	strb.w	r3, [r7, #32]
	tcpOutputInit.hinput = &self->tcpInput;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	33a0      	adds	r3, #160	; 0xa0
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
	tcpOutputInit.closeSocketCounterMax = 50;
 80022b0:	2332      	movs	r3, #50	; 0x32
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28

	tcp_output_stream_init(&self->tcpOutput, tcpOutputInit);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1d18      	adds	r0, r3, #4
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	f107 031c 	add.w	r3, r7, #28
 80022c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022c2:	f001 fead 	bl	8004020 <tcp_output_stream_init>

	tcp_input_stream_init_data_t tcpInputInit;
	tcpInputInit.sn = 1;
 80022c6:	2301      	movs	r3, #1
 80022c8:	743b      	strb	r3, [r7, #16]
	tcpInputInit.port = self->inputPort;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f8b3 32ce 	ldrh.w	r3, [r3, #718]	; 0x2ce
 80022d0:	827b      	strh	r3, [r7, #18]
	//tcpOutputInit.port = 11152;
	tcpInputInit.flag = SF_IO_NONBLOCK;
 80022d2:	2301      	movs	r3, #1
 80022d4:	753b      	strb	r3, [r7, #20]
	tcpInputInit.w5500RebootCounterMax = 50;
 80022d6:	2332      	movs	r3, #50	; 0x32
 80022d8:	61bb      	str	r3, [r7, #24]
	tcp_input_stream_init(&self->tcpInput, tcpInputInit);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 80022e0:	f107 0310 	add.w	r3, r7, #16
 80022e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022e6:	f001 fd53 	bl	8003d90 <tcp_input_stream_init>

	self->cycleCounter = 0;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
	self->cycleCounterMax = self->loopPeriod_ms;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
}
 80022fe:	bf00      	nop
 8002300:	3794      	adds	r7, #148	; 0x94
 8002302:	46bd      	mov	sp, r7
 8002304:	bd90      	pop	{r4, r7, pc}
 8002306:	bf00      	nop
 8002308:	0800aefc 	.word	0x0800aefc
 800230c:	0800af04 	.word	0x0800af04
 8002310:	0800af08 	.word	0x0800af08

08002314 <general_task_setup>:

void general_task_setup(general_task_t* self)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af02      	add	r7, sp, #8
 800231a:	6078      	str	r0, [r7, #4]
	//ILI9341_Init();

	// init display
	ssd1306_Init();
 800231c:	f001 fa5e 	bl	80037dc <ssd1306_Init>
	general_task_switch_screen(self, screen_1_instance());
 8002320:	f7ff fcec 	bl	8001cfc <screen_1_instance>
 8002324:	4603      	mov	r3, r0
 8002326:	4619      	mov	r1, r3
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 fa0d 	bl	8002748 <general_task_switch_screen>
	tcp_input_stream_enable_handler(&self->tcpInput);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	33a0      	adds	r3, #160	; 0xa0
 8002332:	4618      	mov	r0, r3
 8002334:	f001 fdb5 	bl	8003ea2 <tcp_input_stream_enable_handler>
	/* HV ADC Start Calibration (offset measurement) */
	//adc_monitor_start_measurement(&self->adcHVMonitor, self->freqIT * 2 / 3);

	ssd1306_Init();
 8002338:	f001 fa50 	bl	80037dc <ssd1306_Init>
	ssd1306_Fill(Black);
 800233c:	2000      	movs	r0, #0
 800233e:	f001 fab7 	bl	80038b0 <ssd1306_Fill>
	ssd1306_SetCursor(3, 3);
 8002342:	2103      	movs	r1, #3
 8002344:	2003      	movs	r0, #3
 8002346:	f001 fbff 	bl	8003b48 <ssd1306_SetCursor>
	ssd1306_WriteString("Loading...", Font_7x10, White);
 800234a:	4b4e      	ldr	r3, [pc, #312]	; (8002484 <general_task_setup+0x170>)
 800234c:	2201      	movs	r2, #1
 800234e:	9200      	str	r2, [sp, #0]
 8002350:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002352:	484d      	ldr	r0, [pc, #308]	; (8002488 <general_task_setup+0x174>)
 8002354:	f001 fbd2 	bl	8003afc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002358:	f001 fac2 	bl	80038e0 <ssd1306_UpdateScreen>

	// ip display
	ssd1306_Fill(Black);
 800235c:	2000      	movs	r0, #0
 800235e:	f001 faa7 	bl	80038b0 <ssd1306_Fill>

	ssd1306_SetCursor(3, 20);
 8002362:	2114      	movs	r1, #20
 8002364:	2003      	movs	r0, #3
 8002366:	f001 fbef 	bl	8003b48 <ssd1306_SetCursor>
	ssd1306_WriteString("ip:", Font_7x10, White);
 800236a:	4b46      	ldr	r3, [pc, #280]	; (8002484 <general_task_setup+0x170>)
 800236c:	2201      	movs	r2, #1
 800236e:	9200      	str	r2, [sp, #0]
 8002370:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002372:	4846      	ldr	r0, [pc, #280]	; (800248c <general_task_setup+0x178>)
 8002374:	f001 fbc2 	bl	8003afc <ssd1306_WriteString>

	ssd1306_SetCursor(25, 20);
 8002378:	2114      	movs	r1, #20
 800237a:	2019      	movs	r0, #25
 800237c:	f001 fbe4 	bl	8003b48 <ssd1306_SetCursor>
	ssd1306_WriteInt(self->ip[0], Font_7x10, White);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 32c9 	ldrb.w	r3, [r3, #713]	; 0x2c9
 8002386:	4618      	mov	r0, r3
 8002388:	4b3e      	ldr	r3, [pc, #248]	; (8002484 <general_task_setup+0x170>)
 800238a:	2201      	movs	r2, #1
 800238c:	9200      	str	r2, [sp, #0]
 800238e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002390:	f001 fc24 	bl	8003bdc <ssd1306_WriteInt>
	ssd1306_SetCursor(25 + 25*1, 20);
 8002394:	2114      	movs	r1, #20
 8002396:	2032      	movs	r0, #50	; 0x32
 8002398:	f001 fbd6 	bl	8003b48 <ssd1306_SetCursor>
	ssd1306_WriteInt(self->ip[1], Font_7x10, White);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
 80023a2:	4618      	mov	r0, r3
 80023a4:	4b37      	ldr	r3, [pc, #220]	; (8002484 <general_task_setup+0x170>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	9200      	str	r2, [sp, #0]
 80023aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023ac:	f001 fc16 	bl	8003bdc <ssd1306_WriteInt>
	ssd1306_SetCursor(25 + 25*2, 20);
 80023b0:	2114      	movs	r1, #20
 80023b2:	204b      	movs	r0, #75	; 0x4b
 80023b4:	f001 fbc8 	bl	8003b48 <ssd1306_SetCursor>
	ssd1306_WriteInt(self->ip[2], Font_7x10, White);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
 80023be:	4618      	mov	r0, r3
 80023c0:	4b30      	ldr	r3, [pc, #192]	; (8002484 <general_task_setup+0x170>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	9200      	str	r2, [sp, #0]
 80023c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023c8:	f001 fc08 	bl	8003bdc <ssd1306_WriteInt>
	ssd1306_SetCursor(25 + 25*3, 20);
 80023cc:	2114      	movs	r1, #20
 80023ce:	2064      	movs	r0, #100	; 0x64
 80023d0:	f001 fbba 	bl	8003b48 <ssd1306_SetCursor>
	ssd1306_WriteInt(self->ip[3], Font_7x10, White);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 80023da:	4618      	mov	r0, r3
 80023dc:	4b29      	ldr	r3, [pc, #164]	; (8002484 <general_task_setup+0x170>)
 80023de:	2201      	movs	r2, #1
 80023e0:	9200      	str	r2, [sp, #0]
 80023e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023e4:	f001 fbfa 	bl	8003bdc <ssd1306_WriteInt>

	ssd1306_SetCursor(3 , 35);
 80023e8:	2123      	movs	r1, #35	; 0x23
 80023ea:	2003      	movs	r0, #3
 80023ec:	f001 fbac 	bl	8003b48 <ssd1306_SetCursor>
	ssd1306_WriteString("out port:", Font_7x10, White);
 80023f0:	4b24      	ldr	r3, [pc, #144]	; (8002484 <general_task_setup+0x170>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	9200      	str	r2, [sp, #0]
 80023f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023f8:	4825      	ldr	r0, [pc, #148]	; (8002490 <general_task_setup+0x17c>)
 80023fa:	f001 fb7f 	bl	8003afc <ssd1306_WriteString>
	ssd1306_SetCursor(70 , 35);
 80023fe:	2123      	movs	r1, #35	; 0x23
 8002400:	2046      	movs	r0, #70	; 0x46
 8002402:	f001 fba1 	bl	8003b48 <ssd1306_SetCursor>
	ssd1306_WriteInt(self->outputPort, Font_7x10, White);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f8b3 32d0 	ldrh.w	r3, [r3, #720]	; 0x2d0
 800240c:	4618      	mov	r0, r3
 800240e:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <general_task_setup+0x170>)
 8002410:	2201      	movs	r2, #1
 8002412:	9200      	str	r2, [sp, #0]
 8002414:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002416:	f001 fbe1 	bl	8003bdc <ssd1306_WriteInt>

	ssd1306_SetCursor(3 , 50);
 800241a:	2132      	movs	r1, #50	; 0x32
 800241c:	2003      	movs	r0, #3
 800241e:	f001 fb93 	bl	8003b48 <ssd1306_SetCursor>
	ssd1306_WriteString("in port: ", Font_7x10, White);
 8002422:	4b18      	ldr	r3, [pc, #96]	; (8002484 <general_task_setup+0x170>)
 8002424:	2201      	movs	r2, #1
 8002426:	9200      	str	r2, [sp, #0]
 8002428:	cb0e      	ldmia	r3, {r1, r2, r3}
 800242a:	481a      	ldr	r0, [pc, #104]	; (8002494 <general_task_setup+0x180>)
 800242c:	f001 fb66 	bl	8003afc <ssd1306_WriteString>
	ssd1306_SetCursor(70, 50);
 8002430:	2132      	movs	r1, #50	; 0x32
 8002432:	2046      	movs	r0, #70	; 0x46
 8002434:	f001 fb88 	bl	8003b48 <ssd1306_SetCursor>
	ssd1306_WriteInt(self->inputPort, Font_7x10, White);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f8b3 32ce 	ldrh.w	r3, [r3, #718]	; 0x2ce
 800243e:	4618      	mov	r0, r3
 8002440:	4b10      	ldr	r3, [pc, #64]	; (8002484 <general_task_setup+0x170>)
 8002442:	2201      	movs	r2, #1
 8002444:	9200      	str	r2, [sp, #0]
 8002446:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002448:	f001 fbc8 	bl	8003bdc <ssd1306_WriteInt>
	ssd1306_UpdateScreen();
 800244c:	f001 fa48 	bl	80038e0 <ssd1306_UpdateScreen>


	// start receiving
	memset(self->uart_buff, 0, UART_BUFF_SIZE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002456:	2209      	movs	r2, #9
 8002458:	2100      	movs	r1, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f007 fd0c 	bl	8009e78 <memset>
	HAL_UART_Receive_IT(conf_uart, self->uart_buff, UART_BUFF_SIZE);
 8002460:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <general_task_setup+0x184>)
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800246a:	2209      	movs	r2, #9
 800246c:	4619      	mov	r1, r3
 800246e:	f006 fc78 	bl	8008d62 <HAL_UART_Receive_IT>

	HAL_Delay(1000);
 8002472:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002476:	f003 fafb 	bl	8005a70 <HAL_Delay>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	0800b6c4 	.word	0x0800b6c4
 8002488:	0800af0c 	.word	0x0800af0c
 800248c:	0800af18 	.word	0x0800af18
 8002490:	0800af1c 	.word	0x0800af1c
 8002494:	0800af28 	.word	0x0800af28
 8002498:	20000040 	.word	0x20000040
 800249c:	00000000 	.word	0x00000000

080024a0 <general_task_loop>:

void general_task_loop(general_task_t* self)
{
 80024a0:	b5b0      	push	{r4, r5, r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
	keyboard_routine(&self->keyboard);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	33f4      	adds	r3, #244	; 0xf4
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 fae9 	bl	8002a84 <keyboard_routine>
	if(!self->cycleCounter)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f040 80a1 	bne.w	8002600 <general_task_loop+0x160>
	{
		self->cycleCounter = self->cycleCounterMax;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f8d3 22bc 	ldr.w	r2, [r3, #700]	; 0x2bc
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

		// Output message
		HAL_NVIC_DisableIRQ(USR_ADC_TIM_IRQn);
 80024ca:	2036      	movs	r0, #54	; 0x36
 80024cc:	f003 fc1d 	bl	8005d0a <HAL_NVIC_DisableIRQ>
		//tx_message_set_adc_dr_uV(&self->txMessage, (int32_t)(adc_get_vout(&self->adcDoseRate) * 1e+6));
		tx_message_set_adc_dr_uV(&self->txMessage, (int32_t)(adc_get_cnt(&self->adcDoseRate)));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe fd47 	bl	8000f70 <adc_get_cnt>
 80024e2:	4603      	mov	r3, r0
 80024e4:	4619      	mov	r1, r3
 80024e6:	4620      	mov	r0, r4
 80024e8:	f001 fed1 	bl	800428e <tx_message_set_adc_dr_uV>
		tx_message_set_adc_dr_average_uV(&self->txMessage, (int32_t)(adc_monitor_get_average_signal_value(&self->adcDRMonitor) * 1e+6));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff f880 	bl	80015fe <adc_monitor_get_average_signal_value>
 80024fe:	ec51 0b10 	vmov	r0, r1, d0
 8002502:	a348      	add	r3, pc, #288	; (adr r3, 8002624 <general_task_loop+0x184>)
 8002504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002508:	f7fe f81a 	bl	8000540 <__aeabi_dmul>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4610      	mov	r0, r2
 8002512:	4619      	mov	r1, r3
 8002514:	f7fe fac4 	bl	8000aa0 <__aeabi_d2iz>
 8002518:	4603      	mov	r3, r0
 800251a:	4619      	mov	r1, r3
 800251c:	4620      	mov	r0, r4
 800251e:	f001 fec5 	bl	80042ac <tx_message_set_adc_dr_average_uV>
		tx_message_set_hv_out_mV(&self->txMessage, (int32_t)(hv_get_output_voltage_V(&self->hv_system) * 1e+3)); // hv offset!!!
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800252e:	4618      	mov	r0, r3
 8002530:	f000 f9b0 	bl	8002894 <hv_get_output_voltage_V>
 8002534:	ec51 0b10 	vmov	r0, r1, d0
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	4b38      	ldr	r3, [pc, #224]	; (8002620 <general_task_loop+0x180>)
 800253e:	f7fd ffff 	bl	8000540 <__aeabi_dmul>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4610      	mov	r0, r2
 8002548:	4619      	mov	r1, r3
 800254a:	f7fe faa9 	bl	8000aa0 <__aeabi_d2iz>
 800254e:	4603      	mov	r3, r0
 8002550:	4619      	mov	r1, r3
 8002552:	4620      	mov	r0, r4
 8002554:	f001 feb9 	bl	80042ca <tx_message_set_hv_out_mV>
		tx_message_set_press_out_Pa(&self->txMessage, pressure_sensor_get_Pa(&self->pressureSensor));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002564:	4618      	mov	r0, r3
 8002566:	f001 f8cd 	bl	8003704 <pressure_sensor_get_Pa>
 800256a:	eef0 7a40 	vmov.f32	s15, s0
 800256e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002572:	ee17 1a90 	vmov	r1, s15
 8002576:	4620      	mov	r0, r4
 8002578:	f001 feb6 	bl	80042e8 <tx_message_set_press_out_Pa>
		tx_message_set_adc_dr_measure_state(&self->txMessage, adc_monitor_get_measurement_state(&self->adcDRMonitor));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff f856 	bl	800163a <adc_monitor_get_measurement_state>
 800258e:	4603      	mov	r3, r0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	4619      	mov	r1, r3
 8002594:	4620      	mov	r0, r4
 8002596:	f001 feb6 	bl	8004306 <tx_message_set_adc_dr_measure_state>
		tx_message_set_adc_dr_measure_time(&self->txMessage, adc_monitor_get_measurement_cycle_no(&self->adcDRMonitor)); // cycle, not time!!!!
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff f83b 	bl	8001622 <adc_monitor_get_measurement_cycle_no>
 80025ac:	4603      	mov	r3, r0
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	4619      	mov	r1, r3
 80025b2:	4620      	mov	r0, r4
 80025b4:	f001 feb7 	bl	8004326 <tx_message_set_adc_dr_measure_time>
		HAL_NVIC_EnableIRQ(USR_ADC_TIM_IRQn);
 80025b8:	2036      	movs	r0, #54	; 0x36
 80025ba:	f003 fb98 	bl	8005cee <HAL_NVIC_EnableIRQ>

		tcp_output_stream_set_message(&self->tcpOutput, tx_message_get(&self->txMessage), tx_message_size());
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	1d1c      	adds	r4, r3, #4
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	33dc      	adds	r3, #220	; 0xdc
 80025c6:	4618      	mov	r0, r3
 80025c8:	f001 febd 	bl	8004346 <tx_message_get>
 80025cc:	4605      	mov	r5, r0
 80025ce:	f001 fec5 	bl	800435c <tx_message_size>
 80025d2:	4603      	mov	r3, r0
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	461a      	mov	r2, r3
 80025d8:	4629      	mov	r1, r5
 80025da:	4620      	mov	r0, r4
 80025dc:	f001 fd56 	bl	800408c <tcp_output_stream_set_message>
		tcp_output_stream_routine(&self->tcpOutput);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3304      	adds	r3, #4
 80025e4:	4618      	mov	r0, r3
 80025e6:	f001 fd7e 	bl	80040e6 <tcp_output_stream_routine>

		// Input message
		tcp_input_stream_routine(&self->tcpInput);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	33a0      	adds	r3, #160	; 0xa0
 80025ee:	4618      	mov	r0, r3
 80025f0:	f001 fc12 	bl	8003e18 <tcp_input_stream_routine>

		// Update screen
		screen_update(self->currentScreen);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff f9cd 	bl	800199a <screen_update>

		// debug!!!
		//general_task_timer_interrupt(self);
	}

	self->cycleCounter--;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002606:	1e5a      	subs	r2, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
	HAL_Delay(1);
 800260e:	2001      	movs	r0, #1
 8002610:	f003 fa2e 	bl	8005a70 <HAL_Delay>
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bdb0      	pop	{r4, r5, r7, pc}
 800261c:	f3af 8000 	nop.w
 8002620:	408f4000 	.word	0x408f4000
 8002624:	00000000 	.word	0x00000000
 8002628:	412e8480 	.word	0x412e8480

0800262c <general_task_timer_interrupt>:

void general_task_timer_interrupt(general_task_t* self)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
	int nextStateCode = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]
	switch(self->adcNoCnt)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800263e:	2b02      	cmp	r3, #2
 8002640:	d041      	beq.n	80026c6 <general_task_timer_interrupt+0x9a>
 8002642:	2b02      	cmp	r3, #2
 8002644:	dc57      	bgt.n	80026f6 <general_task_timer_interrupt+0xca>
 8002646:	2b00      	cmp	r3, #0
 8002648:	d002      	beq.n	8002650 <general_task_timer_interrupt+0x24>
 800264a:	2b01      	cmp	r3, #1
 800264c:	d020      	beq.n	8002690 <general_task_timer_interrupt+0x64>
			self->adcNoCnt = 0;
		}

		break;
	}
}
 800264e:	e052      	b.n	80026f6 <general_task_timer_interrupt+0xca>
		adc_update(&self->adcDoseRate, (void*)&nextStateCode);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002656:	f107 020c 	add.w	r2, r7, #12
 800265a:	4611      	mov	r1, r2
 800265c:	4618      	mov	r0, r3
 800265e:	f7fe fc78 	bl	8000f52 <adc_update>
		if(nextStateCode == ADS1246_MEASURE) // current state is ADS1246_CHECK_xDRDY
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2b04      	cmp	r3, #4
 8002666:	d10b      	bne.n	8002680 <general_task_timer_interrupt+0x54>
			tx_message_increase_id(&self->txMessage);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	33dc      	adds	r3, #220	; 0xdc
 800266c:	4618      	mov	r0, r3
 800266e:	f001 fdfb 	bl	8004268 <tx_message_increase_id>
			adc_monitor_update(&self->adcDRMonitor);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002678:	4618      	mov	r0, r3
 800267a:	f7fe ff05 	bl	8001488 <adc_monitor_update>
		break;
 800267e:	e03a      	b.n	80026f6 <general_task_timer_interrupt+0xca>
			self->adcNoCnt++;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		break;
 800268e:	e032      	b.n	80026f6 <general_task_timer_interrupt+0xca>
		adc_update(&self->adcHV, (void*)&nextStateCode);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8002696:	f107 020c 	add.w	r2, r7, #12
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f7fe fc58 	bl	8000f52 <adc_update>
		if(nextStateCode == ADS1246_MEASURE) // current state is ADS1246_CHECK_xDRDY
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d106      	bne.n	80026b6 <general_task_timer_interrupt+0x8a>
			adc_monitor_update(&self->adcHVMonitor);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe feea 	bl	8001488 <adc_monitor_update>
		break;
 80026b4:	e01f      	b.n	80026f6 <general_task_timer_interrupt+0xca>
			self->adcNoCnt++;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		break;
 80026c4:	e017      	b.n	80026f6 <general_task_timer_interrupt+0xca>
		adc_update(&self->adcPressure, (void*)&nextStateCode);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 80026cc:	f107 020c 	add.w	r2, r7, #12
 80026d0:	4611      	mov	r1, r2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe fc3d 	bl	8000f52 <adc_update>
		if(nextStateCode == ADS1246_MEASURE) // current state is ADS1246_CHECK_xDRDY
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d106      	bne.n	80026ec <general_task_timer_interrupt+0xc0>
			adc_monitor_update(&self->adcPRMonitor);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe fecf 	bl	8001488 <adc_monitor_update>
		break;
 80026ea:	e003      	b.n	80026f4 <general_task_timer_interrupt+0xc8>
			self->adcNoCnt = 0;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		break;
 80026f4:	bf00      	nop
}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <general_task_uart_recv_callback>:

void general_task_uart_recv_callback(general_task_t* self)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
	uart_handle_rx_message(conf_uart, self->uart_buff);
 8002708:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <general_task_uart_recv_callback+0x44>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002712:	4619      	mov	r1, r3
 8002714:	4610      	mov	r0, r2
 8002716:	f001 fe29 	bl	800436c <uart_handle_rx_message>
	memset(self->uart_buff, 0, UART_BUFF_SIZE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002720:	2209      	movs	r2, #9
 8002722:	2100      	movs	r1, #0
 8002724:	4618      	mov	r0, r3
 8002726:	f007 fba7 	bl	8009e78 <memset>
	HAL_UART_Receive_IT(conf_uart, self->uart_buff, UART_BUFF_SIZE);
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <general_task_uart_recv_callback+0x44>)
 800272c:	6818      	ldr	r0, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002734:	2209      	movs	r2, #9
 8002736:	4619      	mov	r1, r3
 8002738:	f006 fb13 	bl	8008d62 <HAL_UART_Receive_IT>
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20000040 	.word	0x20000040

08002748 <general_task_switch_screen>:


void general_task_switch_screen(general_task_t* self, screen_t* screen)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
	//screen_register_keyboard(screen, &self->keyboard);
	screen_draw(screen);
 8002752:	6838      	ldr	r0, [r7, #0]
 8002754:	f7ff f914 	bl	8001980 <screen_draw>
	self->currentScreen = screen;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <hv_init>:
		uint16_t pinSelectHV,
		double VoutStep_V,
		double VoutGainADC,
		double VoutMax
		)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08a      	sub	sp, #40	; 0x28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6278      	str	r0, [r7, #36]	; 0x24
 8002770:	6239      	str	r1, [r7, #32]
 8002772:	61fa      	str	r2, [r7, #28]
 8002774:	61bb      	str	r3, [r7, #24]
 8002776:	ed87 0b04 	vstr	d0, [r7, #16]
 800277a:	ed87 1b02 	vstr	d1, [r7, #8]
 800277e:	ed87 2b00 	vstr	d2, [r7]
	memset(self, 0, sizeof(*self));
 8002782:	2230      	movs	r2, #48	; 0x30
 8002784:	2100      	movs	r1, #0
 8002786:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002788:	f007 fb76 	bl	8009e78 <memset>
	self->inputDAC 		= inputDAC;
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	6a3a      	ldr	r2, [r7, #32]
 8002790:	601a      	str	r2, [r3, #0]
	self->outputADC 	= outputADC;
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	605a      	str	r2, [r3, #4]
	self->portSelectHV 	= portSelectHV;
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	609a      	str	r2, [r3, #8]
	self->pinSelectHV 	= pinSelectHV;
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80027a2:	819a      	strh	r2, [r3, #12]
	self->VoutStep_V 	= VoutStep_V;
 80027a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80027aa:	e9c1 2304 	strd	r2, r3, [r1, #16]
	self->VoutGainADC 	= VoutGainADC;
 80027ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027b4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	self->VoutMax		= VoutMax;
 80027b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027be:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	hv_select_positive_source(self);
 80027c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027c4:	f000 f821 	bl	800280a <hv_select_positive_source>
	hv_set_output_voltage_adc_offset(self, 0);
 80027c8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80027e0 <hv_init+0x78>
 80027cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027ce:	f000 f885 	bl	80028dc <hv_set_output_voltage_adc_offset>
}
 80027d2:	bf00      	nop
 80027d4:	3728      	adds	r7, #40	; 0x28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	f3af 8000 	nop.w
	...

080027e8 <hv_select_negative_source>:

void hv_select_negative_source(high_voltage_system_t* self)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(self->portSelectHV, self->pinSelectHV, HV_NEGATIVE_SOURCE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6898      	ldr	r0, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	899b      	ldrh	r3, [r3, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	4619      	mov	r1, r3
 80027fe:	f003 ffbd 	bl	800677c <HAL_GPIO_WritePin>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <hv_select_positive_source>:

void hv_select_positive_source(high_voltage_system_t* self)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(self->portSelectHV, self->pinSelectHV, HV_POSITIVE_SOURCE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6898      	ldr	r0, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	899b      	ldrh	r3, [r3, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	4619      	mov	r1, r3
 8002820:	f003 ffac 	bl	800677c <HAL_GPIO_WritePin>
}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <hv_set_abs_output_voltage_V>:

void hv_set_abs_output_voltage_V(high_voltage_system_t* self, double Vout)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	ed87 0b00 	vstr	d0, [r7]
	uint32_t digital = (uint32_t)round(fmin(Vout, self->VoutMax) / self->VoutStep_V);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800283e:	eeb0 1a47 	vmov.f32	s2, s14
 8002842:	eef0 1a67 	vmov.f32	s3, s15
 8002846:	ed97 0b00 	vldr	d0, [r7]
 800284a:	f007 fbe2 	bl	800a012 <fmin>
 800284e:	ec51 0b10 	vmov	r0, r1, d0
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002858:	f7fd ff9c 	bl	8000794 <__aeabi_ddiv>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	ec43 2b17 	vmov	d7, r2, r3
 8002864:	eeb0 0a47 	vmov.f32	s0, s14
 8002868:	eef0 0a67 	vmov.f32	s1, s15
 800286c:	f007 fc22 	bl	800a0b4 <round>
 8002870:	ec53 2b10 	vmov	r2, r3, d0
 8002874:	4610      	mov	r0, r2
 8002876:	4619      	mov	r1, r3
 8002878:	f7fe f93a 	bl	8000af0 <__aeabi_d2uiz>
 800287c:	4603      	mov	r3, r0
 800287e:	617b      	str	r3, [r7, #20]
	dac_set_input_value(self->inputDAC, digital);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6979      	ldr	r1, [r7, #20]
 8002886:	4618      	mov	r0, r3
 8002888:	f7fe ff33 	bl	80016f2 <dac_set_input_value>
}
 800288c:	bf00      	nop
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <hv_get_output_voltage_V>:

double hv_get_output_voltage_V(high_voltage_system_t* self)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
	return (adc_get_vout(self->outputADC) - self->VoutOffsetADC_V) / self->VoutGainADC;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fe fb73 	bl	8000f8c <adc_get_vout>
 80028a6:	ec51 0b10 	vmov	r0, r1, d0
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80028b0:	f7fd fc8e 	bl	80001d0 <__aeabi_dsub>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4610      	mov	r0, r2
 80028ba:	4619      	mov	r1, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80028c2:	f7fd ff67 	bl	8000794 <__aeabi_ddiv>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	ec43 2b17 	vmov	d7, r2, r3
}
 80028ce:	eeb0 0a47 	vmov.f32	s0, s14
 80028d2:	eef0 0a67 	vmov.f32	s1, s15
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <hv_set_output_voltage_adc_offset>:

void hv_set_output_voltage_adc_offset(high_voltage_system_t* self, double offset_V)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	ed87 0b00 	vstr	d0, [r7]
	self->VoutOffsetADC_V = offset_V;
 80028e8:	68f9      	ldr	r1, [r7, #12]
 80028ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028ee:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80028f2:	bf00      	nop
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <empty_cb_>:
#include "button.h"
#include <string.h>
//#include "button_callbacks.h"

static uint8_t button_is_pressed(button_t* self);
static void empty_cb_(void) {};
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0
 8002902:	bf00      	nop
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <button_reset_cbs>:
{
	self->release_cb = callback;
}

void button_reset_cbs(button_t* self)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
	self->short_press_cb 	= empty_cb_;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a07      	ldr	r2, [pc, #28]	; (8002934 <button_reset_cbs+0x28>)
 8002918:	615a      	str	r2, [r3, #20]
	self->long_press_cb 	= empty_cb_;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a05      	ldr	r2, [pc, #20]	; (8002934 <button_reset_cbs+0x28>)
 800291e:	619a      	str	r2, [r3, #24]
	self->release_cb		= empty_cb_;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a04      	ldr	r2, [pc, #16]	; (8002934 <button_reset_cbs+0x28>)
 8002924:	61da      	str	r2, [r3, #28]
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	080028ff 	.word	0x080028ff

08002938 <button_routine>:

void button_routine(button_t* self)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	self->currentButtonState = button_is_pressed(self);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f887 	bl	8002a54 <button_is_pressed>
 8002946:	4603      	mov	r3, r0
 8002948:	461a      	mov	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	749a      	strb	r2, [r3, #18]
	switch(self->state)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	7b1b      	ldrb	r3, [r3, #12]
 8002952:	2b06      	cmp	r3, #6
 8002954:	d876      	bhi.n	8002a44 <button_routine+0x10c>
 8002956:	a201      	add	r2, pc, #4	; (adr r2, 800295c <button_routine+0x24>)
 8002958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295c:	08002979 	.word	0x08002979
 8002960:	0800299d 	.word	0x0800299d
 8002964:	080029cd 	.word	0x080029cd
 8002968:	080029db 	.word	0x080029db
 800296c:	08002a0b 	.word	0x08002a0b
 8002970:	08002a19 	.word	0x08002a19
 8002974:	08002a29 	.word	0x08002a29
	{
	case BUTTON_NOT_ACTIVE:
		self->filteringCounter = 0;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	81da      	strh	r2, [r3, #14]
		self->longDelayCounter = 0;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	821a      	strh	r2, [r3, #16]
		if(self->currentButtonState && !self->previousButtonState)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	7c9b      	ldrb	r3, [r3, #18]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d054      	beq.n	8002a36 <button_routine+0xfe>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	7cdb      	ldrb	r3, [r3, #19]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d150      	bne.n	8002a36 <button_routine+0xfe>
		{
			self->state = BUTTON_FILTERING;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	731a      	strb	r2, [r3, #12]
		}
		break;
 800299a:	e04c      	b.n	8002a36 <button_routine+0xfe>
	case BUTTON_FILTERING:
		if(self->currentButtonState)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	7c9b      	ldrb	r3, [r3, #18]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d006      	beq.n	80029b2 <button_routine+0x7a>
		{
			self->filteringCounter++;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	89db      	ldrh	r3, [r3, #14]
 80029a8:	3301      	adds	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	81da      	strh	r2, [r3, #14]
 80029b0:	e002      	b.n	80029b8 <button_routine+0x80>
		}
		else
		{
			self->state = BUTTON_NOT_ACTIVE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	731a      	strb	r2, [r3, #12]
		}
		if(self->filteringCounter >= self->initData.cyclesFiltering)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	89da      	ldrh	r2, [r3, #14]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	891b      	ldrh	r3, [r3, #8]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d33a      	bcc.n	8002a3a <button_routine+0x102>
		{
			self->state = BUTTON_SHORT_PRESS;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	731a      	strb	r2, [r3, #12]
		}
		break;
 80029ca:	e036      	b.n	8002a3a <button_routine+0x102>
	case BUTTON_SHORT_PRESS:
		self->short_press_cb();
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	4798      	blx	r3
		self->state = BUTTON_SHORT_HOLD;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2203      	movs	r2, #3
 80029d6:	731a      	strb	r2, [r3, #12]
		break;
 80029d8:	e034      	b.n	8002a44 <button_routine+0x10c>
	case BUTTON_SHORT_HOLD:
		if(self->currentButtonState)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	7c9b      	ldrb	r3, [r3, #18]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d006      	beq.n	80029f0 <button_routine+0xb8>
		{
			self->longDelayCounter++;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	8a1b      	ldrh	r3, [r3, #16]
 80029e6:	3301      	adds	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	821a      	strh	r2, [r3, #16]
 80029ee:	e002      	b.n	80029f6 <button_routine+0xbe>
		}
		else
		{
			self->state = BUTTON_RELEASE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2206      	movs	r2, #6
 80029f4:	731a      	strb	r2, [r3, #12]
		}

		if(self->longDelayCounter >= self->initData.cyclesLongDelay)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	8a1a      	ldrh	r2, [r3, #16]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	895b      	ldrh	r3, [r3, #10]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d31d      	bcc.n	8002a3e <button_routine+0x106>
		{
			self->state = BUTTON_LONG_PRESS;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2204      	movs	r2, #4
 8002a06:	731a      	strb	r2, [r3, #12]
		}
		break;
 8002a08:	e019      	b.n	8002a3e <button_routine+0x106>
	case BUTTON_LONG_PRESS:
		self->long_press_cb();
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	4798      	blx	r3
		self->state = BUTTON_LONG_HOLD;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2205      	movs	r2, #5
 8002a14:	731a      	strb	r2, [r3, #12]
		break;
 8002a16:	e015      	b.n	8002a44 <button_routine+0x10c>
	case BUTTON_LONG_HOLD:
		if(!self->currentButtonState)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	7c9b      	ldrb	r3, [r3, #18]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d110      	bne.n	8002a42 <button_routine+0x10a>
		{
			self->state = BUTTON_RELEASE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2206      	movs	r2, #6
 8002a24:	731a      	strb	r2, [r3, #12]
		}
		break;
 8002a26:	e00c      	b.n	8002a42 <button_routine+0x10a>
	case BUTTON_RELEASE:
		self->release_cb();
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	4798      	blx	r3
		self->state = BUTTON_NOT_ACTIVE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	731a      	strb	r2, [r3, #12]
		break;
 8002a34:	e006      	b.n	8002a44 <button_routine+0x10c>
		break;
 8002a36:	bf00      	nop
 8002a38:	e004      	b.n	8002a44 <button_routine+0x10c>
		break;
 8002a3a:	bf00      	nop
 8002a3c:	e002      	b.n	8002a44 <button_routine+0x10c>
		break;
 8002a3e:	bf00      	nop
 8002a40:	e000      	b.n	8002a44 <button_routine+0x10c>
		break;
 8002a42:	bf00      	nop
	}
	self->previousButtonState = self->currentButtonState;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	7c9a      	ldrb	r2, [r3, #18]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	74da      	strb	r2, [r3, #19]
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <button_is_pressed>:

static uint8_t button_is_pressed(button_t* self)
{
 8002a54:	b590      	push	{r4, r7, lr}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
	return self->initData.unpressedState != HAL_GPIO_ReadPin(self->initData.port, self->initData.pin);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	799c      	ldrb	r4, [r3, #6]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	889b      	ldrh	r3, [r3, #4]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	f003 fe6e 	bl	800674c <HAL_GPIO_ReadPin>
 8002a70:	4603      	mov	r3, r0
 8002a72:	429c      	cmp	r4, r3
 8002a74:	bf14      	ite	ne
 8002a76:	2301      	movne	r3, #1
 8002a78:	2300      	moveq	r3, #0
 8002a7a:	b2db      	uxtb	r3, r3
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd90      	pop	{r4, r7, pc}

08002a84 <keyboard_routine>:

#include "keyboard.h"
#include <string.h>

void keyboard_routine(keyboard_t* self)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
	button_routine(&self->up);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff ff52 	bl	8002938 <button_routine>
	button_routine(&self->down);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3320      	adds	r3, #32
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ff4d 	bl	8002938 <button_routine>
	button_routine(&self->ok);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3340      	adds	r3, #64	; 0x40
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff ff48 	bl	8002938 <button_routine>
	button_routine(&self->axisReset);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3360      	adds	r3, #96	; 0x60
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff43 	bl	8002938 <button_routine>
	button_routine(&self->step);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3380      	adds	r3, #128	; 0x80
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff ff3e 	bl	8002938 <button_routine>
	button_routine(&self->motion);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	33a0      	adds	r3, #160	; 0xa0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff ff39 	bl	8002938 <button_routine>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <keyboard_reset_cbs>:

void keyboard_reset_cbs(keyboard_t* self)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]

	button_reset_cbs(&self->up);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff ff17 	bl	800290c <button_reset_cbs>
	button_reset_cbs(&self->down);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3320      	adds	r3, #32
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff ff12 	bl	800290c <button_reset_cbs>
	button_reset_cbs(&self->ok);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3340      	adds	r3, #64	; 0x40
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff0d 	bl	800290c <button_reset_cbs>
	button_reset_cbs(&self->axisReset);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3360      	adds	r3, #96	; 0x60
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff ff08 	bl	800290c <button_reset_cbs>
	button_reset_cbs(&self->step);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3380      	adds	r3, #128	; 0x80
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff ff03 	bl	800290c <button_reset_cbs>
	button_reset_cbs(&self->motion);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	33a0      	adds	r3, #160	; 0xa0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fefe 	bl	800290c <button_reset_cbs>
}
 8002b10:	bf00      	nop
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
	if(huart == conf_uart)
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <HAL_UART_RxCpltCallback+0x20>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d102      	bne.n	8002b30 <HAL_UART_RxCpltCallback+0x18>
	{
		general_task_uart_recv_callback(&task);
 8002b2a:	4804      	ldr	r0, [pc, #16]	; (8002b3c <HAL_UART_RxCpltCallback+0x24>)
 8002b2c:	f7ff fde8 	bl	8002700 <general_task_uart_recv_callback>
	}
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20000040 	.word	0x20000040
 8002b3c:	20000398 	.word	0x20000398

08002b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b44:	f002 ff22 	bl	800598c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b48:	f000 f82a 	bl	8002ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b4c:	f000 f9ee 	bl	8002f2c <MX_GPIO_Init>
  MX_TIM6_Init();
 8002b50:	f000 f98e 	bl	8002e70 <MX_TIM6_Init>
  MX_SPI3_Init();
 8002b54:	f000 f956 	bl	8002e04 <MX_SPI3_Init>
  MX_SPI2_Init();
 8002b58:	f000 f91e 	bl	8002d98 <MX_SPI2_Init>
  MX_SPI1_Init();
 8002b5c:	f000 f8e6 	bl	8002d2c <MX_SPI1_Init>
  MX_I2C3_Init();
 8002b60:	f000 f8b6 	bl	8002cd0 <MX_I2C3_Init>
  MX_I2C1_Init();
 8002b64:	f000 f886 	bl	8002c74 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002b68:	f000 f9b6 	bl	8002ed8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_DisableIRQ(USR_ADC_TIM_IRQn);
 8002b6c:	2036      	movs	r0, #54	; 0x36
 8002b6e:	f003 f8cc 	bl	8005d0a <HAL_NVIC_DisableIRQ>

  // general task init
  general_task_init(&task);
 8002b72:	4809      	ldr	r0, [pc, #36]	; (8002b98 <main+0x58>)
 8002b74:	f7ff f968 	bl	8001e48 <general_task_init>
  general_task_setup(&task);
 8002b78:	4807      	ldr	r0, [pc, #28]	; (8002b98 <main+0x58>)
 8002b7a:	f7ff fbcb 	bl	8002314 <general_task_setup>

  HAL_NVIC_EnableIRQ(USR_ADC_TIM_IRQn);
 8002b7e:	2036      	movs	r0, #54	; 0x36
 8002b80:	f003 f8b5 	bl	8005cee <HAL_NVIC_EnableIRQ>

  HAL_TIM_Base_Start_IT(adctim);
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <main+0x5c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f005 fd4b 	bl	8008624 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 general_task_loop(&task);
 8002b8e:	4802      	ldr	r0, [pc, #8]	; (8002b98 <main+0x58>)
 8002b90:	f7ff fc86 	bl	80024a0 <general_task_loop>
 8002b94:	e7fb      	b.n	8002b8e <main+0x4e>
 8002b96:	bf00      	nop
 8002b98:	20000398 	.word	0x20000398
 8002b9c:	2000003c 	.word	0x2000003c

08002ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b094      	sub	sp, #80	; 0x50
 8002ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ba6:	f107 0320 	add.w	r3, r7, #32
 8002baa:	2230      	movs	r2, #48	; 0x30
 8002bac:	2100      	movs	r1, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f007 f962 	bl	8009e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bb4:	f107 030c 	add.w	r3, r7, #12
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	60da      	str	r2, [r3, #12]
 8002bc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60bb      	str	r3, [r7, #8]
 8002bc8:	4b28      	ldr	r3, [pc, #160]	; (8002c6c <SystemClock_Config+0xcc>)
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	4a27      	ldr	r2, [pc, #156]	; (8002c6c <SystemClock_Config+0xcc>)
 8002bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd4:	4b25      	ldr	r3, [pc, #148]	; (8002c6c <SystemClock_Config+0xcc>)
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002be0:	2300      	movs	r3, #0
 8002be2:	607b      	str	r3, [r7, #4]
 8002be4:	4b22      	ldr	r3, [pc, #136]	; (8002c70 <SystemClock_Config+0xd0>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a21      	ldr	r2, [pc, #132]	; (8002c70 <SystemClock_Config+0xd0>)
 8002bea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bee:	6013      	str	r3, [r2, #0]
 8002bf0:	4b1f      	ldr	r3, [pc, #124]	; (8002c70 <SystemClock_Config+0xd0>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf8:	607b      	str	r3, [r7, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c00:	2301      	movs	r3, #1
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c04:	2310      	movs	r3, #16
 8002c06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002c10:	2308      	movs	r3, #8
 8002c12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002c14:	23a8      	movs	r3, #168	; 0xa8
 8002c16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002c1c:	2304      	movs	r3, #4
 8002c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c20:	f107 0320 	add.w	r3, r7, #32
 8002c24:	4618      	mov	r0, r3
 8002c26:	f004 fa71 	bl	800710c <HAL_RCC_OscConfig>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002c30:	f000 fa92 	bl	8003158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c34:	230f      	movs	r3, #15
 8002c36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c4c:	f107 030c 	add.w	r3, r7, #12
 8002c50:	2105      	movs	r1, #5
 8002c52:	4618      	mov	r0, r3
 8002c54:	f004 fcd2 	bl	80075fc <HAL_RCC_ClockConfig>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002c5e:	f000 fa7b 	bl	8003158 <Error_Handler>
  }
}
 8002c62:	bf00      	nop
 8002c64:	3750      	adds	r7, #80	; 0x50
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40007000 	.word	0x40007000

08002c74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c78:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <MX_I2C1_Init+0x50>)
 8002c7a:	4a13      	ldr	r2, [pc, #76]	; (8002cc8 <MX_I2C1_Init+0x54>)
 8002c7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002c7e:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <MX_I2C1_Init+0x50>)
 8002c80:	4a12      	ldr	r2, [pc, #72]	; (8002ccc <MX_I2C1_Init+0x58>)
 8002c82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c84:	4b0f      	ldr	r3, [pc, #60]	; (8002cc4 <MX_I2C1_Init+0x50>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c8a:	4b0e      	ldr	r3, [pc, #56]	; (8002cc4 <MX_I2C1_Init+0x50>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c90:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <MX_I2C1_Init+0x50>)
 8002c92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c98:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <MX_I2C1_Init+0x50>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c9e:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <MX_I2C1_Init+0x50>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ca4:	4b07      	ldr	r3, [pc, #28]	; (8002cc4 <MX_I2C1_Init+0x50>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002caa:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <MX_I2C1_Init+0x50>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002cb0:	4804      	ldr	r0, [pc, #16]	; (8002cc4 <MX_I2C1_Init+0x50>)
 8002cb2:	f003 fd7d 	bl	80067b0 <HAL_I2C_Init>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002cbc:	f000 fa4c 	bl	8003158 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002cc0:	bf00      	nop
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	20000158 	.word	0x20000158
 8002cc8:	40005400 	.word	0x40005400
 8002ccc:	000186a0 	.word	0x000186a0

08002cd0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002cd4:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <MX_I2C3_Init+0x50>)
 8002cd6:	4a13      	ldr	r2, [pc, #76]	; (8002d24 <MX_I2C3_Init+0x54>)
 8002cd8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <MX_I2C3_Init+0x50>)
 8002cdc:	4a12      	ldr	r2, [pc, #72]	; (8002d28 <MX_I2C3_Init+0x58>)
 8002cde:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ce0:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <MX_I2C3_Init+0x50>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <MX_I2C3_Init+0x50>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <MX_I2C3_Init+0x50>)
 8002cee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cf2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002cf4:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <MX_I2C3_Init+0x50>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002cfa:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <MX_I2C3_Init+0x50>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d00:	4b07      	ldr	r3, [pc, #28]	; (8002d20 <MX_I2C3_Init+0x50>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d06:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <MX_I2C3_Init+0x50>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002d0c:	4804      	ldr	r0, [pc, #16]	; (8002d20 <MX_I2C3_Init+0x50>)
 8002d0e:	f003 fd4f 	bl	80067b0 <HAL_I2C_Init>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002d18:	f000 fa1e 	bl	8003158 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002d1c:	bf00      	nop
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	200001ac 	.word	0x200001ac
 8002d24:	40005c00 	.word	0x40005c00
 8002d28:	00061a80 	.word	0x00061a80

08002d2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002d30:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <MX_SPI1_Init+0x64>)
 8002d32:	4a18      	ldr	r2, [pc, #96]	; (8002d94 <MX_SPI1_Init+0x68>)
 8002d34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d36:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <MX_SPI1_Init+0x64>)
 8002d38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d3e:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <MX_SPI1_Init+0x64>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d44:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <MX_SPI1_Init+0x64>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002d4a:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <MX_SPI1_Init+0x64>)
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d50:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <MX_SPI1_Init+0x64>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d56:	4b0e      	ldr	r3, [pc, #56]	; (8002d90 <MX_SPI1_Init+0x64>)
 8002d58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002d5e:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <MX_SPI1_Init+0x64>)
 8002d60:	2238      	movs	r2, #56	; 0x38
 8002d62:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d64:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <MX_SPI1_Init+0x64>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <MX_SPI1_Init+0x64>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d70:	4b07      	ldr	r3, [pc, #28]	; (8002d90 <MX_SPI1_Init+0x64>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d76:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <MX_SPI1_Init+0x64>)
 8002d78:	220a      	movs	r2, #10
 8002d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d7c:	4804      	ldr	r0, [pc, #16]	; (8002d90 <MX_SPI1_Init+0x64>)
 8002d7e:	f004 fe1d 	bl	80079bc <HAL_SPI_Init>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002d88:	f000 f9e6 	bl	8003158 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d8c:	bf00      	nop
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000200 	.word	0x20000200
 8002d94:	40013000 	.word	0x40013000

08002d98 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002d9c:	4b17      	ldr	r3, [pc, #92]	; (8002dfc <MX_SPI2_Init+0x64>)
 8002d9e:	4a18      	ldr	r2, [pc, #96]	; (8002e00 <MX_SPI2_Init+0x68>)
 8002da0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002da2:	4b16      	ldr	r3, [pc, #88]	; (8002dfc <MX_SPI2_Init+0x64>)
 8002da4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002da8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002daa:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <MX_SPI2_Init+0x64>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002db0:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <MX_SPI2_Init+0x64>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002db6:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <MX_SPI2_Init+0x64>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <MX_SPI2_Init+0x64>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <MX_SPI2_Init+0x64>)
 8002dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dc8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002dca:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <MX_SPI2_Init+0x64>)
 8002dcc:	2208      	movs	r2, #8
 8002dce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dd0:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <MX_SPI2_Init+0x64>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dd6:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <MX_SPI2_Init+0x64>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ddc:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <MX_SPI2_Init+0x64>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002de2:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <MX_SPI2_Init+0x64>)
 8002de4:	220a      	movs	r2, #10
 8002de6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002de8:	4804      	ldr	r0, [pc, #16]	; (8002dfc <MX_SPI2_Init+0x64>)
 8002dea:	f004 fde7 	bl	80079bc <HAL_SPI_Init>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002df4:	f000 f9b0 	bl	8003158 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002df8:	bf00      	nop
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000258 	.word	0x20000258
 8002e00:	40003800 	.word	0x40003800

08002e04 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002e08:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <MX_SPI3_Init+0x64>)
 8002e0a:	4a18      	ldr	r2, [pc, #96]	; (8002e6c <MX_SPI3_Init+0x68>)
 8002e0c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002e0e:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <MX_SPI3_Init+0x64>)
 8002e10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e14:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002e16:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <MX_SPI3_Init+0x64>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e1c:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <MX_SPI3_Init+0x64>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e22:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <MX_SPI3_Init+0x64>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002e28:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <MX_SPI3_Init+0x64>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <MX_SPI3_Init+0x64>)
 8002e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e34:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002e36:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <MX_SPI3_Init+0x64>)
 8002e38:	2228      	movs	r2, #40	; 0x28
 8002e3a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e3c:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <MX_SPI3_Init+0x64>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e42:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <MX_SPI3_Init+0x64>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e48:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <MX_SPI3_Init+0x64>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <MX_SPI3_Init+0x64>)
 8002e50:	220a      	movs	r2, #10
 8002e52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002e54:	4804      	ldr	r0, [pc, #16]	; (8002e68 <MX_SPI3_Init+0x64>)
 8002e56:	f004 fdb1 	bl	80079bc <HAL_SPI_Init>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002e60:	f000 f97a 	bl	8003158 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	200002b0 	.word	0x200002b0
 8002e6c:	40003c00 	.word	0x40003c00

08002e70 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e76:	463b      	mov	r3, r7
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002e7e:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <MX_TIM6_Init+0x60>)
 8002e80:	4a14      	ldr	r2, [pc, #80]	; (8002ed4 <MX_TIM6_Init+0x64>)
 8002e82:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84 - 1;
 8002e84:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <MX_TIM6_Init+0x60>)
 8002e86:	2253      	movs	r2, #83	; 0x53
 8002e88:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e8a:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <MX_TIM6_Init+0x60>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50 - 1;
 8002e90:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <MX_TIM6_Init+0x60>)
 8002e92:	2231      	movs	r2, #49	; 0x31
 8002e94:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e96:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <MX_TIM6_Init+0x60>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002e9c:	480c      	ldr	r0, [pc, #48]	; (8002ed0 <MX_TIM6_Init+0x60>)
 8002e9e:	f005 fb71 	bl	8008584 <HAL_TIM_Base_Init>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8002ea8:	f000 f956 	bl	8003158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eac:	2300      	movs	r3, #0
 8002eae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002eb4:	463b      	mov	r3, r7
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4805      	ldr	r0, [pc, #20]	; (8002ed0 <MX_TIM6_Init+0x60>)
 8002eba:	f005 fde7 	bl	8008a8c <HAL_TIMEx_MasterConfigSynchronization>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8002ec4:	f000 f948 	bl	8003158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002ec8:	bf00      	nop
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	20000308 	.word	0x20000308
 8002ed4:	40001000 	.word	0x40001000

08002ed8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002edc:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <MX_USART1_UART_Init+0x4c>)
 8002ede:	4a12      	ldr	r2, [pc, #72]	; (8002f28 <MX_USART1_UART_Init+0x50>)
 8002ee0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ee2:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <MX_USART1_UART_Init+0x4c>)
 8002ee4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ee8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002eea:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <MX_USART1_UART_Init+0x4c>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <MX_USART1_UART_Init+0x4c>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ef6:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <MX_USART1_UART_Init+0x4c>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002efc:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <MX_USART1_UART_Init+0x4c>)
 8002efe:	220c      	movs	r2, #12
 8002f00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f02:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <MX_USART1_UART_Init+0x4c>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <MX_USART1_UART_Init+0x4c>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f0e:	4805      	ldr	r0, [pc, #20]	; (8002f24 <MX_USART1_UART_Init+0x4c>)
 8002f10:	f005 fe4c 	bl	8008bac <HAL_UART_Init>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f1a:	f000 f91d 	bl	8003158 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000350 	.word	0x20000350
 8002f28:	40011000 	.word	0x40011000

08002f2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08a      	sub	sp, #40	; 0x28
 8002f30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f32:	f107 0314 	add.w	r3, r7, #20
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	605a      	str	r2, [r3, #4]
 8002f3c:	609a      	str	r2, [r3, #8]
 8002f3e:	60da      	str	r2, [r3, #12]
 8002f40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	4b6c      	ldr	r3, [pc, #432]	; (80030f8 <MX_GPIO_Init+0x1cc>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	4a6b      	ldr	r2, [pc, #428]	; (80030f8 <MX_GPIO_Init+0x1cc>)
 8002f4c:	f043 0310 	orr.w	r3, r3, #16
 8002f50:	6313      	str	r3, [r2, #48]	; 0x30
 8002f52:	4b69      	ldr	r3, [pc, #420]	; (80030f8 <MX_GPIO_Init+0x1cc>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	4b65      	ldr	r3, [pc, #404]	; (80030f8 <MX_GPIO_Init+0x1cc>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	4a64      	ldr	r2, [pc, #400]	; (80030f8 <MX_GPIO_Init+0x1cc>)
 8002f68:	f043 0304 	orr.w	r3, r3, #4
 8002f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6e:	4b62      	ldr	r3, [pc, #392]	; (80030f8 <MX_GPIO_Init+0x1cc>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	4b5e      	ldr	r3, [pc, #376]	; (80030f8 <MX_GPIO_Init+0x1cc>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	4a5d      	ldr	r2, [pc, #372]	; (80030f8 <MX_GPIO_Init+0x1cc>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8a:	4b5b      	ldr	r3, [pc, #364]	; (80030f8 <MX_GPIO_Init+0x1cc>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	607b      	str	r3, [r7, #4]
 8002f9a:	4b57      	ldr	r3, [pc, #348]	; (80030f8 <MX_GPIO_Init+0x1cc>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	4a56      	ldr	r2, [pc, #344]	; (80030f8 <MX_GPIO_Init+0x1cc>)
 8002fa0:	f043 0302 	orr.w	r3, r3, #2
 8002fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa6:	4b54      	ldr	r3, [pc, #336]	; (80030f8 <MX_GPIO_Init+0x1cc>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	607b      	str	r3, [r7, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	603b      	str	r3, [r7, #0]
 8002fb6:	4b50      	ldr	r3, [pc, #320]	; (80030f8 <MX_GPIO_Init+0x1cc>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	4a4f      	ldr	r2, [pc, #316]	; (80030f8 <MX_GPIO_Init+0x1cc>)
 8002fbc:	f043 0308 	orr.w	r3, r3, #8
 8002fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc2:	4b4d      	ldr	r3, [pc, #308]	; (80030f8 <MX_GPIO_Init+0x1cc>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSOR_RANGE_SELECT_Pin|HV_INPUT_SELECT_Pin, GPIO_PIN_RESET);
 8002fce:	2200      	movs	r2, #0
 8002fd0:	210c      	movs	r1, #12
 8002fd2:	484a      	ldr	r0, [pc, #296]	; (80030fc <MX_GPIO_Init+0x1d0>)
 8002fd4:	f003 fbd2 	bl	800677c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADC_PRESS_SPI_CS_Pin|ADC_DOSE_SPI_CS_Pin|ADC_HV_SPI_CS_Pin, GPIO_PIN_RESET);
 8002fd8:	2200      	movs	r2, #0
 8002fda:	210e      	movs	r1, #14
 8002fdc:	4848      	ldr	r0, [pc, #288]	; (8003100 <MX_GPIO_Init+0x1d4>)
 8002fde:	f003 fbcd 	bl	800677c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fe8:	4846      	ldr	r0, [pc, #280]	; (8003104 <MX_GPIO_Init+0x1d8>)
 8002fea:	f003 fbc7 	bl	800677c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ETH_SPI_CS_Pin|ETH_RESET_Pin, GPIO_PIN_RESET);
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002ff4:	4844      	ldr	r0, [pc, #272]	; (8003108 <MX_GPIO_Init+0x1dc>)
 8002ff6:	f003 fbc1 	bl	800677c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|DAC_SPI_CS_Pin, GPIO_PIN_RESET);
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2103      	movs	r1, #3
 8002ffe:	4843      	ldr	r0, [pc, #268]	; (800310c <MX_GPIO_Init+0x1e0>)
 8003000:	f003 fbbc 	bl	800677c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADC_DOSE_START_Pin|ADC_DOSE_XPWDN_Pin, GPIO_PIN_SET);
 8003004:	2201      	movs	r2, #1
 8003006:	2128      	movs	r1, #40	; 0x28
 8003008:	483f      	ldr	r0, [pc, #252]	; (8003108 <MX_GPIO_Init+0x1dc>)
 800300a:	f003 fbb7 	bl	800677c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_PRESS_xDRDY_Pin ADC_DOSE_xDRDY_Pin ADC_HV_xDRDY_Pin */
  GPIO_InitStruct.Pin = ADC_PRESS_xDRDY_Pin|ADC_DOSE_xDRDY_Pin|ADC_HV_xDRDY_Pin;
 800300e:	2338      	movs	r3, #56	; 0x38
 8003010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003012:	2300      	movs	r3, #0
 8003014:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800301a:	f107 0314 	add.w	r3, r7, #20
 800301e:	4619      	mov	r1, r3
 8003020:	4838      	ldr	r0, [pc, #224]	; (8003104 <MX_GPIO_Init+0x1d8>)
 8003022:	f003 f9f7 	bl	8006414 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR_RANGE_SELECT_Pin HV_INPUT_SELECT_Pin */
  GPIO_InitStruct.Pin = SENSOR_RANGE_SELECT_Pin|HV_INPUT_SELECT_Pin;
 8003026:	230c      	movs	r3, #12
 8003028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800302a:	2301      	movs	r3, #1
 800302c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302e:	2300      	movs	r3, #0
 8003030:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003032:	2302      	movs	r3, #2
 8003034:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003036:	f107 0314 	add.w	r3, r7, #20
 800303a:	4619      	mov	r1, r3
 800303c:	482f      	ldr	r0, [pc, #188]	; (80030fc <MX_GPIO_Init+0x1d0>)
 800303e:	f003 f9e9 	bl	8006414 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_PRESS_SPI_CS_Pin ADC_DOSE_SPI_CS_Pin ADC_HV_SPI_CS_Pin */
  GPIO_InitStruct.Pin = ADC_PRESS_SPI_CS_Pin|ADC_DOSE_SPI_CS_Pin|ADC_HV_SPI_CS_Pin;
 8003042:	230e      	movs	r3, #14
 8003044:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003046:	2301      	movs	r3, #1
 8003048:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800304a:	2301      	movs	r3, #1
 800304c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800304e:	2302      	movs	r3, #2
 8003050:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003052:	f107 0314 	add.w	r3, r7, #20
 8003056:	4619      	mov	r1, r3
 8003058:	4829      	ldr	r0, [pc, #164]	; (8003100 <MX_GPIO_Init+0x1d4>)
 800305a:	f003 f9db 	bl	8006414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800305e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003064:	2301      	movs	r3, #1
 8003066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306c:	2300      	movs	r3, #0
 800306e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003070:	f107 0314 	add.w	r3, r7, #20
 8003074:	4619      	mov	r1, r3
 8003076:	4823      	ldr	r0, [pc, #140]	; (8003104 <MX_GPIO_Init+0x1d8>)
 8003078:	f003 f9cc 	bl	8006414 <HAL_GPIO_Init>

  /*Configure GPIO pins : ETH_SPI_CS_Pin ADC_DOSE_START_Pin ADC_DOSE_XPWDN_Pin */
  GPIO_InitStruct.Pin = ETH_SPI_CS_Pin|ADC_DOSE_START_Pin|ADC_DOSE_XPWDN_Pin;
 800307c:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8003080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003082:	2301      	movs	r3, #1
 8003084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003086:	2301      	movs	r3, #1
 8003088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800308a:	2302      	movs	r3, #2
 800308c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800308e:	f107 0314 	add.w	r3, r7, #20
 8003092:	4619      	mov	r1, r3
 8003094:	481c      	ldr	r0, [pc, #112]	; (8003108 <MX_GPIO_Init+0x1dc>)
 8003096:	f003 f9bd 	bl	8006414 <HAL_GPIO_Init>

  /*Configure GPIO pin : ETH_RESET_Pin */
  GPIO_InitStruct.Pin = ETH_RESET_Pin;
 800309a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800309e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030a0:	2301      	movs	r3, #1
 80030a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030a8:	2302      	movs	r3, #2
 80030aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ETH_RESET_GPIO_Port, &GPIO_InitStruct);
 80030ac:	f107 0314 	add.w	r3, r7, #20
 80030b0:	4619      	mov	r1, r3
 80030b2:	4815      	ldr	r0, [pc, #84]	; (8003108 <MX_GPIO_Init+0x1dc>)
 80030b4:	f003 f9ae 	bl	8006414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80030b8:	2301      	movs	r3, #1
 80030ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030bc:	2301      	movs	r3, #1
 80030be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c4:	2300      	movs	r3, #0
 80030c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030c8:	f107 0314 	add.w	r3, r7, #20
 80030cc:	4619      	mov	r1, r3
 80030ce:	480f      	ldr	r0, [pc, #60]	; (800310c <MX_GPIO_Init+0x1e0>)
 80030d0:	f003 f9a0 	bl	8006414 <HAL_GPIO_Init>

  /*Configure GPIO pin : DAC_SPI_CS_Pin */
  GPIO_InitStruct.Pin = DAC_SPI_CS_Pin;
 80030d4:	2302      	movs	r3, #2
 80030d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030d8:	2301      	movs	r3, #1
 80030da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030dc:	2301      	movs	r3, #1
 80030de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030e0:	2302      	movs	r3, #2
 80030e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DAC_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80030e4:	f107 0314 	add.w	r3, r7, #20
 80030e8:	4619      	mov	r1, r3
 80030ea:	4808      	ldr	r0, [pc, #32]	; (800310c <MX_GPIO_Init+0x1e0>)
 80030ec:	f003 f992 	bl	8006414 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030f0:	bf00      	nop
 80030f2:	3728      	adds	r7, #40	; 0x28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40020800 	.word	0x40020800
 8003100:	40020000 	.word	0x40020000
 8003104:	40021000 	.word	0x40021000
 8003108:	40020400 	.word	0x40020400
 800310c:	40020c00 	.word	0x40020c00

08003110 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	HAL_NVIC_DisableIRQ(USR_ADC_TIM_IRQn);
 8003118:	2036      	movs	r0, #54	; 0x36
 800311a:	f002 fdf6 	bl	8005d0a <HAL_NVIC_DisableIRQ>
	if(htim == adctim)
 800311e:	4b0b      	ldr	r3, [pc, #44]	; (800314c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	429a      	cmp	r2, r3
 8003126:	d102      	bne.n	800312e <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		general_task_timer_interrupt(&task);
 8003128:	4809      	ldr	r0, [pc, #36]	; (8003150 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800312a:	f7ff fa7f 	bl	800262c <general_task_timer_interrupt>
	}
	HAL_NVIC_EnableIRQ(USR_ADC_TIM_IRQn);
 800312e:	2036      	movs	r0, #54	; 0x36
 8003130:	f002 fddd 	bl	8005cee <HAL_NVIC_EnableIRQ>

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a06      	ldr	r2, [pc, #24]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d101      	bne.n	8003142 <HAL_TIM_PeriodElapsedCallback+0x32>
    HAL_IncTick();
 800313e:	f002 fc77 	bl	8005a30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003142:	bf00      	nop
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	2000003c 	.word	0x2000003c
 8003150:	20000398 	.word	0x20000398
 8003154:	40010000 	.word	0x40010000

08003158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800315c:	b672      	cpsid	i
}
 800315e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003160:	e7fe      	b.n	8003160 <Error_Handler+0x8>
	...

08003164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	607b      	str	r3, [r7, #4]
 800316e:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <HAL_MspInit+0x4c>)
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	4a0f      	ldr	r2, [pc, #60]	; (80031b0 <HAL_MspInit+0x4c>)
 8003174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003178:	6453      	str	r3, [r2, #68]	; 0x44
 800317a:	4b0d      	ldr	r3, [pc, #52]	; (80031b0 <HAL_MspInit+0x4c>)
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003182:	607b      	str	r3, [r7, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	603b      	str	r3, [r7, #0]
 800318a:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <HAL_MspInit+0x4c>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	4a08      	ldr	r2, [pc, #32]	; (80031b0 <HAL_MspInit+0x4c>)
 8003190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003194:	6413      	str	r3, [r2, #64]	; 0x40
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_MspInit+0x4c>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319e:	603b      	str	r3, [r7, #0]
 80031a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40023800 	.word	0x40023800

080031b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08c      	sub	sp, #48	; 0x30
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031bc:	f107 031c 	add.w	r3, r7, #28
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	60da      	str	r2, [r3, #12]
 80031ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a42      	ldr	r2, [pc, #264]	; (80032dc <HAL_I2C_MspInit+0x128>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d12c      	bne.n	8003230 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d6:	2300      	movs	r3, #0
 80031d8:	61bb      	str	r3, [r7, #24]
 80031da:	4b41      	ldr	r3, [pc, #260]	; (80032e0 <HAL_I2C_MspInit+0x12c>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	4a40      	ldr	r2, [pc, #256]	; (80032e0 <HAL_I2C_MspInit+0x12c>)
 80031e0:	f043 0302 	orr.w	r3, r3, #2
 80031e4:	6313      	str	r3, [r2, #48]	; 0x30
 80031e6:	4b3e      	ldr	r3, [pc, #248]	; (80032e0 <HAL_I2C_MspInit+0x12c>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	61bb      	str	r3, [r7, #24]
 80031f0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031f2:	23c0      	movs	r3, #192	; 0xc0
 80031f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031f6:	2312      	movs	r3, #18
 80031f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031fe:	2303      	movs	r3, #3
 8003200:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003202:	2304      	movs	r3, #4
 8003204:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003206:	f107 031c 	add.w	r3, r7, #28
 800320a:	4619      	mov	r1, r3
 800320c:	4835      	ldr	r0, [pc, #212]	; (80032e4 <HAL_I2C_MspInit+0x130>)
 800320e:	f003 f901 	bl	8006414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	4b32      	ldr	r3, [pc, #200]	; (80032e0 <HAL_I2C_MspInit+0x12c>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	4a31      	ldr	r2, [pc, #196]	; (80032e0 <HAL_I2C_MspInit+0x12c>)
 800321c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003220:	6413      	str	r3, [r2, #64]	; 0x40
 8003222:	4b2f      	ldr	r3, [pc, #188]	; (80032e0 <HAL_I2C_MspInit+0x12c>)
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800322e:	e050      	b.n	80032d2 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a2c      	ldr	r2, [pc, #176]	; (80032e8 <HAL_I2C_MspInit+0x134>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d14b      	bne.n	80032d2 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	4b28      	ldr	r3, [pc, #160]	; (80032e0 <HAL_I2C_MspInit+0x12c>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	4a27      	ldr	r2, [pc, #156]	; (80032e0 <HAL_I2C_MspInit+0x12c>)
 8003244:	f043 0304 	orr.w	r3, r3, #4
 8003248:	6313      	str	r3, [r2, #48]	; 0x30
 800324a:	4b25      	ldr	r3, [pc, #148]	; (80032e0 <HAL_I2C_MspInit+0x12c>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	4b21      	ldr	r3, [pc, #132]	; (80032e0 <HAL_I2C_MspInit+0x12c>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4a20      	ldr	r2, [pc, #128]	; (80032e0 <HAL_I2C_MspInit+0x12c>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	6313      	str	r3, [r2, #48]	; 0x30
 8003266:	4b1e      	ldr	r3, [pc, #120]	; (80032e0 <HAL_I2C_MspInit+0x12c>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003272:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003278:	2312      	movs	r3, #18
 800327a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327c:	2300      	movs	r3, #0
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003280:	2303      	movs	r3, #3
 8003282:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003284:	2304      	movs	r3, #4
 8003286:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003288:	f107 031c 	add.w	r3, r7, #28
 800328c:	4619      	mov	r1, r3
 800328e:	4817      	ldr	r0, [pc, #92]	; (80032ec <HAL_I2C_MspInit+0x138>)
 8003290:	f003 f8c0 	bl	8006414 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003294:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800329a:	2312      	movs	r3, #18
 800329c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a2:	2303      	movs	r3, #3
 80032a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80032a6:	2304      	movs	r3, #4
 80032a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032aa:	f107 031c 	add.w	r3, r7, #28
 80032ae:	4619      	mov	r1, r3
 80032b0:	480f      	ldr	r0, [pc, #60]	; (80032f0 <HAL_I2C_MspInit+0x13c>)
 80032b2:	f003 f8af 	bl	8006414 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <HAL_I2C_MspInit+0x12c>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	4a08      	ldr	r2, [pc, #32]	; (80032e0 <HAL_I2C_MspInit+0x12c>)
 80032c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032c4:	6413      	str	r3, [r2, #64]	; 0x40
 80032c6:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_I2C_MspInit+0x12c>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032ce:	60bb      	str	r3, [r7, #8]
 80032d0:	68bb      	ldr	r3, [r7, #8]
}
 80032d2:	bf00      	nop
 80032d4:	3730      	adds	r7, #48	; 0x30
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40005400 	.word	0x40005400
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40020400 	.word	0x40020400
 80032e8:	40005c00 	.word	0x40005c00
 80032ec:	40020800 	.word	0x40020800
 80032f0:	40020000 	.word	0x40020000

080032f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08e      	sub	sp, #56	; 0x38
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	60da      	str	r2, [r3, #12]
 800330a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a4c      	ldr	r2, [pc, #304]	; (8003444 <HAL_SPI_MspInit+0x150>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d12c      	bne.n	8003370 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003316:	2300      	movs	r3, #0
 8003318:	623b      	str	r3, [r7, #32]
 800331a:	4b4b      	ldr	r3, [pc, #300]	; (8003448 <HAL_SPI_MspInit+0x154>)
 800331c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331e:	4a4a      	ldr	r2, [pc, #296]	; (8003448 <HAL_SPI_MspInit+0x154>)
 8003320:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003324:	6453      	str	r3, [r2, #68]	; 0x44
 8003326:	4b48      	ldr	r3, [pc, #288]	; (8003448 <HAL_SPI_MspInit+0x154>)
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800332e:	623b      	str	r3, [r7, #32]
 8003330:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003332:	2300      	movs	r3, #0
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	4b44      	ldr	r3, [pc, #272]	; (8003448 <HAL_SPI_MspInit+0x154>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	4a43      	ldr	r2, [pc, #268]	; (8003448 <HAL_SPI_MspInit+0x154>)
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	6313      	str	r3, [r2, #48]	; 0x30
 8003342:	4b41      	ldr	r3, [pc, #260]	; (8003448 <HAL_SPI_MspInit+0x154>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	61fb      	str	r3, [r7, #28]
 800334c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800334e:	23e0      	movs	r3, #224	; 0xe0
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003352:	2302      	movs	r3, #2
 8003354:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003356:	2300      	movs	r3, #0
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800335a:	2303      	movs	r3, #3
 800335c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800335e:	2305      	movs	r3, #5
 8003360:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003366:	4619      	mov	r1, r3
 8003368:	4838      	ldr	r0, [pc, #224]	; (800344c <HAL_SPI_MspInit+0x158>)
 800336a:	f003 f853 	bl	8006414 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800336e:	e064      	b.n	800343a <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a36      	ldr	r2, [pc, #216]	; (8003450 <HAL_SPI_MspInit+0x15c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d12d      	bne.n	80033d6 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	61bb      	str	r3, [r7, #24]
 800337e:	4b32      	ldr	r3, [pc, #200]	; (8003448 <HAL_SPI_MspInit+0x154>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	4a31      	ldr	r2, [pc, #196]	; (8003448 <HAL_SPI_MspInit+0x154>)
 8003384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003388:	6413      	str	r3, [r2, #64]	; 0x40
 800338a:	4b2f      	ldr	r3, [pc, #188]	; (8003448 <HAL_SPI_MspInit+0x154>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003392:	61bb      	str	r3, [r7, #24]
 8003394:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	4b2b      	ldr	r3, [pc, #172]	; (8003448 <HAL_SPI_MspInit+0x154>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	4a2a      	ldr	r2, [pc, #168]	; (8003448 <HAL_SPI_MspInit+0x154>)
 80033a0:	f043 0302 	orr.w	r3, r3, #2
 80033a4:	6313      	str	r3, [r2, #48]	; 0x30
 80033a6:	4b28      	ldr	r3, [pc, #160]	; (8003448 <HAL_SPI_MspInit+0x154>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80033b2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b8:	2302      	movs	r3, #2
 80033ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c0:	2303      	movs	r3, #3
 80033c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033c4:	2305      	movs	r3, #5
 80033c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033cc:	4619      	mov	r1, r3
 80033ce:	4821      	ldr	r0, [pc, #132]	; (8003454 <HAL_SPI_MspInit+0x160>)
 80033d0:	f003 f820 	bl	8006414 <HAL_GPIO_Init>
}
 80033d4:	e031      	b.n	800343a <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a1f      	ldr	r2, [pc, #124]	; (8003458 <HAL_SPI_MspInit+0x164>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d12c      	bne.n	800343a <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80033e0:	2300      	movs	r3, #0
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	4b18      	ldr	r3, [pc, #96]	; (8003448 <HAL_SPI_MspInit+0x154>)
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	4a17      	ldr	r2, [pc, #92]	; (8003448 <HAL_SPI_MspInit+0x154>)
 80033ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ee:	6413      	str	r3, [r2, #64]	; 0x40
 80033f0:	4b15      	ldr	r3, [pc, #84]	; (8003448 <HAL_SPI_MspInit+0x154>)
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033fc:	2300      	movs	r3, #0
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	4b11      	ldr	r3, [pc, #68]	; (8003448 <HAL_SPI_MspInit+0x154>)
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	4a10      	ldr	r2, [pc, #64]	; (8003448 <HAL_SPI_MspInit+0x154>)
 8003406:	f043 0304 	orr.w	r3, r3, #4
 800340a:	6313      	str	r3, [r2, #48]	; 0x30
 800340c:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <HAL_SPI_MspInit+0x154>)
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003418:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341e:	2302      	movs	r3, #2
 8003420:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003422:	2300      	movs	r3, #0
 8003424:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003426:	2303      	movs	r3, #3
 8003428:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800342a:	2306      	movs	r3, #6
 800342c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800342e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003432:	4619      	mov	r1, r3
 8003434:	4809      	ldr	r0, [pc, #36]	; (800345c <HAL_SPI_MspInit+0x168>)
 8003436:	f002 ffed 	bl	8006414 <HAL_GPIO_Init>
}
 800343a:	bf00      	nop
 800343c:	3738      	adds	r7, #56	; 0x38
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40013000 	.word	0x40013000
 8003448:	40023800 	.word	0x40023800
 800344c:	40020000 	.word	0x40020000
 8003450:	40003800 	.word	0x40003800
 8003454:	40020400 	.word	0x40020400
 8003458:	40003c00 	.word	0x40003c00
 800345c:	40020800 	.word	0x40020800

08003460 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a0e      	ldr	r2, [pc, #56]	; (80034a8 <HAL_TIM_Base_MspInit+0x48>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d115      	bne.n	800349e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	4b0d      	ldr	r3, [pc, #52]	; (80034ac <HAL_TIM_Base_MspInit+0x4c>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	4a0c      	ldr	r2, [pc, #48]	; (80034ac <HAL_TIM_Base_MspInit+0x4c>)
 800347c:	f043 0310 	orr.w	r3, r3, #16
 8003480:	6413      	str	r3, [r2, #64]	; 0x40
 8003482:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <HAL_TIM_Base_MspInit+0x4c>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800348e:	2200      	movs	r2, #0
 8003490:	2100      	movs	r1, #0
 8003492:	2036      	movs	r0, #54	; 0x36
 8003494:	f002 fc0f 	bl	8005cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003498:	2036      	movs	r0, #54	; 0x36
 800349a:	f002 fc28 	bl	8005cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800349e:	bf00      	nop
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40001000 	.word	0x40001000
 80034ac:	40023800 	.word	0x40023800

080034b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08a      	sub	sp, #40	; 0x28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b8:	f107 0314 	add.w	r3, r7, #20
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	605a      	str	r2, [r3, #4]
 80034c2:	609a      	str	r2, [r3, #8]
 80034c4:	60da      	str	r2, [r3, #12]
 80034c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <HAL_UART_MspInit+0x94>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d134      	bne.n	800353c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <HAL_UART_MspInit+0x98>)
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	4a1b      	ldr	r2, [pc, #108]	; (8003548 <HAL_UART_MspInit+0x98>)
 80034dc:	f043 0310 	orr.w	r3, r3, #16
 80034e0:	6453      	str	r3, [r2, #68]	; 0x44
 80034e2:	4b19      	ldr	r3, [pc, #100]	; (8003548 <HAL_UART_MspInit+0x98>)
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	4b15      	ldr	r3, [pc, #84]	; (8003548 <HAL_UART_MspInit+0x98>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	4a14      	ldr	r2, [pc, #80]	; (8003548 <HAL_UART_MspInit+0x98>)
 80034f8:	f043 0301 	orr.w	r3, r3, #1
 80034fc:	6313      	str	r3, [r2, #48]	; 0x30
 80034fe:	4b12      	ldr	r3, [pc, #72]	; (8003548 <HAL_UART_MspInit+0x98>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800350a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800350e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003510:	2302      	movs	r3, #2
 8003512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003514:	2300      	movs	r3, #0
 8003516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003518:	2303      	movs	r3, #3
 800351a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800351c:	2307      	movs	r3, #7
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003520:	f107 0314 	add.w	r3, r7, #20
 8003524:	4619      	mov	r1, r3
 8003526:	4809      	ldr	r0, [pc, #36]	; (800354c <HAL_UART_MspInit+0x9c>)
 8003528:	f002 ff74 	bl	8006414 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800352c:	2200      	movs	r2, #0
 800352e:	2100      	movs	r1, #0
 8003530:	2025      	movs	r0, #37	; 0x25
 8003532:	f002 fbc0 	bl	8005cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003536:	2025      	movs	r0, #37	; 0x25
 8003538:	f002 fbd9 	bl	8005cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800353c:	bf00      	nop
 800353e:	3728      	adds	r7, #40	; 0x28
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40011000 	.word	0x40011000
 8003548:	40023800 	.word	0x40023800
 800354c:	40020000 	.word	0x40020000

08003550 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8003554:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <SDTimer_Handler+0x40>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d006      	beq.n	800356c <SDTimer_Handler+0x1c>
		Timer1--;
 800355e:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <SDTimer_Handler+0x40>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b2da      	uxtb	r2, r3
 8003568:	4b09      	ldr	r3, [pc, #36]	; (8003590 <SDTimer_Handler+0x40>)
 800356a:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 800356c:	4b09      	ldr	r3, [pc, #36]	; (8003594 <SDTimer_Handler+0x44>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d006      	beq.n	8003584 <SDTimer_Handler+0x34>
		Timer2--;
 8003576:	4b07      	ldr	r3, [pc, #28]	; (8003594 <SDTimer_Handler+0x44>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b2da      	uxtb	r2, r3
 8003580:	4b04      	ldr	r3, [pc, #16]	; (8003594 <SDTimer_Handler+0x44>)
 8003582:	701a      	strb	r2, [r3, #0]
}
 8003584:	bf00      	nop
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20000671 	.word	0x20000671
 8003594:	20000672 	.word	0x20000672

08003598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800359c:	e7fe      	b.n	800359c <NMI_Handler+0x4>

0800359e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800359e:	b480      	push	{r7}
 80035a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035a2:	e7fe      	b.n	80035a2 <HardFault_Handler+0x4>

080035a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035a8:	e7fe      	b.n	80035a8 <MemManage_Handler+0x4>

080035aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035aa:	b480      	push	{r7}
 80035ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035ae:	e7fe      	b.n	80035ae <BusFault_Handler+0x4>

080035b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035b4:	e7fe      	b.n	80035b4 <UsageFault_Handler+0x4>

080035b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035b6:	b480      	push	{r7}
 80035b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035c8:	bf00      	nop
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035d2:	b480      	push	{r7}
 80035d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035d6:	bf00      	nop
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80035e4:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <SysTick_Handler+0x30>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	3301      	adds	r3, #1
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	4b08      	ldr	r3, [pc, #32]	; (8003610 <SysTick_Handler+0x30>)
 80035f0:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 80035f2:	4b07      	ldr	r3, [pc, #28]	; (8003610 <SysTick_Handler+0x30>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b09      	cmp	r3, #9
 80035fa:	d904      	bls.n	8003606 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 80035fc:	4b04      	ldr	r3, [pc, #16]	; (8003610 <SysTick_Handler+0x30>)
 80035fe:	2200      	movs	r2, #0
 8003600:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8003602:	f7ff ffa5 	bl	8003550 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003606:	f002 fa13 	bl	8005a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000670 	.word	0x20000670

08003614 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003618:	4802      	ldr	r0, [pc, #8]	; (8003624 <USART1_IRQHandler+0x10>)
 800361a:	f005 fbc7 	bl	8008dac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	20000350 	.word	0x20000350

08003628 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800362c:	4802      	ldr	r0, [pc, #8]	; (8003638 <TIM6_DAC_IRQHandler+0x10>)
 800362e:	f005 f869 	bl	8008704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003632:	bf00      	nop
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000308 	.word	0x20000308

0800363c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003644:	4a14      	ldr	r2, [pc, #80]	; (8003698 <_sbrk+0x5c>)
 8003646:	4b15      	ldr	r3, [pc, #84]	; (800369c <_sbrk+0x60>)
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003650:	4b13      	ldr	r3, [pc, #76]	; (80036a0 <_sbrk+0x64>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d102      	bne.n	800365e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003658:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <_sbrk+0x64>)
 800365a:	4a12      	ldr	r2, [pc, #72]	; (80036a4 <_sbrk+0x68>)
 800365c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800365e:	4b10      	ldr	r3, [pc, #64]	; (80036a0 <_sbrk+0x64>)
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4413      	add	r3, r2
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	429a      	cmp	r2, r3
 800366a:	d207      	bcs.n	800367c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800366c:	f006 fc1c 	bl	8009ea8 <__errno>
 8003670:	4603      	mov	r3, r0
 8003672:	220c      	movs	r2, #12
 8003674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003676:	f04f 33ff 	mov.w	r3, #4294967295
 800367a:	e009      	b.n	8003690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800367c:	4b08      	ldr	r3, [pc, #32]	; (80036a0 <_sbrk+0x64>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003682:	4b07      	ldr	r3, [pc, #28]	; (80036a0 <_sbrk+0x64>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4413      	add	r3, r2
 800368a:	4a05      	ldr	r2, [pc, #20]	; (80036a0 <_sbrk+0x64>)
 800368c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800368e:	68fb      	ldr	r3, [r7, #12]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	20020000 	.word	0x20020000
 800369c:	00000400 	.word	0x00000400
 80036a0:	20000674 	.word	0x20000674
 80036a4:	20000c28 	.word	0x20000c28

080036a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036ac:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <SystemInit+0x20>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b2:	4a05      	ldr	r2, [pc, #20]	; (80036c8 <SystemInit+0x20>)
 80036b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036bc:	bf00      	nop
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <pressure_sensor_init>:
#include <string.h>

#include "pressure_sensor.h"

int pressure_sensor_init(pressure_sensor_t* self, float pressureOffsetPa, float PaPerV, adc_t* adc)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80036d8:	edc7 0a01 	vstr	s1, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
	memset(self, 0, sizeof(*self));
 80036de:	220c      	movs	r2, #12
 80036e0:	2100      	movs	r1, #0
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f006 fbc8 	bl	8009e78 <memset>
	self->pressureOffsetPa = pressureOffsetPa;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	601a      	str	r2, [r3, #0]
	self->PaPerV = PaPerV;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	605a      	str	r2, [r3, #4]
	self->adc = adc;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	609a      	str	r2, [r3, #8]
	return 0;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <pressure_sensor_get_Pa>:

float pressure_sensor_get_Pa(pressure_sensor_t* self)
{
 8003704:	b5b0      	push	{r4, r5, r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	return adc_get_vout(self->adc) * self->PaPerV - self->pressureOffsetPa;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4618      	mov	r0, r3
 8003712:	f7fd fc3b 	bl	8000f8c <adc_get_vout>
 8003716:	ec55 4b10 	vmov	r4, r5, d0
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	4618      	mov	r0, r3
 8003720:	f7fc feb6 	bl	8000490 <__aeabi_f2d>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	4620      	mov	r0, r4
 800372a:	4629      	mov	r1, r5
 800372c:	f7fc ff08 	bl	8000540 <__aeabi_dmul>
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	4614      	mov	r4, r2
 8003736:	461d      	mov	r5, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4618      	mov	r0, r3
 800373e:	f7fc fea7 	bl	8000490 <__aeabi_f2d>
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	4620      	mov	r0, r4
 8003748:	4629      	mov	r1, r5
 800374a:	f7fc fd41 	bl	80001d0 <__aeabi_dsub>
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	4610      	mov	r0, r2
 8003754:	4619      	mov	r1, r3
 8003756:	f7fd f9eb 	bl	8000b30 <__aeabi_d2f>
 800375a:	4603      	mov	r3, r0
 800375c:	ee07 3a90 	vmov	s15, r3
}
 8003760:	eeb0 0a67 	vmov.f32	s0, s15
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bdb0      	pop	{r4, r5, r7, pc}

0800376a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800376a:	b480      	push	{r7}
 800376c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800376e:	bf00      	nop
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af04      	add	r7, sp, #16
 800377e:	4603      	mov	r3, r0
 8003780:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003782:	f04f 33ff 	mov.w	r3, #4294967295
 8003786:	9302      	str	r3, [sp, #8]
 8003788:	2301      	movs	r3, #1
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	1dfb      	adds	r3, r7, #7
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	2301      	movs	r3, #1
 8003792:	2200      	movs	r2, #0
 8003794:	2178      	movs	r1, #120	; 0x78
 8003796:	4803      	ldr	r0, [pc, #12]	; (80037a4 <ssd1306_WriteCommand+0x2c>)
 8003798:	f003 f94e 	bl	8006a38 <HAL_I2C_Mem_Write>
}
 800379c:	bf00      	nop
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	200001ac 	.word	0x200001ac

080037a8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af04      	add	r7, sp, #16
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	f04f 32ff 	mov.w	r2, #4294967295
 80037ba:	9202      	str	r2, [sp, #8]
 80037bc:	9301      	str	r3, [sp, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	2301      	movs	r3, #1
 80037c4:	2240      	movs	r2, #64	; 0x40
 80037c6:	2178      	movs	r1, #120	; 0x78
 80037c8:	4803      	ldr	r0, [pc, #12]	; (80037d8 <ssd1306_WriteData+0x30>)
 80037ca:	f003 f935 	bl	8006a38 <HAL_I2C_Mem_Write>
}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	200001ac 	.word	0x200001ac

080037dc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80037e0:	f7ff ffc3 	bl	800376a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80037e4:	2064      	movs	r0, #100	; 0x64
 80037e6:	f002 f943 	bl	8005a70 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80037ea:	2000      	movs	r0, #0
 80037ec:	f000 f9d8 	bl	8003ba0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80037f0:	2020      	movs	r0, #32
 80037f2:	f7ff ffc1 	bl	8003778 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80037f6:	2000      	movs	r0, #0
 80037f8:	f7ff ffbe 	bl	8003778 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80037fc:	20b0      	movs	r0, #176	; 0xb0
 80037fe:	f7ff ffbb 	bl	8003778 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003802:	20c8      	movs	r0, #200	; 0xc8
 8003804:	f7ff ffb8 	bl	8003778 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003808:	2000      	movs	r0, #0
 800380a:	f7ff ffb5 	bl	8003778 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800380e:	2010      	movs	r0, #16
 8003810:	f7ff ffb2 	bl	8003778 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003814:	2040      	movs	r0, #64	; 0x40
 8003816:	f7ff ffaf 	bl	8003778 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800381a:	20ff      	movs	r0, #255	; 0xff
 800381c:	f000 f9ac 	bl	8003b78 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003820:	20a1      	movs	r0, #161	; 0xa1
 8003822:	f7ff ffa9 	bl	8003778 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003826:	20a6      	movs	r0, #166	; 0xa6
 8003828:	f7ff ffa6 	bl	8003778 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800382c:	20a8      	movs	r0, #168	; 0xa8
 800382e:	f7ff ffa3 	bl	8003778 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003832:	203f      	movs	r0, #63	; 0x3f
 8003834:	f7ff ffa0 	bl	8003778 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003838:	20a4      	movs	r0, #164	; 0xa4
 800383a:	f7ff ff9d 	bl	8003778 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800383e:	20d3      	movs	r0, #211	; 0xd3
 8003840:	f7ff ff9a 	bl	8003778 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003844:	2000      	movs	r0, #0
 8003846:	f7ff ff97 	bl	8003778 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800384a:	20d5      	movs	r0, #213	; 0xd5
 800384c:	f7ff ff94 	bl	8003778 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003850:	20f0      	movs	r0, #240	; 0xf0
 8003852:	f7ff ff91 	bl	8003778 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003856:	20d9      	movs	r0, #217	; 0xd9
 8003858:	f7ff ff8e 	bl	8003778 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800385c:	2022      	movs	r0, #34	; 0x22
 800385e:	f7ff ff8b 	bl	8003778 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003862:	20da      	movs	r0, #218	; 0xda
 8003864:	f7ff ff88 	bl	8003778 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003868:	2012      	movs	r0, #18
 800386a:	f7ff ff85 	bl	8003778 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800386e:	20db      	movs	r0, #219	; 0xdb
 8003870:	f7ff ff82 	bl	8003778 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003874:	2020      	movs	r0, #32
 8003876:	f7ff ff7f 	bl	8003778 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800387a:	208d      	movs	r0, #141	; 0x8d
 800387c:	f7ff ff7c 	bl	8003778 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003880:	2014      	movs	r0, #20
 8003882:	f7ff ff79 	bl	8003778 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003886:	2001      	movs	r0, #1
 8003888:	f000 f98a 	bl	8003ba0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800388c:	2000      	movs	r0, #0
 800388e:	f000 f80f 	bl	80038b0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003892:	f000 f825 	bl	80038e0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003896:	4b05      	ldr	r3, [pc, #20]	; (80038ac <ssd1306_Init+0xd0>)
 8003898:	2200      	movs	r2, #0
 800389a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <ssd1306_Init+0xd0>)
 800389e:	2200      	movs	r2, #0
 80038a0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80038a2:	4b02      	ldr	r3, [pc, #8]	; (80038ac <ssd1306_Init+0xd0>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	711a      	strb	r2, [r3, #4]
}
 80038a8:	bf00      	nop
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	20000a78 	.word	0x20000a78

080038b0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <ssd1306_Fill+0x14>
 80038c0:	2300      	movs	r3, #0
 80038c2:	e000      	b.n	80038c6 <ssd1306_Fill+0x16>
 80038c4:	23ff      	movs	r3, #255	; 0xff
 80038c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038ca:	4619      	mov	r1, r3
 80038cc:	4803      	ldr	r0, [pc, #12]	; (80038dc <ssd1306_Fill+0x2c>)
 80038ce:	f006 fad3 	bl	8009e78 <memset>
}
 80038d2:	bf00      	nop
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	20000678 	.word	0x20000678

080038e0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80038e6:	2300      	movs	r3, #0
 80038e8:	71fb      	strb	r3, [r7, #7]
 80038ea:	e016      	b.n	800391a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	3b50      	subs	r3, #80	; 0x50
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff ff40 	bl	8003778 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80038f8:	2000      	movs	r0, #0
 80038fa:	f7ff ff3d 	bl	8003778 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80038fe:	2010      	movs	r0, #16
 8003900:	f7ff ff3a 	bl	8003778 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	01db      	lsls	r3, r3, #7
 8003908:	4a08      	ldr	r2, [pc, #32]	; (800392c <ssd1306_UpdateScreen+0x4c>)
 800390a:	4413      	add	r3, r2
 800390c:	2180      	movs	r1, #128	; 0x80
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff ff4a 	bl	80037a8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	3301      	adds	r3, #1
 8003918:	71fb      	strb	r3, [r7, #7]
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	2b07      	cmp	r3, #7
 800391e:	d9e5      	bls.n	80038ec <ssd1306_UpdateScreen+0xc>
    }
}
 8003920:	bf00      	nop
 8003922:	bf00      	nop
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20000678 	.word	0x20000678

08003930 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	71fb      	strb	r3, [r7, #7]
 800393a:	460b      	mov	r3, r1
 800393c:	71bb      	strb	r3, [r7, #6]
 800393e:	4613      	mov	r3, r2
 8003940:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003946:	2b00      	cmp	r3, #0
 8003948:	db3d      	blt.n	80039c6 <ssd1306_DrawPixel+0x96>
 800394a:	79bb      	ldrb	r3, [r7, #6]
 800394c:	2b3f      	cmp	r3, #63	; 0x3f
 800394e:	d83a      	bhi.n	80039c6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003950:	797b      	ldrb	r3, [r7, #5]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d11a      	bne.n	800398c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003956:	79fa      	ldrb	r2, [r7, #7]
 8003958:	79bb      	ldrb	r3, [r7, #6]
 800395a:	08db      	lsrs	r3, r3, #3
 800395c:	b2d8      	uxtb	r0, r3
 800395e:	4603      	mov	r3, r0
 8003960:	01db      	lsls	r3, r3, #7
 8003962:	4413      	add	r3, r2
 8003964:	4a1b      	ldr	r2, [pc, #108]	; (80039d4 <ssd1306_DrawPixel+0xa4>)
 8003966:	5cd3      	ldrb	r3, [r2, r3]
 8003968:	b25a      	sxtb	r2, r3
 800396a:	79bb      	ldrb	r3, [r7, #6]
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	2101      	movs	r1, #1
 8003972:	fa01 f303 	lsl.w	r3, r1, r3
 8003976:	b25b      	sxtb	r3, r3
 8003978:	4313      	orrs	r3, r2
 800397a:	b259      	sxtb	r1, r3
 800397c:	79fa      	ldrb	r2, [r7, #7]
 800397e:	4603      	mov	r3, r0
 8003980:	01db      	lsls	r3, r3, #7
 8003982:	4413      	add	r3, r2
 8003984:	b2c9      	uxtb	r1, r1
 8003986:	4a13      	ldr	r2, [pc, #76]	; (80039d4 <ssd1306_DrawPixel+0xa4>)
 8003988:	54d1      	strb	r1, [r2, r3]
 800398a:	e01d      	b.n	80039c8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800398c:	79fa      	ldrb	r2, [r7, #7]
 800398e:	79bb      	ldrb	r3, [r7, #6]
 8003990:	08db      	lsrs	r3, r3, #3
 8003992:	b2d8      	uxtb	r0, r3
 8003994:	4603      	mov	r3, r0
 8003996:	01db      	lsls	r3, r3, #7
 8003998:	4413      	add	r3, r2
 800399a:	4a0e      	ldr	r2, [pc, #56]	; (80039d4 <ssd1306_DrawPixel+0xa4>)
 800399c:	5cd3      	ldrb	r3, [r2, r3]
 800399e:	b25a      	sxtb	r2, r3
 80039a0:	79bb      	ldrb	r3, [r7, #6]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	2101      	movs	r1, #1
 80039a8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ac:	b25b      	sxtb	r3, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	b25b      	sxtb	r3, r3
 80039b2:	4013      	ands	r3, r2
 80039b4:	b259      	sxtb	r1, r3
 80039b6:	79fa      	ldrb	r2, [r7, #7]
 80039b8:	4603      	mov	r3, r0
 80039ba:	01db      	lsls	r3, r3, #7
 80039bc:	4413      	add	r3, r2
 80039be:	b2c9      	uxtb	r1, r1
 80039c0:	4a04      	ldr	r2, [pc, #16]	; (80039d4 <ssd1306_DrawPixel+0xa4>)
 80039c2:	54d1      	strb	r1, [r2, r3]
 80039c4:	e000      	b.n	80039c8 <ssd1306_DrawPixel+0x98>
        return;
 80039c6:	bf00      	nop
    }
}
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	20000678 	.word	0x20000678

080039d8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80039d8:	b590      	push	{r4, r7, lr}
 80039da:	b089      	sub	sp, #36	; 0x24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4604      	mov	r4, r0
 80039e0:	4638      	mov	r0, r7
 80039e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80039e6:	4623      	mov	r3, r4
 80039e8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	2b1f      	cmp	r3, #31
 80039ee:	d902      	bls.n	80039f6 <ssd1306_WriteChar+0x1e>
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	2b7e      	cmp	r3, #126	; 0x7e
 80039f4:	d901      	bls.n	80039fa <ssd1306_WriteChar+0x22>
        return 0;
 80039f6:	2300      	movs	r3, #0
 80039f8:	e079      	b.n	8003aee <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80039fa:	4b3f      	ldr	r3, [pc, #252]	; (8003af8 <ssd1306_WriteChar+0x120>)
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	783b      	ldrb	r3, [r7, #0]
 8003a02:	4413      	add	r3, r2
 8003a04:	2b80      	cmp	r3, #128	; 0x80
 8003a06:	dc06      	bgt.n	8003a16 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8003a08:	4b3b      	ldr	r3, [pc, #236]	; (8003af8 <ssd1306_WriteChar+0x120>)
 8003a0a:	885b      	ldrh	r3, [r3, #2]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	787b      	ldrb	r3, [r7, #1]
 8003a10:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8003a12:	2b40      	cmp	r3, #64	; 0x40
 8003a14:	dd01      	ble.n	8003a1a <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e069      	b.n	8003aee <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	e04e      	b.n	8003abe <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	3b20      	subs	r3, #32
 8003a26:	7879      	ldrb	r1, [r7, #1]
 8003a28:	fb01 f303 	mul.w	r3, r1, r3
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	440b      	add	r3, r1
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	4413      	add	r3, r2
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61bb      	str	r3, [r7, #24]
 8003a3e:	e036      	b.n	8003aae <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d013      	beq.n	8003a78 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003a50:	4b29      	ldr	r3, [pc, #164]	; (8003af8 <ssd1306_WriteChar+0x120>)
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	b2d8      	uxtb	r0, r3
 8003a5e:	4b26      	ldr	r3, [pc, #152]	; (8003af8 <ssd1306_WriteChar+0x120>)
 8003a60:	885b      	ldrh	r3, [r3, #2]
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	4413      	add	r3, r2
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8003a70:	4619      	mov	r1, r3
 8003a72:	f7ff ff5d 	bl	8003930 <ssd1306_DrawPixel>
 8003a76:	e017      	b.n	8003aa8 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003a78:	4b1f      	ldr	r3, [pc, #124]	; (8003af8 <ssd1306_WriteChar+0x120>)
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	4413      	add	r3, r2
 8003a84:	b2d8      	uxtb	r0, r3
 8003a86:	4b1c      	ldr	r3, [pc, #112]	; (8003af8 <ssd1306_WriteChar+0x120>)
 8003a88:	885b      	ldrh	r3, [r3, #2]
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	4413      	add	r3, r2
 8003a92:	b2d9      	uxtb	r1, r3
 8003a94:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bf0c      	ite	eq
 8003a9c:	2301      	moveq	r3, #1
 8003a9e:	2300      	movne	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f7ff ff44 	bl	8003930 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	61bb      	str	r3, [r7, #24]
 8003aae:	783b      	ldrb	r3, [r7, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d3c3      	bcc.n	8003a40 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	3301      	adds	r3, #1
 8003abc:	61fb      	str	r3, [r7, #28]
 8003abe:	787b      	ldrb	r3, [r7, #1]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d3ab      	bcc.n	8003a20 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <ssd1306_WriteChar+0x120>)
 8003aca:	881a      	ldrh	r2, [r3, #0]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d006      	beq.n	8003ae0 <ssd1306_WriteChar+0x108>
 8003ad2:	68b9      	ldr	r1, [r7, #8]
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
 8003ad6:	3b20      	subs	r3, #32
 8003ad8:	440b      	add	r3, r1
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	e001      	b.n	8003ae4 <ssd1306_WriteChar+0x10c>
 8003ae0:	783b      	ldrb	r3, [r7, #0]
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	4b03      	ldr	r3, [pc, #12]	; (8003af8 <ssd1306_WriteChar+0x120>)
 8003aea:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3724      	adds	r7, #36	; 0x24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd90      	pop	{r4, r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000a78 	.word	0x20000a78

08003afc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af02      	add	r7, sp, #8
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	4638      	mov	r0, r7
 8003b06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8003b0a:	e013      	b.n	8003b34 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	7818      	ldrb	r0, [r3, #0]
 8003b10:	7e3b      	ldrb	r3, [r7, #24]
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	463b      	mov	r3, r7
 8003b16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b18:	f7ff ff5e 	bl	80039d8 <ssd1306_WriteChar>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	461a      	mov	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d002      	beq.n	8003b2e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	e008      	b.n	8003b40 <ssd1306_WriteString+0x44>
        }
        str++;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	3301      	adds	r3, #1
 8003b32:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e7      	bne.n	8003b0c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	460a      	mov	r2, r1
 8003b52:	71fb      	strb	r3, [r7, #7]
 8003b54:	4613      	mov	r3, r2
 8003b56:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003b58:	79fb      	ldrb	r3, [r7, #7]
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <ssd1306_SetCursor+0x2c>)
 8003b5e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003b60:	79bb      	ldrb	r3, [r7, #6]
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	4b03      	ldr	r3, [pc, #12]	; (8003b74 <ssd1306_SetCursor+0x2c>)
 8003b66:	805a      	strh	r2, [r3, #2]
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	20000a78 	.word	0x20000a78

08003b78 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003b82:	2381      	movs	r3, #129	; 0x81
 8003b84:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003b86:	7bfb      	ldrb	r3, [r7, #15]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff fdf5 	bl	8003778 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff fdf1 	bl	8003778 <ssd1306_WriteCommand>
}
 8003b96:	bf00      	nop
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003baa:	79fb      	ldrb	r3, [r7, #7]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003bb0:	23af      	movs	r3, #175	; 0xaf
 8003bb2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003bb4:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <ssd1306_SetDisplayOn+0x38>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	715a      	strb	r2, [r3, #5]
 8003bba:	e004      	b.n	8003bc6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003bbc:	23ae      	movs	r3, #174	; 0xae
 8003bbe:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <ssd1306_SetDisplayOn+0x38>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff fdd5 	bl	8003778 <ssd1306_WriteCommand>
}
 8003bce:	bf00      	nop
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000a78 	.word	0x20000a78

08003bdc <ssd1306_WriteInt>:
    return SSD1306.DisplayOn;
}

// Upd by AKG
void ssd1306_WriteInt(int num, SSD1306_Font_t Font, SSD1306_COLOR color)
{
 8003bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003be0:	b08b      	sub	sp, #44	; 0x2c
 8003be2:	af02      	add	r7, sp, #8
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	4638      	mov	r0, r7
 8003be8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003bec:	466b      	mov	r3, sp
 8003bee:	461e      	mov	r6, r3
	static const int MAX_NUMBER_LENGTH = 10;

	int num_length = 1;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	61fb      	str	r3, [r7, #28]
	int num_divided = num;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	61bb      	str	r3, [r7, #24]
	while(num_divided / 10) {
 8003bf8:	e00a      	b.n	8003c10 <ssd1306_WriteInt+0x34>
		num_length++;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	61fb      	str	r3, [r7, #28]
		num_divided = num_divided / 10;
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	4a32      	ldr	r2, [pc, #200]	; (8003ccc <ssd1306_WriteInt+0xf0>)
 8003c04:	fb82 1203 	smull	r1, r2, r2, r3
 8003c08:	1092      	asrs	r2, r2, #2
 8003c0a:	17db      	asrs	r3, r3, #31
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	61bb      	str	r3, [r7, #24]
	while(num_divided / 10) {
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	3309      	adds	r3, #9
 8003c14:	2b12      	cmp	r3, #18
 8003c16:	d8f0      	bhi.n	8003bfa <ssd1306_WriteInt+0x1e>
	}

	char str[MAX_NUMBER_LENGTH];
 8003c18:	4b2d      	ldr	r3, [pc, #180]	; (8003cd0 <ssd1306_WriteInt+0xf4>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	4b2b      	ldr	r3, [pc, #172]	; (8003cd0 <ssd1306_WriteInt+0xf4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	2300      	movs	r3, #0
 8003c28:	4690      	mov	r8, r2
 8003c2a:	4699      	mov	r9, r3
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c40:	4b23      	ldr	r3, [pc, #140]	; (8003cd0 <ssd1306_WriteInt+0xf4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	2300      	movs	r3, #0
 8003c48:	4614      	mov	r4, r2
 8003c4a:	461d      	mov	r5, r3
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	00eb      	lsls	r3, r5, #3
 8003c56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c5a:	00e2      	lsls	r2, r4, #3
 8003c5c:	4b1c      	ldr	r3, [pc, #112]	; (8003cd0 <ssd1306_WriteInt+0xf4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3307      	adds	r3, #7
 8003c62:	08db      	lsrs	r3, r3, #3
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	ebad 0d03 	sub.w	sp, sp, r3
 8003c6a:	ab02      	add	r3, sp, #8
 8003c6c:	3300      	adds	r3, #0
 8003c6e:	613b      	str	r3, [r7, #16]
	memset(str, 0, MAX_NUMBER_LENGTH*sizeof(char));
 8003c70:	4b17      	ldr	r3, [pc, #92]	; (8003cd0 <ssd1306_WriteInt+0xf4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	461a      	mov	r2, r3
 8003c76:	2100      	movs	r1, #0
 8003c78:	6938      	ldr	r0, [r7, #16]
 8003c7a:	f006 f8fd 	bl	8009e78 <memset>

	if(num_length <= MAX_NUMBER_LENGTH)
 8003c7e:	4b14      	ldr	r3, [pc, #80]	; (8003cd0 <ssd1306_WriteInt+0xf4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	dc0d      	bgt.n	8003ca4 <ssd1306_WriteInt+0xc8>
	{
		itoa(num, str, 10);
 8003c88:	220a      	movs	r2, #10
 8003c8a:	6939      	ldr	r1, [r7, #16]
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f005 fffb 	bl	8009c88 <itoa>
		ssd1306_WriteString(str, Font, color);
 8003c92:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	463b      	mov	r3, r7
 8003c9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c9c:	6938      	ldr	r0, [r7, #16]
 8003c9e:	f7ff ff2d 	bl	8003afc <ssd1306_WriteString>
 8003ca2:	e00c      	b.n	8003cbe <ssd1306_WriteInt+0xe2>
	}
	else
	{
		itoa(0, str, 10);
 8003ca4:	220a      	movs	r2, #10
 8003ca6:	6939      	ldr	r1, [r7, #16]
 8003ca8:	2000      	movs	r0, #0
 8003caa:	f005 ffed 	bl	8009c88 <itoa>
		ssd1306_WriteString(str, Font, color);
 8003cae:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	463b      	mov	r3, r7
 8003cb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cb8:	6938      	ldr	r0, [r7, #16]
 8003cba:	f7ff ff1f 	bl	8003afc <ssd1306_WriteString>
 8003cbe:	46b5      	mov	sp, r6
	}
}
 8003cc0:	bf00      	nop
 8003cc2:	3724      	adds	r7, #36	; 0x24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cca:	bf00      	nop
 8003ccc:	66666667 	.word	0x66666667
 8003cd0:	0800af54 	.word	0x0800af54

08003cd4 <rx_message_run_command>:
#include <stdlib.h>

extern general_task_t task;

void rx_message_run_command(char* msg)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
	int32_t code = 0, param = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60bb      	str	r3, [r7, #8]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
	memcpy(&code, msg, sizeof(code));
 8003ce8:	60fb      	str	r3, [r7, #12]
	memcpy(&param, msg + 4, sizeof(param));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3304      	adds	r3, #4
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60bb      	str	r3, [r7, #8]

	switch(code)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2b05      	cmp	r3, #5
 8003cf6:	d842      	bhi.n	8003d7e <rx_message_run_command+0xaa>
 8003cf8:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <rx_message_run_command+0x2c>)
 8003cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003d79 	.word	0x08003d79
 8003d04:	08003d19 	.word	0x08003d19
 8003d08:	08003d37 	.word	0x08003d37
 8003d0c:	08003d49 	.word	0x08003d49
 8003d10:	08003d51 	.word	0x08003d51
 8003d14:	08003d63 	.word	0x08003d63
	{
	case COMM_EMPTY:
		break;
	case COMM_SET_HV:
		// [param] = HV in Volts
		hv_set_abs_output_voltage_V(&task.hv_system, (double)abs(param));
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	bfb8      	it	lt
 8003d1e:	425b      	neglt	r3, r3
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fc fba3 	bl	800046c <__aeabi_i2d>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	ec43 2b10 	vmov	d0, r2, r3
 8003d2e:	4816      	ldr	r0, [pc, #88]	; (8003d88 <rx_message_run_command+0xb4>)
 8003d30:	f7fe fd7c 	bl	800282c <hv_set_abs_output_voltage_V>
		break;
 8003d34:	e023      	b.n	8003d7e <rx_message_run_command+0xaa>
	case COMM_START_MEAS:
		if(param >= 0) // [param] = seconds
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	db1f      	blt.n	8003d7c <rx_message_run_command+0xa8>
		{
			adc_monitor_start_measurement(&task.adcDRMonitor, param);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4812      	ldr	r0, [pc, #72]	; (8003d8c <rx_message_run_command+0xb8>)
 8003d42:	f7fd fc23 	bl	800158c <adc_monitor_start_measurement>
		}
		break;
 8003d46:	e019      	b.n	8003d7c <rx_message_run_command+0xa8>
	case COMM_RESET_MEAS:
		adc_monitor_reset_measurement(&task.adcDRMonitor);
 8003d48:	4810      	ldr	r0, [pc, #64]	; (8003d8c <rx_message_run_command+0xb8>)
 8003d4a:	f7fd fc41 	bl	80015d0 <adc_monitor_reset_measurement>
		break;
 8003d4e:	e016      	b.n	8003d7e <rx_message_run_command+0xaa>
	case COMM_SET_MEAS_RANGE:
		if(!param) // [param] = 0 - broad range, 1 - narrow range
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d102      	bne.n	8003d5c <rx_message_run_command+0x88>
		{
			select_broad_adc_dose_range();
 8003d56:	f7fd fc93 	bl	8001680 <select_broad_adc_dose_range>
		}
		else
		{
			select_narrow_adc_dose_range();
		}
		break;
 8003d5a:	e010      	b.n	8003d7e <rx_message_run_command+0xaa>
			select_narrow_adc_dose_range();
 8003d5c:	f7fd fca6 	bl	80016ac <select_narrow_adc_dose_range>
		break;
 8003d60:	e00d      	b.n	8003d7e <rx_message_run_command+0xaa>
	case COMM_SWITCH_HV:
		if(!param) // [param] = 0 - positive HV source, 1 - negative HV source
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d103      	bne.n	8003d70 <rx_message_run_command+0x9c>
		{
			hv_select_positive_source(&task.hv_system);
 8003d68:	4807      	ldr	r0, [pc, #28]	; (8003d88 <rx_message_run_command+0xb4>)
 8003d6a:	f7fe fd4e 	bl	800280a <hv_select_positive_source>
		else
		{
			hv_select_negative_source(&task.hv_system);
		}
		// gpio toggle
		break;
 8003d6e:	e006      	b.n	8003d7e <rx_message_run_command+0xaa>
			hv_select_negative_source(&task.hv_system);
 8003d70:	4805      	ldr	r0, [pc, #20]	; (8003d88 <rx_message_run_command+0xb4>)
 8003d72:	f7fe fd39 	bl	80027e8 <hv_select_negative_source>
		break;
 8003d76:	e002      	b.n	8003d7e <rx_message_run_command+0xaa>
		break;
 8003d78:	bf00      	nop
 8003d7a:	e000      	b.n	8003d7e <rx_message_run_command+0xaa>
		break;
 8003d7c:	bf00      	nop
	}
}
 8003d7e:	bf00      	nop
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20000600 	.word	0x20000600
 8003d8c:	20000570 	.word	0x20000570

08003d90 <tcp_input_stream_init>:
static int tcp_input_stream_listen_socket(tcp_input_stream_t *self);
static int tcp_input_stream_receive(tcp_input_stream_t *self);
static int tcp_input_stream_reboot_ethernet(tcp_input_stream_t *self, int sockOpen);

int tcp_input_stream_init(tcp_input_stream_t *self, tcp_input_stream_init_data_t tcpInit)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	4638      	mov	r0, r7
 8003d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	memset(self, 0, sizeof(*self));
 8003d9e:	223c      	movs	r2, #60	; 0x3c
 8003da0:	2100      	movs	r1, #0
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f006 f868 	bl	8009e78 <memset>
	memset(self->msg, 0, INPUT_MESSAGE_SIZE);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	3301      	adds	r3, #1
 8003dac:	2208      	movs	r2, #8
 8003dae:	2100      	movs	r1, #0
 8003db0:	4618      	mov	r0, r3
 8003db2:	f006 f861 	bl	8009e78 <memset>
	memset(self->msgTemp, 0, INPUT_MESSAGE_SIZE);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3309      	adds	r3, #9
 8003dba:	2208      	movs	r2, #8
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f006 f85a 	bl	8009e78 <memset>
	memset(self->buff, 0, INPUT_MESSAGE_BUFFER_SIZE);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	3311      	adds	r3, #17
 8003dc8:	2208      	movs	r2, #8
 8003dca:	2100      	movs	r1, #0
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f006 f853 	bl	8009e78 <memset>
	self->stat = 0;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	701a      	strb	r2, [r3, #0]
	self->initData = tcpInit;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	3328      	adds	r3, #40	; 0x28
 8003ddc:	463a      	mov	r2, r7
 8003dde:	ca07      	ldmia	r2, {r0, r1, r2}
 8003de0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	self->currentBuffIndex = 0;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	61da      	str	r2, [r3, #28]
	self->bytesReceived = 0;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	621a      	str	r2, [r3, #32]
	self->msgSize = 0;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	849a      	strh	r2, [r3, #36]	; 0x24
	self->handlerEnabled = 0;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	self->isConnected = 0;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	self->w5500RebootCounter = self->initData.w5500RebootCounterMax;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	639a      	str	r2, [r3, #56]	; 0x38

	//self->state = INPUT_SOCK_INIT;
	return 0;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <tcp_input_stream_routine>:
{
	return INPUT_MESSAGE_SIZE; //size
}

int tcp_input_stream_routine(tcp_input_stream_t *self)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
	// new state mashine
	int received = -1;
 8003e20:	f04f 33ff 	mov.w	r3, #4294967295
 8003e24:	60fb      	str	r3, [r7, #12]
	self->isConnected = 0;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	switch(getSn_SR(self->initData.sn))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	3301      	adds	r3, #1
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 ff2c 	bl	8004c9c <WIZCHIP_READ>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b17      	cmp	r3, #23
 8003e48:	d013      	beq.n	8003e72 <tcp_input_stream_routine+0x5a>
 8003e4a:	2b17      	cmp	r3, #23
 8003e4c:	dc24      	bgt.n	8003e98 <tcp_input_stream_routine+0x80>
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <tcp_input_stream_routine+0x40>
 8003e52:	2b13      	cmp	r3, #19
 8003e54:	d009      	beq.n	8003e6a <tcp_input_stream_routine+0x52>
 8003e56:	e01f      	b.n	8003e98 <tcp_input_stream_routine+0x80>
	{
	case SOCK_CLOSED:
		int open = tcp_input_stream_open_socket(self);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f830 	bl	8003ebe <tcp_input_stream_open_socket>
 8003e5e:	60b8      	str	r0, [r7, #8]
		tcp_input_stream_reboot_ethernet(self, open);
 8003e60:	68b9      	ldr	r1, [r7, #8]
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f8ba 	bl	8003fdc <tcp_input_stream_reboot_ethernet>
		break;
 8003e68:	e016      	b.n	8003e98 <tcp_input_stream_routine+0x80>
	case SOCK_INIT:
		tcp_input_stream_listen_socket(self);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f83f 	bl	8003eee <tcp_input_stream_listen_socket>
		break;
 8003e70:	e012      	b.n	8003e98 <tcp_input_stream_routine+0x80>
	case SOCK_ESTABLISHED:
		received = tcp_input_stream_receive(self);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f84e 	bl	8003f14 <tcp_input_stream_receive>
 8003e78:	60f8      	str	r0, [r7, #12]
		if(received < 0)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	da06      	bge.n	8003e8e <tcp_input_stream_routine+0x76>
		{
			disconnect(self->initData.sn);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fce2 	bl	8004850 <disconnect>
		}
		else
		{
			self->isConnected = 1;
		}
		break;
 8003e8c:	e003      	b.n	8003e96 <tcp_input_stream_routine+0x7e>
			self->isConnected = 1;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		break;
 8003e96:	bf00      	nop
	}
	return 0;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <tcp_input_stream_enable_handler>:


void tcp_input_stream_enable_handler(tcp_input_stream_t *self)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
	self->handlerEnabled = 1;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <tcp_input_stream_open_socket>:
{
	return self->isConnected;
}

static int tcp_input_stream_open_socket(tcp_input_stream_t *self)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
	self->stat = socket(self->initData.sn, Sn_MR_TCP, self->initData.port, self->initData.flag);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	f000 fade 	bl	8004498 <socket>
 8003edc:	4603      	mov	r3, r0
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	701a      	strb	r2, [r3, #0]
	return 0;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <tcp_input_stream_listen_socket>:

static int tcp_input_stream_listen_socket(tcp_input_stream_t *self)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b082      	sub	sp, #8
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
	self->stat = listen(self->initData.sn);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 fc4d 	bl	800479c <listen>
 8003f02:	4603      	mov	r3, r0
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	701a      	strb	r2, [r3, #0]
	return 0;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <tcp_input_stream_receive>:

static int tcp_input_stream_receive(tcp_input_stream_t *self)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
	while (self->bytesReceived != INPUT_MESSAGE_SIZE)
 8003f1c:	e033      	b.n	8003f86 <tcp_input_stream_receive+0x72>
	{
		int recv_size = recv(self->initData.sn, (uint8_t*)self->buff, INPUT_MESSAGE_BUFFER_SIZE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3311      	adds	r3, #17
 8003f28:	2208      	movs	r2, #8
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	f000 fe00 	bl	8004b30 <recv>
 8003f30:	60f8      	str	r0, [r7, #12]
		if (recv_size == 0)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <tcp_input_stream_receive+0x28>
		{
			return 0;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	e04b      	b.n	8003fd4 <tcp_input_stream_receive+0xc0>
		}
		if (recv_size < 0)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	da01      	bge.n	8003f46 <tcp_input_stream_receive+0x32>
		{
			return recv_size;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	e046      	b.n	8003fd4 <tcp_input_stream_receive+0xc0>
		}

		self->bytesReceived += recv_size;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1a      	ldr	r2, [r3, #32]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	441a      	add	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	621a      	str	r2, [r3, #32]

		int i;
		for(i = 0; i < recv_size; ++i)
 8003f52:	2300      	movs	r3, #0
 8003f54:	617b      	str	r3, [r7, #20]
 8003f56:	e012      	b.n	8003f7e <tcp_input_stream_receive+0x6a>
		{
			self->msgTemp[self->currentBuffIndex] = self->buff[i];
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	440a      	add	r2, r1
 8003f62:	3211      	adds	r2, #17
 8003f64:	7811      	ldrb	r1, [r2, #0]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	4413      	add	r3, r2
 8003f6a:	460a      	mov	r2, r1
 8003f6c:	725a      	strb	r2, [r3, #9]
			self->currentBuffIndex++;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	61da      	str	r2, [r3, #28]
		for(i = 0; i < recv_size; ++i)
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	dbe8      	blt.n	8003f58 <tcp_input_stream_receive+0x44>
	while (self->bytesReceived != INPUT_MESSAGE_SIZE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	2b08      	cmp	r3, #8
 8003f8c:	d1c7      	bne.n	8003f1e <tcp_input_stream_receive+0xa>
		}

	}

	memcpy(self->msg, self->msgTemp, INPUT_MESSAGE_SIZE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	1c58      	adds	r0, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3309      	adds	r3, #9
 8003f96:	2208      	movs	r2, #8
 8003f98:	4619      	mov	r1, r3
 8003f9a:	f005 ffb1 	bl	8009f00 <memcpy>

	if(self->handlerEnabled)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d004      	beq.n	8003fb2 <tcp_input_stream_receive+0x9e>
	{
		rx_message_run_command(self->msg); // reaction
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3301      	adds	r3, #1
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff fe91 	bl	8003cd4 <rx_message_run_command>
	}

	int tempBytesReceived = self->bytesReceived;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	613b      	str	r3, [r7, #16]
	memset(self->msgTemp, 0, INPUT_MESSAGE_SIZE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3309      	adds	r3, #9
 8003fbc:	2208      	movs	r2, #8
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f005 ff59 	bl	8009e78 <memset>
	self->bytesReceived = 0;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	621a      	str	r2, [r3, #32]
	self->currentBuffIndex = 0;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	61da      	str	r2, [r3, #28]

	return tempBytesReceived;
 8003fd2:	693b      	ldr	r3, [r7, #16]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <tcp_input_stream_reboot_ethernet>:
	close(self->initData.sn);
	return 0;
}

static int tcp_input_stream_reboot_ethernet(tcp_input_stream_t *self, int sockOpen)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
	if(sockOpen != SOCK_OK)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d010      	beq.n	800400e <tcp_input_stream_reboot_ethernet+0x32>
	{
		if(self->w5500RebootCounter == 0)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d106      	bne.n	8004002 <tcp_input_stream_reboot_ethernet+0x26>
		{
			W5500_Reboot();
 8003ff4:	f001 fc58 	bl	80058a8 <W5500_Reboot>
			// reset delay counter after reboot
			self->w5500RebootCounter = self->initData.w5500RebootCounterMax;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	639a      	str	r2, [r3, #56]	; 0x38
 8004000:	e009      	b.n	8004016 <tcp_input_stream_reboot_ethernet+0x3a>
		}
		else
		{
			// count delay
			self->w5500RebootCounter--;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	1e5a      	subs	r2, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	639a      	str	r2, [r3, #56]	; 0x38
 800400c:	e003      	b.n	8004016 <tcp_input_stream_reboot_ethernet+0x3a>
		}
	}
	else
	{
		// reset delay counter after ok open socket
		self->w5500RebootCounter = self->initData.w5500RebootCounterMax;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	639a      	str	r2, [r3, #56]	; 0x38
	}
	return 0;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <tcp_output_stream_init>:
static int tcp_output_stream_listen_socket(tcp_output_stream_t *self);
static int tcp_output_stream_send(tcp_output_stream_t *self);
static int tcp_output_stream_reboot_socket(tcp_output_stream_t *self, int sent);

int tcp_output_stream_init(tcp_output_stream_t *self, tcp_output_stream_init_data_t tcpInit)
{
 8004020:	b084      	sub	sp, #16
 8004022:	b590      	push	{r4, r7, lr}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	f107 001c 	add.w	r0, r7, #28
 800402e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	memset(self, 0, sizeof(*self));
 8004032:	229c      	movs	r2, #156	; 0x9c
 8004034:	2100      	movs	r1, #0
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f005 ff1e 	bl	8009e78 <memset>
	self->stat = 0;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	701a      	strb	r2, [r3, #0]
	self->initData = tcpInit;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f103 0484 	add.w	r4, r3, #132	; 0x84
 8004048:	f107 031c 	add.w	r3, r7, #28
 800404c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800404e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->msgSize = 0;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	self->isConnected = 0;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	self->closeSocketCounter = self->initData.closeSocketCounterMax;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	memset(self->msg, 0, MAX_OUTPUT_MESSAGE_SIZE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3301      	adds	r3, #1
 8004072:	2280      	movs	r2, #128	; 0x80
 8004074:	2100      	movs	r1, #0
 8004076:	4618      	mov	r0, r3
 8004078:	f005 fefe 	bl	8009e78 <memset>
	return 0;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004088:	b004      	add	sp, #16
 800408a:	4770      	bx	lr

0800408c <tcp_output_stream_set_message>:
{
	return 0;
}

int tcp_output_stream_set_message(tcp_output_stream_t *self, char* message, uint16_t size)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	4613      	mov	r3, r2
 8004098:	80fb      	strh	r3, [r7, #6]
	memset(self->msg, 0, MAX_OUTPUT_MESSAGE_SIZE);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	3301      	adds	r3, #1
 800409e:	2280      	movs	r2, #128	; 0x80
 80040a0:	2100      	movs	r1, #0
 80040a2:	4618      	mov	r0, r3
 80040a4:	f005 fee8 	bl	8009e78 <memset>
	if(size < MAX_OUTPUT_MESSAGE_SIZE)
 80040a8:	88fb      	ldrh	r3, [r7, #6]
 80040aa:	2b7f      	cmp	r3, #127	; 0x7f
 80040ac:	d80b      	bhi.n	80040c6 <tcp_output_stream_set_message+0x3a>
	{
		self->msgSize = size;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	88fa      	ldrh	r2, [r7, #6]
 80040b2:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		memcpy(self->msg, message, size);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	3301      	adds	r3, #1
 80040ba:	88fa      	ldrh	r2, [r7, #6]
 80040bc:	68b9      	ldr	r1, [r7, #8]
 80040be:	4618      	mov	r0, r3
 80040c0:	f005 ff1e 	bl	8009f00 <memcpy>
 80040c4:	e00a      	b.n	80040dc <tcp_output_stream_set_message+0x50>
	}
	else
	{
		self->msgSize = MAX_OUTPUT_MESSAGE_SIZE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2280      	movs	r2, #128	; 0x80
 80040ca:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		memcpy(self->msg, message, MAX_OUTPUT_MESSAGE_SIZE);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	3301      	adds	r3, #1
 80040d2:	2280      	movs	r2, #128	; 0x80
 80040d4:	68b9      	ldr	r1, [r7, #8]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f005 ff12 	bl	8009f00 <memcpy>
	}
	return 0;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <tcp_output_stream_routine>:

int tcp_output_stream_routine(tcp_output_stream_t *self)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b084      	sub	sp, #16
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
	// new state machine
	int sent = -1;
 80040ee:	f04f 33ff 	mov.w	r3, #4294967295
 80040f2:	60fb      	str	r3, [r7, #12]
	self->isConnected = 0;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	switch(getSn_SR(self->initData.sn))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	3301      	adds	r3, #1
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fdc5 	bl	8004c9c <WIZCHIP_READ>
 8004112:	4603      	mov	r3, r0
 8004114:	2b17      	cmp	r3, #23
 8004116:	d00e      	beq.n	8004136 <tcp_output_stream_routine+0x50>
 8004118:	2b17      	cmp	r3, #23
 800411a:	dc27      	bgt.n	800416c <tcp_output_stream_routine+0x86>
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <tcp_output_stream_routine+0x40>
 8004120:	2b13      	cmp	r3, #19
 8004122:	d004      	beq.n	800412e <tcp_output_stream_routine+0x48>
 8004124:	e022      	b.n	800416c <tcp_output_stream_routine+0x86>
	{
	case SOCK_CLOSED:
		//int open = tcp_output_stream_open_socket(self);
		tcp_output_stream_open_socket(self);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f825 	bl	8004176 <tcp_output_stream_open_socket>
		break;
 800412c:	e01e      	b.n	800416c <tcp_output_stream_routine+0x86>
	case SOCK_INIT:
		tcp_output_stream_listen_socket(self);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f83a 	bl	80041a8 <tcp_output_stream_listen_socket>
		break;
 8004134:	e01a      	b.n	800416c <tcp_output_stream_routine+0x86>
	case SOCK_ESTABLISHED:
		sent = tcp_output_stream_send(self);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f849 	bl	80041ce <tcp_output_stream_send>
 800413c:	60f8      	str	r0, [r7, #12]
		if(sent < 0)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	da06      	bge.n	8004152 <tcp_output_stream_routine+0x6c>
		{
			disconnect(self->initData.sn);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fb80 	bl	8004850 <disconnect>
		}
		else
		{
			self->isConnected = 1;
		}
		break;
 8004150:	e00b      	b.n	800416a <tcp_output_stream_routine+0x84>
		else if (self == 0)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d104      	bne.n	8004162 <tcp_output_stream_routine+0x7c>
			tcp_output_stream_reboot_socket(self, sent);
 8004158:	68f9      	ldr	r1, [r7, #12]
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f85a 	bl	8004214 <tcp_output_stream_reboot_socket>
		break;
 8004160:	e003      	b.n	800416a <tcp_output_stream_routine+0x84>
			self->isConnected = 1;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		break;
 800416a:	bf00      	nop
	}
	return 0;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <tcp_output_stream_open_socket>:
{
	return self->isConnected;
}

static int tcp_output_stream_open_socket(tcp_output_stream_t *self)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b082      	sub	sp, #8
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
	self->stat = socket(self->initData.sn, Sn_MR_TCP, self->initData.port, self->initData.flag);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 0084 	ldrb.w	r0, [r3, #132]	; 0x84
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8004190:	2101      	movs	r1, #1
 8004192:	f000 f981 	bl	8004498 <socket>
 8004196:	4603      	mov	r3, r0
 8004198:	b2da      	uxtb	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	701a      	strb	r2, [r3, #0]
	return 0;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <tcp_output_stream_listen_socket>:

static int tcp_output_stream_listen_socket(tcp_output_stream_t *self)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
	self->stat = listen(self->initData.sn);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 faf0 	bl	800479c <listen>
 80041bc:	4603      	mov	r3, r0
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	701a      	strb	r2, [r3, #0]
	return 0;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <tcp_output_stream_send>:

static int tcp_output_stream_send(tcp_output_stream_t *self)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b082      	sub	sp, #8
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
	return send(self->initData.sn, (uint8_t*)self->msg, self->msgSize);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 0084 	ldrb.w	r0, [r3, #132]	; 0x84
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	1c59      	adds	r1, r3, #1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80041e6:	461a      	mov	r2, r3
 80041e8:	f000 fba8 	bl	800493c <send>
 80041ec:	4603      	mov	r3, r0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <tcp_output_stream_close_socket>:

int tcp_output_stream_close_socket(tcp_output_stream_t *self)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b082      	sub	sp, #8
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
	close(self->initData.sn);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fa5b 	bl	80046c0 <close>
	return 0;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <tcp_output_stream_reboot_socket>:

static int tcp_output_stream_reboot_socket(tcp_output_stream_t *self, int sent)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
	if (!sent) // sent == 0
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d116      	bne.n	8004252 <tcp_output_stream_reboot_socket+0x3e>
	{
		if(self->closeSocketCounter == 0)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <tcp_output_stream_reboot_socket+0x2e>
		{
			tcp_output_stream_close_socket(self);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff ffe1 	bl	80041f6 <tcp_output_stream_close_socket>

			// reset delay counter after reboot
			self->closeSocketCounter = self->initData.closeSocketCounterMax;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004240:	e00d      	b.n	800425e <tcp_output_stream_reboot_socket+0x4a>
		}
		else
		{
			// count delay
			self->closeSocketCounter--;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004248:	1e5a      	subs	r2, r3, #1
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004250:	e005      	b.n	800425e <tcp_output_stream_reboot_socket+0x4a>
		}
	}
	else
	{
		// reset delay counter after reboot
		self->closeSocketCounter = self->initData.closeSocketCounterMax;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}

	return 0;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <tx_message_increase_id>:
{
	return 0;
}

void tx_message_increase_id(tx_message_t *self)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
	uint32_t id;
	memcpy(&id, self->message + BYTE_POS_ID, sizeof(id)); // get current id
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	60fb      	str	r3, [r7, #12]
	id++; // increase id
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	3301      	adds	r3, #1
 800427a:	60fb      	str	r3, [r7, #12]
	memcpy(self->message + BYTE_POS_ID, (char*)&id, sizeof(id)); // copy increased id
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	601a      	str	r2, [r3, #0]
}
 8004282:	bf00      	nop
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <tx_message_set_adc_dr_uV>:

void tx_message_set_adc_dr_uV(tx_message_t *self, int32_t val)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	6039      	str	r1, [r7, #0]
	memcpy(self->message + BYTE_POS_ADC_DR, (char*)&val, sizeof(val));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3304      	adds	r3, #4
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	601a      	str	r2, [r3, #0]
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <tx_message_set_adc_dr_average_uV>:

void tx_message_set_adc_dr_average_uV(tx_message_t *self, int32_t val)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
	memcpy(self->message + BYTE_POS_ADC_DR_AV, (char*)&val, sizeof(val));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3308      	adds	r3, #8
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	601a      	str	r2, [r3, #0]
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <tx_message_set_hv_out_mV>:

void tx_message_set_hv_out_mV(tx_message_t *self, int32_t val)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b083      	sub	sp, #12
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
 80042d2:	6039      	str	r1, [r7, #0]
	memcpy(self->message + BYTE_POS_HV_OUT, (char*)&val, sizeof(val));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	330c      	adds	r3, #12
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	601a      	str	r2, [r3, #0]
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <tx_message_set_press_out_Pa>:

void tx_message_set_press_out_Pa(tx_message_t *self, int32_t val)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
	memcpy(self->message + BYTE_POS_PRESS_OUT, (char*)&val, sizeof(val));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3310      	adds	r3, #16
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	601a      	str	r2, [r3, #0]
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <tx_message_set_adc_dr_measure_state>:

void tx_message_set_adc_dr_measure_state(tx_message_t *self, uint8_t val)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	460b      	mov	r3, r1
 8004310:	70fb      	strb	r3, [r7, #3]
	memcpy(self->message + BYTE_POS_DR_MEASURE_STATE, (char*)&val, sizeof(val));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3314      	adds	r3, #20
 8004316:	78fa      	ldrb	r2, [r7, #3]
 8004318:	701a      	strb	r2, [r3, #0]
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <tx_message_set_adc_dr_measure_time>:

void tx_message_set_adc_dr_measure_time(tx_message_t *self, uint16_t val)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	460b      	mov	r3, r1
 8004330:	807b      	strh	r3, [r7, #2]
	memcpy(self->message + BYTE_POS_DR_MEASURE_TIME, (char*)&val, sizeof(val));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3315      	adds	r3, #21
 8004336:	887a      	ldrh	r2, [r7, #2]
 8004338:	801a      	strh	r2, [r3, #0]
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <tx_message_get>:


char* tx_message_get(tx_message_t *self)
{
 8004346:	b480      	push	{r7}
 8004348:	b083      	sub	sp, #12
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
	return self->message;
 800434e:	687b      	ldr	r3, [r7, #4]
}
 8004350:	4618      	mov	r0, r3
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <tx_message_size>:

size_t tx_message_size(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
	return TX_MESSAGE_SIZE;
 8004360:	2317      	movs	r3, #23
}
 8004362:	4618      	mov	r0, r3
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <uart_handle_rx_message>:
	RESP_OK = 0x01,
	RESP_ERR = 0x02
} response_code_t;

void uart_handle_rx_message(UART_HandleTypeDef* huart, uint8_t *msg)
{
 800436c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004370:	b08d      	sub	sp, #52	; 0x34
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	466b      	mov	r3, sp
 800437a:	461e      	mov	r6, r3
	// 1 - ip[1]
	// 2 - ip[2]
	// 3 - ip[3]
	// 4-5 - output port
	// 6-7 - input port
	const int TIMEOUT = 50;
 800437c:	2332      	movs	r3, #50	; 0x32
 800437e:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t code_ok = RESP_OK;
 8004380:	2301      	movs	r3, #1
 8004382:	76fb      	strb	r3, [r7, #27]
	flash_data_t data;
	//uint8_t code_err = RESP_ERR;
	command_code_t command_code = *(int*)msg;
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	const int TX_BUFF_SIZE = 8;
 800438c:	2308      	movs	r3, #8
 800438e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t buff[TX_BUFF_SIZE];
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	3b01      	subs	r3, #1
 8004394:	623b      	str	r3, [r7, #32]
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	2200      	movs	r2, #0
 800439a:	4698      	mov	r8, r3
 800439c:	4691      	mov	r9, r2
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	f04f 0300 	mov.w	r3, #0
 80043a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	2200      	movs	r2, #0
 80043b6:	461c      	mov	r4, r3
 80043b8:	4615      	mov	r5, r2
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	f04f 0300 	mov.w	r3, #0
 80043c2:	00eb      	lsls	r3, r5, #3
 80043c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043c8:	00e2      	lsls	r2, r4, #3
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	3307      	adds	r3, #7
 80043ce:	08db      	lsrs	r3, r3, #3
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	ebad 0d03 	sub.w	sp, sp, r3
 80043d6:	466b      	mov	r3, sp
 80043d8:	3300      	adds	r3, #0
 80043da:	61fb      	str	r3, [r7, #28]
	memset(buff, 0, TX_BUFF_SIZE);
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	461a      	mov	r2, r3
 80043e0:	2100      	movs	r1, #0
 80043e2:	69f8      	ldr	r0, [r7, #28]
 80043e4:	f005 fd48 	bl	8009e78 <memset>

	switch(command_code)
 80043e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80043ec:	2b03      	cmp	r3, #3
 80043ee:	d84c      	bhi.n	800448a <uart_handle_rx_message+0x11e>
 80043f0:	a201      	add	r2, pc, #4	; (adr r2, 80043f8 <uart_handle_rx_message+0x8c>)
 80043f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f6:	bf00      	nop
 80043f8:	0800448b 	.word	0x0800448b
 80043fc:	08004409 	.word	0x08004409
 8004400:	08004441 	.word	0x08004441
 8004404:	0800447b 	.word	0x0800447b
	{
	case COMM_EMPTY:
		break;
	case COMM_SET_CONF:
		memcpy(data.ip, msg + 1, 4);
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	3301      	adds	r3, #1
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	613b      	str	r3, [r7, #16]
		memcpy(&data.input_port, msg + 7, 2);
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	3307      	adds	r3, #7
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	b29b      	uxth	r3, r3
 8004418:	82bb      	strh	r3, [r7, #20]
		memcpy(&data.output_port, msg + 5, 2);
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	3305      	adds	r3, #5
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	b29b      	uxth	r3, r3
 8004422:	82fb      	strh	r3, [r7, #22]
		flash_data_write(data);
 8004424:	f107 0310 	add.w	r3, r7, #16
 8004428:	e893 0003 	ldmia.w	r3, {r0, r1}
 800442c:	f7fd fca0 	bl	8001d70 <flash_data_write>
		HAL_UART_Transmit(huart, &code_ok, 1, TIMEOUT);//
 8004430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004432:	f107 011b 	add.w	r1, r7, #27
 8004436:	2201      	movs	r2, #1
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f004 fc07 	bl	8008c4c <HAL_UART_Transmit>
		break;
 800443e:	e024      	b.n	800448a <uart_handle_rx_message+0x11e>
	case COMM_GET_CONF:
		data = flash_data_read();
 8004440:	463b      	mov	r3, r7
 8004442:	4618      	mov	r0, r3
 8004444:	f7fd fcd0 	bl	8001de8 <flash_data_read>
 8004448:	f107 0310 	add.w	r3, r7, #16
 800444c:	463a      	mov	r2, r7
 800444e:	6810      	ldr	r0, [r2, #0]
 8004450:	6851      	ldr	r1, [r2, #4]
 8004452:	c303      	stmia	r3!, {r0, r1}
 8004454:	693a      	ldr	r2, [r7, #16]
		memcpy(buff + 0, data.ip, 4);
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	601a      	str	r2, [r3, #0]
		memcpy(buff + 6, &data.input_port, 2);
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	3306      	adds	r3, #6
 800445e:	8aba      	ldrh	r2, [r7, #20]
 8004460:	801a      	strh	r2, [r3, #0]
		memcpy(buff + 4, &data.output_port, 2);
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	3304      	adds	r3, #4
 8004466:	8afa      	ldrh	r2, [r7, #22]
 8004468:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(huart, buff, TX_BUFF_SIZE, TIMEOUT);
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	b29a      	uxth	r2, r3
 800446e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004470:	69f9      	ldr	r1, [r7, #28]
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f004 fbea 	bl	8008c4c <HAL_UART_Transmit>
		break;
 8004478:	e007      	b.n	800448a <uart_handle_rx_message+0x11e>
	case COMM_PING:
		HAL_UART_Transmit(huart, &code_ok, 1, TIMEOUT);
 800447a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447c:	f107 011b 	add.w	r1, r7, #27
 8004480:	2201      	movs	r2, #1
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f004 fbe2 	bl	8008c4c <HAL_UART_Transmit>
		break;
 8004488:	bf00      	nop
 800448a:	46b5      	mov	sp, r6
	}

}
 800448c:	bf00      	nop
 800448e:	3734      	adds	r7, #52	; 0x34
 8004490:	46bd      	mov	sp, r7
 8004492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004496:	bf00      	nop

08004498 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8004498:	b590      	push	{r4, r7, lr}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	4604      	mov	r4, r0
 80044a0:	4608      	mov	r0, r1
 80044a2:	4611      	mov	r1, r2
 80044a4:	461a      	mov	r2, r3
 80044a6:	4623      	mov	r3, r4
 80044a8:	71fb      	strb	r3, [r7, #7]
 80044aa:	4603      	mov	r3, r0
 80044ac:	71bb      	strb	r3, [r7, #6]
 80044ae:	460b      	mov	r3, r1
 80044b0:	80bb      	strh	r3, [r7, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80044b6:	79fb      	ldrb	r3, [r7, #7]
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d902      	bls.n	80044c2 <socket+0x2a>
 80044bc:	f04f 33ff 	mov.w	r3, #4294967295
 80044c0:	e0f0      	b.n	80046a4 <socket+0x20c>
	switch(protocol)
 80044c2:	79bb      	ldrb	r3, [r7, #6]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d005      	beq.n	80044d4 <socket+0x3c>
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	dd11      	ble.n	80044f0 <socket+0x58>
 80044cc:	3b02      	subs	r3, #2
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d80e      	bhi.n	80044f0 <socket+0x58>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80044d2:	e010      	b.n	80044f6 <socket+0x5e>
            getSIPR((uint8_t*)&taddr);
 80044d4:	f107 030c 	add.w	r3, r7, #12
 80044d8:	2204      	movs	r2, #4
 80044da:	4619      	mov	r1, r3
 80044dc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80044e0:	f000 fc76 	bl	8004dd0 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d105      	bne.n	80044f6 <socket+0x5e>
 80044ea:	f06f 0302 	mvn.w	r3, #2
 80044ee:	e0d9      	b.n	80046a4 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80044f0:	f06f 0304 	mvn.w	r3, #4
 80044f4:	e0d6      	b.n	80046a4 <socket+0x20c>
         break;
 80044f6:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80044f8:	78fb      	ldrb	r3, [r7, #3]
 80044fa:	f003 0304 	and.w	r3, r3, #4
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d002      	beq.n	8004508 <socket+0x70>
 8004502:	f06f 0305 	mvn.w	r3, #5
 8004506:	e0cd      	b.n	80046a4 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d028      	beq.n	8004560 <socket+0xc8>
	{
   	switch(protocol)
 800450e:	79bb      	ldrb	r3, [r7, #6]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d002      	beq.n	800451a <socket+0x82>
 8004514:	2b02      	cmp	r3, #2
 8004516:	d008      	beq.n	800452a <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8004518:	e022      	b.n	8004560 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800451a:	78fb      	ldrb	r3, [r7, #3]
 800451c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004520:	2b00      	cmp	r3, #0
 8004522:	d11a      	bne.n	800455a <socket+0xc2>
 8004524:	f06f 0305 	mvn.w	r3, #5
 8004528:	e0bc      	b.n	80046a4 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 800452a:	78fb      	ldrb	r3, [r7, #3]
 800452c:	f003 0320 	and.w	r3, r3, #32
 8004530:	2b00      	cmp	r3, #0
 8004532:	d006      	beq.n	8004542 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8004534:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004538:	2b00      	cmp	r3, #0
 800453a:	db02      	blt.n	8004542 <socket+0xaa>
 800453c:	f06f 0305 	mvn.w	r3, #5
 8004540:	e0b0      	b.n	80046a4 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8004542:	78fb      	ldrb	r3, [r7, #3]
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800454c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004550:	2b00      	cmp	r3, #0
 8004552:	db04      	blt.n	800455e <socket+0xc6>
 8004554:	f06f 0305 	mvn.w	r3, #5
 8004558:	e0a4      	b.n	80046a4 <socket+0x20c>
   	      break;
 800455a:	bf00      	nop
 800455c:	e000      	b.n	8004560 <socket+0xc8>
   	      break;
 800455e:	bf00      	nop
   	}
   }
	close(sn);
 8004560:	79fb      	ldrb	r3, [r7, #7]
 8004562:	4618      	mov	r0, r3
 8004564:	f000 f8ac 	bl	80046c0 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8004568:	79fb      	ldrb	r3, [r7, #7]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	3301      	adds	r3, #1
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	4618      	mov	r0, r3
 8004572:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004576:	f023 030f 	bic.w	r3, r3, #15
 800457a:	b25a      	sxtb	r2, r3
 800457c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004580:	4313      	orrs	r3, r2
 8004582:	b25b      	sxtb	r3, r3
 8004584:	b2db      	uxtb	r3, r3
 8004586:	4619      	mov	r1, r3
 8004588:	f000 fbd4 	bl	8004d34 <WIZCHIP_WRITE>
    #endif
	if(!port)
 800458c:	88bb      	ldrh	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d110      	bne.n	80045b4 <socket+0x11c>
	{
	   port = sock_any_port++;
 8004592:	4b46      	ldr	r3, [pc, #280]	; (80046ac <socket+0x214>)
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	b291      	uxth	r1, r2
 800459a:	4a44      	ldr	r2, [pc, #272]	; (80046ac <socket+0x214>)
 800459c:	8011      	strh	r1, [r2, #0]
 800459e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80045a0:	4b42      	ldr	r3, [pc, #264]	; (80046ac <socket+0x214>)
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d103      	bne.n	80045b4 <socket+0x11c>
 80045ac:	4b3f      	ldr	r3, [pc, #252]	; (80046ac <socket+0x214>)
 80045ae:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80045b2:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80045b4:	79fb      	ldrb	r3, [r7, #7]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	3301      	adds	r3, #1
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045c0:	461a      	mov	r2, r3
 80045c2:	88bb      	ldrh	r3, [r7, #4]
 80045c4:	0a1b      	lsrs	r3, r3, #8
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	4619      	mov	r1, r3
 80045cc:	4610      	mov	r0, r2
 80045ce:	f000 fbb1 	bl	8004d34 <WIZCHIP_WRITE>
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	3301      	adds	r3, #1
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045de:	461a      	mov	r2, r3
 80045e0:	88bb      	ldrh	r3, [r7, #4]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	4619      	mov	r1, r3
 80045e6:	4610      	mov	r0, r2
 80045e8:	f000 fba4 	bl	8004d34 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80045ec:	79fb      	ldrb	r3, [r7, #7]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	3301      	adds	r3, #1
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80045f8:	2101      	movs	r1, #1
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 fb9a 	bl	8004d34 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004600:	bf00      	nop
 8004602:	79fb      	ldrb	r3, [r7, #7]
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	3301      	adds	r3, #1
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fb44 	bl	8004c9c <WIZCHIP_READ>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f3      	bne.n	8004602 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800461a:	79fb      	ldrb	r3, [r7, #7]
 800461c:	2201      	movs	r2, #1
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	b21b      	sxth	r3, r3
 8004624:	43db      	mvns	r3, r3
 8004626:	b21a      	sxth	r2, r3
 8004628:	4b21      	ldr	r3, [pc, #132]	; (80046b0 <socket+0x218>)
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	b21b      	sxth	r3, r3
 800462e:	4013      	ands	r3, r2
 8004630:	b21b      	sxth	r3, r3
 8004632:	b29a      	uxth	r2, r3
 8004634:	4b1e      	ldr	r3, [pc, #120]	; (80046b0 <socket+0x218>)
 8004636:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	f003 0201 	and.w	r2, r3, #1
 800463e:	79fb      	ldrb	r3, [r7, #7]
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	b21a      	sxth	r2, r3
 8004646:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <socket+0x218>)
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	b21b      	sxth	r3, r3
 800464c:	4313      	orrs	r3, r2
 800464e:	b21b      	sxth	r3, r3
 8004650:	b29a      	uxth	r2, r3
 8004652:	4b17      	ldr	r3, [pc, #92]	; (80046b0 <socket+0x218>)
 8004654:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8004656:	79fb      	ldrb	r3, [r7, #7]
 8004658:	2201      	movs	r2, #1
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	b21b      	sxth	r3, r3
 8004660:	43db      	mvns	r3, r3
 8004662:	b21a      	sxth	r2, r3
 8004664:	4b13      	ldr	r3, [pc, #76]	; (80046b4 <socket+0x21c>)
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	b21b      	sxth	r3, r3
 800466a:	4013      	ands	r3, r2
 800466c:	b21b      	sxth	r3, r3
 800466e:	b29a      	uxth	r2, r3
 8004670:	4b10      	ldr	r3, [pc, #64]	; (80046b4 <socket+0x21c>)
 8004672:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8004674:	79fb      	ldrb	r3, [r7, #7]
 8004676:	4a10      	ldr	r2, [pc, #64]	; (80046b8 <socket+0x220>)
 8004678:	2100      	movs	r1, #0
 800467a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	4a0e      	ldr	r2, [pc, #56]	; (80046bc <socket+0x224>)
 8004682:	2100      	movs	r1, #0
 8004684:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8004686:	bf00      	nop
 8004688:	79fb      	ldrb	r3, [r7, #7]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	3301      	adds	r3, #1
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004694:	4618      	mov	r0, r3
 8004696:	f000 fb01 	bl	8004c9c <WIZCHIP_READ>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0f3      	beq.n	8004688 <socket+0x1f0>
   return (int8_t)sn;
 80046a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd90      	pop	{r4, r7, pc}
 80046ac:	20000048 	.word	0x20000048
 80046b0:	20000a7e 	.word	0x20000a7e
 80046b4:	20000a80 	.word	0x20000a80
 80046b8:	20000a84 	.word	0x20000a84
 80046bc:	20000a94 	.word	0x20000a94

080046c0 <close>:

int8_t close(uint8_t sn)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d902      	bls.n	80046d6 <close+0x16>
 80046d0:	f04f 33ff 	mov.w	r3, #4294967295
 80046d4:	e055      	b.n	8004782 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80046d6:	79fb      	ldrb	r3, [r7, #7]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	3301      	adds	r3, #1
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80046e2:	2110      	movs	r1, #16
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 fb25 	bl	8004d34 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80046ea:	bf00      	nop
 80046ec:	79fb      	ldrb	r3, [r7, #7]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	3301      	adds	r3, #1
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 facf 	bl	8004c9c <WIZCHIP_READ>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1f3      	bne.n	80046ec <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8004704:	79fb      	ldrb	r3, [r7, #7]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	3301      	adds	r3, #1
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004710:	211f      	movs	r1, #31
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fb0e 	bl	8004d34 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8004718:	79fb      	ldrb	r3, [r7, #7]
 800471a:	2201      	movs	r2, #1
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	b21b      	sxth	r3, r3
 8004722:	43db      	mvns	r3, r3
 8004724:	b21a      	sxth	r2, r3
 8004726:	4b19      	ldr	r3, [pc, #100]	; (800478c <close+0xcc>)
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	b21b      	sxth	r3, r3
 800472c:	4013      	ands	r3, r2
 800472e:	b21b      	sxth	r3, r3
 8004730:	b29a      	uxth	r2, r3
 8004732:	4b16      	ldr	r3, [pc, #88]	; (800478c <close+0xcc>)
 8004734:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8004736:	79fb      	ldrb	r3, [r7, #7]
 8004738:	2201      	movs	r2, #1
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	b21b      	sxth	r3, r3
 8004740:	43db      	mvns	r3, r3
 8004742:	b21a      	sxth	r2, r3
 8004744:	4b12      	ldr	r3, [pc, #72]	; (8004790 <close+0xd0>)
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	b21b      	sxth	r3, r3
 800474a:	4013      	ands	r3, r2
 800474c:	b21b      	sxth	r3, r3
 800474e:	b29a      	uxth	r2, r3
 8004750:	4b0f      	ldr	r3, [pc, #60]	; (8004790 <close+0xd0>)
 8004752:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8004754:	79fb      	ldrb	r3, [r7, #7]
 8004756:	4a0f      	ldr	r2, [pc, #60]	; (8004794 <close+0xd4>)
 8004758:	2100      	movs	r1, #0
 800475a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	4a0d      	ldr	r2, [pc, #52]	; (8004798 <close+0xd8>)
 8004762:	2100      	movs	r1, #0
 8004764:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8004766:	bf00      	nop
 8004768:	79fb      	ldrb	r3, [r7, #7]
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	3301      	adds	r3, #1
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fa91 	bl	8004c9c <WIZCHIP_READ>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1f3      	bne.n	8004768 <close+0xa8>
	return SOCK_OK;
 8004780:	2301      	movs	r3, #1
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	20000a7e 	.word	0x20000a7e
 8004790:	20000a80 	.word	0x20000a80
 8004794:	20000a84 	.word	0x20000a84
 8004798:	20000a94 	.word	0x20000a94

0800479c <listen>:

int8_t listen(uint8_t sn)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4603      	mov	r3, r0
 80047a4:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80047a6:	79fb      	ldrb	r3, [r7, #7]
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d902      	bls.n	80047b2 <listen+0x16>
 80047ac:	f04f 33ff 	mov.w	r3, #4294967295
 80047b0:	e049      	b.n	8004846 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	3301      	adds	r3, #1
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fa6e 	bl	8004c9c <WIZCHIP_READ>
 80047c0:	4603      	mov	r3, r0
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d002      	beq.n	80047d0 <listen+0x34>
 80047ca:	f06f 0304 	mvn.w	r3, #4
 80047ce:	e03a      	b.n	8004846 <listen+0xaa>
	CHECK_SOCKINIT();
 80047d0:	79fb      	ldrb	r3, [r7, #7]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	3301      	adds	r3, #1
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 fa5d 	bl	8004c9c <WIZCHIP_READ>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b13      	cmp	r3, #19
 80047e6:	d002      	beq.n	80047ee <listen+0x52>
 80047e8:	f06f 0302 	mvn.w	r3, #2
 80047ec:	e02b      	b.n	8004846 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	3301      	adds	r3, #1
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80047fa:	2102      	movs	r1, #2
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 fa99 	bl	8004d34 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8004802:	bf00      	nop
 8004804:	79fb      	ldrb	r3, [r7, #7]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	3301      	adds	r3, #1
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fa43 	bl	8004c9c <WIZCHIP_READ>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1f3      	bne.n	8004804 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 800481c:	e006      	b.n	800482c <listen+0x90>
   {
         close(sn);
 800481e:	79fb      	ldrb	r3, [r7, #7]
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff ff4d 	bl	80046c0 <close>
         return SOCKERR_SOCKCLOSED;
 8004826:	f06f 0303 	mvn.w	r3, #3
 800482a:	e00c      	b.n	8004846 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 800482c:	79fb      	ldrb	r3, [r7, #7]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	3301      	adds	r3, #1
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004838:	4618      	mov	r0, r3
 800483a:	f000 fa2f 	bl	8004c9c <WIZCHIP_READ>
 800483e:	4603      	mov	r3, r0
 8004840:	2b14      	cmp	r3, #20
 8004842:	d1ec      	bne.n	800481e <listen+0x82>
   }
   return SOCK_OK;
 8004844:	2301      	movs	r3, #1
}
 8004846:	4618      	mov	r0, r3
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	4603      	mov	r3, r0
 8004858:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800485a:	79fb      	ldrb	r3, [r7, #7]
 800485c:	2b08      	cmp	r3, #8
 800485e:	d902      	bls.n	8004866 <disconnect+0x16>
 8004860:	f04f 33ff 	mov.w	r3, #4294967295
 8004864:	e062      	b.n	800492c <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	3301      	adds	r3, #1
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fa14 	bl	8004c9c <WIZCHIP_READ>
 8004874:	4603      	mov	r3, r0
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	2b01      	cmp	r3, #1
 800487c:	d002      	beq.n	8004884 <disconnect+0x34>
 800487e:	f06f 0304 	mvn.w	r3, #4
 8004882:	e053      	b.n	800492c <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	3301      	adds	r3, #1
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004890:	2108      	movs	r1, #8
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fa4e 	bl	8004d34 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8004898:	bf00      	nop
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	3301      	adds	r3, #1
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 f9f8 	bl	8004c9c <WIZCHIP_READ>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1f3      	bne.n	800489a <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 80048b2:	79fb      	ldrb	r3, [r7, #7]
 80048b4:	2201      	movs	r2, #1
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	b21b      	sxth	r3, r3
 80048bc:	43db      	mvns	r3, r3
 80048be:	b21a      	sxth	r2, r3
 80048c0:	4b1c      	ldr	r3, [pc, #112]	; (8004934 <disconnect+0xe4>)
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	b21b      	sxth	r3, r3
 80048c6:	4013      	ands	r3, r2
 80048c8:	b21b      	sxth	r3, r3
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	4b19      	ldr	r3, [pc, #100]	; (8004934 <disconnect+0xe4>)
 80048ce:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80048d0:	4b19      	ldr	r3, [pc, #100]	; (8004938 <disconnect+0xe8>)
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	79fb      	ldrb	r3, [r7, #7]
 80048d8:	fa42 f303 	asr.w	r3, r2, r3
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d016      	beq.n	8004912 <disconnect+0xc2>
 80048e4:	2300      	movs	r3, #0
 80048e6:	e021      	b.n	800492c <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80048e8:	79fb      	ldrb	r3, [r7, #7]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	3301      	adds	r3, #1
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 f9d1 	bl	8004c9c <WIZCHIP_READ>
 80048fa:	4603      	mov	r3, r0
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b00      	cmp	r3, #0
 8004902:	d006      	beq.n	8004912 <disconnect+0xc2>
	   {
	      close(sn);
 8004904:	79fb      	ldrb	r3, [r7, #7]
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff feda 	bl	80046c0 <close>
	      return SOCKERR_TIMEOUT;
 800490c:	f06f 030c 	mvn.w	r3, #12
 8004910:	e00c      	b.n	800492c <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8004912:	79fb      	ldrb	r3, [r7, #7]
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	3301      	adds	r3, #1
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800491e:	4618      	mov	r0, r3
 8004920:	f000 f9bc 	bl	8004c9c <WIZCHIP_READ>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1de      	bne.n	80048e8 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 800492a:	2301      	movs	r3, #1
}
 800492c:	4618      	mov	r0, r3
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	20000a80 	.word	0x20000a80
 8004938:	20000a7e 	.word	0x20000a7e

0800493c <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	4603      	mov	r3, r0
 8004944:	6039      	str	r1, [r7, #0]
 8004946:	71fb      	strb	r3, [r7, #7]
 8004948:	4613      	mov	r3, r2
 800494a:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 800494c:	2300      	movs	r3, #0
 800494e:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8004950:	2300      	movs	r3, #0
 8004952:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8004954:	79fb      	ldrb	r3, [r7, #7]
 8004956:	2b08      	cmp	r3, #8
 8004958:	d902      	bls.n	8004960 <send+0x24>
 800495a:	f04f 33ff 	mov.w	r3, #4294967295
 800495e:	e0de      	b.n	8004b1e <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004960:	79fb      	ldrb	r3, [r7, #7]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	3301      	adds	r3, #1
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	4618      	mov	r0, r3
 800496a:	f000 f997 	bl	8004c9c <WIZCHIP_READ>
 800496e:	4603      	mov	r3, r0
 8004970:	f003 030f 	and.w	r3, r3, #15
 8004974:	2b01      	cmp	r3, #1
 8004976:	d002      	beq.n	800497e <send+0x42>
 8004978:	f06f 0304 	mvn.w	r3, #4
 800497c:	e0cf      	b.n	8004b1e <send+0x1e2>
   CHECK_SOCKDATA();
 800497e:	88bb      	ldrh	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d102      	bne.n	800498a <send+0x4e>
 8004984:	f06f 030d 	mvn.w	r3, #13
 8004988:	e0c9      	b.n	8004b1e <send+0x1e2>
   tmp = getSn_SR(sn);
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	3301      	adds	r3, #1
 8004990:	00db      	lsls	r3, r3, #3
 8004992:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004996:	4618      	mov	r0, r3
 8004998:	f000 f980 	bl	8004c9c <WIZCHIP_READ>
 800499c:	4603      	mov	r3, r0
 800499e:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	2b17      	cmp	r3, #23
 80049a4:	d005      	beq.n	80049b2 <send+0x76>
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
 80049a8:	2b1c      	cmp	r3, #28
 80049aa:	d002      	beq.n	80049b2 <send+0x76>
 80049ac:	f06f 0306 	mvn.w	r3, #6
 80049b0:	e0b5      	b.n	8004b1e <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 80049b2:	4b5d      	ldr	r3, [pc, #372]	; (8004b28 <send+0x1ec>)
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	461a      	mov	r2, r3
 80049b8:	79fb      	ldrb	r3, [r7, #7]
 80049ba:	fa42 f303 	asr.w	r3, r2, r3
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d039      	beq.n	8004a3a <send+0xfe>
   {
      tmp = getSn_IR(sn);
 80049c6:	79fb      	ldrb	r3, [r7, #7]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	3301      	adds	r3, #1
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 f962 	bl	8004c9c <WIZCHIP_READ>
 80049d8:	4603      	mov	r3, r0
 80049da:	f003 031f 	and.w	r3, r3, #31
 80049de:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	f003 0310 	and.w	r3, r3, #16
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d019      	beq.n	8004a1e <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80049ea:	79fb      	ldrb	r3, [r7, #7]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	3301      	adds	r3, #1
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80049f6:	2110      	movs	r1, #16
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 f99b 	bl	8004d34 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80049fe:	79fb      	ldrb	r3, [r7, #7]
 8004a00:	2201      	movs	r2, #1
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	b21b      	sxth	r3, r3
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	b21a      	sxth	r2, r3
 8004a0c:	4b46      	ldr	r3, [pc, #280]	; (8004b28 <send+0x1ec>)
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	b21b      	sxth	r3, r3
 8004a12:	4013      	ands	r3, r2
 8004a14:	b21b      	sxth	r3, r3
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	4b43      	ldr	r3, [pc, #268]	; (8004b28 <send+0x1ec>)
 8004a1a:	801a      	strh	r2, [r3, #0]
 8004a1c:	e00d      	b.n	8004a3a <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d006      	beq.n	8004a36 <send+0xfa>
      {
         close(sn);
 8004a28:	79fb      	ldrb	r3, [r7, #7]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff fe48 	bl	80046c0 <close>
         return SOCKERR_TIMEOUT;
 8004a30:	f06f 030c 	mvn.w	r3, #12
 8004a34:	e073      	b.n	8004b1e <send+0x1e2>
      }
      else return SOCK_BUSY;
 8004a36:	2300      	movs	r3, #0
 8004a38:	e071      	b.n	8004b1e <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8004a3a:	79fb      	ldrb	r3, [r7, #7]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	3301      	adds	r3, #1
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 f928 	bl	8004c9c <WIZCHIP_READ>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	029b      	lsls	r3, r3, #10
 8004a52:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8004a54:	88ba      	ldrh	r2, [r7, #4]
 8004a56:	89bb      	ldrh	r3, [r7, #12]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d901      	bls.n	8004a60 <send+0x124>
 8004a5c:	89bb      	ldrh	r3, [r7, #12]
 8004a5e:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8004a60:	79fb      	ldrb	r3, [r7, #7]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fa74 	bl	8004f50 <getSn_TX_FSR>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8004a6c:	79fb      	ldrb	r3, [r7, #7]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	3301      	adds	r3, #1
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 f90f 	bl	8004c9c <WIZCHIP_READ>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	2b17      	cmp	r3, #23
 8004a86:	d009      	beq.n	8004a9c <send+0x160>
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
 8004a8a:	2b1c      	cmp	r3, #28
 8004a8c:	d006      	beq.n	8004a9c <send+0x160>
      {
         close(sn);
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff fe15 	bl	80046c0 <close>
         return SOCKERR_SOCKSTATUS;
 8004a96:	f06f 0306 	mvn.w	r3, #6
 8004a9a:	e040      	b.n	8004b1e <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8004a9c:	4b23      	ldr	r3, [pc, #140]	; (8004b2c <send+0x1f0>)
 8004a9e:	881b      	ldrh	r3, [r3, #0]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	fa42 f303 	asr.w	r3, r2, r3
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d005      	beq.n	8004abc <send+0x180>
 8004ab0:	88ba      	ldrh	r2, [r7, #4]
 8004ab2:	89bb      	ldrh	r3, [r7, #12]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d901      	bls.n	8004abc <send+0x180>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	e030      	b.n	8004b1e <send+0x1e2>
      if(len <= freesize) break;
 8004abc:	88ba      	ldrh	r2, [r7, #4]
 8004abe:	89bb      	ldrh	r3, [r7, #12]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d900      	bls.n	8004ac6 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8004ac4:	e7cc      	b.n	8004a60 <send+0x124>
      if(len <= freesize) break;
 8004ac6:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8004ac8:	88ba      	ldrh	r2, [r7, #4]
 8004aca:	79fb      	ldrb	r3, [r7, #7]
 8004acc:	6839      	ldr	r1, [r7, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fad4 	bl	800507c <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8004ad4:	79fb      	ldrb	r3, [r7, #7]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	3301      	adds	r3, #1
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004ae0:	2120      	movs	r1, #32
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 f926 	bl	8004d34 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8004ae8:	bf00      	nop
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	3301      	adds	r3, #1
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 f8d0 	bl	8004c9c <WIZCHIP_READ>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1f3      	bne.n	8004aea <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8004b02:	79fb      	ldrb	r3, [r7, #7]
 8004b04:	2201      	movs	r2, #1
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	b21a      	sxth	r2, r3
 8004b0c:	4b06      	ldr	r3, [pc, #24]	; (8004b28 <send+0x1ec>)
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	b21b      	sxth	r3, r3
 8004b12:	4313      	orrs	r3, r2
 8004b14:	b21b      	sxth	r3, r3
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	4b03      	ldr	r3, [pc, #12]	; (8004b28 <send+0x1ec>)
 8004b1a:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004b1c:	88bb      	ldrh	r3, [r7, #4]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	20000a80 	.word	0x20000a80
 8004b2c:	20000a7e 	.word	0x20000a7e

08004b30 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004b30:	b590      	push	{r4, r7, lr}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	4603      	mov	r3, r0
 8004b38:	6039      	str	r1, [r7, #0]
 8004b3a:	71fb      	strb	r3, [r7, #7]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8004b40:	2300      	movs	r3, #0
 8004b42:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8004b44:	2300      	movs	r3, #0
 8004b46:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8004b48:	79fb      	ldrb	r3, [r7, #7]
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d902      	bls.n	8004b54 <recv+0x24>
 8004b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b52:	e09c      	b.n	8004c8e <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	3301      	adds	r3, #1
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 f89d 	bl	8004c9c <WIZCHIP_READ>
 8004b62:	4603      	mov	r3, r0
 8004b64:	f003 030f 	and.w	r3, r3, #15
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d002      	beq.n	8004b72 <recv+0x42>
 8004b6c:	f06f 0304 	mvn.w	r3, #4
 8004b70:	e08d      	b.n	8004c8e <recv+0x15e>
   CHECK_SOCKDATA();
 8004b72:	88bb      	ldrh	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d102      	bne.n	8004b7e <recv+0x4e>
 8004b78:	f06f 030d 	mvn.w	r3, #13
 8004b7c:	e087      	b.n	8004c8e <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8004b7e:	79fb      	ldrb	r3, [r7, #7]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	3301      	adds	r3, #1
 8004b84:	00db      	lsls	r3, r3, #3
 8004b86:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 f886 	bl	8004c9c <WIZCHIP_READ>
 8004b90:	4603      	mov	r3, r0
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	029b      	lsls	r3, r3, #10
 8004b96:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8004b98:	89ba      	ldrh	r2, [r7, #12]
 8004b9a:	88bb      	ldrh	r3, [r7, #4]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d201      	bcs.n	8004ba4 <recv+0x74>
 8004ba0:	89bb      	ldrh	r3, [r7, #12]
 8004ba2:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8004ba4:	79fb      	ldrb	r3, [r7, #7]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fa1d 	bl	8004fe6 <getSn_RX_RSR>
 8004bac:	4603      	mov	r3, r0
 8004bae:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8004bb0:	79fb      	ldrb	r3, [r7, #7]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 f86d 	bl	8004c9c <WIZCHIP_READ>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	2b17      	cmp	r3, #23
 8004bca:	d026      	beq.n	8004c1a <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
 8004bce:	2b1c      	cmp	r3, #28
 8004bd0:	d11c      	bne.n	8004c0c <recv+0xdc>
            {
               if(recvsize != 0) break;
 8004bd2:	89bb      	ldrh	r3, [r7, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d133      	bne.n	8004c40 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 f9b8 	bl	8004f50 <getSn_TX_FSR>
 8004be0:	4603      	mov	r3, r0
 8004be2:	461c      	mov	r4, r3
 8004be4:	79fb      	ldrb	r3, [r7, #7]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	3301      	adds	r3, #1
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 f853 	bl	8004c9c <WIZCHIP_READ>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	029b      	lsls	r3, r3, #10
 8004bfa:	429c      	cmp	r4, r3
 8004bfc:	d10d      	bne.n	8004c1a <recv+0xea>
               {
                  close(sn);
 8004bfe:	79fb      	ldrb	r3, [r7, #7]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff fd5d 	bl	80046c0 <close>
                  return SOCKERR_SOCKSTATUS;
 8004c06:	f06f 0306 	mvn.w	r3, #6
 8004c0a:	e040      	b.n	8004c8e <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff fd56 	bl	80046c0 <close>
               return SOCKERR_SOCKSTATUS;
 8004c14:	f06f 0306 	mvn.w	r3, #6
 8004c18:	e039      	b.n	8004c8e <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8004c1a:	4b1f      	ldr	r3, [pc, #124]	; (8004c98 <recv+0x168>)
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	79fb      	ldrb	r3, [r7, #7]
 8004c22:	fa42 f303 	asr.w	r3, r2, r3
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d004      	beq.n	8004c38 <recv+0x108>
 8004c2e:	89bb      	ldrh	r3, [r7, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <recv+0x108>
 8004c34:	2300      	movs	r3, #0
 8004c36:	e02a      	b.n	8004c8e <recv+0x15e>
         if(recvsize != 0) break;
 8004c38:	89bb      	ldrh	r3, [r7, #12]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d102      	bne.n	8004c44 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 8004c3e:	e7b1      	b.n	8004ba4 <recv+0x74>
               if(recvsize != 0) break;
 8004c40:	bf00      	nop
 8004c42:	e000      	b.n	8004c46 <recv+0x116>
         if(recvsize != 0) break;
 8004c44:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8004c46:	89ba      	ldrh	r2, [r7, #12]
 8004c48:	88bb      	ldrh	r3, [r7, #4]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d201      	bcs.n	8004c52 <recv+0x122>
 8004c4e:	89bb      	ldrh	r3, [r7, #12]
 8004c50:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8004c52:	88ba      	ldrh	r2, [r7, #4]
 8004c54:	79fb      	ldrb	r3, [r7, #7]
 8004c56:	6839      	ldr	r1, [r7, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 fa6b 	bl	8005134 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8004c5e:	79fb      	ldrb	r3, [r7, #7]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	3301      	adds	r3, #1
 8004c64:	00db      	lsls	r3, r3, #3
 8004c66:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c6a:	2140      	movs	r1, #64	; 0x40
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 f861 	bl	8004d34 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004c72:	bf00      	nop
 8004c74:	79fb      	ldrb	r3, [r7, #7]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	3301      	adds	r3, #1
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 f80b 	bl	8004c9c <WIZCHIP_READ>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1f3      	bne.n	8004c74 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004c8c:	88bb      	ldrh	r3, [r7, #4]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd90      	pop	{r4, r7, pc}
 8004c96:	bf00      	nop
 8004c98:	20000a7e 	.word	0x20000a7e

08004c9c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8004ca4:	4b22      	ldr	r3, [pc, #136]	; (8004d30 <WIZCHIP_READ+0x94>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004caa:	4b21      	ldr	r3, [pc, #132]	; (8004d30 <WIZCHIP_READ+0x94>)
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004cb0:	4b1f      	ldr	r3, [pc, #124]	; (8004d30 <WIZCHIP_READ+0x94>)
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d003      	beq.n	8004cc0 <WIZCHIP_READ+0x24>
 8004cb8:	4b1d      	ldr	r3, [pc, #116]	; (8004d30 <WIZCHIP_READ+0x94>)
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d114      	bne.n	8004cea <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004cc0:	4b1b      	ldr	r3, [pc, #108]	; (8004d30 <WIZCHIP_READ+0x94>)
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	0c12      	lsrs	r2, r2, #16
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	4610      	mov	r0, r2
 8004ccc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004cce:	4b18      	ldr	r3, [pc, #96]	; (8004d30 <WIZCHIP_READ+0x94>)
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	0a12      	lsrs	r2, r2, #8
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	4610      	mov	r0, r2
 8004cda:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004cdc:	4b14      	ldr	r3, [pc, #80]	; (8004d30 <WIZCHIP_READ+0x94>)
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4798      	blx	r3
 8004ce8:	e011      	b.n	8004d0e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	0c1b      	lsrs	r3, r3, #16
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	0a1b      	lsrs	r3, r3, #8
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004d00:	4b0b      	ldr	r3, [pc, #44]	; (8004d30 <WIZCHIP_READ+0x94>)
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	f107 020c 	add.w	r2, r7, #12
 8004d08:	2103      	movs	r1, #3
 8004d0a:	4610      	mov	r0, r2
 8004d0c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8004d0e:	4b08      	ldr	r3, [pc, #32]	; (8004d30 <WIZCHIP_READ+0x94>)
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	4798      	blx	r3
 8004d14:	4603      	mov	r3, r0
 8004d16:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8004d18:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <WIZCHIP_READ+0x94>)
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004d1e:	4b04      	ldr	r3, [pc, #16]	; (8004d30 <WIZCHIP_READ+0x94>)
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	4798      	blx	r3
   return ret;
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	2000004c 	.word	0x2000004c

08004d34 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8004d40:	4b22      	ldr	r3, [pc, #136]	; (8004dcc <WIZCHIP_WRITE+0x98>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004d46:	4b21      	ldr	r3, [pc, #132]	; (8004dcc <WIZCHIP_WRITE+0x98>)
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f043 0304 	orr.w	r3, r3, #4
 8004d52:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004d54:	4b1d      	ldr	r3, [pc, #116]	; (8004dcc <WIZCHIP_WRITE+0x98>)
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d119      	bne.n	8004d90 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004d5c:	4b1b      	ldr	r3, [pc, #108]	; (8004dcc <WIZCHIP_WRITE+0x98>)
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	0c12      	lsrs	r2, r2, #16
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	4610      	mov	r0, r2
 8004d68:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004d6a:	4b18      	ldr	r3, [pc, #96]	; (8004dcc <WIZCHIP_WRITE+0x98>)
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	0a12      	lsrs	r2, r2, #8
 8004d72:	b2d2      	uxtb	r2, r2
 8004d74:	4610      	mov	r0, r2
 8004d76:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004d78:	4b14      	ldr	r3, [pc, #80]	; (8004dcc <WIZCHIP_WRITE+0x98>)
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	4610      	mov	r0, r2
 8004d82:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8004d84:	4b11      	ldr	r3, [pc, #68]	; (8004dcc <WIZCHIP_WRITE+0x98>)
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	78fa      	ldrb	r2, [r7, #3]
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	4798      	blx	r3
 8004d8e:	e013      	b.n	8004db8 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	0c1b      	lsrs	r3, r3, #16
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	0a1b      	lsrs	r3, r3, #8
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8004da6:	78fb      	ldrb	r3, [r7, #3]
 8004da8:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8004daa:	4b08      	ldr	r3, [pc, #32]	; (8004dcc <WIZCHIP_WRITE+0x98>)
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	f107 020c 	add.w	r2, r7, #12
 8004db2:	2104      	movs	r1, #4
 8004db4:	4610      	mov	r0, r2
 8004db6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004db8:	4b04      	ldr	r3, [pc, #16]	; (8004dcc <WIZCHIP_WRITE+0x98>)
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004dbe:	4b03      	ldr	r3, [pc, #12]	; (8004dcc <WIZCHIP_WRITE+0x98>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	4798      	blx	r3
}
 8004dc4:	bf00      	nop
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	2000004c 	.word	0x2000004c

08004dd0 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004dd0:	b590      	push	{r4, r7, lr}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8004dde:	4b2b      	ldr	r3, [pc, #172]	; (8004e8c <WIZCHIP_READ_BUF+0xbc>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004de4:	4b29      	ldr	r3, [pc, #164]	; (8004e8c <WIZCHIP_READ_BUF+0xbc>)
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004dea:	4b28      	ldr	r3, [pc, #160]	; (8004e8c <WIZCHIP_READ_BUF+0xbc>)
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <WIZCHIP_READ_BUF+0x2a>
 8004df2:	4b26      	ldr	r3, [pc, #152]	; (8004e8c <WIZCHIP_READ_BUF+0xbc>)
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d126      	bne.n	8004e48 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004dfa:	4b24      	ldr	r3, [pc, #144]	; (8004e8c <WIZCHIP_READ_BUF+0xbc>)
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	0c12      	lsrs	r2, r2, #16
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	4610      	mov	r0, r2
 8004e06:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004e08:	4b20      	ldr	r3, [pc, #128]	; (8004e8c <WIZCHIP_READ_BUF+0xbc>)
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	0a12      	lsrs	r2, r2, #8
 8004e10:	b2d2      	uxtb	r2, r2
 8004e12:	4610      	mov	r0, r2
 8004e14:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004e16:	4b1d      	ldr	r3, [pc, #116]	; (8004e8c <WIZCHIP_READ_BUF+0xbc>)
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	b2d2      	uxtb	r2, r2
 8004e1e:	4610      	mov	r0, r2
 8004e20:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004e22:	2300      	movs	r3, #0
 8004e24:	82fb      	strh	r3, [r7, #22]
 8004e26:	e00a      	b.n	8004e3e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8004e28:	4b18      	ldr	r3, [pc, #96]	; (8004e8c <WIZCHIP_READ_BUF+0xbc>)
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	8afa      	ldrh	r2, [r7, #22]
 8004e2e:	68b9      	ldr	r1, [r7, #8]
 8004e30:	188c      	adds	r4, r1, r2
 8004e32:	4798      	blx	r3
 8004e34:	4603      	mov	r3, r0
 8004e36:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8004e38:	8afb      	ldrh	r3, [r7, #22]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	82fb      	strh	r3, [r7, #22]
 8004e3e:	8afa      	ldrh	r2, [r7, #22]
 8004e40:	88fb      	ldrh	r3, [r7, #6]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d3f0      	bcc.n	8004e28 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004e46:	e017      	b.n	8004e78 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	0c1b      	lsrs	r3, r3, #16
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	0a1b      	lsrs	r3, r3, #8
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004e5e:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <WIZCHIP_READ_BUF+0xbc>)
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	f107 0210 	add.w	r2, r7, #16
 8004e66:	2103      	movs	r1, #3
 8004e68:	4610      	mov	r0, r2
 8004e6a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8004e6c:	4b07      	ldr	r3, [pc, #28]	; (8004e8c <WIZCHIP_READ_BUF+0xbc>)
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	88fa      	ldrh	r2, [r7, #6]
 8004e72:	4611      	mov	r1, r2
 8004e74:	68b8      	ldr	r0, [r7, #8]
 8004e76:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004e78:	4b04      	ldr	r3, [pc, #16]	; (8004e8c <WIZCHIP_READ_BUF+0xbc>)
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004e7e:	4b03      	ldr	r3, [pc, #12]	; (8004e8c <WIZCHIP_READ_BUF+0xbc>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	4798      	blx	r3
}
 8004e84:	bf00      	nop
 8004e86:	371c      	adds	r7, #28
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd90      	pop	{r4, r7, pc}
 8004e8c:	2000004c 	.word	0x2000004c

08004e90 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8004e9e:	4b2b      	ldr	r3, [pc, #172]	; (8004f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004ea4:	4b29      	ldr	r3, [pc, #164]	; (8004f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f043 0304 	orr.w	r3, r3, #4
 8004eb0:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004eb2:	4b26      	ldr	r3, [pc, #152]	; (8004f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d126      	bne.n	8004f08 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004eba:	4b24      	ldr	r3, [pc, #144]	; (8004f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	0c12      	lsrs	r2, r2, #16
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004ec8:	4b20      	ldr	r3, [pc, #128]	; (8004f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	0a12      	lsrs	r2, r2, #8
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004ed6:	4b1d      	ldr	r3, [pc, #116]	; (8004f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	b2d2      	uxtb	r2, r2
 8004ede:	4610      	mov	r0, r2
 8004ee0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	82fb      	strh	r3, [r7, #22]
 8004ee6:	e00a      	b.n	8004efe <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8004ee8:	4b18      	ldr	r3, [pc, #96]	; (8004f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	8afa      	ldrh	r2, [r7, #22]
 8004eee:	68b9      	ldr	r1, [r7, #8]
 8004ef0:	440a      	add	r2, r1
 8004ef2:	7812      	ldrb	r2, [r2, #0]
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004ef8:	8afb      	ldrh	r3, [r7, #22]
 8004efa:	3301      	adds	r3, #1
 8004efc:	82fb      	strh	r3, [r7, #22]
 8004efe:	8afa      	ldrh	r2, [r7, #22]
 8004f00:	88fb      	ldrh	r3, [r7, #6]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d3f0      	bcc.n	8004ee8 <WIZCHIP_WRITE_BUF+0x58>
 8004f06:	e017      	b.n	8004f38 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	0c1b      	lsrs	r3, r3, #16
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	0a1b      	lsrs	r3, r3, #8
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004f1e:	4b0b      	ldr	r3, [pc, #44]	; (8004f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	f107 0210 	add.w	r2, r7, #16
 8004f26:	2103      	movs	r1, #3
 8004f28:	4610      	mov	r0, r2
 8004f2a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8004f2c:	4b07      	ldr	r3, [pc, #28]	; (8004f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	88fa      	ldrh	r2, [r7, #6]
 8004f32:	4611      	mov	r1, r2
 8004f34:	68b8      	ldr	r0, [r7, #8]
 8004f36:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004f38:	4b04      	ldr	r3, [pc, #16]	; (8004f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004f3e:	4b03      	ldr	r3, [pc, #12]	; (8004f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	4798      	blx	r3
}
 8004f44:	bf00      	nop
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	2000004c 	.word	0x2000004c

08004f50 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8004f50:	b590      	push	{r4, r7, lr}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4603      	mov	r3, r0
 8004f58:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	81fb      	strh	r3, [r7, #14]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	3301      	adds	r3, #1
 8004f68:	00db      	lsls	r3, r3, #3
 8004f6a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff fe94 	bl	8004c9c <WIZCHIP_READ>
 8004f74:	4603      	mov	r3, r0
 8004f76:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004f78:	89bb      	ldrh	r3, [r7, #12]
 8004f7a:	021b      	lsls	r3, r3, #8
 8004f7c:	b29c      	uxth	r4, r3
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	3301      	adds	r3, #1
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff fe86 	bl	8004c9c <WIZCHIP_READ>
 8004f90:	4603      	mov	r3, r0
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	4423      	add	r3, r4
 8004f96:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8004f98:	89bb      	ldrh	r3, [r7, #12]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d01a      	beq.n	8004fd4 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7ff fe76 	bl	8004c9c <WIZCHIP_READ>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004fb4:	89fb      	ldrh	r3, [r7, #14]
 8004fb6:	021b      	lsls	r3, r3, #8
 8004fb8:	b29c      	uxth	r4, r3
 8004fba:	79fb      	ldrb	r3, [r7, #7]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	00db      	lsls	r3, r3, #3
 8004fc2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff fe68 	bl	8004c9c <WIZCHIP_READ>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	4423      	add	r3, r4
 8004fd2:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8004fd4:	89fa      	ldrh	r2, [r7, #14]
 8004fd6:	89bb      	ldrh	r3, [r7, #12]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d1c2      	bne.n	8004f62 <getSn_TX_FSR+0x12>
   return val;
 8004fdc:	89fb      	ldrh	r3, [r7, #14]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd90      	pop	{r4, r7, pc}

08004fe6 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8004fe6:	b590      	push	{r4, r7, lr}
 8004fe8:	b085      	sub	sp, #20
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	4603      	mov	r3, r0
 8004fee:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	81fb      	strh	r3, [r7, #14]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff fe49 	bl	8004c9c <WIZCHIP_READ>
 800500a:	4603      	mov	r3, r0
 800500c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800500e:	89bb      	ldrh	r3, [r7, #12]
 8005010:	021b      	lsls	r3, r3, #8
 8005012:	b29c      	uxth	r4, r3
 8005014:	79fb      	ldrb	r3, [r7, #7]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	3301      	adds	r3, #1
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8005020:	4618      	mov	r0, r3
 8005022:	f7ff fe3b 	bl	8004c9c <WIZCHIP_READ>
 8005026:	4603      	mov	r3, r0
 8005028:	b29b      	uxth	r3, r3
 800502a:	4423      	add	r3, r4
 800502c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800502e:	89bb      	ldrh	r3, [r7, #12]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d01a      	beq.n	800506a <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8005034:	79fb      	ldrb	r3, [r7, #7]
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	3301      	adds	r3, #1
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff fe2b 	bl	8004c9c <WIZCHIP_READ>
 8005046:	4603      	mov	r3, r0
 8005048:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800504a:	89fb      	ldrh	r3, [r7, #14]
 800504c:	021b      	lsls	r3, r3, #8
 800504e:	b29c      	uxth	r4, r3
 8005050:	79fb      	ldrb	r3, [r7, #7]
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	3301      	adds	r3, #1
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff fe1d 	bl	8004c9c <WIZCHIP_READ>
 8005062:	4603      	mov	r3, r0
 8005064:	b29b      	uxth	r3, r3
 8005066:	4423      	add	r3, r4
 8005068:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800506a:	89fa      	ldrh	r2, [r7, #14]
 800506c:	89bb      	ldrh	r3, [r7, #12]
 800506e:	429a      	cmp	r2, r3
 8005070:	d1c2      	bne.n	8004ff8 <getSn_RX_RSR+0x12>
   return val;
 8005072:	89fb      	ldrh	r3, [r7, #14]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	bd90      	pop	{r4, r7, pc}

0800507c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800507c:	b590      	push	{r4, r7, lr}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	4603      	mov	r3, r0
 8005084:	6039      	str	r1, [r7, #0]
 8005086:	71fb      	strb	r3, [r7, #7]
 8005088:	4613      	mov	r3, r2
 800508a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800508c:	2300      	movs	r3, #0
 800508e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8005090:	2300      	movs	r3, #0
 8005092:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8005094:	88bb      	ldrh	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d048      	beq.n	800512c <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 800509a:	79fb      	ldrb	r3, [r7, #7]
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	3301      	adds	r3, #1
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7ff fdf8 	bl	8004c9c <WIZCHIP_READ>
 80050ac:	4603      	mov	r3, r0
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	021b      	lsls	r3, r3, #8
 80050b2:	b29c      	uxth	r4, r3
 80050b4:	79fb      	ldrb	r3, [r7, #7]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	3301      	adds	r3, #1
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff fdeb 	bl	8004c9c <WIZCHIP_READ>
 80050c6:	4603      	mov	r3, r0
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	4423      	add	r3, r4
 80050cc:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80050ce:	89fb      	ldrh	r3, [r7, #14]
 80050d0:	021b      	lsls	r3, r3, #8
 80050d2:	79fa      	ldrb	r2, [r7, #7]
 80050d4:	0092      	lsls	r2, r2, #2
 80050d6:	3202      	adds	r2, #2
 80050d8:	00d2      	lsls	r2, r2, #3
 80050da:	4413      	add	r3, r2
 80050dc:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80050de:	88bb      	ldrh	r3, [r7, #4]
 80050e0:	461a      	mov	r2, r3
 80050e2:	6839      	ldr	r1, [r7, #0]
 80050e4:	68b8      	ldr	r0, [r7, #8]
 80050e6:	f7ff fed3 	bl	8004e90 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80050ea:	89fa      	ldrh	r2, [r7, #14]
 80050ec:	88bb      	ldrh	r3, [r7, #4]
 80050ee:	4413      	add	r3, r2
 80050f0:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80050f2:	79fb      	ldrb	r3, [r7, #7]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	3301      	adds	r3, #1
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80050fe:	461a      	mov	r2, r3
 8005100:	89fb      	ldrh	r3, [r7, #14]
 8005102:	0a1b      	lsrs	r3, r3, #8
 8005104:	b29b      	uxth	r3, r3
 8005106:	b2db      	uxtb	r3, r3
 8005108:	4619      	mov	r1, r3
 800510a:	4610      	mov	r0, r2
 800510c:	f7ff fe12 	bl	8004d34 <WIZCHIP_WRITE>
 8005110:	79fb      	ldrb	r3, [r7, #7]
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	3301      	adds	r3, #1
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800511c:	461a      	mov	r2, r3
 800511e:	89fb      	ldrh	r3, [r7, #14]
 8005120:	b2db      	uxtb	r3, r3
 8005122:	4619      	mov	r1, r3
 8005124:	4610      	mov	r0, r2
 8005126:	f7ff fe05 	bl	8004d34 <WIZCHIP_WRITE>
 800512a:	e000      	b.n	800512e <wiz_send_data+0xb2>
   if(len == 0)  return;
 800512c:	bf00      	nop
}
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	bd90      	pop	{r4, r7, pc}

08005134 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8005134:	b590      	push	{r4, r7, lr}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	4603      	mov	r3, r0
 800513c:	6039      	str	r1, [r7, #0]
 800513e:	71fb      	strb	r3, [r7, #7]
 8005140:	4613      	mov	r3, r2
 8005142:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005144:	2300      	movs	r3, #0
 8005146:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8005148:	2300      	movs	r3, #0
 800514a:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 800514c:	88bb      	ldrh	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d048      	beq.n	80051e4 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8005152:	79fb      	ldrb	r3, [r7, #7]
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	3301      	adds	r3, #1
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800515e:	4618      	mov	r0, r3
 8005160:	f7ff fd9c 	bl	8004c9c <WIZCHIP_READ>
 8005164:	4603      	mov	r3, r0
 8005166:	b29b      	uxth	r3, r3
 8005168:	021b      	lsls	r3, r3, #8
 800516a:	b29c      	uxth	r4, r3
 800516c:	79fb      	ldrb	r3, [r7, #7]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	3301      	adds	r3, #1
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8005178:	4618      	mov	r0, r3
 800517a:	f7ff fd8f 	bl	8004c9c <WIZCHIP_READ>
 800517e:	4603      	mov	r3, r0
 8005180:	b29b      	uxth	r3, r3
 8005182:	4423      	add	r3, r4
 8005184:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8005186:	89fb      	ldrh	r3, [r7, #14]
 8005188:	021b      	lsls	r3, r3, #8
 800518a:	79fa      	ldrb	r2, [r7, #7]
 800518c:	0092      	lsls	r2, r2, #2
 800518e:	3203      	adds	r2, #3
 8005190:	00d2      	lsls	r2, r2, #3
 8005192:	4413      	add	r3, r2
 8005194:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8005196:	88bb      	ldrh	r3, [r7, #4]
 8005198:	461a      	mov	r2, r3
 800519a:	6839      	ldr	r1, [r7, #0]
 800519c:	68b8      	ldr	r0, [r7, #8]
 800519e:	f7ff fe17 	bl	8004dd0 <WIZCHIP_READ_BUF>
   ptr += len;
 80051a2:	89fa      	ldrh	r2, [r7, #14]
 80051a4:	88bb      	ldrh	r3, [r7, #4]
 80051a6:	4413      	add	r3, r2
 80051a8:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 80051aa:	79fb      	ldrb	r3, [r7, #7]
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	3301      	adds	r3, #1
 80051b0:	00db      	lsls	r3, r3, #3
 80051b2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80051b6:	461a      	mov	r2, r3
 80051b8:	89fb      	ldrh	r3, [r7, #14]
 80051ba:	0a1b      	lsrs	r3, r3, #8
 80051bc:	b29b      	uxth	r3, r3
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	4619      	mov	r1, r3
 80051c2:	4610      	mov	r0, r2
 80051c4:	f7ff fdb6 	bl	8004d34 <WIZCHIP_WRITE>
 80051c8:	79fb      	ldrb	r3, [r7, #7]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	3301      	adds	r3, #1
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80051d4:	461a      	mov	r2, r3
 80051d6:	89fb      	ldrh	r3, [r7, #14]
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	4619      	mov	r1, r3
 80051dc:	4610      	mov	r0, r2
 80051de:	f7ff fda9 	bl	8004d34 <WIZCHIP_WRITE>
 80051e2:	e000      	b.n	80051e6 <wiz_recv_data+0xb2>
   if(len == 0) return;
 80051e4:	bf00      	nop
}
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd90      	pop	{r4, r7, pc}

080051ec <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_enter(void)           {};
void       wizchip_cris_enter(void)           {}
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	bf00      	nop
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_exit(void)          {};
void       wizchip_cris_exit(void)          {}
 80051fa:	b480      	push	{r7}
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	bf00      	nop
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_select(void)            {};

void wizchip_cs_select(void) {}
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
 800520c:	bf00      	nop
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 8005216:	b480      	push	{r7}
 8005218:	af00      	add	r7, sp, #0
 800521a:	bf00      	nop
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	b2db      	uxtb	r3, r3
 8005232:	4618      	mov	r0, r3
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	460b      	mov	r3, r1
 8005248:	70fb      	strb	r3, [r7, #3]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	78fa      	ldrb	r2, [r7, #3]
 800524e:	701a      	strb	r2, [r3, #0]
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
 8005260:	2300      	movs	r3, #0
 8005262:	4618      	mov	r0, r3
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	4603      	mov	r3, r0
 8005274:	71fb      	strb	r3, [r7, #7]
 8005276:	bf00      	nop
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}; 
void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}
 8005282:	b480      	push	{r7}
 8005284:	b083      	sub	sp, #12
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	460b      	mov	r3, r1
 800528c:	807b      	strh	r3, [r7, #2]
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	460b      	mov	r3, r1
 80052a4:	807b      	strh	r3, [r7, #2]
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
	...

080052b4 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <reg_wizchip_cs_cbfunc+0x16>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80052ca:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <reg_wizchip_cs_cbfunc+0x40>)
 80052cc:	4a0a      	ldr	r2, [pc, #40]	; (80052f8 <reg_wizchip_cs_cbfunc+0x44>)
 80052ce:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80052d0:	4b08      	ldr	r3, [pc, #32]	; (80052f4 <reg_wizchip_cs_cbfunc+0x40>)
 80052d2:	4a0a      	ldr	r2, [pc, #40]	; (80052fc <reg_wizchip_cs_cbfunc+0x48>)
 80052d4:	615a      	str	r2, [r3, #20]
 80052d6:	e006      	b.n	80052e6 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80052d8:	4a06      	ldr	r2, [pc, #24]	; (80052f4 <reg_wizchip_cs_cbfunc+0x40>)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 80052de:	4a05      	ldr	r2, [pc, #20]	; (80052f4 <reg_wizchip_cs_cbfunc+0x40>)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	6153      	str	r3, [r2, #20]
   }
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	2000004c 	.word	0x2000004c
 80052f8:	08005209 	.word	0x08005209
 80052fc:	08005217 	.word	0x08005217

08005300 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800530a:	bf00      	nop
 800530c:	4b0f      	ldr	r3, [pc, #60]	; (800534c <reg_wizchip_spi_cbfunc+0x4c>)
 800530e:	881b      	ldrh	r3, [r3, #0]
 8005310:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0f9      	beq.n	800530c <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d002      	beq.n	8005324 <reg_wizchip_spi_cbfunc+0x24>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d106      	bne.n	8005332 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8005324:	4b09      	ldr	r3, [pc, #36]	; (800534c <reg_wizchip_spi_cbfunc+0x4c>)
 8005326:	4a0a      	ldr	r2, [pc, #40]	; (8005350 <reg_wizchip_spi_cbfunc+0x50>)
 8005328:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800532a:	4b08      	ldr	r3, [pc, #32]	; (800534c <reg_wizchip_spi_cbfunc+0x4c>)
 800532c:	4a09      	ldr	r2, [pc, #36]	; (8005354 <reg_wizchip_spi_cbfunc+0x54>)
 800532e:	61da      	str	r2, [r3, #28]
 8005330:	e006      	b.n	8005340 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8005332:	4a06      	ldr	r2, [pc, #24]	; (800534c <reg_wizchip_spi_cbfunc+0x4c>)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8005338:	4a04      	ldr	r2, [pc, #16]	; (800534c <reg_wizchip_spi_cbfunc+0x4c>)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	61d3      	str	r3, [r2, #28]
   }
}
 800533e:	bf00      	nop
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	2000004c 	.word	0x2000004c
 8005350:	0800525d 	.word	0x0800525d
 8005354:	0800526d 	.word	0x0800526d

08005358 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005362:	bf00      	nop
 8005364:	4b0f      	ldr	r3, [pc, #60]	; (80053a4 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800536c:	2b00      	cmp	r3, #0
 800536e:	d0f9      	beq.n	8005364 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <reg_wizchip_spiburst_cbfunc+0x24>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d106      	bne.n	800538a <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 800537c:	4b09      	ldr	r3, [pc, #36]	; (80053a4 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800537e:	4a0a      	ldr	r2, [pc, #40]	; (80053a8 <reg_wizchip_spiburst_cbfunc+0x50>)
 8005380:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8005382:	4b08      	ldr	r3, [pc, #32]	; (80053a4 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005384:	4a09      	ldr	r2, [pc, #36]	; (80053ac <reg_wizchip_spiburst_cbfunc+0x54>)
 8005386:	625a      	str	r2, [r3, #36]	; 0x24
 8005388:	e006      	b.n	8005398 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 800538a:	4a06      	ldr	r2, [pc, #24]	; (80053a4 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6213      	str	r3, [r2, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8005390:	4a04      	ldr	r2, [pc, #16]	; (80053a4 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	6253      	str	r3, [r2, #36]	; 0x24
   }
}
 8005396:	bf00      	nop
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	2000004c 	.word	0x2000004c
 80053a8:	08005283 	.word	0x08005283
 80053ac:	0800529b 	.word	0x0800529b

080053b0 <ctlnetwork>:
   return 0;
}


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	4603      	mov	r3, r0
 80053b8:	6039      	str	r1, [r7, #0]
 80053ba:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	2b05      	cmp	r3, #5
 80053c0:	d82c      	bhi.n	800541c <ctlnetwork+0x6c>
 80053c2:	a201      	add	r2, pc, #4	; (adr r2, 80053c8 <ctlnetwork+0x18>)
 80053c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c8:	080053e1 	.word	0x080053e1
 80053cc:	080053e9 	.word	0x080053e9
 80053d0:	080053f1 	.word	0x080053f1
 80053d4:	080053ff 	.word	0x080053ff
 80053d8:	0800540d 	.word	0x0800540d
 80053dc:	08005415 	.word	0x08005415
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 80053e0:	6838      	ldr	r0, [r7, #0]
 80053e2:	f000 f8fb 	bl	80055dc <wizchip_setnetinfo>
         break;
 80053e6:	e01c      	b.n	8005422 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 80053e8:	6838      	ldr	r0, [r7, #0]
 80053ea:	f000 f937 	bl	800565c <wizchip_getnetinfo>
         break;
 80053ee:	e018      	b.n	8005422 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 f971 	bl	80056dc <wizchip_setnetmode>
 80053fa:	4603      	mov	r3, r0
 80053fc:	e012      	b.n	8005424 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 80053fe:	f000 f98f 	bl	8005720 <wizchip_getnetmode>
 8005402:	4603      	mov	r3, r0
 8005404:	461a      	mov	r2, r3
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	701a      	strb	r2, [r3, #0]
         break;
 800540a:	e00a      	b.n	8005422 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 800540c:	6838      	ldr	r0, [r7, #0]
 800540e:	f000 f98f 	bl	8005730 <wizchip_settimeout>
         break;
 8005412:	e006      	b.n	8005422 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8005414:	6838      	ldr	r0, [r7, #0]
 8005416:	f000 f9ac 	bl	8005772 <wizchip_gettimeout>
         break;
 800541a:	e002      	b.n	8005422 <ctlnetwork+0x72>
      default:
         return -1;
 800541c:	f04f 33ff 	mov.w	r3, #4294967295
 8005420:	e000      	b.n	8005424 <ctlnetwork+0x74>
   }
   return 0;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8005432:	1d3b      	adds	r3, r7, #4
 8005434:	2206      	movs	r2, #6
 8005436:	4619      	mov	r1, r3
 8005438:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800543c:	f7ff fcc8 	bl	8004dd0 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8005440:	f107 0314 	add.w	r3, r7, #20
 8005444:	2204      	movs	r2, #4
 8005446:	4619      	mov	r1, r3
 8005448:	f44f 7080 	mov.w	r0, #256	; 0x100
 800544c:	f7ff fcc0 	bl	8004dd0 <WIZCHIP_READ_BUF>
 8005450:	f107 0310 	add.w	r3, r7, #16
 8005454:	2204      	movs	r2, #4
 8005456:	4619      	mov	r1, r3
 8005458:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800545c:	f7ff fcb8 	bl	8004dd0 <WIZCHIP_READ_BUF>
 8005460:	f107 030c 	add.w	r3, r7, #12
 8005464:	2204      	movs	r2, #4
 8005466:	4619      	mov	r1, r3
 8005468:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800546c:	f7ff fcb0 	bl	8004dd0 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8005470:	2180      	movs	r1, #128	; 0x80
 8005472:	2000      	movs	r0, #0
 8005474:	f7ff fc5e 	bl	8004d34 <WIZCHIP_WRITE>
   getMR(); // for delay
 8005478:	2000      	movs	r0, #0
 800547a:	f7ff fc0f 	bl	8004c9c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800547e:	1d3b      	adds	r3, r7, #4
 8005480:	2206      	movs	r2, #6
 8005482:	4619      	mov	r1, r3
 8005484:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8005488:	f7ff fd02 	bl	8004e90 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800548c:	f107 0314 	add.w	r3, r7, #20
 8005490:	2204      	movs	r2, #4
 8005492:	4619      	mov	r1, r3
 8005494:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005498:	f7ff fcfa 	bl	8004e90 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800549c:	f107 0310 	add.w	r3, r7, #16
 80054a0:	2204      	movs	r2, #4
 80054a2:	4619      	mov	r1, r3
 80054a4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80054a8:	f7ff fcf2 	bl	8004e90 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80054ac:	f107 030c 	add.w	r3, r7, #12
 80054b0:	2204      	movs	r2, #4
 80054b2:	4619      	mov	r1, r3
 80054b4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80054b8:	f7ff fcea 	bl	8004e90 <WIZCHIP_WRITE_BUF>
}
 80054bc:	bf00      	nop
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80054ce:	2300      	movs	r3, #0
 80054d0:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80054d2:	f7ff ffab 	bl	800542c <wizchip_sw_reset>
   if(txsize)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d03b      	beq.n	8005554 <wizchip_init+0x90>
   {
      tmp = 0;
 80054dc:	2300      	movs	r3, #0
 80054de:	73bb      	strb	r3, [r7, #14]
            tmp += txsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80054e0:	2300      	movs	r3, #0
 80054e2:	73fb      	strb	r3, [r7, #15]
 80054e4:	e015      	b.n	8005512 <wizchip_init+0x4e>
        {
            tmp += txsize[i];
 80054e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	4413      	add	r3, r2
 80054ee:	781a      	ldrb	r2, [r3, #0]
 80054f0:	7bbb      	ldrb	r3, [r7, #14]
 80054f2:	4413      	add	r3, r2
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	73bb      	strb	r3, [r7, #14]

        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 80054f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054fc:	2b10      	cmp	r3, #16
 80054fe:	dd02      	ble.n	8005506 <wizchip_init+0x42>
 8005500:	f04f 33ff 	mov.w	r3, #4294967295
 8005504:	e066      	b.n	80055d4 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800550a:	b2db      	uxtb	r3, r3
 800550c:	3301      	adds	r3, #1
 800550e:	b2db      	uxtb	r3, r3
 8005510:	73fb      	strb	r3, [r7, #15]
 8005512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005516:	2b07      	cmp	r3, #7
 8005518:	dde5      	ble.n	80054e6 <wizchip_init+0x22>
        #endif
        }
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800551a:	2300      	movs	r3, #0
 800551c:	73fb      	strb	r3, [r7, #15]
 800551e:	e015      	b.n	800554c <wizchip_init+0x88>
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100
            j = 0;
            while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_TXBUF_SIZE(i, j);
        #else
            setSn_TXBUF_SIZE(i, txsize[i]);
 8005520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	3301      	adds	r3, #1
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800552e:	4618      	mov	r0, r3
 8005530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	4413      	add	r3, r2
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	4619      	mov	r1, r3
 800553c:	f7ff fbfa 	bl	8004d34 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005544:	b2db      	uxtb	r3, r3
 8005546:	3301      	adds	r3, #1
 8005548:	b2db      	uxtb	r3, r3
 800554a:	73fb      	strb	r3, [r7, #15]
 800554c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005550:	2b07      	cmp	r3, #7
 8005552:	dde5      	ble.n	8005520 <wizchip_init+0x5c>
        }

    #endif
   }

   if(rxsize)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d03b      	beq.n	80055d2 <wizchip_init+0x10e>
   {
      tmp = 0;
 800555a:	2300      	movs	r3, #0
 800555c:	73bb      	strb	r3, [r7, #14]
            tmp += rxsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800555e:	2300      	movs	r3, #0
 8005560:	73fb      	strb	r3, [r7, #15]
 8005562:	e015      	b.n	8005590 <wizchip_init+0xcc>
        {
            tmp += rxsize[i];
 8005564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	4413      	add	r3, r2
 800556c:	781a      	ldrb	r2, [r3, #0]
 800556e:	7bbb      	ldrb	r3, [r7, #14]
 8005570:	4413      	add	r3, r2
 8005572:	b2db      	uxtb	r3, r3
 8005574:	73bb      	strb	r3, [r7, #14]
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8005576:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800557a:	2b10      	cmp	r3, #16
 800557c:	dd02      	ble.n	8005584 <wizchip_init+0xc0>
 800557e:	f04f 33ff 	mov.w	r3, #4294967295
 8005582:	e027      	b.n	80055d4 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005588:	b2db      	uxtb	r3, r3
 800558a:	3301      	adds	r3, #1
 800558c:	b2db      	uxtb	r3, r3
 800558e:	73fb      	strb	r3, [r7, #15]
 8005590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005594:	2b07      	cmp	r3, #7
 8005596:	dde5      	ble.n	8005564 <wizchip_init+0xa0>
        #endif
        }

        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005598:	2300      	movs	r3, #0
 800559a:	73fb      	strb	r3, [r7, #15]
 800559c:	e015      	b.n	80055ca <wizchip_init+0x106>
        #if _WIZCHIP_ < W5200    // add condition for w5100
            j = 0;
            while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_RXBUF_SIZE(i, j);
        #else
            setSn_RXBUF_SIZE(i, rxsize[i]);
 800559e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	3301      	adds	r3, #1
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80055ac:	4618      	mov	r0, r3
 80055ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	4413      	add	r3, r2
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	4619      	mov	r1, r3
 80055ba:	f7ff fbbb 	bl	8004d34 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80055be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	3301      	adds	r3, #1
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	73fb      	strb	r3, [r7, #15]
 80055ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055ce:	2b07      	cmp	r3, #7
 80055d0:	dde5      	ble.n	800559e <wizchip_init+0xda>
        #endif
        }
    #endif
   }
   return 0;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2206      	movs	r2, #6
 80055e8:	4619      	mov	r1, r3
 80055ea:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80055ee:	f7ff fc4f 	bl	8004e90 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	330e      	adds	r3, #14
 80055f6:	2204      	movs	r2, #4
 80055f8:	4619      	mov	r1, r3
 80055fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80055fe:	f7ff fc47 	bl	8004e90 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	330a      	adds	r3, #10
 8005606:	2204      	movs	r2, #4
 8005608:	4619      	mov	r1, r3
 800560a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800560e:	f7ff fc3f 	bl	8004e90 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	3306      	adds	r3, #6
 8005616:	2204      	movs	r2, #4
 8005618:	4619      	mov	r1, r3
 800561a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800561e:	f7ff fc37 	bl	8004e90 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	7c9a      	ldrb	r2, [r3, #18]
 8005626:	4b0b      	ldr	r3, [pc, #44]	; (8005654 <wizchip_setnetinfo+0x78>)
 8005628:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	7cda      	ldrb	r2, [r3, #19]
 800562e:	4b09      	ldr	r3, [pc, #36]	; (8005654 <wizchip_setnetinfo+0x78>)
 8005630:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	7d1a      	ldrb	r2, [r3, #20]
 8005636:	4b07      	ldr	r3, [pc, #28]	; (8005654 <wizchip_setnetinfo+0x78>)
 8005638:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	7d5a      	ldrb	r2, [r3, #21]
 800563e:	4b05      	ldr	r3, [pc, #20]	; (8005654 <wizchip_setnetinfo+0x78>)
 8005640:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	7d9a      	ldrb	r2, [r3, #22]
 8005646:	4b04      	ldr	r3, [pc, #16]	; (8005658 <wizchip_setnetinfo+0x7c>)
 8005648:	701a      	strb	r2, [r3, #0]
}
 800564a:	bf00      	nop
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20000a9c 	.word	0x20000a9c
 8005658:	20000aa0 	.word	0x20000aa0

0800565c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2206      	movs	r2, #6
 8005668:	4619      	mov	r1, r3
 800566a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800566e:	f7ff fbaf 	bl	8004dd0 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	330e      	adds	r3, #14
 8005676:	2204      	movs	r2, #4
 8005678:	4619      	mov	r1, r3
 800567a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800567e:	f7ff fba7 	bl	8004dd0 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	330a      	adds	r3, #10
 8005686:	2204      	movs	r2, #4
 8005688:	4619      	mov	r1, r3
 800568a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800568e:	f7ff fb9f 	bl	8004dd0 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	3306      	adds	r3, #6
 8005696:	2204      	movs	r2, #4
 8005698:	4619      	mov	r1, r3
 800569a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800569e:	f7ff fb97 	bl	8004dd0 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80056a2:	4b0c      	ldr	r3, [pc, #48]	; (80056d4 <wizchip_getnetinfo+0x78>)
 80056a4:	781a      	ldrb	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80056aa:	4b0a      	ldr	r3, [pc, #40]	; (80056d4 <wizchip_getnetinfo+0x78>)
 80056ac:	785a      	ldrb	r2, [r3, #1]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80056b2:	4b08      	ldr	r3, [pc, #32]	; (80056d4 <wizchip_getnetinfo+0x78>)
 80056b4:	789a      	ldrb	r2, [r3, #2]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80056ba:	4b06      	ldr	r3, [pc, #24]	; (80056d4 <wizchip_getnetinfo+0x78>)
 80056bc:	78da      	ldrb	r2, [r3, #3]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80056c2:	4b05      	ldr	r3, [pc, #20]	; (80056d8 <wizchip_getnetinfo+0x7c>)
 80056c4:	781a      	ldrb	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	759a      	strb	r2, [r3, #22]
}
 80056ca:	bf00      	nop
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20000a9c 	.word	0x20000a9c
 80056d8:	20000aa0 	.word	0x20000aa0

080056dc <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	4603      	mov	r3, r0
 80056e4:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80056e6:	2300      	movs	r3, #0
 80056e8:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80056ea:	79fb      	ldrb	r3, [r7, #7]
 80056ec:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <wizchip_setnetmode+0x1e>
 80056f4:	f04f 33ff 	mov.w	r3, #4294967295
 80056f8:	e00e      	b.n	8005718 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 80056fa:	2000      	movs	r0, #0
 80056fc:	f7ff face 	bl	8004c9c <WIZCHIP_READ>
 8005700:	4603      	mov	r3, r0
 8005702:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8005704:	7bfa      	ldrb	r2, [r7, #15]
 8005706:	79fb      	ldrb	r3, [r7, #7]
 8005708:	4313      	orrs	r3, r2
 800570a:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 800570c:	7bfb      	ldrb	r3, [r7, #15]
 800570e:	4619      	mov	r1, r3
 8005710:	2000      	movs	r0, #0
 8005712:	f7ff fb0f 	bl	8004d34 <WIZCHIP_WRITE>
   return 0;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8005724:	2000      	movs	r0, #0
 8005726:	f7ff fab9 	bl	8004c9c <WIZCHIP_READ>
 800572a:	4603      	mov	r3, r0
}
 800572c:	4618      	mov	r0, r3
 800572e:	bd80      	pop	{r7, pc}

08005730 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	4619      	mov	r1, r3
 800573e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8005742:	f7ff faf7 	bl	8004d34 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	885b      	ldrh	r3, [r3, #2]
 800574a:	0a1b      	lsrs	r3, r3, #8
 800574c:	b29b      	uxth	r3, r3
 800574e:	b2db      	uxtb	r3, r3
 8005750:	4619      	mov	r1, r3
 8005752:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8005756:	f7ff faed 	bl	8004d34 <WIZCHIP_WRITE>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	885b      	ldrh	r3, [r3, #2]
 800575e:	b2db      	uxtb	r3, r3
 8005760:	4619      	mov	r1, r3
 8005762:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8005766:	f7ff fae5 	bl	8004d34 <WIZCHIP_WRITE>
}
 800576a:	bf00      	nop
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8005772:	b590      	push	{r4, r7, lr}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 800577a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800577e:	f7ff fa8d 	bl	8004c9c <WIZCHIP_READ>
 8005782:	4603      	mov	r3, r0
 8005784:	461a      	mov	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 800578a:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800578e:	f7ff fa85 	bl	8004c9c <WIZCHIP_READ>
 8005792:	4603      	mov	r3, r0
 8005794:	b29b      	uxth	r3, r3
 8005796:	021b      	lsls	r3, r3, #8
 8005798:	b29c      	uxth	r4, r3
 800579a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800579e:	f7ff fa7d 	bl	8004c9c <WIZCHIP_READ>
 80057a2:	4603      	mov	r3, r0
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	4423      	add	r3, r4
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	805a      	strh	r2, [r3, #2]
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd90      	pop	{r4, r7, pc}
	...

080057b8 <W5500_Select>:
#include "wiznet_api.h"

static wiz_NetInfo gWIZNETINFO;

void W5500_Select(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIZNET_CS_PORT, WIZNET_CS_PIN, GPIO_PIN_RESET);
 80057bc:	2200      	movs	r2, #0
 80057be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80057c2:	4802      	ldr	r0, [pc, #8]	; (80057cc <W5500_Select+0x14>)
 80057c4:	f000 ffda 	bl	800677c <HAL_GPIO_WritePin>
}
 80057c8:	bf00      	nop
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	40020400 	.word	0x40020400

080057d0 <W5500_Deselect>:

void W5500_Deselect(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIZNET_CS_PORT, WIZNET_CS_PIN, GPIO_PIN_SET);
 80057d4:	2201      	movs	r2, #1
 80057d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80057da:	4802      	ldr	r0, [pc, #8]	; (80057e4 <W5500_Deselect+0x14>)
 80057dc:	f000 ffce 	bl	800677c <HAL_GPIO_WritePin>
}
 80057e0:	bf00      	nop
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	40020400 	.word	0x40020400

080057e8 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	460b      	mov	r3, r1
 80057f2:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(WIZNET_SPI_INSTANCE, buff, len, HAL_MAX_DELAY);
 80057f4:	887a      	ldrh	r2, [r7, #2]
 80057f6:	f04f 33ff 	mov.w	r3, #4294967295
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	4803      	ldr	r0, [pc, #12]	; (800580c <W5500_ReadBuff+0x24>)
 80057fe:	f002 faa9 	bl	8007d54 <HAL_SPI_Receive>
}
 8005802:	bf00      	nop
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	20000258 	.word	0x20000258

08005810 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	460b      	mov	r3, r1
 800581a:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(WIZNET_SPI_INSTANCE, buff, len, HAL_MAX_DELAY);
 800581c:	887a      	ldrh	r2, [r7, #2]
 800581e:	f04f 33ff 	mov.w	r3, #4294967295
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	4803      	ldr	r0, [pc, #12]	; (8005834 <W5500_WriteBuff+0x24>)
 8005826:	f002 f952 	bl	8007ace <HAL_SPI_Transmit>
}
 800582a:	bf00      	nop
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	20000258 	.word	0x20000258

08005838 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
	uint8_t byte;
	W5500_ReadBuff(&byte, sizeof(byte));
 800583e:	1dfb      	adds	r3, r7, #7
 8005840:	2101      	movs	r1, #1
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff ffd0 	bl	80057e8 <W5500_ReadBuff>
	return byte;
 8005848:	79fb      	ldrb	r3, [r7, #7]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b082      	sub	sp, #8
 8005856:	af00      	add	r7, sp, #0
 8005858:	4603      	mov	r3, r0
 800585a:	71fb      	strb	r3, [r7, #7]
	W5500_WriteBuff(&byte, sizeof(byte));
 800585c:	1dfb      	adds	r3, r7, #7
 800585e:	2101      	movs	r1, #1
 8005860:	4618      	mov	r0, r3
 8005862:	f7ff ffd5 	bl	8005810 <W5500_WriteBuff>
}
 8005866:	bf00      	nop
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
	...

08005870 <W5500_SetAddress>:

void W5500_SetAddress(wiz_NetInfo info)
{
 8005870:	b084      	sub	sp, #16
 8005872:	b4b0      	push	{r4, r5, r7}
 8005874:	af00      	add	r7, sp, #0
 8005876:	f107 040c 	add.w	r4, r7, #12
 800587a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	gWIZNETINFO = info;
 800587e:	4b09      	ldr	r3, [pc, #36]	; (80058a4 <W5500_SetAddress+0x34>)
 8005880:	461c      	mov	r4, r3
 8005882:	f107 050c 	add.w	r5, r7, #12
 8005886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800588a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800588e:	6020      	str	r0, [r4, #0]
 8005890:	3404      	adds	r4, #4
 8005892:	8021      	strh	r1, [r4, #0]
 8005894:	3402      	adds	r4, #2
 8005896:	0c0b      	lsrs	r3, r1, #16
 8005898:	7023      	strb	r3, [r4, #0]
}
 800589a:	bf00      	nop
 800589c:	46bd      	mov	sp, r7
 800589e:	bcb0      	pop	{r4, r5, r7}
 80058a0:	b004      	add	sp, #16
 80058a2:	4770      	bx	lr
 80058a4:	20000aa4 	.word	0x20000aa4

080058a8 <W5500_Reboot>:
void W5500_Reboot()
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIZNET_RST_PORT, WIZNET_RST_PIN, GPIO_PIN_RESET);
 80058ae:	2200      	movs	r2, #0
 80058b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058b4:	4817      	ldr	r0, [pc, #92]	; (8005914 <W5500_Reboot+0x6c>)
 80058b6:	f000 ff61 	bl	800677c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80058ba:	2005      	movs	r0, #5
 80058bc:	f000 f8d8 	bl	8005a70 <HAL_Delay>
	HAL_GPIO_WritePin(WIZNET_RST_PORT, WIZNET_RST_PIN, GPIO_PIN_SET);
 80058c0:	2201      	movs	r2, #1
 80058c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058c6:	4813      	ldr	r0, [pc, #76]	; (8005914 <W5500_Reboot+0x6c>)
 80058c8:	f000 ff58 	bl	800677c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80058cc:	2005      	movs	r0, #5
 80058ce:	f000 f8cf 	bl	8005a70 <HAL_Delay>
	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Deselect);
 80058d2:	4911      	ldr	r1, [pc, #68]	; (8005918 <W5500_Reboot+0x70>)
 80058d4:	4811      	ldr	r0, [pc, #68]	; (800591c <W5500_Reboot+0x74>)
 80058d6:	f7ff fced 	bl	80052b4 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 80058da:	4911      	ldr	r1, [pc, #68]	; (8005920 <W5500_Reboot+0x78>)
 80058dc:	4811      	ldr	r0, [pc, #68]	; (8005924 <W5500_Reboot+0x7c>)
 80058de:	f7ff fd0f 	bl	8005300 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 80058e2:	4911      	ldr	r1, [pc, #68]	; (8005928 <W5500_Reboot+0x80>)
 80058e4:	4811      	ldr	r0, [pc, #68]	; (800592c <W5500_Reboot+0x84>)
 80058e6:	f7ff fd37 	bl	8005358 <reg_wizchip_spiburst_cbfunc>
	uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 80058ea:	4a11      	ldr	r2, [pc, #68]	; (8005930 <W5500_Reboot+0x88>)
 80058ec:	463b      	mov	r3, r7
 80058ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058f2:	e883 0003 	stmia.w	r3, {r0, r1}
	wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 80058f6:	463a      	mov	r2, r7
 80058f8:	463b      	mov	r3, r7
 80058fa:	4611      	mov	r1, r2
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7ff fde1 	bl	80054c4 <wizchip_init>
	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 8005902:	490c      	ldr	r1, [pc, #48]	; (8005934 <W5500_Reboot+0x8c>)
 8005904:	2000      	movs	r0, #0
 8005906:	f7ff fd53 	bl	80053b0 <ctlnetwork>
}
 800590a:	bf00      	nop
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	40020400 	.word	0x40020400
 8005918:	080057d1 	.word	0x080057d1
 800591c:	080057b9 	.word	0x080057b9
 8005920:	08005853 	.word	0x08005853
 8005924:	08005839 	.word	0x08005839
 8005928:	08005811 	.word	0x08005811
 800592c:	080057e9 	.word	0x080057e9
 8005930:	0800af34 	.word	0x0800af34
 8005934:	20000aa4 	.word	0x20000aa4

08005938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005970 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800593c:	f7fd feb4 	bl	80036a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005940:	480c      	ldr	r0, [pc, #48]	; (8005974 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005942:	490d      	ldr	r1, [pc, #52]	; (8005978 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005944:	4a0d      	ldr	r2, [pc, #52]	; (800597c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005948:	e002      	b.n	8005950 <LoopCopyDataInit>

0800594a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800594a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800594c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800594e:	3304      	adds	r3, #4

08005950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005954:	d3f9      	bcc.n	800594a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005956:	4a0a      	ldr	r2, [pc, #40]	; (8005980 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005958:	4c0a      	ldr	r4, [pc, #40]	; (8005984 <LoopFillZerobss+0x22>)
  movs r3, #0
 800595a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800595c:	e001      	b.n	8005962 <LoopFillZerobss>

0800595e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800595e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005960:	3204      	adds	r2, #4

08005962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005964:	d3fb      	bcc.n	800595e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005966:	f004 faa5 	bl	8009eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800596a:	f7fd f8e9 	bl	8002b40 <main>
  bx  lr    
 800596e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005970:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005978:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 800597c:	0800b738 	.word	0x0800b738
  ldr r2, =_sbss
 8005980:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8005984:	20000c28 	.word	0x20000c28

08005988 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005988:	e7fe      	b.n	8005988 <ADC_IRQHandler>
	...

0800598c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005990:	4b0e      	ldr	r3, [pc, #56]	; (80059cc <HAL_Init+0x40>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a0d      	ldr	r2, [pc, #52]	; (80059cc <HAL_Init+0x40>)
 8005996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800599a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800599c:	4b0b      	ldr	r3, [pc, #44]	; (80059cc <HAL_Init+0x40>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a0a      	ldr	r2, [pc, #40]	; (80059cc <HAL_Init+0x40>)
 80059a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80059a8:	4b08      	ldr	r3, [pc, #32]	; (80059cc <HAL_Init+0x40>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a07      	ldr	r2, [pc, #28]	; (80059cc <HAL_Init+0x40>)
 80059ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059b4:	2003      	movs	r0, #3
 80059b6:	f000 f973 	bl	8005ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80059ba:	200f      	movs	r0, #15
 80059bc:	f000 f808 	bl	80059d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80059c0:	f7fd fbd0 	bl	8003164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	40023c00 	.word	0x40023c00

080059d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80059d8:	4b12      	ldr	r3, [pc, #72]	; (8005a24 <HAL_InitTick+0x54>)
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <HAL_InitTick+0x58>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	4619      	mov	r1, r3
 80059e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80059ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 f999 	bl	8005d26 <HAL_SYSTICK_Config>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e00e      	b.n	8005a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b0f      	cmp	r3, #15
 8005a02:	d80a      	bhi.n	8005a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a04:	2200      	movs	r2, #0
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	f04f 30ff 	mov.w	r0, #4294967295
 8005a0c:	f000 f953 	bl	8005cb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005a10:	4a06      	ldr	r2, [pc, #24]	; (8005a2c <HAL_InitTick+0x5c>)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	e000      	b.n	8005a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	20000044 	.word	0x20000044
 8005a28:	20000078 	.word	0x20000078
 8005a2c:	20000074 	.word	0x20000074

08005a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a30:	b480      	push	{r7}
 8005a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a34:	4b06      	ldr	r3, [pc, #24]	; (8005a50 <HAL_IncTick+0x20>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	4b06      	ldr	r3, [pc, #24]	; (8005a54 <HAL_IncTick+0x24>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4413      	add	r3, r2
 8005a40:	4a04      	ldr	r2, [pc, #16]	; (8005a54 <HAL_IncTick+0x24>)
 8005a42:	6013      	str	r3, [r2, #0]
}
 8005a44:	bf00      	nop
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	20000078 	.word	0x20000078
 8005a54:	20000abc 	.word	0x20000abc

08005a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8005a5c:	4b03      	ldr	r3, [pc, #12]	; (8005a6c <HAL_GetTick+0x14>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	20000abc 	.word	0x20000abc

08005a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a78:	f7ff ffee 	bl	8005a58 <HAL_GetTick>
 8005a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a88:	d005      	beq.n	8005a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a8a:	4b0a      	ldr	r3, [pc, #40]	; (8005ab4 <HAL_Delay+0x44>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4413      	add	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005a96:	bf00      	nop
 8005a98:	f7ff ffde 	bl	8005a58 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d8f7      	bhi.n	8005a98 <HAL_Delay+0x28>
  {
  }
}
 8005aa8:	bf00      	nop
 8005aaa:	bf00      	nop
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20000078 	.word	0x20000078

08005ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f003 0307 	and.w	r3, r3, #7
 8005ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ac8:	4b0c      	ldr	r3, [pc, #48]	; (8005afc <__NVIC_SetPriorityGrouping+0x44>)
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005aea:	4a04      	ldr	r2, [pc, #16]	; (8005afc <__NVIC_SetPriorityGrouping+0x44>)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	60d3      	str	r3, [r2, #12]
}
 8005af0:	bf00      	nop
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	e000ed00 	.word	0xe000ed00

08005b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b04:	4b04      	ldr	r3, [pc, #16]	; (8005b18 <__NVIC_GetPriorityGrouping+0x18>)
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	0a1b      	lsrs	r3, r3, #8
 8005b0a:	f003 0307 	and.w	r3, r3, #7
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	e000ed00 	.word	0xe000ed00

08005b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	4603      	mov	r3, r0
 8005b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	db0b      	blt.n	8005b46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	f003 021f 	and.w	r2, r3, #31
 8005b34:	4907      	ldr	r1, [pc, #28]	; (8005b54 <__NVIC_EnableIRQ+0x38>)
 8005b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b3a:	095b      	lsrs	r3, r3, #5
 8005b3c:	2001      	movs	r0, #1
 8005b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8005b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	e000e100 	.word	0xe000e100

08005b58 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	4603      	mov	r3, r0
 8005b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	db12      	blt.n	8005b90 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b6a:	79fb      	ldrb	r3, [r7, #7]
 8005b6c:	f003 021f 	and.w	r2, r3, #31
 8005b70:	490a      	ldr	r1, [pc, #40]	; (8005b9c <__NVIC_DisableIRQ+0x44>)
 8005b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b76:	095b      	lsrs	r3, r3, #5
 8005b78:	2001      	movs	r0, #1
 8005b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8005b7e:	3320      	adds	r3, #32
 8005b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b84:	f3bf 8f4f 	dsb	sy
}
 8005b88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005b8a:	f3bf 8f6f 	isb	sy
}
 8005b8e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	e000e100 	.word	0xe000e100

08005ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	6039      	str	r1, [r7, #0]
 8005baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	db0a      	blt.n	8005bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	490c      	ldr	r1, [pc, #48]	; (8005bec <__NVIC_SetPriority+0x4c>)
 8005bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bbe:	0112      	lsls	r2, r2, #4
 8005bc0:	b2d2      	uxtb	r2, r2
 8005bc2:	440b      	add	r3, r1
 8005bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bc8:	e00a      	b.n	8005be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	4908      	ldr	r1, [pc, #32]	; (8005bf0 <__NVIC_SetPriority+0x50>)
 8005bd0:	79fb      	ldrb	r3, [r7, #7]
 8005bd2:	f003 030f 	and.w	r3, r3, #15
 8005bd6:	3b04      	subs	r3, #4
 8005bd8:	0112      	lsls	r2, r2, #4
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	440b      	add	r3, r1
 8005bde:	761a      	strb	r2, [r3, #24]
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr
 8005bec:	e000e100 	.word	0xe000e100
 8005bf0:	e000ed00 	.word	0xe000ed00

08005bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b089      	sub	sp, #36	; 0x24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	f1c3 0307 	rsb	r3, r3, #7
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	bf28      	it	cs
 8005c12:	2304      	movcs	r3, #4
 8005c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	3304      	adds	r3, #4
 8005c1a:	2b06      	cmp	r3, #6
 8005c1c:	d902      	bls.n	8005c24 <NVIC_EncodePriority+0x30>
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	3b03      	subs	r3, #3
 8005c22:	e000      	b.n	8005c26 <NVIC_EncodePriority+0x32>
 8005c24:	2300      	movs	r3, #0
 8005c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c28:	f04f 32ff 	mov.w	r2, #4294967295
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c32:	43da      	mvns	r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	401a      	ands	r2, r3
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	fa01 f303 	lsl.w	r3, r1, r3
 8005c46:	43d9      	mvns	r1, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c4c:	4313      	orrs	r3, r2
         );
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3724      	adds	r7, #36	; 0x24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
	...

08005c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c6c:	d301      	bcc.n	8005c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e00f      	b.n	8005c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c72:	4a0a      	ldr	r2, [pc, #40]	; (8005c9c <SysTick_Config+0x40>)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c7a:	210f      	movs	r1, #15
 8005c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c80:	f7ff ff8e 	bl	8005ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c84:	4b05      	ldr	r3, [pc, #20]	; (8005c9c <SysTick_Config+0x40>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c8a:	4b04      	ldr	r3, [pc, #16]	; (8005c9c <SysTick_Config+0x40>)
 8005c8c:	2207      	movs	r2, #7
 8005c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	e000e010 	.word	0xe000e010

08005ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7ff ff05 	bl	8005ab8 <__NVIC_SetPriorityGrouping>
}
 8005cae:	bf00      	nop
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b086      	sub	sp, #24
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	60b9      	str	r1, [r7, #8]
 8005cc0:	607a      	str	r2, [r7, #4]
 8005cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005cc8:	f7ff ff1a 	bl	8005b00 <__NVIC_GetPriorityGrouping>
 8005ccc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	68b9      	ldr	r1, [r7, #8]
 8005cd2:	6978      	ldr	r0, [r7, #20]
 8005cd4:	f7ff ff8e 	bl	8005bf4 <NVIC_EncodePriority>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cde:	4611      	mov	r1, r2
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7ff ff5d 	bl	8005ba0 <__NVIC_SetPriority>
}
 8005ce6:	bf00      	nop
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b082      	sub	sp, #8
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff ff0d 	bl	8005b1c <__NVIC_EnableIRQ>
}
 8005d02:	bf00      	nop
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b082      	sub	sp, #8
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	4603      	mov	r3, r0
 8005d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff ff1d 	bl	8005b58 <__NVIC_DisableIRQ>
}
 8005d1e:	bf00      	nop
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b082      	sub	sp, #8
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7ff ff94 	bl	8005c5c <SysTick_Config>
 8005d34:	4603      	mov	r3, r0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b084      	sub	sp, #16
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005d4c:	f7ff fe84 	bl	8005a58 <HAL_GetTick>
 8005d50:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d008      	beq.n	8005d70 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2280      	movs	r2, #128	; 0x80
 8005d62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e052      	b.n	8005e16 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 0216 	bic.w	r2, r2, #22
 8005d7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	695a      	ldr	r2, [r3, #20]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d8e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d103      	bne.n	8005da0 <HAL_DMA_Abort+0x62>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d007      	beq.n	8005db0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 0208 	bic.w	r2, r2, #8
 8005dae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0201 	bic.w	r2, r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dc0:	e013      	b.n	8005dea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005dc2:	f7ff fe49 	bl	8005a58 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b05      	cmp	r3, #5
 8005dce:	d90c      	bls.n	8005dea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2203      	movs	r2, #3
 8005dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e015      	b.n	8005e16 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1e4      	bne.n	8005dc2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dfc:	223f      	movs	r2, #63	; 0x3f
 8005dfe:	409a      	lsls	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b083      	sub	sp, #12
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d004      	beq.n	8005e3c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2280      	movs	r2, #128	; 0x80
 8005e36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e00c      	b.n	8005e56 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2205      	movs	r2, #5
 8005e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f022 0201 	bic.w	r2, r2, #1
 8005e52:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
	...

08005e64 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005e76:	4b23      	ldr	r3, [pc, #140]	; (8005f04 <HAL_FLASH_Program+0xa0>)
 8005e78:	7e1b      	ldrb	r3, [r3, #24]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d101      	bne.n	8005e82 <HAL_FLASH_Program+0x1e>
 8005e7e:	2302      	movs	r3, #2
 8005e80:	e03b      	b.n	8005efa <HAL_FLASH_Program+0x96>
 8005e82:	4b20      	ldr	r3, [pc, #128]	; (8005f04 <HAL_FLASH_Program+0xa0>)
 8005e84:	2201      	movs	r2, #1
 8005e86:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e8c:	f000 f870 	bl	8005f70 <FLASH_WaitForLastOperation>
 8005e90:	4603      	mov	r3, r0
 8005e92:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005e94:	7dfb      	ldrb	r3, [r7, #23]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d12b      	bne.n	8005ef2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d105      	bne.n	8005eac <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005ea0:	783b      	ldrb	r3, [r7, #0]
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	68b8      	ldr	r0, [r7, #8]
 8005ea6:	f000 f91b 	bl	80060e0 <FLASH_Program_Byte>
 8005eaa:	e016      	b.n	8005eda <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d105      	bne.n	8005ebe <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005eb2:	883b      	ldrh	r3, [r7, #0]
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	68b8      	ldr	r0, [r7, #8]
 8005eb8:	f000 f8ee 	bl	8006098 <FLASH_Program_HalfWord>
 8005ebc:	e00d      	b.n	8005eda <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d105      	bne.n	8005ed0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	68b8      	ldr	r0, [r7, #8]
 8005eca:	f000 f8c3 	bl	8006054 <FLASH_Program_Word>
 8005ece:	e004      	b.n	8005eda <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ed4:	68b8      	ldr	r0, [r7, #8]
 8005ed6:	f000 f88b 	bl	8005ff0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005eda:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005ede:	f000 f847 	bl	8005f70 <FLASH_WaitForLastOperation>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005ee6:	4b08      	ldr	r3, [pc, #32]	; (8005f08 <HAL_FLASH_Program+0xa4>)
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	4a07      	ldr	r2, [pc, #28]	; (8005f08 <HAL_FLASH_Program+0xa4>)
 8005eec:	f023 0301 	bic.w	r3, r3, #1
 8005ef0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005ef2:	4b04      	ldr	r3, [pc, #16]	; (8005f04 <HAL_FLASH_Program+0xa0>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3718      	adds	r7, #24
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	20000ac0 	.word	0x20000ac0
 8005f08:	40023c00 	.word	0x40023c00

08005f0c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005f12:	2300      	movs	r3, #0
 8005f14:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005f16:	4b0b      	ldr	r3, [pc, #44]	; (8005f44 <HAL_FLASH_Unlock+0x38>)
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	da0b      	bge.n	8005f36 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005f1e:	4b09      	ldr	r3, [pc, #36]	; (8005f44 <HAL_FLASH_Unlock+0x38>)
 8005f20:	4a09      	ldr	r2, [pc, #36]	; (8005f48 <HAL_FLASH_Unlock+0x3c>)
 8005f22:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005f24:	4b07      	ldr	r3, [pc, #28]	; (8005f44 <HAL_FLASH_Unlock+0x38>)
 8005f26:	4a09      	ldr	r2, [pc, #36]	; (8005f4c <HAL_FLASH_Unlock+0x40>)
 8005f28:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005f2a:	4b06      	ldr	r3, [pc, #24]	; (8005f44 <HAL_FLASH_Unlock+0x38>)
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	da01      	bge.n	8005f36 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005f36:	79fb      	ldrb	r3, [r7, #7]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	40023c00 	.word	0x40023c00
 8005f48:	45670123 	.word	0x45670123
 8005f4c:	cdef89ab 	.word	0xcdef89ab

08005f50 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005f54:	4b05      	ldr	r3, [pc, #20]	; (8005f6c <HAL_FLASH_Lock+0x1c>)
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	4a04      	ldr	r2, [pc, #16]	; (8005f6c <HAL_FLASH_Lock+0x1c>)
 8005f5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f5e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	40023c00 	.word	0x40023c00

08005f70 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005f7c:	4b1a      	ldr	r3, [pc, #104]	; (8005fe8 <FLASH_WaitForLastOperation+0x78>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005f82:	f7ff fd69 	bl	8005a58 <HAL_GetTick>
 8005f86:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005f88:	e010      	b.n	8005fac <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f90:	d00c      	beq.n	8005fac <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d007      	beq.n	8005fa8 <FLASH_WaitForLastOperation+0x38>
 8005f98:	f7ff fd5e 	bl	8005a58 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d201      	bcs.n	8005fac <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e019      	b.n	8005fe0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005fac:	4b0f      	ldr	r3, [pc, #60]	; (8005fec <FLASH_WaitForLastOperation+0x7c>)
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1e8      	bne.n	8005f8a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005fb8:	4b0c      	ldr	r3, [pc, #48]	; (8005fec <FLASH_WaitForLastOperation+0x7c>)
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d002      	beq.n	8005fca <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005fc4:	4b09      	ldr	r3, [pc, #36]	; (8005fec <FLASH_WaitForLastOperation+0x7c>)
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005fca:	4b08      	ldr	r3, [pc, #32]	; (8005fec <FLASH_WaitForLastOperation+0x7c>)
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005fd6:	f000 f8a5 	bl	8006124 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e000      	b.n	8005fe0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
  
}  
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	20000ac0 	.word	0x20000ac0
 8005fec:	40023c00 	.word	0x40023c00

08005ff0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005ffc:	4b14      	ldr	r3, [pc, #80]	; (8006050 <FLASH_Program_DoubleWord+0x60>)
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	4a13      	ldr	r2, [pc, #76]	; (8006050 <FLASH_Program_DoubleWord+0x60>)
 8006002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006006:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006008:	4b11      	ldr	r3, [pc, #68]	; (8006050 <FLASH_Program_DoubleWord+0x60>)
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	4a10      	ldr	r2, [pc, #64]	; (8006050 <FLASH_Program_DoubleWord+0x60>)
 800600e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006012:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006014:	4b0e      	ldr	r3, [pc, #56]	; (8006050 <FLASH_Program_DoubleWord+0x60>)
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	4a0d      	ldr	r2, [pc, #52]	; (8006050 <FLASH_Program_DoubleWord+0x60>)
 800601a:	f043 0301 	orr.w	r3, r3, #1
 800601e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006026:	f3bf 8f6f 	isb	sy
}
 800602a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800602c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006030:	f04f 0200 	mov.w	r2, #0
 8006034:	f04f 0300 	mov.w	r3, #0
 8006038:	000a      	movs	r2, r1
 800603a:	2300      	movs	r3, #0
 800603c:	68f9      	ldr	r1, [r7, #12]
 800603e:	3104      	adds	r1, #4
 8006040:	4613      	mov	r3, r2
 8006042:	600b      	str	r3, [r1, #0]
}
 8006044:	bf00      	nop
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	40023c00 	.word	0x40023c00

08006054 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800605e:	4b0d      	ldr	r3, [pc, #52]	; (8006094 <FLASH_Program_Word+0x40>)
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	4a0c      	ldr	r2, [pc, #48]	; (8006094 <FLASH_Program_Word+0x40>)
 8006064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006068:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800606a:	4b0a      	ldr	r3, [pc, #40]	; (8006094 <FLASH_Program_Word+0x40>)
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	4a09      	ldr	r2, [pc, #36]	; (8006094 <FLASH_Program_Word+0x40>)
 8006070:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006074:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006076:	4b07      	ldr	r3, [pc, #28]	; (8006094 <FLASH_Program_Word+0x40>)
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	4a06      	ldr	r2, [pc, #24]	; (8006094 <FLASH_Program_Word+0x40>)
 800607c:	f043 0301 	orr.w	r3, r3, #1
 8006080:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	601a      	str	r2, [r3, #0]
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	40023c00 	.word	0x40023c00

08006098 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	460b      	mov	r3, r1
 80060a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80060a4:	4b0d      	ldr	r3, [pc, #52]	; (80060dc <FLASH_Program_HalfWord+0x44>)
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	4a0c      	ldr	r2, [pc, #48]	; (80060dc <FLASH_Program_HalfWord+0x44>)
 80060aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80060b0:	4b0a      	ldr	r3, [pc, #40]	; (80060dc <FLASH_Program_HalfWord+0x44>)
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	4a09      	ldr	r2, [pc, #36]	; (80060dc <FLASH_Program_HalfWord+0x44>)
 80060b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80060bc:	4b07      	ldr	r3, [pc, #28]	; (80060dc <FLASH_Program_HalfWord+0x44>)
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	4a06      	ldr	r2, [pc, #24]	; (80060dc <FLASH_Program_HalfWord+0x44>)
 80060c2:	f043 0301 	orr.w	r3, r3, #1
 80060c6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	887a      	ldrh	r2, [r7, #2]
 80060cc:	801a      	strh	r2, [r3, #0]
}
 80060ce:	bf00      	nop
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	40023c00 	.word	0x40023c00

080060e0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80060ec:	4b0c      	ldr	r3, [pc, #48]	; (8006120 <FLASH_Program_Byte+0x40>)
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	4a0b      	ldr	r2, [pc, #44]	; (8006120 <FLASH_Program_Byte+0x40>)
 80060f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80060f8:	4b09      	ldr	r3, [pc, #36]	; (8006120 <FLASH_Program_Byte+0x40>)
 80060fa:	4a09      	ldr	r2, [pc, #36]	; (8006120 <FLASH_Program_Byte+0x40>)
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006100:	4b07      	ldr	r3, [pc, #28]	; (8006120 <FLASH_Program_Byte+0x40>)
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	4a06      	ldr	r2, [pc, #24]	; (8006120 <FLASH_Program_Byte+0x40>)
 8006106:	f043 0301 	orr.w	r3, r3, #1
 800610a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	78fa      	ldrb	r2, [r7, #3]
 8006110:	701a      	strb	r2, [r3, #0]
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	40023c00 	.word	0x40023c00

08006124 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006124:	b480      	push	{r7}
 8006126:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006128:	4b27      	ldr	r3, [pc, #156]	; (80061c8 <FLASH_SetErrorCode+0xa4>)
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	f003 0310 	and.w	r3, r3, #16
 8006130:	2b00      	cmp	r3, #0
 8006132:	d008      	beq.n	8006146 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006134:	4b25      	ldr	r3, [pc, #148]	; (80061cc <FLASH_SetErrorCode+0xa8>)
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	f043 0310 	orr.w	r3, r3, #16
 800613c:	4a23      	ldr	r2, [pc, #140]	; (80061cc <FLASH_SetErrorCode+0xa8>)
 800613e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006140:	4b21      	ldr	r3, [pc, #132]	; (80061c8 <FLASH_SetErrorCode+0xa4>)
 8006142:	2210      	movs	r2, #16
 8006144:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8006146:	4b20      	ldr	r3, [pc, #128]	; (80061c8 <FLASH_SetErrorCode+0xa4>)
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f003 0320 	and.w	r3, r3, #32
 800614e:	2b00      	cmp	r3, #0
 8006150:	d008      	beq.n	8006164 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006152:	4b1e      	ldr	r3, [pc, #120]	; (80061cc <FLASH_SetErrorCode+0xa8>)
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	f043 0308 	orr.w	r3, r3, #8
 800615a:	4a1c      	ldr	r2, [pc, #112]	; (80061cc <FLASH_SetErrorCode+0xa8>)
 800615c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800615e:	4b1a      	ldr	r3, [pc, #104]	; (80061c8 <FLASH_SetErrorCode+0xa4>)
 8006160:	2220      	movs	r2, #32
 8006162:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006164:	4b18      	ldr	r3, [pc, #96]	; (80061c8 <FLASH_SetErrorCode+0xa4>)
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616c:	2b00      	cmp	r3, #0
 800616e:	d008      	beq.n	8006182 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006170:	4b16      	ldr	r3, [pc, #88]	; (80061cc <FLASH_SetErrorCode+0xa8>)
 8006172:	69db      	ldr	r3, [r3, #28]
 8006174:	f043 0304 	orr.w	r3, r3, #4
 8006178:	4a14      	ldr	r2, [pc, #80]	; (80061cc <FLASH_SetErrorCode+0xa8>)
 800617a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800617c:	4b12      	ldr	r3, [pc, #72]	; (80061c8 <FLASH_SetErrorCode+0xa4>)
 800617e:	2240      	movs	r2, #64	; 0x40
 8006180:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8006182:	4b11      	ldr	r3, [pc, #68]	; (80061c8 <FLASH_SetErrorCode+0xa4>)
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618a:	2b00      	cmp	r3, #0
 800618c:	d008      	beq.n	80061a0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800618e:	4b0f      	ldr	r3, [pc, #60]	; (80061cc <FLASH_SetErrorCode+0xa8>)
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	f043 0302 	orr.w	r3, r3, #2
 8006196:	4a0d      	ldr	r2, [pc, #52]	; (80061cc <FLASH_SetErrorCode+0xa8>)
 8006198:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800619a:	4b0b      	ldr	r3, [pc, #44]	; (80061c8 <FLASH_SetErrorCode+0xa4>)
 800619c:	2280      	movs	r2, #128	; 0x80
 800619e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80061a0:	4b09      	ldr	r3, [pc, #36]	; (80061c8 <FLASH_SetErrorCode+0xa4>)
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d008      	beq.n	80061be <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80061ac:	4b07      	ldr	r3, [pc, #28]	; (80061cc <FLASH_SetErrorCode+0xa8>)
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	f043 0320 	orr.w	r3, r3, #32
 80061b4:	4a05      	ldr	r2, [pc, #20]	; (80061cc <FLASH_SetErrorCode+0xa8>)
 80061b6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80061b8:	4b03      	ldr	r3, [pc, #12]	; (80061c8 <FLASH_SetErrorCode+0xa4>)
 80061ba:	2202      	movs	r2, #2
 80061bc:	60da      	str	r2, [r3, #12]
  }
}
 80061be:	bf00      	nop
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	40023c00 	.word	0x40023c00
 80061cc:	20000ac0 	.word	0x20000ac0

080061d0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80061de:	2300      	movs	r3, #0
 80061e0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80061e2:	4b31      	ldr	r3, [pc, #196]	; (80062a8 <HAL_FLASHEx_Erase+0xd8>)
 80061e4:	7e1b      	ldrb	r3, [r3, #24]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d101      	bne.n	80061ee <HAL_FLASHEx_Erase+0x1e>
 80061ea:	2302      	movs	r3, #2
 80061ec:	e058      	b.n	80062a0 <HAL_FLASHEx_Erase+0xd0>
 80061ee:	4b2e      	ldr	r3, [pc, #184]	; (80062a8 <HAL_FLASHEx_Erase+0xd8>)
 80061f0:	2201      	movs	r2, #1
 80061f2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80061f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80061f8:	f7ff feba 	bl	8005f70 <FLASH_WaitForLastOperation>
 80061fc:	4603      	mov	r3, r0
 80061fe:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006200:	7bfb      	ldrb	r3, [r7, #15]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d148      	bne.n	8006298 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	f04f 32ff 	mov.w	r2, #4294967295
 800620c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d115      	bne.n	8006242 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	b2da      	uxtb	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	4619      	mov	r1, r3
 8006222:	4610      	mov	r0, r2
 8006224:	f000 f844 	bl	80062b0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006228:	f24c 3050 	movw	r0, #50000	; 0xc350
 800622c:	f7ff fea0 	bl	8005f70 <FLASH_WaitForLastOperation>
 8006230:	4603      	mov	r3, r0
 8006232:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8006234:	4b1d      	ldr	r3, [pc, #116]	; (80062ac <HAL_FLASHEx_Erase+0xdc>)
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	4a1c      	ldr	r2, [pc, #112]	; (80062ac <HAL_FLASHEx_Erase+0xdc>)
 800623a:	f023 0304 	bic.w	r3, r3, #4
 800623e:	6113      	str	r3, [r2, #16]
 8006240:	e028      	b.n	8006294 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	60bb      	str	r3, [r7, #8]
 8006248:	e01c      	b.n	8006284 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	b2db      	uxtb	r3, r3
 8006250:	4619      	mov	r1, r3
 8006252:	68b8      	ldr	r0, [r7, #8]
 8006254:	f000 f850 	bl	80062f8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006258:	f24c 3050 	movw	r0, #50000	; 0xc350
 800625c:	f7ff fe88 	bl	8005f70 <FLASH_WaitForLastOperation>
 8006260:	4603      	mov	r3, r0
 8006262:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8006264:	4b11      	ldr	r3, [pc, #68]	; (80062ac <HAL_FLASHEx_Erase+0xdc>)
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	4a10      	ldr	r2, [pc, #64]	; (80062ac <HAL_FLASHEx_Erase+0xdc>)
 800626a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800626e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8006270:	7bfb      	ldrb	r3, [r7, #15]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	601a      	str	r2, [r3, #0]
          break;
 800627c:	e00a      	b.n	8006294 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	3301      	adds	r3, #1
 8006282:	60bb      	str	r3, [r7, #8]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68da      	ldr	r2, [r3, #12]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	4413      	add	r3, r2
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	429a      	cmp	r2, r3
 8006292:	d3da      	bcc.n	800624a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006294:	f000 f878 	bl	8006388 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006298:	4b03      	ldr	r3, [pc, #12]	; (80062a8 <HAL_FLASHEx_Erase+0xd8>)
 800629a:	2200      	movs	r2, #0
 800629c:	761a      	strb	r2, [r3, #24]

  return status;
 800629e:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	20000ac0 	.word	0x20000ac0
 80062ac:	40023c00 	.word	0x40023c00

080062b0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	4603      	mov	r3, r0
 80062b8:	6039      	str	r1, [r7, #0]
 80062ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80062bc:	4b0d      	ldr	r3, [pc, #52]	; (80062f4 <FLASH_MassErase+0x44>)
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	4a0c      	ldr	r2, [pc, #48]	; (80062f4 <FLASH_MassErase+0x44>)
 80062c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80062c8:	4b0a      	ldr	r3, [pc, #40]	; (80062f4 <FLASH_MassErase+0x44>)
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	4a09      	ldr	r2, [pc, #36]	; (80062f4 <FLASH_MassErase+0x44>)
 80062ce:	f043 0304 	orr.w	r3, r3, #4
 80062d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80062d4:	4b07      	ldr	r3, [pc, #28]	; (80062f4 <FLASH_MassErase+0x44>)
 80062d6:	691a      	ldr	r2, [r3, #16]
 80062d8:	79fb      	ldrb	r3, [r7, #7]
 80062da:	021b      	lsls	r3, r3, #8
 80062dc:	4313      	orrs	r3, r2
 80062de:	4a05      	ldr	r2, [pc, #20]	; (80062f4 <FLASH_MassErase+0x44>)
 80062e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062e4:	6113      	str	r3, [r2, #16]
}
 80062e6:	bf00      	nop
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	40023c00 	.word	0x40023c00

080062f8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	460b      	mov	r3, r1
 8006302:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006304:	2300      	movs	r3, #0
 8006306:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006308:	78fb      	ldrb	r3, [r7, #3]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d102      	bne.n	8006314 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800630e:	2300      	movs	r3, #0
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	e010      	b.n	8006336 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006314:	78fb      	ldrb	r3, [r7, #3]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d103      	bne.n	8006322 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800631a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	e009      	b.n	8006336 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006322:	78fb      	ldrb	r3, [r7, #3]
 8006324:	2b02      	cmp	r3, #2
 8006326:	d103      	bne.n	8006330 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006328:	f44f 7300 	mov.w	r3, #512	; 0x200
 800632c:	60fb      	str	r3, [r7, #12]
 800632e:	e002      	b.n	8006336 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006330:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006334:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006336:	4b13      	ldr	r3, [pc, #76]	; (8006384 <FLASH_Erase_Sector+0x8c>)
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	4a12      	ldr	r2, [pc, #72]	; (8006384 <FLASH_Erase_Sector+0x8c>)
 800633c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006340:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006342:	4b10      	ldr	r3, [pc, #64]	; (8006384 <FLASH_Erase_Sector+0x8c>)
 8006344:	691a      	ldr	r2, [r3, #16]
 8006346:	490f      	ldr	r1, [pc, #60]	; (8006384 <FLASH_Erase_Sector+0x8c>)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4313      	orrs	r3, r2
 800634c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800634e:	4b0d      	ldr	r3, [pc, #52]	; (8006384 <FLASH_Erase_Sector+0x8c>)
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	4a0c      	ldr	r2, [pc, #48]	; (8006384 <FLASH_Erase_Sector+0x8c>)
 8006354:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006358:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800635a:	4b0a      	ldr	r3, [pc, #40]	; (8006384 <FLASH_Erase_Sector+0x8c>)
 800635c:	691a      	ldr	r2, [r3, #16]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	00db      	lsls	r3, r3, #3
 8006362:	4313      	orrs	r3, r2
 8006364:	4a07      	ldr	r2, [pc, #28]	; (8006384 <FLASH_Erase_Sector+0x8c>)
 8006366:	f043 0302 	orr.w	r3, r3, #2
 800636a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800636c:	4b05      	ldr	r3, [pc, #20]	; (8006384 <FLASH_Erase_Sector+0x8c>)
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	4a04      	ldr	r2, [pc, #16]	; (8006384 <FLASH_Erase_Sector+0x8c>)
 8006372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006376:	6113      	str	r3, [r2, #16]
}
 8006378:	bf00      	nop
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	40023c00 	.word	0x40023c00

08006388 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006388:	b480      	push	{r7}
 800638a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800638c:	4b20      	ldr	r3, [pc, #128]	; (8006410 <FLASH_FlushCaches+0x88>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006394:	2b00      	cmp	r3, #0
 8006396:	d017      	beq.n	80063c8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006398:	4b1d      	ldr	r3, [pc, #116]	; (8006410 <FLASH_FlushCaches+0x88>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a1c      	ldr	r2, [pc, #112]	; (8006410 <FLASH_FlushCaches+0x88>)
 800639e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063a2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80063a4:	4b1a      	ldr	r3, [pc, #104]	; (8006410 <FLASH_FlushCaches+0x88>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a19      	ldr	r2, [pc, #100]	; (8006410 <FLASH_FlushCaches+0x88>)
 80063aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	4b17      	ldr	r3, [pc, #92]	; (8006410 <FLASH_FlushCaches+0x88>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a16      	ldr	r2, [pc, #88]	; (8006410 <FLASH_FlushCaches+0x88>)
 80063b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063ba:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80063bc:	4b14      	ldr	r3, [pc, #80]	; (8006410 <FLASH_FlushCaches+0x88>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a13      	ldr	r2, [pc, #76]	; (8006410 <FLASH_FlushCaches+0x88>)
 80063c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063c6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80063c8:	4b11      	ldr	r3, [pc, #68]	; (8006410 <FLASH_FlushCaches+0x88>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d017      	beq.n	8006404 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80063d4:	4b0e      	ldr	r3, [pc, #56]	; (8006410 <FLASH_FlushCaches+0x88>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a0d      	ldr	r2, [pc, #52]	; (8006410 <FLASH_FlushCaches+0x88>)
 80063da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063de:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80063e0:	4b0b      	ldr	r3, [pc, #44]	; (8006410 <FLASH_FlushCaches+0x88>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a0a      	ldr	r2, [pc, #40]	; (8006410 <FLASH_FlushCaches+0x88>)
 80063e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	4b08      	ldr	r3, [pc, #32]	; (8006410 <FLASH_FlushCaches+0x88>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a07      	ldr	r2, [pc, #28]	; (8006410 <FLASH_FlushCaches+0x88>)
 80063f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063f6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80063f8:	4b05      	ldr	r3, [pc, #20]	; (8006410 <FLASH_FlushCaches+0x88>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a04      	ldr	r2, [pc, #16]	; (8006410 <FLASH_FlushCaches+0x88>)
 80063fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006402:	6013      	str	r3, [r2, #0]
  }
}
 8006404:	bf00      	nop
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	40023c00 	.word	0x40023c00

08006414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006414:	b480      	push	{r7}
 8006416:	b089      	sub	sp, #36	; 0x24
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800641e:	2300      	movs	r3, #0
 8006420:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006422:	2300      	movs	r3, #0
 8006424:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006426:	2300      	movs	r3, #0
 8006428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800642a:	2300      	movs	r3, #0
 800642c:	61fb      	str	r3, [r7, #28]
 800642e:	e16b      	b.n	8006708 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006430:	2201      	movs	r2, #1
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	fa02 f303 	lsl.w	r3, r2, r3
 8006438:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	4013      	ands	r3, r2
 8006442:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	429a      	cmp	r2, r3
 800644a:	f040 815a 	bne.w	8006702 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f003 0303 	and.w	r3, r3, #3
 8006456:	2b01      	cmp	r3, #1
 8006458:	d005      	beq.n	8006466 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006462:	2b02      	cmp	r3, #2
 8006464:	d130      	bne.n	80064c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	005b      	lsls	r3, r3, #1
 8006470:	2203      	movs	r2, #3
 8006472:	fa02 f303 	lsl.w	r3, r2, r3
 8006476:	43db      	mvns	r3, r3
 8006478:	69ba      	ldr	r2, [r7, #24]
 800647a:	4013      	ands	r3, r2
 800647c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	fa02 f303 	lsl.w	r3, r2, r3
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	4313      	orrs	r3, r2
 800648e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800649c:	2201      	movs	r2, #1
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	fa02 f303 	lsl.w	r3, r2, r3
 80064a4:	43db      	mvns	r3, r3
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	4013      	ands	r3, r2
 80064aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	091b      	lsrs	r3, r3, #4
 80064b2:	f003 0201 	and.w	r2, r3, #1
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	fa02 f303 	lsl.w	r3, r2, r3
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	4313      	orrs	r3, r2
 80064c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f003 0303 	and.w	r3, r3, #3
 80064d0:	2b03      	cmp	r3, #3
 80064d2:	d017      	beq.n	8006504 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	005b      	lsls	r3, r3, #1
 80064de:	2203      	movs	r2, #3
 80064e0:	fa02 f303 	lsl.w	r3, r2, r3
 80064e4:	43db      	mvns	r3, r3
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	4013      	ands	r3, r2
 80064ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	fa02 f303 	lsl.w	r3, r2, r3
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f003 0303 	and.w	r3, r3, #3
 800650c:	2b02      	cmp	r3, #2
 800650e:	d123      	bne.n	8006558 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	08da      	lsrs	r2, r3, #3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3208      	adds	r2, #8
 8006518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800651c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	f003 0307 	and.w	r3, r3, #7
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	220f      	movs	r2, #15
 8006528:	fa02 f303 	lsl.w	r3, r2, r3
 800652c:	43db      	mvns	r3, r3
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	4013      	ands	r3, r2
 8006532:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	691a      	ldr	r2, [r3, #16]
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	f003 0307 	and.w	r3, r3, #7
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	fa02 f303 	lsl.w	r3, r2, r3
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	4313      	orrs	r3, r2
 8006548:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	08da      	lsrs	r2, r3, #3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	3208      	adds	r2, #8
 8006552:	69b9      	ldr	r1, [r7, #24]
 8006554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	2203      	movs	r2, #3
 8006564:	fa02 f303 	lsl.w	r3, r2, r3
 8006568:	43db      	mvns	r3, r3
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	4013      	ands	r3, r2
 800656e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f003 0203 	and.w	r2, r3, #3
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	005b      	lsls	r3, r3, #1
 800657c:	fa02 f303 	lsl.w	r3, r2, r3
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	4313      	orrs	r3, r2
 8006584:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006594:	2b00      	cmp	r3, #0
 8006596:	f000 80b4 	beq.w	8006702 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800659a:	2300      	movs	r3, #0
 800659c:	60fb      	str	r3, [r7, #12]
 800659e:	4b60      	ldr	r3, [pc, #384]	; (8006720 <HAL_GPIO_Init+0x30c>)
 80065a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a2:	4a5f      	ldr	r2, [pc, #380]	; (8006720 <HAL_GPIO_Init+0x30c>)
 80065a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065a8:	6453      	str	r3, [r2, #68]	; 0x44
 80065aa:	4b5d      	ldr	r3, [pc, #372]	; (8006720 <HAL_GPIO_Init+0x30c>)
 80065ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065b6:	4a5b      	ldr	r2, [pc, #364]	; (8006724 <HAL_GPIO_Init+0x310>)
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	089b      	lsrs	r3, r3, #2
 80065bc:	3302      	adds	r3, #2
 80065be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	220f      	movs	r2, #15
 80065ce:	fa02 f303 	lsl.w	r3, r2, r3
 80065d2:	43db      	mvns	r3, r3
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	4013      	ands	r3, r2
 80065d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a52      	ldr	r2, [pc, #328]	; (8006728 <HAL_GPIO_Init+0x314>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d02b      	beq.n	800663a <HAL_GPIO_Init+0x226>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a51      	ldr	r2, [pc, #324]	; (800672c <HAL_GPIO_Init+0x318>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d025      	beq.n	8006636 <HAL_GPIO_Init+0x222>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a50      	ldr	r2, [pc, #320]	; (8006730 <HAL_GPIO_Init+0x31c>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d01f      	beq.n	8006632 <HAL_GPIO_Init+0x21e>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a4f      	ldr	r2, [pc, #316]	; (8006734 <HAL_GPIO_Init+0x320>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d019      	beq.n	800662e <HAL_GPIO_Init+0x21a>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a4e      	ldr	r2, [pc, #312]	; (8006738 <HAL_GPIO_Init+0x324>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d013      	beq.n	800662a <HAL_GPIO_Init+0x216>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a4d      	ldr	r2, [pc, #308]	; (800673c <HAL_GPIO_Init+0x328>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d00d      	beq.n	8006626 <HAL_GPIO_Init+0x212>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a4c      	ldr	r2, [pc, #304]	; (8006740 <HAL_GPIO_Init+0x32c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d007      	beq.n	8006622 <HAL_GPIO_Init+0x20e>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a4b      	ldr	r2, [pc, #300]	; (8006744 <HAL_GPIO_Init+0x330>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d101      	bne.n	800661e <HAL_GPIO_Init+0x20a>
 800661a:	2307      	movs	r3, #7
 800661c:	e00e      	b.n	800663c <HAL_GPIO_Init+0x228>
 800661e:	2308      	movs	r3, #8
 8006620:	e00c      	b.n	800663c <HAL_GPIO_Init+0x228>
 8006622:	2306      	movs	r3, #6
 8006624:	e00a      	b.n	800663c <HAL_GPIO_Init+0x228>
 8006626:	2305      	movs	r3, #5
 8006628:	e008      	b.n	800663c <HAL_GPIO_Init+0x228>
 800662a:	2304      	movs	r3, #4
 800662c:	e006      	b.n	800663c <HAL_GPIO_Init+0x228>
 800662e:	2303      	movs	r3, #3
 8006630:	e004      	b.n	800663c <HAL_GPIO_Init+0x228>
 8006632:	2302      	movs	r3, #2
 8006634:	e002      	b.n	800663c <HAL_GPIO_Init+0x228>
 8006636:	2301      	movs	r3, #1
 8006638:	e000      	b.n	800663c <HAL_GPIO_Init+0x228>
 800663a:	2300      	movs	r3, #0
 800663c:	69fa      	ldr	r2, [r7, #28]
 800663e:	f002 0203 	and.w	r2, r2, #3
 8006642:	0092      	lsls	r2, r2, #2
 8006644:	4093      	lsls	r3, r2
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	4313      	orrs	r3, r2
 800664a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800664c:	4935      	ldr	r1, [pc, #212]	; (8006724 <HAL_GPIO_Init+0x310>)
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	089b      	lsrs	r3, r3, #2
 8006652:	3302      	adds	r3, #2
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800665a:	4b3b      	ldr	r3, [pc, #236]	; (8006748 <HAL_GPIO_Init+0x334>)
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	43db      	mvns	r3, r3
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	4013      	ands	r3, r2
 8006668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	4313      	orrs	r3, r2
 800667c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800667e:	4a32      	ldr	r2, [pc, #200]	; (8006748 <HAL_GPIO_Init+0x334>)
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006684:	4b30      	ldr	r3, [pc, #192]	; (8006748 <HAL_GPIO_Init+0x334>)
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	43db      	mvns	r3, r3
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	4013      	ands	r3, r2
 8006692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80066a8:	4a27      	ldr	r2, [pc, #156]	; (8006748 <HAL_GPIO_Init+0x334>)
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80066ae:	4b26      	ldr	r3, [pc, #152]	; (8006748 <HAL_GPIO_Init+0x334>)
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	43db      	mvns	r3, r3
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	4013      	ands	r3, r2
 80066bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80066ca:	69ba      	ldr	r2, [r7, #24]
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80066d2:	4a1d      	ldr	r2, [pc, #116]	; (8006748 <HAL_GPIO_Init+0x334>)
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80066d8:	4b1b      	ldr	r3, [pc, #108]	; (8006748 <HAL_GPIO_Init+0x334>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	43db      	mvns	r3, r3
 80066e2:	69ba      	ldr	r2, [r7, #24]
 80066e4:	4013      	ands	r3, r2
 80066e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d003      	beq.n	80066fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80066fc:	4a12      	ldr	r2, [pc, #72]	; (8006748 <HAL_GPIO_Init+0x334>)
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	3301      	adds	r3, #1
 8006706:	61fb      	str	r3, [r7, #28]
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	2b0f      	cmp	r3, #15
 800670c:	f67f ae90 	bls.w	8006430 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006710:	bf00      	nop
 8006712:	bf00      	nop
 8006714:	3724      	adds	r7, #36	; 0x24
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	40023800 	.word	0x40023800
 8006724:	40013800 	.word	0x40013800
 8006728:	40020000 	.word	0x40020000
 800672c:	40020400 	.word	0x40020400
 8006730:	40020800 	.word	0x40020800
 8006734:	40020c00 	.word	0x40020c00
 8006738:	40021000 	.word	0x40021000
 800673c:	40021400 	.word	0x40021400
 8006740:	40021800 	.word	0x40021800
 8006744:	40021c00 	.word	0x40021c00
 8006748:	40013c00 	.word	0x40013c00

0800674c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	460b      	mov	r3, r1
 8006756:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	691a      	ldr	r2, [r3, #16]
 800675c:	887b      	ldrh	r3, [r7, #2]
 800675e:	4013      	ands	r3, r2
 8006760:	2b00      	cmp	r3, #0
 8006762:	d002      	beq.n	800676a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006764:	2301      	movs	r3, #1
 8006766:	73fb      	strb	r3, [r7, #15]
 8006768:	e001      	b.n	800676e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800676a:	2300      	movs	r3, #0
 800676c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800676e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	460b      	mov	r3, r1
 8006786:	807b      	strh	r3, [r7, #2]
 8006788:	4613      	mov	r3, r2
 800678a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800678c:	787b      	ldrb	r3, [r7, #1]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006792:	887a      	ldrh	r2, [r7, #2]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006798:	e003      	b.n	80067a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800679a:	887b      	ldrh	r3, [r7, #2]
 800679c:	041a      	lsls	r2, r3, #16
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	619a      	str	r2, [r3, #24]
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
	...

080067b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e12b      	b.n	8006a1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d106      	bne.n	80067dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7fc fcec 	bl	80031b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2224      	movs	r2, #36	; 0x24
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0201 	bic.w	r2, r2, #1
 80067f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006802:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006812:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006814:	f001 f8aa 	bl	800796c <HAL_RCC_GetPCLK1Freq>
 8006818:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	4a81      	ldr	r2, [pc, #516]	; (8006a24 <HAL_I2C_Init+0x274>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d807      	bhi.n	8006834 <HAL_I2C_Init+0x84>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	4a80      	ldr	r2, [pc, #512]	; (8006a28 <HAL_I2C_Init+0x278>)
 8006828:	4293      	cmp	r3, r2
 800682a:	bf94      	ite	ls
 800682c:	2301      	movls	r3, #1
 800682e:	2300      	movhi	r3, #0
 8006830:	b2db      	uxtb	r3, r3
 8006832:	e006      	b.n	8006842 <HAL_I2C_Init+0x92>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4a7d      	ldr	r2, [pc, #500]	; (8006a2c <HAL_I2C_Init+0x27c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	bf94      	ite	ls
 800683c:	2301      	movls	r3, #1
 800683e:	2300      	movhi	r3, #0
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e0e7      	b.n	8006a1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	4a78      	ldr	r2, [pc, #480]	; (8006a30 <HAL_I2C_Init+0x280>)
 800684e:	fba2 2303 	umull	r2, r3, r2, r3
 8006852:	0c9b      	lsrs	r3, r3, #18
 8006854:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	430a      	orrs	r2, r1
 8006868:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	4a6a      	ldr	r2, [pc, #424]	; (8006a24 <HAL_I2C_Init+0x274>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d802      	bhi.n	8006884 <HAL_I2C_Init+0xd4>
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	3301      	adds	r3, #1
 8006882:	e009      	b.n	8006898 <HAL_I2C_Init+0xe8>
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800688a:	fb02 f303 	mul.w	r3, r2, r3
 800688e:	4a69      	ldr	r2, [pc, #420]	; (8006a34 <HAL_I2C_Init+0x284>)
 8006890:	fba2 2303 	umull	r2, r3, r2, r3
 8006894:	099b      	lsrs	r3, r3, #6
 8006896:	3301      	adds	r3, #1
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	6812      	ldr	r2, [r2, #0]
 800689c:	430b      	orrs	r3, r1
 800689e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80068aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	495c      	ldr	r1, [pc, #368]	; (8006a24 <HAL_I2C_Init+0x274>)
 80068b4:	428b      	cmp	r3, r1
 80068b6:	d819      	bhi.n	80068ec <HAL_I2C_Init+0x13c>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	1e59      	subs	r1, r3, #1
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80068c6:	1c59      	adds	r1, r3, #1
 80068c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80068cc:	400b      	ands	r3, r1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00a      	beq.n	80068e8 <HAL_I2C_Init+0x138>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	1e59      	subs	r1, r3, #1
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	005b      	lsls	r3, r3, #1
 80068dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80068e0:	3301      	adds	r3, #1
 80068e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068e6:	e051      	b.n	800698c <HAL_I2C_Init+0x1dc>
 80068e8:	2304      	movs	r3, #4
 80068ea:	e04f      	b.n	800698c <HAL_I2C_Init+0x1dc>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d111      	bne.n	8006918 <HAL_I2C_Init+0x168>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	1e58      	subs	r0, r3, #1
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6859      	ldr	r1, [r3, #4]
 80068fc:	460b      	mov	r3, r1
 80068fe:	005b      	lsls	r3, r3, #1
 8006900:	440b      	add	r3, r1
 8006902:	fbb0 f3f3 	udiv	r3, r0, r3
 8006906:	3301      	adds	r3, #1
 8006908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800690c:	2b00      	cmp	r3, #0
 800690e:	bf0c      	ite	eq
 8006910:	2301      	moveq	r3, #1
 8006912:	2300      	movne	r3, #0
 8006914:	b2db      	uxtb	r3, r3
 8006916:	e012      	b.n	800693e <HAL_I2C_Init+0x18e>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	1e58      	subs	r0, r3, #1
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6859      	ldr	r1, [r3, #4]
 8006920:	460b      	mov	r3, r1
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	440b      	add	r3, r1
 8006926:	0099      	lsls	r1, r3, #2
 8006928:	440b      	add	r3, r1
 800692a:	fbb0 f3f3 	udiv	r3, r0, r3
 800692e:	3301      	adds	r3, #1
 8006930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006934:	2b00      	cmp	r3, #0
 8006936:	bf0c      	ite	eq
 8006938:	2301      	moveq	r3, #1
 800693a:	2300      	movne	r3, #0
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <HAL_I2C_Init+0x196>
 8006942:	2301      	movs	r3, #1
 8006944:	e022      	b.n	800698c <HAL_I2C_Init+0x1dc>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10e      	bne.n	800696c <HAL_I2C_Init+0x1bc>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	1e58      	subs	r0, r3, #1
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6859      	ldr	r1, [r3, #4]
 8006956:	460b      	mov	r3, r1
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	440b      	add	r3, r1
 800695c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006960:	3301      	adds	r3, #1
 8006962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800696a:	e00f      	b.n	800698c <HAL_I2C_Init+0x1dc>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	1e58      	subs	r0, r3, #1
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6859      	ldr	r1, [r3, #4]
 8006974:	460b      	mov	r3, r1
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	440b      	add	r3, r1
 800697a:	0099      	lsls	r1, r3, #2
 800697c:	440b      	add	r3, r1
 800697e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006982:	3301      	adds	r3, #1
 8006984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006988:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800698c:	6879      	ldr	r1, [r7, #4]
 800698e:	6809      	ldr	r1, [r1, #0]
 8006990:	4313      	orrs	r3, r2
 8006992:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	69da      	ldr	r2, [r3, #28]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	431a      	orrs	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	430a      	orrs	r2, r1
 80069ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80069ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	6911      	ldr	r1, [r2, #16]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	68d2      	ldr	r2, [r2, #12]
 80069c6:	4311      	orrs	r1, r2
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	6812      	ldr	r2, [r2, #0]
 80069cc:	430b      	orrs	r3, r1
 80069ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	695a      	ldr	r2, [r3, #20]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0201 	orr.w	r2, r2, #1
 80069fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	000186a0 	.word	0x000186a0
 8006a28:	001e847f 	.word	0x001e847f
 8006a2c:	003d08ff 	.word	0x003d08ff
 8006a30:	431bde83 	.word	0x431bde83
 8006a34:	10624dd3 	.word	0x10624dd3

08006a38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b088      	sub	sp, #32
 8006a3c:	af02      	add	r7, sp, #8
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	4608      	mov	r0, r1
 8006a42:	4611      	mov	r1, r2
 8006a44:	461a      	mov	r2, r3
 8006a46:	4603      	mov	r3, r0
 8006a48:	817b      	strh	r3, [r7, #10]
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	813b      	strh	r3, [r7, #8]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a52:	f7ff f801 	bl	8005a58 <HAL_GetTick>
 8006a56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b20      	cmp	r3, #32
 8006a62:	f040 80d9 	bne.w	8006c18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	2319      	movs	r3, #25
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	496d      	ldr	r1, [pc, #436]	; (8006c24 <HAL_I2C_Mem_Write+0x1ec>)
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f000 f971 	bl	8006d58 <I2C_WaitOnFlagUntilTimeout>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d001      	beq.n	8006a80 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	e0cc      	b.n	8006c1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d101      	bne.n	8006a8e <HAL_I2C_Mem_Write+0x56>
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	e0c5      	b.n	8006c1a <HAL_I2C_Mem_Write+0x1e2>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d007      	beq.n	8006ab4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f042 0201 	orr.w	r2, r2, #1
 8006ab2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ac2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2221      	movs	r2, #33	; 0x21
 8006ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2240      	movs	r2, #64	; 0x40
 8006ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6a3a      	ldr	r2, [r7, #32]
 8006ade:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4a4d      	ldr	r2, [pc, #308]	; (8006c28 <HAL_I2C_Mem_Write+0x1f0>)
 8006af4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006af6:	88f8      	ldrh	r0, [r7, #6]
 8006af8:	893a      	ldrh	r2, [r7, #8]
 8006afa:	8979      	ldrh	r1, [r7, #10]
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	9301      	str	r3, [sp, #4]
 8006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	4603      	mov	r3, r0
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f000 f890 	bl	8006c2c <I2C_RequestMemoryWrite>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d052      	beq.n	8006bb8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e081      	b.n	8006c1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f000 fa36 	bl	8006f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00d      	beq.n	8006b42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2a:	2b04      	cmp	r3, #4
 8006b2c:	d107      	bne.n	8006b3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e06b      	b.n	8006c1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b46:	781a      	ldrb	r2, [r3, #0]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b52:	1c5a      	adds	r2, r3, #1
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	f003 0304 	and.w	r3, r3, #4
 8006b7c:	2b04      	cmp	r3, #4
 8006b7e:	d11b      	bne.n	8006bb8 <HAL_I2C_Mem_Write+0x180>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d017      	beq.n	8006bb8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	781a      	ldrb	r2, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b98:	1c5a      	adds	r2, r3, #1
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1aa      	bne.n	8006b16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 fa29 	bl	800701c <I2C_WaitOnBTFFlagUntilTimeout>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00d      	beq.n	8006bec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd4:	2b04      	cmp	r3, #4
 8006bd6:	d107      	bne.n	8006be8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006be6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e016      	b.n	8006c1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c14:	2300      	movs	r3, #0
 8006c16:	e000      	b.n	8006c1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006c18:	2302      	movs	r3, #2
  }
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3718      	adds	r7, #24
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	00100002 	.word	0x00100002
 8006c28:	ffff0000 	.word	0xffff0000

08006c2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b088      	sub	sp, #32
 8006c30:	af02      	add	r7, sp, #8
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	4608      	mov	r0, r1
 8006c36:	4611      	mov	r1, r2
 8006c38:	461a      	mov	r2, r3
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	817b      	strh	r3, [r7, #10]
 8006c3e:	460b      	mov	r3, r1
 8006c40:	813b      	strh	r3, [r7, #8]
 8006c42:	4613      	mov	r3, r2
 8006c44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f000 f878 	bl	8006d58 <I2C_WaitOnFlagUntilTimeout>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00d      	beq.n	8006c8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c7c:	d103      	bne.n	8006c86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e05f      	b.n	8006d4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c8a:	897b      	ldrh	r3, [r7, #10]
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	461a      	mov	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9c:	6a3a      	ldr	r2, [r7, #32]
 8006c9e:	492d      	ldr	r1, [pc, #180]	; (8006d54 <I2C_RequestMemoryWrite+0x128>)
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f000 f8d3 	bl	8006e4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d001      	beq.n	8006cb0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e04c      	b.n	8006d4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	617b      	str	r3, [r7, #20]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	617b      	str	r3, [r7, #20]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	617b      	str	r3, [r7, #20]
 8006cc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc8:	6a39      	ldr	r1, [r7, #32]
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f000 f95e 	bl	8006f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00d      	beq.n	8006cf2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	2b04      	cmp	r3, #4
 8006cdc:	d107      	bne.n	8006cee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e02b      	b.n	8006d4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006cf2:	88fb      	ldrh	r3, [r7, #6]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d105      	bne.n	8006d04 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006cf8:	893b      	ldrh	r3, [r7, #8]
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	611a      	str	r2, [r3, #16]
 8006d02:	e021      	b.n	8006d48 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006d04:	893b      	ldrh	r3, [r7, #8]
 8006d06:	0a1b      	lsrs	r3, r3, #8
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d14:	6a39      	ldr	r1, [r7, #32]
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f000 f938 	bl	8006f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00d      	beq.n	8006d3e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d26:	2b04      	cmp	r3, #4
 8006d28:	d107      	bne.n	8006d3a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e005      	b.n	8006d4a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d3e:	893b      	ldrh	r3, [r7, #8]
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3718      	adds	r7, #24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	00010002 	.word	0x00010002

08006d58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	603b      	str	r3, [r7, #0]
 8006d64:	4613      	mov	r3, r2
 8006d66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d68:	e048      	b.n	8006dfc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d70:	d044      	beq.n	8006dfc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d72:	f7fe fe71 	bl	8005a58 <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d302      	bcc.n	8006d88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d139      	bne.n	8006dfc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	0c1b      	lsrs	r3, r3, #16
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d10d      	bne.n	8006dae <I2C_WaitOnFlagUntilTimeout+0x56>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	43da      	mvns	r2, r3
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	bf0c      	ite	eq
 8006da4:	2301      	moveq	r3, #1
 8006da6:	2300      	movne	r3, #0
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	461a      	mov	r2, r3
 8006dac:	e00c      	b.n	8006dc8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	43da      	mvns	r2, r3
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	4013      	ands	r3, r2
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	bf0c      	ite	eq
 8006dc0:	2301      	moveq	r3, #1
 8006dc2:	2300      	movne	r3, #0
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	79fb      	ldrb	r3, [r7, #7]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d116      	bne.n	8006dfc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de8:	f043 0220 	orr.w	r2, r3, #32
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e023      	b.n	8006e44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	0c1b      	lsrs	r3, r3, #16
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d10d      	bne.n	8006e22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	695b      	ldr	r3, [r3, #20]
 8006e0c:	43da      	mvns	r2, r3
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	4013      	ands	r3, r2
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	bf0c      	ite	eq
 8006e18:	2301      	moveq	r3, #1
 8006e1a:	2300      	movne	r3, #0
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	461a      	mov	r2, r3
 8006e20:	e00c      	b.n	8006e3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	43da      	mvns	r2, r3
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	bf0c      	ite	eq
 8006e34:	2301      	moveq	r3, #1
 8006e36:	2300      	movne	r3, #0
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	79fb      	ldrb	r3, [r7, #7]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d093      	beq.n	8006d6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e5a:	e071      	b.n	8006f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e6a:	d123      	bne.n	8006eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2220      	movs	r2, #32
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea0:	f043 0204 	orr.w	r2, r3, #4
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e067      	b.n	8006f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eba:	d041      	beq.n	8006f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ebc:	f7fe fdcc 	bl	8005a58 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d302      	bcc.n	8006ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d136      	bne.n	8006f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	0c1b      	lsrs	r3, r3, #16
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d10c      	bne.n	8006ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	43da      	mvns	r2, r3
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	bf14      	ite	ne
 8006eee:	2301      	movne	r3, #1
 8006ef0:	2300      	moveq	r3, #0
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	e00b      	b.n	8006f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	43da      	mvns	r2, r3
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	4013      	ands	r3, r2
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	bf14      	ite	ne
 8006f08:	2301      	movne	r3, #1
 8006f0a:	2300      	moveq	r3, #0
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d016      	beq.n	8006f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2c:	f043 0220 	orr.w	r2, r3, #32
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e021      	b.n	8006f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	0c1b      	lsrs	r3, r3, #16
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d10c      	bne.n	8006f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	43da      	mvns	r2, r3
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	4013      	ands	r3, r2
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	bf14      	ite	ne
 8006f5c:	2301      	movne	r3, #1
 8006f5e:	2300      	moveq	r3, #0
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	e00b      	b.n	8006f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	43da      	mvns	r2, r3
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	4013      	ands	r3, r2
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	bf14      	ite	ne
 8006f76:	2301      	movne	r3, #1
 8006f78:	2300      	moveq	r3, #0
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f47f af6d 	bne.w	8006e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f98:	e034      	b.n	8007004 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f000 f886 	bl	80070ac <I2C_IsAcknowledgeFailed>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d001      	beq.n	8006faa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e034      	b.n	8007014 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb0:	d028      	beq.n	8007004 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fb2:	f7fe fd51 	bl	8005a58 <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d302      	bcc.n	8006fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d11d      	bne.n	8007004 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	695b      	ldr	r3, [r3, #20]
 8006fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd2:	2b80      	cmp	r3, #128	; 0x80
 8006fd4:	d016      	beq.n	8007004 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff0:	f043 0220 	orr.w	r2, r3, #32
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e007      	b.n	8007014 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800700e:	2b80      	cmp	r3, #128	; 0x80
 8007010:	d1c3      	bne.n	8006f9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007028:	e034      	b.n	8007094 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f000 f83e 	bl	80070ac <I2C_IsAcknowledgeFailed>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d001      	beq.n	800703a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e034      	b.n	80070a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007040:	d028      	beq.n	8007094 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007042:	f7fe fd09 	bl	8005a58 <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	429a      	cmp	r2, r3
 8007050:	d302      	bcc.n	8007058 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d11d      	bne.n	8007094 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	f003 0304 	and.w	r3, r3, #4
 8007062:	2b04      	cmp	r3, #4
 8007064:	d016      	beq.n	8007094 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2220      	movs	r2, #32
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007080:	f043 0220 	orr.w	r2, r3, #32
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e007      	b.n	80070a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	f003 0304 	and.w	r3, r3, #4
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d1c3      	bne.n	800702a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070c2:	d11b      	bne.n	80070fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80070cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2220      	movs	r2, #32
 80070d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e8:	f043 0204 	orr.w	r2, r3, #4
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e000      	b.n	80070fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	370c      	adds	r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
	...

0800710c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e267      	b.n	80075ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	2b00      	cmp	r3, #0
 8007128:	d075      	beq.n	8007216 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800712a:	4b88      	ldr	r3, [pc, #544]	; (800734c <HAL_RCC_OscConfig+0x240>)
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f003 030c 	and.w	r3, r3, #12
 8007132:	2b04      	cmp	r3, #4
 8007134:	d00c      	beq.n	8007150 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007136:	4b85      	ldr	r3, [pc, #532]	; (800734c <HAL_RCC_OscConfig+0x240>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800713e:	2b08      	cmp	r3, #8
 8007140:	d112      	bne.n	8007168 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007142:	4b82      	ldr	r3, [pc, #520]	; (800734c <HAL_RCC_OscConfig+0x240>)
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800714a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800714e:	d10b      	bne.n	8007168 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007150:	4b7e      	ldr	r3, [pc, #504]	; (800734c <HAL_RCC_OscConfig+0x240>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d05b      	beq.n	8007214 <HAL_RCC_OscConfig+0x108>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d157      	bne.n	8007214 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e242      	b.n	80075ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007170:	d106      	bne.n	8007180 <HAL_RCC_OscConfig+0x74>
 8007172:	4b76      	ldr	r3, [pc, #472]	; (800734c <HAL_RCC_OscConfig+0x240>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a75      	ldr	r2, [pc, #468]	; (800734c <HAL_RCC_OscConfig+0x240>)
 8007178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800717c:	6013      	str	r3, [r2, #0]
 800717e:	e01d      	b.n	80071bc <HAL_RCC_OscConfig+0xb0>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007188:	d10c      	bne.n	80071a4 <HAL_RCC_OscConfig+0x98>
 800718a:	4b70      	ldr	r3, [pc, #448]	; (800734c <HAL_RCC_OscConfig+0x240>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a6f      	ldr	r2, [pc, #444]	; (800734c <HAL_RCC_OscConfig+0x240>)
 8007190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007194:	6013      	str	r3, [r2, #0]
 8007196:	4b6d      	ldr	r3, [pc, #436]	; (800734c <HAL_RCC_OscConfig+0x240>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a6c      	ldr	r2, [pc, #432]	; (800734c <HAL_RCC_OscConfig+0x240>)
 800719c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	e00b      	b.n	80071bc <HAL_RCC_OscConfig+0xb0>
 80071a4:	4b69      	ldr	r3, [pc, #420]	; (800734c <HAL_RCC_OscConfig+0x240>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a68      	ldr	r2, [pc, #416]	; (800734c <HAL_RCC_OscConfig+0x240>)
 80071aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071ae:	6013      	str	r3, [r2, #0]
 80071b0:	4b66      	ldr	r3, [pc, #408]	; (800734c <HAL_RCC_OscConfig+0x240>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a65      	ldr	r2, [pc, #404]	; (800734c <HAL_RCC_OscConfig+0x240>)
 80071b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d013      	beq.n	80071ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071c4:	f7fe fc48 	bl	8005a58 <HAL_GetTick>
 80071c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071ca:	e008      	b.n	80071de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071cc:	f7fe fc44 	bl	8005a58 <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	2b64      	cmp	r3, #100	; 0x64
 80071d8:	d901      	bls.n	80071de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e207      	b.n	80075ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071de:	4b5b      	ldr	r3, [pc, #364]	; (800734c <HAL_RCC_OscConfig+0x240>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d0f0      	beq.n	80071cc <HAL_RCC_OscConfig+0xc0>
 80071ea:	e014      	b.n	8007216 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ec:	f7fe fc34 	bl	8005a58 <HAL_GetTick>
 80071f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071f2:	e008      	b.n	8007206 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071f4:	f7fe fc30 	bl	8005a58 <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	2b64      	cmp	r3, #100	; 0x64
 8007200:	d901      	bls.n	8007206 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e1f3      	b.n	80075ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007206:	4b51      	ldr	r3, [pc, #324]	; (800734c <HAL_RCC_OscConfig+0x240>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1f0      	bne.n	80071f4 <HAL_RCC_OscConfig+0xe8>
 8007212:	e000      	b.n	8007216 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b00      	cmp	r3, #0
 8007220:	d063      	beq.n	80072ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007222:	4b4a      	ldr	r3, [pc, #296]	; (800734c <HAL_RCC_OscConfig+0x240>)
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f003 030c 	and.w	r3, r3, #12
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00b      	beq.n	8007246 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800722e:	4b47      	ldr	r3, [pc, #284]	; (800734c <HAL_RCC_OscConfig+0x240>)
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007236:	2b08      	cmp	r3, #8
 8007238:	d11c      	bne.n	8007274 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800723a:	4b44      	ldr	r3, [pc, #272]	; (800734c <HAL_RCC_OscConfig+0x240>)
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d116      	bne.n	8007274 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007246:	4b41      	ldr	r3, [pc, #260]	; (800734c <HAL_RCC_OscConfig+0x240>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 0302 	and.w	r3, r3, #2
 800724e:	2b00      	cmp	r3, #0
 8007250:	d005      	beq.n	800725e <HAL_RCC_OscConfig+0x152>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d001      	beq.n	800725e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e1c7      	b.n	80075ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800725e:	4b3b      	ldr	r3, [pc, #236]	; (800734c <HAL_RCC_OscConfig+0x240>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	00db      	lsls	r3, r3, #3
 800726c:	4937      	ldr	r1, [pc, #220]	; (800734c <HAL_RCC_OscConfig+0x240>)
 800726e:	4313      	orrs	r3, r2
 8007270:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007272:	e03a      	b.n	80072ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d020      	beq.n	80072be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800727c:	4b34      	ldr	r3, [pc, #208]	; (8007350 <HAL_RCC_OscConfig+0x244>)
 800727e:	2201      	movs	r2, #1
 8007280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007282:	f7fe fbe9 	bl	8005a58 <HAL_GetTick>
 8007286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007288:	e008      	b.n	800729c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800728a:	f7fe fbe5 	bl	8005a58 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	2b02      	cmp	r3, #2
 8007296:	d901      	bls.n	800729c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e1a8      	b.n	80075ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800729c:	4b2b      	ldr	r3, [pc, #172]	; (800734c <HAL_RCC_OscConfig+0x240>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d0f0      	beq.n	800728a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072a8:	4b28      	ldr	r3, [pc, #160]	; (800734c <HAL_RCC_OscConfig+0x240>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	00db      	lsls	r3, r3, #3
 80072b6:	4925      	ldr	r1, [pc, #148]	; (800734c <HAL_RCC_OscConfig+0x240>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	600b      	str	r3, [r1, #0]
 80072bc:	e015      	b.n	80072ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072be:	4b24      	ldr	r3, [pc, #144]	; (8007350 <HAL_RCC_OscConfig+0x244>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c4:	f7fe fbc8 	bl	8005a58 <HAL_GetTick>
 80072c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072ca:	e008      	b.n	80072de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072cc:	f7fe fbc4 	bl	8005a58 <HAL_GetTick>
 80072d0:	4602      	mov	r2, r0
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d901      	bls.n	80072de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e187      	b.n	80075ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072de:	4b1b      	ldr	r3, [pc, #108]	; (800734c <HAL_RCC_OscConfig+0x240>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 0302 	and.w	r3, r3, #2
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1f0      	bne.n	80072cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0308 	and.w	r3, r3, #8
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d036      	beq.n	8007364 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d016      	beq.n	800732c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072fe:	4b15      	ldr	r3, [pc, #84]	; (8007354 <HAL_RCC_OscConfig+0x248>)
 8007300:	2201      	movs	r2, #1
 8007302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007304:	f7fe fba8 	bl	8005a58 <HAL_GetTick>
 8007308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800730a:	e008      	b.n	800731e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800730c:	f7fe fba4 	bl	8005a58 <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	2b02      	cmp	r3, #2
 8007318:	d901      	bls.n	800731e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e167      	b.n	80075ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800731e:	4b0b      	ldr	r3, [pc, #44]	; (800734c <HAL_RCC_OscConfig+0x240>)
 8007320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d0f0      	beq.n	800730c <HAL_RCC_OscConfig+0x200>
 800732a:	e01b      	b.n	8007364 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800732c:	4b09      	ldr	r3, [pc, #36]	; (8007354 <HAL_RCC_OscConfig+0x248>)
 800732e:	2200      	movs	r2, #0
 8007330:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007332:	f7fe fb91 	bl	8005a58 <HAL_GetTick>
 8007336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007338:	e00e      	b.n	8007358 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800733a:	f7fe fb8d 	bl	8005a58 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	2b02      	cmp	r3, #2
 8007346:	d907      	bls.n	8007358 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e150      	b.n	80075ee <HAL_RCC_OscConfig+0x4e2>
 800734c:	40023800 	.word	0x40023800
 8007350:	42470000 	.word	0x42470000
 8007354:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007358:	4b88      	ldr	r3, [pc, #544]	; (800757c <HAL_RCC_OscConfig+0x470>)
 800735a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800735c:	f003 0302 	and.w	r3, r3, #2
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1ea      	bne.n	800733a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0304 	and.w	r3, r3, #4
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 8097 	beq.w	80074a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007372:	2300      	movs	r3, #0
 8007374:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007376:	4b81      	ldr	r3, [pc, #516]	; (800757c <HAL_RCC_OscConfig+0x470>)
 8007378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10f      	bne.n	80073a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007382:	2300      	movs	r3, #0
 8007384:	60bb      	str	r3, [r7, #8]
 8007386:	4b7d      	ldr	r3, [pc, #500]	; (800757c <HAL_RCC_OscConfig+0x470>)
 8007388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738a:	4a7c      	ldr	r2, [pc, #496]	; (800757c <HAL_RCC_OscConfig+0x470>)
 800738c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007390:	6413      	str	r3, [r2, #64]	; 0x40
 8007392:	4b7a      	ldr	r3, [pc, #488]	; (800757c <HAL_RCC_OscConfig+0x470>)
 8007394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800739a:	60bb      	str	r3, [r7, #8]
 800739c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800739e:	2301      	movs	r3, #1
 80073a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073a2:	4b77      	ldr	r3, [pc, #476]	; (8007580 <HAL_RCC_OscConfig+0x474>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d118      	bne.n	80073e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073ae:	4b74      	ldr	r3, [pc, #464]	; (8007580 <HAL_RCC_OscConfig+0x474>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a73      	ldr	r2, [pc, #460]	; (8007580 <HAL_RCC_OscConfig+0x474>)
 80073b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073ba:	f7fe fb4d 	bl	8005a58 <HAL_GetTick>
 80073be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073c0:	e008      	b.n	80073d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073c2:	f7fe fb49 	bl	8005a58 <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d901      	bls.n	80073d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e10c      	b.n	80075ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073d4:	4b6a      	ldr	r3, [pc, #424]	; (8007580 <HAL_RCC_OscConfig+0x474>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d0f0      	beq.n	80073c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d106      	bne.n	80073f6 <HAL_RCC_OscConfig+0x2ea>
 80073e8:	4b64      	ldr	r3, [pc, #400]	; (800757c <HAL_RCC_OscConfig+0x470>)
 80073ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ec:	4a63      	ldr	r2, [pc, #396]	; (800757c <HAL_RCC_OscConfig+0x470>)
 80073ee:	f043 0301 	orr.w	r3, r3, #1
 80073f2:	6713      	str	r3, [r2, #112]	; 0x70
 80073f4:	e01c      	b.n	8007430 <HAL_RCC_OscConfig+0x324>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	2b05      	cmp	r3, #5
 80073fc:	d10c      	bne.n	8007418 <HAL_RCC_OscConfig+0x30c>
 80073fe:	4b5f      	ldr	r3, [pc, #380]	; (800757c <HAL_RCC_OscConfig+0x470>)
 8007400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007402:	4a5e      	ldr	r2, [pc, #376]	; (800757c <HAL_RCC_OscConfig+0x470>)
 8007404:	f043 0304 	orr.w	r3, r3, #4
 8007408:	6713      	str	r3, [r2, #112]	; 0x70
 800740a:	4b5c      	ldr	r3, [pc, #368]	; (800757c <HAL_RCC_OscConfig+0x470>)
 800740c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800740e:	4a5b      	ldr	r2, [pc, #364]	; (800757c <HAL_RCC_OscConfig+0x470>)
 8007410:	f043 0301 	orr.w	r3, r3, #1
 8007414:	6713      	str	r3, [r2, #112]	; 0x70
 8007416:	e00b      	b.n	8007430 <HAL_RCC_OscConfig+0x324>
 8007418:	4b58      	ldr	r3, [pc, #352]	; (800757c <HAL_RCC_OscConfig+0x470>)
 800741a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800741c:	4a57      	ldr	r2, [pc, #348]	; (800757c <HAL_RCC_OscConfig+0x470>)
 800741e:	f023 0301 	bic.w	r3, r3, #1
 8007422:	6713      	str	r3, [r2, #112]	; 0x70
 8007424:	4b55      	ldr	r3, [pc, #340]	; (800757c <HAL_RCC_OscConfig+0x470>)
 8007426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007428:	4a54      	ldr	r2, [pc, #336]	; (800757c <HAL_RCC_OscConfig+0x470>)
 800742a:	f023 0304 	bic.w	r3, r3, #4
 800742e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d015      	beq.n	8007464 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007438:	f7fe fb0e 	bl	8005a58 <HAL_GetTick>
 800743c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800743e:	e00a      	b.n	8007456 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007440:	f7fe fb0a 	bl	8005a58 <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	f241 3288 	movw	r2, #5000	; 0x1388
 800744e:	4293      	cmp	r3, r2
 8007450:	d901      	bls.n	8007456 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e0cb      	b.n	80075ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007456:	4b49      	ldr	r3, [pc, #292]	; (800757c <HAL_RCC_OscConfig+0x470>)
 8007458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0ee      	beq.n	8007440 <HAL_RCC_OscConfig+0x334>
 8007462:	e014      	b.n	800748e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007464:	f7fe faf8 	bl	8005a58 <HAL_GetTick>
 8007468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800746a:	e00a      	b.n	8007482 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800746c:	f7fe faf4 	bl	8005a58 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	f241 3288 	movw	r2, #5000	; 0x1388
 800747a:	4293      	cmp	r3, r2
 800747c:	d901      	bls.n	8007482 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e0b5      	b.n	80075ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007482:	4b3e      	ldr	r3, [pc, #248]	; (800757c <HAL_RCC_OscConfig+0x470>)
 8007484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1ee      	bne.n	800746c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800748e:	7dfb      	ldrb	r3, [r7, #23]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d105      	bne.n	80074a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007494:	4b39      	ldr	r3, [pc, #228]	; (800757c <HAL_RCC_OscConfig+0x470>)
 8007496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007498:	4a38      	ldr	r2, [pc, #224]	; (800757c <HAL_RCC_OscConfig+0x470>)
 800749a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800749e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f000 80a1 	beq.w	80075ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80074aa:	4b34      	ldr	r3, [pc, #208]	; (800757c <HAL_RCC_OscConfig+0x470>)
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f003 030c 	and.w	r3, r3, #12
 80074b2:	2b08      	cmp	r3, #8
 80074b4:	d05c      	beq.n	8007570 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d141      	bne.n	8007542 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074be:	4b31      	ldr	r3, [pc, #196]	; (8007584 <HAL_RCC_OscConfig+0x478>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074c4:	f7fe fac8 	bl	8005a58 <HAL_GetTick>
 80074c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ca:	e008      	b.n	80074de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074cc:	f7fe fac4 	bl	8005a58 <HAL_GetTick>
 80074d0:	4602      	mov	r2, r0
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d901      	bls.n	80074de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e087      	b.n	80075ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074de:	4b27      	ldr	r3, [pc, #156]	; (800757c <HAL_RCC_OscConfig+0x470>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1f0      	bne.n	80074cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	69da      	ldr	r2, [r3, #28]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	431a      	orrs	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f8:	019b      	lsls	r3, r3, #6
 80074fa:	431a      	orrs	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007500:	085b      	lsrs	r3, r3, #1
 8007502:	3b01      	subs	r3, #1
 8007504:	041b      	lsls	r3, r3, #16
 8007506:	431a      	orrs	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750c:	061b      	lsls	r3, r3, #24
 800750e:	491b      	ldr	r1, [pc, #108]	; (800757c <HAL_RCC_OscConfig+0x470>)
 8007510:	4313      	orrs	r3, r2
 8007512:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007514:	4b1b      	ldr	r3, [pc, #108]	; (8007584 <HAL_RCC_OscConfig+0x478>)
 8007516:	2201      	movs	r2, #1
 8007518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800751a:	f7fe fa9d 	bl	8005a58 <HAL_GetTick>
 800751e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007520:	e008      	b.n	8007534 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007522:	f7fe fa99 	bl	8005a58 <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	2b02      	cmp	r3, #2
 800752e:	d901      	bls.n	8007534 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e05c      	b.n	80075ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007534:	4b11      	ldr	r3, [pc, #68]	; (800757c <HAL_RCC_OscConfig+0x470>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d0f0      	beq.n	8007522 <HAL_RCC_OscConfig+0x416>
 8007540:	e054      	b.n	80075ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007542:	4b10      	ldr	r3, [pc, #64]	; (8007584 <HAL_RCC_OscConfig+0x478>)
 8007544:	2200      	movs	r2, #0
 8007546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007548:	f7fe fa86 	bl	8005a58 <HAL_GetTick>
 800754c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800754e:	e008      	b.n	8007562 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007550:	f7fe fa82 	bl	8005a58 <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	2b02      	cmp	r3, #2
 800755c:	d901      	bls.n	8007562 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e045      	b.n	80075ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007562:	4b06      	ldr	r3, [pc, #24]	; (800757c <HAL_RCC_OscConfig+0x470>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1f0      	bne.n	8007550 <HAL_RCC_OscConfig+0x444>
 800756e:	e03d      	b.n	80075ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d107      	bne.n	8007588 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e038      	b.n	80075ee <HAL_RCC_OscConfig+0x4e2>
 800757c:	40023800 	.word	0x40023800
 8007580:	40007000 	.word	0x40007000
 8007584:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007588:	4b1b      	ldr	r3, [pc, #108]	; (80075f8 <HAL_RCC_OscConfig+0x4ec>)
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d028      	beq.n	80075e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d121      	bne.n	80075e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d11a      	bne.n	80075e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80075b8:	4013      	ands	r3, r2
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80075be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d111      	bne.n	80075e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ce:	085b      	lsrs	r3, r3, #1
 80075d0:	3b01      	subs	r3, #1
 80075d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d107      	bne.n	80075e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d001      	beq.n	80075ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e000      	b.n	80075ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	40023800 	.word	0x40023800

080075fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d101      	bne.n	8007610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e0cc      	b.n	80077aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007610:	4b68      	ldr	r3, [pc, #416]	; (80077b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0307 	and.w	r3, r3, #7
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	d90c      	bls.n	8007638 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800761e:	4b65      	ldr	r3, [pc, #404]	; (80077b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007620:	683a      	ldr	r2, [r7, #0]
 8007622:	b2d2      	uxtb	r2, r2
 8007624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007626:	4b63      	ldr	r3, [pc, #396]	; (80077b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0307 	and.w	r3, r3, #7
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	429a      	cmp	r2, r3
 8007632:	d001      	beq.n	8007638 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e0b8      	b.n	80077aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0302 	and.w	r3, r3, #2
 8007640:	2b00      	cmp	r3, #0
 8007642:	d020      	beq.n	8007686 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0304 	and.w	r3, r3, #4
 800764c:	2b00      	cmp	r3, #0
 800764e:	d005      	beq.n	800765c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007650:	4b59      	ldr	r3, [pc, #356]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	4a58      	ldr	r2, [pc, #352]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007656:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800765a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0308 	and.w	r3, r3, #8
 8007664:	2b00      	cmp	r3, #0
 8007666:	d005      	beq.n	8007674 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007668:	4b53      	ldr	r3, [pc, #332]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	4a52      	ldr	r2, [pc, #328]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 800766e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007672:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007674:	4b50      	ldr	r3, [pc, #320]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	494d      	ldr	r1, [pc, #308]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007682:	4313      	orrs	r3, r2
 8007684:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b00      	cmp	r3, #0
 8007690:	d044      	beq.n	800771c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d107      	bne.n	80076aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800769a:	4b47      	ldr	r3, [pc, #284]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d119      	bne.n	80076da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e07f      	b.n	80077aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d003      	beq.n	80076ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	d107      	bne.n	80076ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076ba:	4b3f      	ldr	r3, [pc, #252]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d109      	bne.n	80076da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e06f      	b.n	80077aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076ca:	4b3b      	ldr	r3, [pc, #236]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0302 	and.w	r3, r3, #2
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e067      	b.n	80077aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076da:	4b37      	ldr	r3, [pc, #220]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f023 0203 	bic.w	r2, r3, #3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	4934      	ldr	r1, [pc, #208]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 80076e8:	4313      	orrs	r3, r2
 80076ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076ec:	f7fe f9b4 	bl	8005a58 <HAL_GetTick>
 80076f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076f2:	e00a      	b.n	800770a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076f4:	f7fe f9b0 	bl	8005a58 <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007702:	4293      	cmp	r3, r2
 8007704:	d901      	bls.n	800770a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e04f      	b.n	80077aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800770a:	4b2b      	ldr	r3, [pc, #172]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f003 020c 	and.w	r2, r3, #12
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	429a      	cmp	r2, r3
 800771a:	d1eb      	bne.n	80076f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800771c:	4b25      	ldr	r3, [pc, #148]	; (80077b4 <HAL_RCC_ClockConfig+0x1b8>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 0307 	and.w	r3, r3, #7
 8007724:	683a      	ldr	r2, [r7, #0]
 8007726:	429a      	cmp	r2, r3
 8007728:	d20c      	bcs.n	8007744 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800772a:	4b22      	ldr	r3, [pc, #136]	; (80077b4 <HAL_RCC_ClockConfig+0x1b8>)
 800772c:	683a      	ldr	r2, [r7, #0]
 800772e:	b2d2      	uxtb	r2, r2
 8007730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007732:	4b20      	ldr	r3, [pc, #128]	; (80077b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0307 	and.w	r3, r3, #7
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	429a      	cmp	r2, r3
 800773e:	d001      	beq.n	8007744 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e032      	b.n	80077aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0304 	and.w	r3, r3, #4
 800774c:	2b00      	cmp	r3, #0
 800774e:	d008      	beq.n	8007762 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007750:	4b19      	ldr	r3, [pc, #100]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	4916      	ldr	r1, [pc, #88]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 800775e:	4313      	orrs	r3, r2
 8007760:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0308 	and.w	r3, r3, #8
 800776a:	2b00      	cmp	r3, #0
 800776c:	d009      	beq.n	8007782 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800776e:	4b12      	ldr	r3, [pc, #72]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	00db      	lsls	r3, r3, #3
 800777c:	490e      	ldr	r1, [pc, #56]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 800777e:	4313      	orrs	r3, r2
 8007780:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007782:	f000 f821 	bl	80077c8 <HAL_RCC_GetSysClockFreq>
 8007786:	4602      	mov	r2, r0
 8007788:	4b0b      	ldr	r3, [pc, #44]	; (80077b8 <HAL_RCC_ClockConfig+0x1bc>)
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	091b      	lsrs	r3, r3, #4
 800778e:	f003 030f 	and.w	r3, r3, #15
 8007792:	490a      	ldr	r1, [pc, #40]	; (80077bc <HAL_RCC_ClockConfig+0x1c0>)
 8007794:	5ccb      	ldrb	r3, [r1, r3]
 8007796:	fa22 f303 	lsr.w	r3, r2, r3
 800779a:	4a09      	ldr	r2, [pc, #36]	; (80077c0 <HAL_RCC_ClockConfig+0x1c4>)
 800779c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800779e:	4b09      	ldr	r3, [pc, #36]	; (80077c4 <HAL_RCC_ClockConfig+0x1c8>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fe f914 	bl	80059d0 <HAL_InitTick>

  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	40023c00 	.word	0x40023c00
 80077b8:	40023800 	.word	0x40023800
 80077bc:	0800af3c 	.word	0x0800af3c
 80077c0:	20000044 	.word	0x20000044
 80077c4:	20000074 	.word	0x20000074

080077c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077cc:	b090      	sub	sp, #64	; 0x40
 80077ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80077d0:	2300      	movs	r3, #0
 80077d2:	637b      	str	r3, [r7, #52]	; 0x34
 80077d4:	2300      	movs	r3, #0
 80077d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077d8:	2300      	movs	r3, #0
 80077da:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80077dc:	2300      	movs	r3, #0
 80077de:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077e0:	4b59      	ldr	r3, [pc, #356]	; (8007948 <HAL_RCC_GetSysClockFreq+0x180>)
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f003 030c 	and.w	r3, r3, #12
 80077e8:	2b08      	cmp	r3, #8
 80077ea:	d00d      	beq.n	8007808 <HAL_RCC_GetSysClockFreq+0x40>
 80077ec:	2b08      	cmp	r3, #8
 80077ee:	f200 80a1 	bhi.w	8007934 <HAL_RCC_GetSysClockFreq+0x16c>
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d002      	beq.n	80077fc <HAL_RCC_GetSysClockFreq+0x34>
 80077f6:	2b04      	cmp	r3, #4
 80077f8:	d003      	beq.n	8007802 <HAL_RCC_GetSysClockFreq+0x3a>
 80077fa:	e09b      	b.n	8007934 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80077fc:	4b53      	ldr	r3, [pc, #332]	; (800794c <HAL_RCC_GetSysClockFreq+0x184>)
 80077fe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007800:	e09b      	b.n	800793a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007802:	4b53      	ldr	r3, [pc, #332]	; (8007950 <HAL_RCC_GetSysClockFreq+0x188>)
 8007804:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007806:	e098      	b.n	800793a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007808:	4b4f      	ldr	r3, [pc, #316]	; (8007948 <HAL_RCC_GetSysClockFreq+0x180>)
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007810:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007812:	4b4d      	ldr	r3, [pc, #308]	; (8007948 <HAL_RCC_GetSysClockFreq+0x180>)
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d028      	beq.n	8007870 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800781e:	4b4a      	ldr	r3, [pc, #296]	; (8007948 <HAL_RCC_GetSysClockFreq+0x180>)
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	099b      	lsrs	r3, r3, #6
 8007824:	2200      	movs	r2, #0
 8007826:	623b      	str	r3, [r7, #32]
 8007828:	627a      	str	r2, [r7, #36]	; 0x24
 800782a:	6a3b      	ldr	r3, [r7, #32]
 800782c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007830:	2100      	movs	r1, #0
 8007832:	4b47      	ldr	r3, [pc, #284]	; (8007950 <HAL_RCC_GetSysClockFreq+0x188>)
 8007834:	fb03 f201 	mul.w	r2, r3, r1
 8007838:	2300      	movs	r3, #0
 800783a:	fb00 f303 	mul.w	r3, r0, r3
 800783e:	4413      	add	r3, r2
 8007840:	4a43      	ldr	r2, [pc, #268]	; (8007950 <HAL_RCC_GetSysClockFreq+0x188>)
 8007842:	fba0 1202 	umull	r1, r2, r0, r2
 8007846:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007848:	460a      	mov	r2, r1
 800784a:	62ba      	str	r2, [r7, #40]	; 0x28
 800784c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800784e:	4413      	add	r3, r2
 8007850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007854:	2200      	movs	r2, #0
 8007856:	61bb      	str	r3, [r7, #24]
 8007858:	61fa      	str	r2, [r7, #28]
 800785a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800785e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007862:	f7f9 f9b5 	bl	8000bd0 <__aeabi_uldivmod>
 8007866:	4602      	mov	r2, r0
 8007868:	460b      	mov	r3, r1
 800786a:	4613      	mov	r3, r2
 800786c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800786e:	e053      	b.n	8007918 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007870:	4b35      	ldr	r3, [pc, #212]	; (8007948 <HAL_RCC_GetSysClockFreq+0x180>)
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	099b      	lsrs	r3, r3, #6
 8007876:	2200      	movs	r2, #0
 8007878:	613b      	str	r3, [r7, #16]
 800787a:	617a      	str	r2, [r7, #20]
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007882:	f04f 0b00 	mov.w	fp, #0
 8007886:	4652      	mov	r2, sl
 8007888:	465b      	mov	r3, fp
 800788a:	f04f 0000 	mov.w	r0, #0
 800788e:	f04f 0100 	mov.w	r1, #0
 8007892:	0159      	lsls	r1, r3, #5
 8007894:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007898:	0150      	lsls	r0, r2, #5
 800789a:	4602      	mov	r2, r0
 800789c:	460b      	mov	r3, r1
 800789e:	ebb2 080a 	subs.w	r8, r2, sl
 80078a2:	eb63 090b 	sbc.w	r9, r3, fp
 80078a6:	f04f 0200 	mov.w	r2, #0
 80078aa:	f04f 0300 	mov.w	r3, #0
 80078ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80078b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80078b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80078ba:	ebb2 0408 	subs.w	r4, r2, r8
 80078be:	eb63 0509 	sbc.w	r5, r3, r9
 80078c2:	f04f 0200 	mov.w	r2, #0
 80078c6:	f04f 0300 	mov.w	r3, #0
 80078ca:	00eb      	lsls	r3, r5, #3
 80078cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078d0:	00e2      	lsls	r2, r4, #3
 80078d2:	4614      	mov	r4, r2
 80078d4:	461d      	mov	r5, r3
 80078d6:	eb14 030a 	adds.w	r3, r4, sl
 80078da:	603b      	str	r3, [r7, #0]
 80078dc:	eb45 030b 	adc.w	r3, r5, fp
 80078e0:	607b      	str	r3, [r7, #4]
 80078e2:	f04f 0200 	mov.w	r2, #0
 80078e6:	f04f 0300 	mov.w	r3, #0
 80078ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80078ee:	4629      	mov	r1, r5
 80078f0:	028b      	lsls	r3, r1, #10
 80078f2:	4621      	mov	r1, r4
 80078f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80078f8:	4621      	mov	r1, r4
 80078fa:	028a      	lsls	r2, r1, #10
 80078fc:	4610      	mov	r0, r2
 80078fe:	4619      	mov	r1, r3
 8007900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007902:	2200      	movs	r2, #0
 8007904:	60bb      	str	r3, [r7, #8]
 8007906:	60fa      	str	r2, [r7, #12]
 8007908:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800790c:	f7f9 f960 	bl	8000bd0 <__aeabi_uldivmod>
 8007910:	4602      	mov	r2, r0
 8007912:	460b      	mov	r3, r1
 8007914:	4613      	mov	r3, r2
 8007916:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007918:	4b0b      	ldr	r3, [pc, #44]	; (8007948 <HAL_RCC_GetSysClockFreq+0x180>)
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	0c1b      	lsrs	r3, r3, #16
 800791e:	f003 0303 	and.w	r3, r3, #3
 8007922:	3301      	adds	r3, #1
 8007924:	005b      	lsls	r3, r3, #1
 8007926:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007928:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800792a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007930:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007932:	e002      	b.n	800793a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007934:	4b05      	ldr	r3, [pc, #20]	; (800794c <HAL_RCC_GetSysClockFreq+0x184>)
 8007936:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800793a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800793c:	4618      	mov	r0, r3
 800793e:	3740      	adds	r7, #64	; 0x40
 8007940:	46bd      	mov	sp, r7
 8007942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007946:	bf00      	nop
 8007948:	40023800 	.word	0x40023800
 800794c:	00f42400 	.word	0x00f42400
 8007950:	017d7840 	.word	0x017d7840

08007954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007954:	b480      	push	{r7}
 8007956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007958:	4b03      	ldr	r3, [pc, #12]	; (8007968 <HAL_RCC_GetHCLKFreq+0x14>)
 800795a:	681b      	ldr	r3, [r3, #0]
}
 800795c:	4618      	mov	r0, r3
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	20000044 	.word	0x20000044

0800796c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007970:	f7ff fff0 	bl	8007954 <HAL_RCC_GetHCLKFreq>
 8007974:	4602      	mov	r2, r0
 8007976:	4b05      	ldr	r3, [pc, #20]	; (800798c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	0a9b      	lsrs	r3, r3, #10
 800797c:	f003 0307 	and.w	r3, r3, #7
 8007980:	4903      	ldr	r1, [pc, #12]	; (8007990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007982:	5ccb      	ldrb	r3, [r1, r3]
 8007984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007988:	4618      	mov	r0, r3
 800798a:	bd80      	pop	{r7, pc}
 800798c:	40023800 	.word	0x40023800
 8007990:	0800af4c 	.word	0x0800af4c

08007994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007998:	f7ff ffdc 	bl	8007954 <HAL_RCC_GetHCLKFreq>
 800799c:	4602      	mov	r2, r0
 800799e:	4b05      	ldr	r3, [pc, #20]	; (80079b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	0b5b      	lsrs	r3, r3, #13
 80079a4:	f003 0307 	and.w	r3, r3, #7
 80079a8:	4903      	ldr	r1, [pc, #12]	; (80079b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079aa:	5ccb      	ldrb	r3, [r1, r3]
 80079ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	40023800 	.word	0x40023800
 80079b8:	0800af4c 	.word	0x0800af4c

080079bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d101      	bne.n	80079ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e07b      	b.n	8007ac6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d108      	bne.n	80079e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079de:	d009      	beq.n	80079f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	61da      	str	r2, [r3, #28]
 80079e6:	e005      	b.n	80079f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d106      	bne.n	8007a14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7fb fc70 	bl	80032f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a46:	431a      	orrs	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	f003 0302 	and.w	r3, r3, #2
 8007a50:	431a      	orrs	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	431a      	orrs	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	699b      	ldr	r3, [r3, #24]
 8007a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a64:	431a      	orrs	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	69db      	ldr	r3, [r3, #28]
 8007a6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a6e:	431a      	orrs	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a78:	ea42 0103 	orr.w	r1, r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	0c1b      	lsrs	r3, r3, #16
 8007a92:	f003 0104 	and.w	r1, r3, #4
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9a:	f003 0210 	and.w	r2, r3, #16
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	69da      	ldr	r2, [r3, #28]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ab4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b088      	sub	sp, #32
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	60f8      	str	r0, [r7, #12]
 8007ad6:	60b9      	str	r1, [r7, #8]
 8007ad8:	603b      	str	r3, [r7, #0]
 8007ada:	4613      	mov	r3, r2
 8007adc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d101      	bne.n	8007af0 <HAL_SPI_Transmit+0x22>
 8007aec:	2302      	movs	r3, #2
 8007aee:	e12d      	b.n	8007d4c <HAL_SPI_Transmit+0x27e>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007af8:	f7fd ffae 	bl	8005a58 <HAL_GetTick>
 8007afc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007afe:	88fb      	ldrh	r3, [r7, #6]
 8007b00:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d002      	beq.n	8007b14 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007b0e:	2302      	movs	r3, #2
 8007b10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007b12:	e116      	b.n	8007d42 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d002      	beq.n	8007b20 <HAL_SPI_Transmit+0x52>
 8007b1a:	88fb      	ldrh	r3, [r7, #6]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d102      	bne.n	8007b26 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007b24:	e10d      	b.n	8007d42 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2203      	movs	r2, #3
 8007b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	88fa      	ldrh	r2, [r7, #6]
 8007b3e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	88fa      	ldrh	r2, [r7, #6]
 8007b44:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b6c:	d10f      	bne.n	8007b8e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b98:	2b40      	cmp	r3, #64	; 0x40
 8007b9a:	d007      	beq.n	8007bac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007baa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bb4:	d14f      	bne.n	8007c56 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d002      	beq.n	8007bc4 <HAL_SPI_Transmit+0xf6>
 8007bbe:	8afb      	ldrh	r3, [r7, #22]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d142      	bne.n	8007c4a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc8:	881a      	ldrh	r2, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd4:	1c9a      	adds	r2, r3, #2
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	3b01      	subs	r3, #1
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007be8:	e02f      	b.n	8007c4a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f003 0302 	and.w	r3, r3, #2
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d112      	bne.n	8007c1e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfc:	881a      	ldrh	r2, [r3, #0]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c08:	1c9a      	adds	r2, r3, #2
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	3b01      	subs	r3, #1
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	86da      	strh	r2, [r3, #54]	; 0x36
 8007c1c:	e015      	b.n	8007c4a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c1e:	f7fd ff1b 	bl	8005a58 <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d803      	bhi.n	8007c36 <HAL_SPI_Transmit+0x168>
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c34:	d102      	bne.n	8007c3c <HAL_SPI_Transmit+0x16e>
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d106      	bne.n	8007c4a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007c48:	e07b      	b.n	8007d42 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1ca      	bne.n	8007bea <HAL_SPI_Transmit+0x11c>
 8007c54:	e050      	b.n	8007cf8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d002      	beq.n	8007c64 <HAL_SPI_Transmit+0x196>
 8007c5e:	8afb      	ldrh	r3, [r7, #22]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d144      	bne.n	8007cee <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	330c      	adds	r3, #12
 8007c6e:	7812      	ldrb	r2, [r2, #0]
 8007c70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c76:	1c5a      	adds	r2, r3, #1
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	3b01      	subs	r3, #1
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007c8a:	e030      	b.n	8007cee <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d113      	bne.n	8007cc2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	330c      	adds	r3, #12
 8007ca4:	7812      	ldrb	r2, [r2, #0]
 8007ca6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cac:	1c5a      	adds	r2, r3, #1
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	86da      	strh	r2, [r3, #54]	; 0x36
 8007cc0:	e015      	b.n	8007cee <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cc2:	f7fd fec9 	bl	8005a58 <HAL_GetTick>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d803      	bhi.n	8007cda <HAL_SPI_Transmit+0x20c>
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd8:	d102      	bne.n	8007ce0 <HAL_SPI_Transmit+0x212>
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d106      	bne.n	8007cee <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007cec:	e029      	b.n	8007d42 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1c9      	bne.n	8007c8c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cf8:	69ba      	ldr	r2, [r7, #24]
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 fbed 	bl	80084dc <SPI_EndRxTxTransaction>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d002      	beq.n	8007d0e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2220      	movs	r2, #32
 8007d0c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10a      	bne.n	8007d2c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d16:	2300      	movs	r3, #0
 8007d18:	613b      	str	r3, [r7, #16]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	613b      	str	r3, [r7, #16]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	613b      	str	r3, [r7, #16]
 8007d2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d002      	beq.n	8007d3a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	77fb      	strb	r3, [r7, #31]
 8007d38:	e003      	b.n	8007d42 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3720      	adds	r7, #32
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b088      	sub	sp, #32
 8007d58:	af02      	add	r7, sp, #8
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	603b      	str	r3, [r7, #0]
 8007d60:	4613      	mov	r3, r2
 8007d62:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007d64:	2300      	movs	r3, #0
 8007d66:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d002      	beq.n	8007d7a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007d74:	2302      	movs	r3, #2
 8007d76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d78:	e0fb      	b.n	8007f72 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d82:	d112      	bne.n	8007daa <HAL_SPI_Receive+0x56>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10e      	bne.n	8007daa <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2204      	movs	r2, #4
 8007d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007d94:	88fa      	ldrh	r2, [r7, #6]
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	9300      	str	r3, [sp, #0]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	68b9      	ldr	r1, [r7, #8]
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f000 f8ef 	bl	8007f84 <HAL_SPI_TransmitReceive>
 8007da6:	4603      	mov	r3, r0
 8007da8:	e0e8      	b.n	8007f7c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d101      	bne.n	8007db8 <HAL_SPI_Receive+0x64>
 8007db4:	2302      	movs	r3, #2
 8007db6:	e0e1      	b.n	8007f7c <HAL_SPI_Receive+0x228>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007dc0:	f7fd fe4a 	bl	8005a58 <HAL_GetTick>
 8007dc4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d002      	beq.n	8007dd2 <HAL_SPI_Receive+0x7e>
 8007dcc:	88fb      	ldrh	r3, [r7, #6]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d102      	bne.n	8007dd8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007dd6:	e0cc      	b.n	8007f72 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2204      	movs	r2, #4
 8007ddc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	88fa      	ldrh	r2, [r7, #6]
 8007df0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	88fa      	ldrh	r2, [r7, #6]
 8007df6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e1e:	d10f      	bne.n	8007e40 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e2e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007e3e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e4a:	2b40      	cmp	r3, #64	; 0x40
 8007e4c:	d007      	beq.n	8007e5e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e5c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d16a      	bne.n	8007f3c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007e66:	e032      	b.n	8007ece <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	f003 0301 	and.w	r3, r3, #1
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d115      	bne.n	8007ea2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f103 020c 	add.w	r2, r3, #12
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e82:	7812      	ldrb	r2, [r2, #0]
 8007e84:	b2d2      	uxtb	r2, r2
 8007e86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8c:	1c5a      	adds	r2, r3, #1
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ea0:	e015      	b.n	8007ece <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ea2:	f7fd fdd9 	bl	8005a58 <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	683a      	ldr	r2, [r7, #0]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d803      	bhi.n	8007eba <HAL_SPI_Receive+0x166>
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb8:	d102      	bne.n	8007ec0 <HAL_SPI_Receive+0x16c>
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d106      	bne.n	8007ece <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007ecc:	e051      	b.n	8007f72 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1c7      	bne.n	8007e68 <HAL_SPI_Receive+0x114>
 8007ed8:	e035      	b.n	8007f46 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d113      	bne.n	8007f10 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68da      	ldr	r2, [r3, #12]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef2:	b292      	uxth	r2, r2
 8007ef4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007efa:	1c9a      	adds	r2, r3, #2
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	3b01      	subs	r3, #1
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f0e:	e015      	b.n	8007f3c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f10:	f7fd fda2 	bl	8005a58 <HAL_GetTick>
 8007f14:	4602      	mov	r2, r0
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d803      	bhi.n	8007f28 <HAL_SPI_Receive+0x1d4>
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f26:	d102      	bne.n	8007f2e <HAL_SPI_Receive+0x1da>
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d106      	bne.n	8007f3c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007f3a:	e01a      	b.n	8007f72 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1c9      	bne.n	8007eda <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f000 fa60 	bl	8008410 <SPI_EndRxTransaction>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d002      	beq.n	8007f5c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d002      	beq.n	8007f6a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	75fb      	strb	r3, [r7, #23]
 8007f68:	e003      	b.n	8007f72 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3718      	adds	r7, #24
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b08c      	sub	sp, #48	; 0x30
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]
 8007f90:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007f92:	2301      	movs	r3, #1
 8007f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d101      	bne.n	8007faa <HAL_SPI_TransmitReceive+0x26>
 8007fa6:	2302      	movs	r3, #2
 8007fa8:	e198      	b.n	80082dc <HAL_SPI_TransmitReceive+0x358>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fb2:	f7fd fd51 	bl	8005a58 <HAL_GetTick>
 8007fb6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007fc8:	887b      	ldrh	r3, [r7, #2]
 8007fca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007fcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d00f      	beq.n	8007ff4 <HAL_SPI_TransmitReceive+0x70>
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fda:	d107      	bne.n	8007fec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d103      	bne.n	8007fec <HAL_SPI_TransmitReceive+0x68>
 8007fe4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fe8:	2b04      	cmp	r3, #4
 8007fea:	d003      	beq.n	8007ff4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007fec:	2302      	movs	r3, #2
 8007fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007ff2:	e16d      	b.n	80082d0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d005      	beq.n	8008006 <HAL_SPI_TransmitReceive+0x82>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <HAL_SPI_TransmitReceive+0x82>
 8008000:	887b      	ldrh	r3, [r7, #2]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d103      	bne.n	800800e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800800c:	e160      	b.n	80082d0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b04      	cmp	r3, #4
 8008018:	d003      	beq.n	8008022 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2205      	movs	r2, #5
 800801e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2200      	movs	r2, #0
 8008026:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	887a      	ldrh	r2, [r7, #2]
 8008032:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	887a      	ldrh	r2, [r7, #2]
 8008038:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	887a      	ldrh	r2, [r7, #2]
 8008044:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	887a      	ldrh	r2, [r7, #2]
 800804a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008062:	2b40      	cmp	r3, #64	; 0x40
 8008064:	d007      	beq.n	8008076 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008074:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800807e:	d17c      	bne.n	800817a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d002      	beq.n	800808e <HAL_SPI_TransmitReceive+0x10a>
 8008088:	8b7b      	ldrh	r3, [r7, #26]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d16a      	bne.n	8008164 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008092:	881a      	ldrh	r2, [r3, #0]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800809e:	1c9a      	adds	r2, r3, #2
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	3b01      	subs	r3, #1
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080b2:	e057      	b.n	8008164 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	f003 0302 	and.w	r3, r3, #2
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d11b      	bne.n	80080fa <HAL_SPI_TransmitReceive+0x176>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d016      	beq.n	80080fa <HAL_SPI_TransmitReceive+0x176>
 80080cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d113      	bne.n	80080fa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d6:	881a      	ldrh	r2, [r3, #0]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e2:	1c9a      	adds	r2, r3, #2
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	3b01      	subs	r3, #1
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80080f6:	2300      	movs	r3, #0
 80080f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	f003 0301 	and.w	r3, r3, #1
 8008104:	2b01      	cmp	r3, #1
 8008106:	d119      	bne.n	800813c <HAL_SPI_TransmitReceive+0x1b8>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800810c:	b29b      	uxth	r3, r3
 800810e:	2b00      	cmp	r3, #0
 8008110:	d014      	beq.n	800813c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68da      	ldr	r2, [r3, #12]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811c:	b292      	uxth	r2, r2
 800811e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008124:	1c9a      	adds	r2, r3, #2
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800812e:	b29b      	uxth	r3, r3
 8008130:	3b01      	subs	r3, #1
 8008132:	b29a      	uxth	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008138:	2301      	movs	r3, #1
 800813a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800813c:	f7fd fc8c 	bl	8005a58 <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008148:	429a      	cmp	r2, r3
 800814a:	d80b      	bhi.n	8008164 <HAL_SPI_TransmitReceive+0x1e0>
 800814c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008152:	d007      	beq.n	8008164 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8008162:	e0b5      	b.n	80082d0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008168:	b29b      	uxth	r3, r3
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1a2      	bne.n	80080b4 <HAL_SPI_TransmitReceive+0x130>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008172:	b29b      	uxth	r3, r3
 8008174:	2b00      	cmp	r3, #0
 8008176:	d19d      	bne.n	80080b4 <HAL_SPI_TransmitReceive+0x130>
 8008178:	e080      	b.n	800827c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d002      	beq.n	8008188 <HAL_SPI_TransmitReceive+0x204>
 8008182:	8b7b      	ldrh	r3, [r7, #26]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d16f      	bne.n	8008268 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	330c      	adds	r3, #12
 8008192:	7812      	ldrb	r2, [r2, #0]
 8008194:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800819a:	1c5a      	adds	r2, r3, #1
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	3b01      	subs	r3, #1
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081ae:	e05b      	b.n	8008268 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f003 0302 	and.w	r3, r3, #2
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d11c      	bne.n	80081f8 <HAL_SPI_TransmitReceive+0x274>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d017      	beq.n	80081f8 <HAL_SPI_TransmitReceive+0x274>
 80081c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d114      	bne.n	80081f8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	330c      	adds	r3, #12
 80081d8:	7812      	ldrb	r2, [r2, #0]
 80081da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e0:	1c5a      	adds	r2, r3, #1
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	3b01      	subs	r3, #1
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80081f4:	2300      	movs	r3, #0
 80081f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f003 0301 	and.w	r3, r3, #1
 8008202:	2b01      	cmp	r3, #1
 8008204:	d119      	bne.n	800823a <HAL_SPI_TransmitReceive+0x2b6>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800820a:	b29b      	uxth	r3, r3
 800820c:	2b00      	cmp	r3, #0
 800820e:	d014      	beq.n	800823a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68da      	ldr	r2, [r3, #12]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821a:	b2d2      	uxtb	r2, r2
 800821c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008222:	1c5a      	adds	r2, r3, #1
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800822c:	b29b      	uxth	r3, r3
 800822e:	3b01      	subs	r3, #1
 8008230:	b29a      	uxth	r2, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008236:	2301      	movs	r3, #1
 8008238:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800823a:	f7fd fc0d 	bl	8005a58 <HAL_GetTick>
 800823e:	4602      	mov	r2, r0
 8008240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008246:	429a      	cmp	r2, r3
 8008248:	d803      	bhi.n	8008252 <HAL_SPI_TransmitReceive+0x2ce>
 800824a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008250:	d102      	bne.n	8008258 <HAL_SPI_TransmitReceive+0x2d4>
 8008252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008254:	2b00      	cmp	r3, #0
 8008256:	d107      	bne.n	8008268 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8008258:	2303      	movs	r3, #3
 800825a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8008266:	e033      	b.n	80082d0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800826c:	b29b      	uxth	r3, r3
 800826e:	2b00      	cmp	r3, #0
 8008270:	d19e      	bne.n	80081b0 <HAL_SPI_TransmitReceive+0x22c>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008276:	b29b      	uxth	r3, r3
 8008278:	2b00      	cmp	r3, #0
 800827a:	d199      	bne.n	80081b0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800827c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800827e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f000 f92b 	bl	80084dc <SPI_EndRxTxTransaction>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d006      	beq.n	800829a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2220      	movs	r2, #32
 8008296:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008298:	e01a      	b.n	80082d0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10a      	bne.n	80082b8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082a2:	2300      	movs	r3, #0
 80082a4:	617b      	str	r3, [r7, #20]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	617b      	str	r3, [r7, #20]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	617b      	str	r3, [r7, #20]
 80082b6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d003      	beq.n	80082c8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082c6:	e003      	b.n	80082d0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80082d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3730      	adds	r7, #48	; 0x30
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082f2:	b2db      	uxtb	r3, r3
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b088      	sub	sp, #32
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	603b      	str	r3, [r7, #0]
 800830c:	4613      	mov	r3, r2
 800830e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008310:	f7fd fba2 	bl	8005a58 <HAL_GetTick>
 8008314:	4602      	mov	r2, r0
 8008316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008318:	1a9b      	subs	r3, r3, r2
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	4413      	add	r3, r2
 800831e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008320:	f7fd fb9a 	bl	8005a58 <HAL_GetTick>
 8008324:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008326:	4b39      	ldr	r3, [pc, #228]	; (800840c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	015b      	lsls	r3, r3, #5
 800832c:	0d1b      	lsrs	r3, r3, #20
 800832e:	69fa      	ldr	r2, [r7, #28]
 8008330:	fb02 f303 	mul.w	r3, r2, r3
 8008334:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008336:	e054      	b.n	80083e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800833e:	d050      	beq.n	80083e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008340:	f7fd fb8a 	bl	8005a58 <HAL_GetTick>
 8008344:	4602      	mov	r2, r0
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	69fa      	ldr	r2, [r7, #28]
 800834c:	429a      	cmp	r2, r3
 800834e:	d902      	bls.n	8008356 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d13d      	bne.n	80083d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008364:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800836e:	d111      	bne.n	8008394 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008378:	d004      	beq.n	8008384 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008382:	d107      	bne.n	8008394 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008392:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800839c:	d10f      	bne.n	80083be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083ac:	601a      	str	r2, [r3, #0]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	e017      	b.n	8008402 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d101      	bne.n	80083dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80083d8:	2300      	movs	r3, #0
 80083da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	3b01      	subs	r3, #1
 80083e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	689a      	ldr	r2, [r3, #8]
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	4013      	ands	r3, r2
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	bf0c      	ite	eq
 80083f2:	2301      	moveq	r3, #1
 80083f4:	2300      	movne	r3, #0
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	461a      	mov	r2, r3
 80083fa:	79fb      	ldrb	r3, [r7, #7]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d19b      	bne.n	8008338 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3720      	adds	r7, #32
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	20000044 	.word	0x20000044

08008410 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af02      	add	r7, sp, #8
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008424:	d111      	bne.n	800844a <SPI_EndRxTransaction+0x3a>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800842e:	d004      	beq.n	800843a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008438:	d107      	bne.n	800844a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008448:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008452:	d12a      	bne.n	80084aa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800845c:	d012      	beq.n	8008484 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	9300      	str	r3, [sp, #0]
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	2200      	movs	r2, #0
 8008466:	2180      	movs	r1, #128	; 0x80
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f7ff ff49 	bl	8008300 <SPI_WaitFlagStateUntilTimeout>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d02d      	beq.n	80084d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008478:	f043 0220 	orr.w	r2, r3, #32
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008480:	2303      	movs	r3, #3
 8008482:	e026      	b.n	80084d2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2200      	movs	r2, #0
 800848c:	2101      	movs	r1, #1
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f7ff ff36 	bl	8008300 <SPI_WaitFlagStateUntilTimeout>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d01a      	beq.n	80084d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800849e:	f043 0220 	orr.w	r2, r3, #32
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e013      	b.n	80084d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	2200      	movs	r2, #0
 80084b2:	2101      	movs	r1, #1
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f7ff ff23 	bl	8008300 <SPI_WaitFlagStateUntilTimeout>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d007      	beq.n	80084d0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084c4:	f043 0220 	orr.w	r2, r3, #32
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e000      	b.n	80084d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
	...

080084dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b088      	sub	sp, #32
 80084e0:	af02      	add	r7, sp, #8
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	9300      	str	r3, [sp, #0]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	2201      	movs	r2, #1
 80084f0:	2102      	movs	r1, #2
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f7ff ff04 	bl	8008300 <SPI_WaitFlagStateUntilTimeout>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d007      	beq.n	800850e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008502:	f043 0220 	orr.w	r2, r3, #32
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800850a:	2303      	movs	r3, #3
 800850c:	e032      	b.n	8008574 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800850e:	4b1b      	ldr	r3, [pc, #108]	; (800857c <SPI_EndRxTxTransaction+0xa0>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a1b      	ldr	r2, [pc, #108]	; (8008580 <SPI_EndRxTxTransaction+0xa4>)
 8008514:	fba2 2303 	umull	r2, r3, r2, r3
 8008518:	0d5b      	lsrs	r3, r3, #21
 800851a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800851e:	fb02 f303 	mul.w	r3, r2, r3
 8008522:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800852c:	d112      	bne.n	8008554 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	2200      	movs	r2, #0
 8008536:	2180      	movs	r1, #128	; 0x80
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f7ff fee1 	bl	8008300 <SPI_WaitFlagStateUntilTimeout>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d016      	beq.n	8008572 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008548:	f043 0220 	orr.w	r2, r3, #32
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008550:	2303      	movs	r3, #3
 8008552:	e00f      	b.n	8008574 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00a      	beq.n	8008570 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	3b01      	subs	r3, #1
 800855e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800856a:	2b80      	cmp	r3, #128	; 0x80
 800856c:	d0f2      	beq.n	8008554 <SPI_EndRxTxTransaction+0x78>
 800856e:	e000      	b.n	8008572 <SPI_EndRxTxTransaction+0x96>
        break;
 8008570:	bf00      	nop
  }

  return HAL_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3718      	adds	r7, #24
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	20000044 	.word	0x20000044
 8008580:	165e9f81 	.word	0x165e9f81

08008584 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d101      	bne.n	8008596 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e041      	b.n	800861a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d106      	bne.n	80085b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f7fa ff58 	bl	8003460 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2202      	movs	r2, #2
 80085b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	3304      	adds	r3, #4
 80085c0:	4619      	mov	r1, r3
 80085c2:	4610      	mov	r0, r2
 80085c4:	f000 f9b6 	bl	8008934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
	...

08008624 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008632:	b2db      	uxtb	r3, r3
 8008634:	2b01      	cmp	r3, #1
 8008636:	d001      	beq.n	800863c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	e04e      	b.n	80086da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2202      	movs	r2, #2
 8008640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68da      	ldr	r2, [r3, #12]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f042 0201 	orr.w	r2, r2, #1
 8008652:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a23      	ldr	r2, [pc, #140]	; (80086e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d022      	beq.n	80086a4 <HAL_TIM_Base_Start_IT+0x80>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008666:	d01d      	beq.n	80086a4 <HAL_TIM_Base_Start_IT+0x80>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a1f      	ldr	r2, [pc, #124]	; (80086ec <HAL_TIM_Base_Start_IT+0xc8>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d018      	beq.n	80086a4 <HAL_TIM_Base_Start_IT+0x80>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a1e      	ldr	r2, [pc, #120]	; (80086f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d013      	beq.n	80086a4 <HAL_TIM_Base_Start_IT+0x80>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a1c      	ldr	r2, [pc, #112]	; (80086f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d00e      	beq.n	80086a4 <HAL_TIM_Base_Start_IT+0x80>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a1b      	ldr	r2, [pc, #108]	; (80086f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d009      	beq.n	80086a4 <HAL_TIM_Base_Start_IT+0x80>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a19      	ldr	r2, [pc, #100]	; (80086fc <HAL_TIM_Base_Start_IT+0xd8>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d004      	beq.n	80086a4 <HAL_TIM_Base_Start_IT+0x80>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a18      	ldr	r2, [pc, #96]	; (8008700 <HAL_TIM_Base_Start_IT+0xdc>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d111      	bne.n	80086c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	f003 0307 	and.w	r3, r3, #7
 80086ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2b06      	cmp	r3, #6
 80086b4:	d010      	beq.n	80086d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f042 0201 	orr.w	r2, r2, #1
 80086c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086c6:	e007      	b.n	80086d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f042 0201 	orr.w	r2, r2, #1
 80086d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3714      	adds	r7, #20
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	40010000 	.word	0x40010000
 80086ec:	40000400 	.word	0x40000400
 80086f0:	40000800 	.word	0x40000800
 80086f4:	40000c00 	.word	0x40000c00
 80086f8:	40010400 	.word	0x40010400
 80086fc:	40014000 	.word	0x40014000
 8008700:	40001800 	.word	0x40001800

08008704 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	f003 0302 	and.w	r3, r3, #2
 8008722:	2b00      	cmp	r3, #0
 8008724:	d020      	beq.n	8008768 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f003 0302 	and.w	r3, r3, #2
 800872c:	2b00      	cmp	r3, #0
 800872e:	d01b      	beq.n	8008768 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f06f 0202 	mvn.w	r2, #2
 8008738:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	f003 0303 	and.w	r3, r3, #3
 800874a:	2b00      	cmp	r3, #0
 800874c:	d003      	beq.n	8008756 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f8d2 	bl	80088f8 <HAL_TIM_IC_CaptureCallback>
 8008754:	e005      	b.n	8008762 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f8c4 	bl	80088e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 f8d5 	bl	800890c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	f003 0304 	and.w	r3, r3, #4
 800876e:	2b00      	cmp	r3, #0
 8008770:	d020      	beq.n	80087b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f003 0304 	and.w	r3, r3, #4
 8008778:	2b00      	cmp	r3, #0
 800877a:	d01b      	beq.n	80087b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f06f 0204 	mvn.w	r2, #4
 8008784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2202      	movs	r2, #2
 800878a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008796:	2b00      	cmp	r3, #0
 8008798:	d003      	beq.n	80087a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f8ac 	bl	80088f8 <HAL_TIM_IC_CaptureCallback>
 80087a0:	e005      	b.n	80087ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f89e 	bl	80088e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f8af 	bl	800890c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	f003 0308 	and.w	r3, r3, #8
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d020      	beq.n	8008800 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f003 0308 	and.w	r3, r3, #8
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d01b      	beq.n	8008800 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f06f 0208 	mvn.w	r2, #8
 80087d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2204      	movs	r2, #4
 80087d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	f003 0303 	and.w	r3, r3, #3
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f886 	bl	80088f8 <HAL_TIM_IC_CaptureCallback>
 80087ec:	e005      	b.n	80087fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f878 	bl	80088e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f889 	bl	800890c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	f003 0310 	and.w	r3, r3, #16
 8008806:	2b00      	cmp	r3, #0
 8008808:	d020      	beq.n	800884c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f003 0310 	and.w	r3, r3, #16
 8008810:	2b00      	cmp	r3, #0
 8008812:	d01b      	beq.n	800884c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f06f 0210 	mvn.w	r2, #16
 800881c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2208      	movs	r2, #8
 8008822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800882e:	2b00      	cmp	r3, #0
 8008830:	d003      	beq.n	800883a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f860 	bl	80088f8 <HAL_TIM_IC_CaptureCallback>
 8008838:	e005      	b.n	8008846 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f852 	bl	80088e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f863 	bl	800890c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	f003 0301 	and.w	r3, r3, #1
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00c      	beq.n	8008870 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f003 0301 	and.w	r3, r3, #1
 800885c:	2b00      	cmp	r3, #0
 800885e:	d007      	beq.n	8008870 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f06f 0201 	mvn.w	r2, #1
 8008868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f7fa fc50 	bl	8003110 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00c      	beq.n	8008894 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008880:	2b00      	cmp	r3, #0
 8008882:	d007      	beq.n	8008894 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800888c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f982 	bl	8008b98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00c      	beq.n	80088b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d007      	beq.n	80088b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f834 	bl	8008920 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	f003 0320 	and.w	r3, r3, #32
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00c      	beq.n	80088dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f003 0320 	and.w	r3, r3, #32
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d007      	beq.n	80088dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f06f 0220 	mvn.w	r2, #32
 80088d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f954 	bl	8008b84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088dc:	bf00      	nop
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088ec:	bf00      	nop
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008914:	bf00      	nop
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008928:	bf00      	nop
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a46      	ldr	r2, [pc, #280]	; (8008a60 <TIM_Base_SetConfig+0x12c>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d013      	beq.n	8008974 <TIM_Base_SetConfig+0x40>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008952:	d00f      	beq.n	8008974 <TIM_Base_SetConfig+0x40>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a43      	ldr	r2, [pc, #268]	; (8008a64 <TIM_Base_SetConfig+0x130>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d00b      	beq.n	8008974 <TIM_Base_SetConfig+0x40>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4a42      	ldr	r2, [pc, #264]	; (8008a68 <TIM_Base_SetConfig+0x134>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d007      	beq.n	8008974 <TIM_Base_SetConfig+0x40>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a41      	ldr	r2, [pc, #260]	; (8008a6c <TIM_Base_SetConfig+0x138>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d003      	beq.n	8008974 <TIM_Base_SetConfig+0x40>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a40      	ldr	r2, [pc, #256]	; (8008a70 <TIM_Base_SetConfig+0x13c>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d108      	bne.n	8008986 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800897a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	4313      	orrs	r3, r2
 8008984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a35      	ldr	r2, [pc, #212]	; (8008a60 <TIM_Base_SetConfig+0x12c>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d02b      	beq.n	80089e6 <TIM_Base_SetConfig+0xb2>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008994:	d027      	beq.n	80089e6 <TIM_Base_SetConfig+0xb2>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a32      	ldr	r2, [pc, #200]	; (8008a64 <TIM_Base_SetConfig+0x130>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d023      	beq.n	80089e6 <TIM_Base_SetConfig+0xb2>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a31      	ldr	r2, [pc, #196]	; (8008a68 <TIM_Base_SetConfig+0x134>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d01f      	beq.n	80089e6 <TIM_Base_SetConfig+0xb2>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a30      	ldr	r2, [pc, #192]	; (8008a6c <TIM_Base_SetConfig+0x138>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d01b      	beq.n	80089e6 <TIM_Base_SetConfig+0xb2>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a2f      	ldr	r2, [pc, #188]	; (8008a70 <TIM_Base_SetConfig+0x13c>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d017      	beq.n	80089e6 <TIM_Base_SetConfig+0xb2>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a2e      	ldr	r2, [pc, #184]	; (8008a74 <TIM_Base_SetConfig+0x140>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d013      	beq.n	80089e6 <TIM_Base_SetConfig+0xb2>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a2d      	ldr	r2, [pc, #180]	; (8008a78 <TIM_Base_SetConfig+0x144>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d00f      	beq.n	80089e6 <TIM_Base_SetConfig+0xb2>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a2c      	ldr	r2, [pc, #176]	; (8008a7c <TIM_Base_SetConfig+0x148>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d00b      	beq.n	80089e6 <TIM_Base_SetConfig+0xb2>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a2b      	ldr	r2, [pc, #172]	; (8008a80 <TIM_Base_SetConfig+0x14c>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d007      	beq.n	80089e6 <TIM_Base_SetConfig+0xb2>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a2a      	ldr	r2, [pc, #168]	; (8008a84 <TIM_Base_SetConfig+0x150>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d003      	beq.n	80089e6 <TIM_Base_SetConfig+0xb2>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4a29      	ldr	r2, [pc, #164]	; (8008a88 <TIM_Base_SetConfig+0x154>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d108      	bne.n	80089f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	695b      	ldr	r3, [r3, #20]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	689a      	ldr	r2, [r3, #8]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a10      	ldr	r2, [pc, #64]	; (8008a60 <TIM_Base_SetConfig+0x12c>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d003      	beq.n	8008a2c <TIM_Base_SetConfig+0xf8>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a12      	ldr	r2, [pc, #72]	; (8008a70 <TIM_Base_SetConfig+0x13c>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d103      	bne.n	8008a34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	691a      	ldr	r2, [r3, #16]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d105      	bne.n	8008a52 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	f023 0201 	bic.w	r2, r3, #1
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	611a      	str	r2, [r3, #16]
  }
}
 8008a52:	bf00      	nop
 8008a54:	3714      	adds	r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	40010000 	.word	0x40010000
 8008a64:	40000400 	.word	0x40000400
 8008a68:	40000800 	.word	0x40000800
 8008a6c:	40000c00 	.word	0x40000c00
 8008a70:	40010400 	.word	0x40010400
 8008a74:	40014000 	.word	0x40014000
 8008a78:	40014400 	.word	0x40014400
 8008a7c:	40014800 	.word	0x40014800
 8008a80:	40001800 	.word	0x40001800
 8008a84:	40001c00 	.word	0x40001c00
 8008a88:	40002000 	.word	0x40002000

08008a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d101      	bne.n	8008aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008aa0:	2302      	movs	r3, #2
 8008aa2:	e05a      	b.n	8008b5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2202      	movs	r2, #2
 8008ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a21      	ldr	r2, [pc, #132]	; (8008b68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d022      	beq.n	8008b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008af0:	d01d      	beq.n	8008b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a1d      	ldr	r2, [pc, #116]	; (8008b6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d018      	beq.n	8008b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a1b      	ldr	r2, [pc, #108]	; (8008b70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d013      	beq.n	8008b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a1a      	ldr	r2, [pc, #104]	; (8008b74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d00e      	beq.n	8008b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a18      	ldr	r2, [pc, #96]	; (8008b78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d009      	beq.n	8008b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a17      	ldr	r2, [pc, #92]	; (8008b7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d004      	beq.n	8008b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a15      	ldr	r2, [pc, #84]	; (8008b80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d10c      	bne.n	8008b48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3714      	adds	r7, #20
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	40010000 	.word	0x40010000
 8008b6c:	40000400 	.word	0x40000400
 8008b70:	40000800 	.word	0x40000800
 8008b74:	40000c00 	.word	0x40000c00
 8008b78:	40010400 	.word	0x40010400
 8008b7c:	40014000 	.word	0x40014000
 8008b80:	40001800 	.word	0x40001800

08008b84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d101      	bne.n	8008bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e042      	b.n	8008c44 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d106      	bne.n	8008bd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7fa fc6c 	bl	80034b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2224      	movs	r2, #36	; 0x24
 8008bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68da      	ldr	r2, [r3, #12]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 fdbd 	bl	8009770 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	691a      	ldr	r2, [r3, #16]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	695a      	ldr	r2, [r3, #20]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68da      	ldr	r2, [r3, #12]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2220      	movs	r2, #32
 8008c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2220      	movs	r2, #32
 8008c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b08a      	sub	sp, #40	; 0x28
 8008c50:	af02      	add	r7, sp, #8
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	603b      	str	r3, [r7, #0]
 8008c58:	4613      	mov	r3, r2
 8008c5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	2b20      	cmp	r3, #32
 8008c6a:	d175      	bne.n	8008d58 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d002      	beq.n	8008c78 <HAL_UART_Transmit+0x2c>
 8008c72:	88fb      	ldrh	r3, [r7, #6]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d101      	bne.n	8008c7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e06e      	b.n	8008d5a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2221      	movs	r2, #33	; 0x21
 8008c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c8a:	f7fc fee5 	bl	8005a58 <HAL_GetTick>
 8008c8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	88fa      	ldrh	r2, [r7, #6]
 8008c94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	88fa      	ldrh	r2, [r7, #6]
 8008c9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ca4:	d108      	bne.n	8008cb8 <HAL_UART_Transmit+0x6c>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d104      	bne.n	8008cb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	61bb      	str	r3, [r7, #24]
 8008cb6:	e003      	b.n	8008cc0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008cc0:	e02e      	b.n	8008d20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	2180      	movs	r1, #128	; 0x80
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f000 fb1f 	bl	8009310 <UART_WaitOnFlagUntilTimeout>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d005      	beq.n	8008ce4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2220      	movs	r2, #32
 8008cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	e03a      	b.n	8008d5a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10b      	bne.n	8008d02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	881b      	ldrh	r3, [r3, #0]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	3302      	adds	r3, #2
 8008cfe:	61bb      	str	r3, [r7, #24]
 8008d00:	e007      	b.n	8008d12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	781a      	ldrb	r2, [r3, #0]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1cb      	bne.n	8008cc2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	9300      	str	r3, [sp, #0]
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	2200      	movs	r2, #0
 8008d32:	2140      	movs	r1, #64	; 0x40
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f000 faeb 	bl	8009310 <UART_WaitOnFlagUntilTimeout>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d005      	beq.n	8008d4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2220      	movs	r2, #32
 8008d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8008d48:	2303      	movs	r3, #3
 8008d4a:	e006      	b.n	8008d5a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2220      	movs	r2, #32
 8008d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008d54:	2300      	movs	r3, #0
 8008d56:	e000      	b.n	8008d5a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008d58:	2302      	movs	r3, #2
  }
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3720      	adds	r7, #32
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b084      	sub	sp, #16
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	60f8      	str	r0, [r7, #12]
 8008d6a:	60b9      	str	r1, [r7, #8]
 8008d6c:	4613      	mov	r3, r2
 8008d6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	2b20      	cmp	r3, #32
 8008d7a:	d112      	bne.n	8008da2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d002      	beq.n	8008d88 <HAL_UART_Receive_IT+0x26>
 8008d82:	88fb      	ldrh	r3, [r7, #6]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d101      	bne.n	8008d8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e00b      	b.n	8008da4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008d92:	88fb      	ldrh	r3, [r7, #6]
 8008d94:	461a      	mov	r2, r3
 8008d96:	68b9      	ldr	r1, [r7, #8]
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f000 fb12 	bl	80093c2 <UART_Start_Receive_IT>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	e000      	b.n	8008da4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008da2:	2302      	movs	r3, #2
  }
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b0ba      	sub	sp, #232	; 0xe8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	695b      	ldr	r3, [r3, #20]
 8008dce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008de2:	f003 030f 	and.w	r3, r3, #15
 8008de6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008dea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10f      	bne.n	8008e12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008df6:	f003 0320 	and.w	r3, r3, #32
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d009      	beq.n	8008e12 <HAL_UART_IRQHandler+0x66>
 8008dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e02:	f003 0320 	and.w	r3, r3, #32
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d003      	beq.n	8008e12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fbf2 	bl	80095f4 <UART_Receive_IT>
      return;
 8008e10:	e25b      	b.n	80092ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008e12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f000 80de 	beq.w	8008fd8 <HAL_UART_IRQHandler+0x22c>
 8008e1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e20:	f003 0301 	and.w	r3, r3, #1
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d106      	bne.n	8008e36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 80d1 	beq.w	8008fd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00b      	beq.n	8008e5a <HAL_UART_IRQHandler+0xae>
 8008e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d005      	beq.n	8008e5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e52:	f043 0201 	orr.w	r2, r3, #1
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e5e:	f003 0304 	and.w	r3, r3, #4
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00b      	beq.n	8008e7e <HAL_UART_IRQHandler+0xd2>
 8008e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e6a:	f003 0301 	and.w	r3, r3, #1
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d005      	beq.n	8008e7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e76:	f043 0202 	orr.w	r2, r3, #2
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e82:	f003 0302 	and.w	r3, r3, #2
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00b      	beq.n	8008ea2 <HAL_UART_IRQHandler+0xf6>
 8008e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e8e:	f003 0301 	and.w	r3, r3, #1
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d005      	beq.n	8008ea2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e9a:	f043 0204 	orr.w	r2, r3, #4
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ea6:	f003 0308 	and.w	r3, r3, #8
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d011      	beq.n	8008ed2 <HAL_UART_IRQHandler+0x126>
 8008eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eb2:	f003 0320 	and.w	r3, r3, #32
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d105      	bne.n	8008ec6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ebe:	f003 0301 	and.w	r3, r3, #1
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d005      	beq.n	8008ed2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eca:	f043 0208 	orr.w	r2, r3, #8
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f000 81f2 	beq.w	80092c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ee0:	f003 0320 	and.w	r3, r3, #32
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d008      	beq.n	8008efa <HAL_UART_IRQHandler+0x14e>
 8008ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eec:	f003 0320 	and.w	r3, r3, #32
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d002      	beq.n	8008efa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fb7d 	bl	80095f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f04:	2b40      	cmp	r3, #64	; 0x40
 8008f06:	bf0c      	ite	eq
 8008f08:	2301      	moveq	r3, #1
 8008f0a:	2300      	movne	r3, #0
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f16:	f003 0308 	and.w	r3, r3, #8
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d103      	bne.n	8008f26 <HAL_UART_IRQHandler+0x17a>
 8008f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d04f      	beq.n	8008fc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fa85 	bl	8009436 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	695b      	ldr	r3, [r3, #20]
 8008f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f36:	2b40      	cmp	r3, #64	; 0x40
 8008f38:	d141      	bne.n	8008fbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	3314      	adds	r3, #20
 8008f40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f48:	e853 3f00 	ldrex	r3, [r3]
 8008f4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008f50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	3314      	adds	r3, #20
 8008f62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008f66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008f72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008f76:	e841 2300 	strex	r3, r2, [r1]
 8008f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008f7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1d9      	bne.n	8008f3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d013      	beq.n	8008fb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f92:	4a7e      	ldr	r2, [pc, #504]	; (800918c <HAL_UART_IRQHandler+0x3e0>)
 8008f94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fc ff3f 	bl	8005e1e <HAL_DMA_Abort_IT>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d016      	beq.n	8008fd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008fb0:	4610      	mov	r0, r2
 8008fb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fb4:	e00e      	b.n	8008fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f994 	bl	80092e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fbc:	e00a      	b.n	8008fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f990 	bl	80092e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fc4:	e006      	b.n	8008fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f98c 	bl	80092e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008fd2:	e175      	b.n	80092c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fd4:	bf00      	nop
    return;
 8008fd6:	e173      	b.n	80092c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	f040 814f 	bne.w	8009280 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fe6:	f003 0310 	and.w	r3, r3, #16
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f000 8148 	beq.w	8009280 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ff4:	f003 0310 	and.w	r3, r3, #16
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f000 8141 	beq.w	8009280 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ffe:	2300      	movs	r3, #0
 8009000:	60bb      	str	r3, [r7, #8]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	60bb      	str	r3, [r7, #8]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	60bb      	str	r3, [r7, #8]
 8009012:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	695b      	ldr	r3, [r3, #20]
 800901a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800901e:	2b40      	cmp	r3, #64	; 0x40
 8009020:	f040 80b6 	bne.w	8009190 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009030:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009034:	2b00      	cmp	r3, #0
 8009036:	f000 8145 	beq.w	80092c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800903e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009042:	429a      	cmp	r2, r3
 8009044:	f080 813e 	bcs.w	80092c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800904e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009054:	69db      	ldr	r3, [r3, #28]
 8009056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800905a:	f000 8088 	beq.w	800916e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	330c      	adds	r3, #12
 8009064:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009068:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800906c:	e853 3f00 	ldrex	r3, [r3]
 8009070:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009074:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800907c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	330c      	adds	r3, #12
 8009086:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800908a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800908e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009092:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009096:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800909a:	e841 2300 	strex	r3, r2, [r1]
 800909e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80090a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1d9      	bne.n	800905e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	3314      	adds	r3, #20
 80090b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090b4:	e853 3f00 	ldrex	r3, [r3]
 80090b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80090ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090bc:	f023 0301 	bic.w	r3, r3, #1
 80090c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	3314      	adds	r3, #20
 80090ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80090ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80090d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80090d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80090da:	e841 2300 	strex	r3, r2, [r1]
 80090de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80090e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1e1      	bne.n	80090aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	3314      	adds	r3, #20
 80090ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090f0:	e853 3f00 	ldrex	r3, [r3]
 80090f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80090f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	3314      	adds	r3, #20
 8009106:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800910a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800910c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800910e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009110:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009112:	e841 2300 	strex	r3, r2, [r1]
 8009116:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800911a:	2b00      	cmp	r3, #0
 800911c:	d1e3      	bne.n	80090e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2220      	movs	r2, #32
 8009122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	330c      	adds	r3, #12
 8009132:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009136:	e853 3f00 	ldrex	r3, [r3]
 800913a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800913c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800913e:	f023 0310 	bic.w	r3, r3, #16
 8009142:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	330c      	adds	r3, #12
 800914c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009150:	65ba      	str	r2, [r7, #88]	; 0x58
 8009152:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009154:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009156:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009158:	e841 2300 	strex	r3, r2, [r1]
 800915c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800915e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009160:	2b00      	cmp	r3, #0
 8009162:	d1e3      	bne.n	800912c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009168:	4618      	mov	r0, r3
 800916a:	f7fc fde8 	bl	8005d3e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2202      	movs	r2, #2
 8009172:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800917c:	b29b      	uxth	r3, r3
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	b29b      	uxth	r3, r3
 8009182:	4619      	mov	r1, r3
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f8b7 	bl	80092f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800918a:	e09b      	b.n	80092c4 <HAL_UART_IRQHandler+0x518>
 800918c:	080094fd 	.word	0x080094fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009198:	b29b      	uxth	r3, r3
 800919a:	1ad3      	subs	r3, r2, r3
 800919c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 808e 	beq.w	80092c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80091ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f000 8089 	beq.w	80092c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	330c      	adds	r3, #12
 80091bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c0:	e853 3f00 	ldrex	r3, [r3]
 80091c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80091c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	330c      	adds	r3, #12
 80091d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80091da:	647a      	str	r2, [r7, #68]	; 0x44
 80091dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80091e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091e2:	e841 2300 	strex	r3, r2, [r1]
 80091e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80091e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1e3      	bne.n	80091b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3314      	adds	r3, #20
 80091f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f8:	e853 3f00 	ldrex	r3, [r3]
 80091fc:	623b      	str	r3, [r7, #32]
   return(result);
 80091fe:	6a3b      	ldr	r3, [r7, #32]
 8009200:	f023 0301 	bic.w	r3, r3, #1
 8009204:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	3314      	adds	r3, #20
 800920e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009212:	633a      	str	r2, [r7, #48]	; 0x30
 8009214:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009216:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800921a:	e841 2300 	strex	r3, r2, [r1]
 800921e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009222:	2b00      	cmp	r3, #0
 8009224:	d1e3      	bne.n	80091ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2220      	movs	r2, #32
 800922a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	330c      	adds	r3, #12
 800923a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	e853 3f00 	ldrex	r3, [r3]
 8009242:	60fb      	str	r3, [r7, #12]
   return(result);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f023 0310 	bic.w	r3, r3, #16
 800924a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	330c      	adds	r3, #12
 8009254:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009258:	61fa      	str	r2, [r7, #28]
 800925a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925c:	69b9      	ldr	r1, [r7, #24]
 800925e:	69fa      	ldr	r2, [r7, #28]
 8009260:	e841 2300 	strex	r3, r2, [r1]
 8009264:	617b      	str	r3, [r7, #20]
   return(result);
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1e3      	bne.n	8009234 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2202      	movs	r2, #2
 8009270:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009272:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009276:	4619      	mov	r1, r3
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f83d 	bl	80092f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800927e:	e023      	b.n	80092c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009288:	2b00      	cmp	r3, #0
 800928a:	d009      	beq.n	80092a0 <HAL_UART_IRQHandler+0x4f4>
 800928c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009294:	2b00      	cmp	r3, #0
 8009296:	d003      	beq.n	80092a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 f943 	bl	8009524 <UART_Transmit_IT>
    return;
 800929e:	e014      	b.n	80092ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80092a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00e      	beq.n	80092ca <HAL_UART_IRQHandler+0x51e>
 80092ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d008      	beq.n	80092ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 f983 	bl	80095c4 <UART_EndTransmit_IT>
    return;
 80092be:	e004      	b.n	80092ca <HAL_UART_IRQHandler+0x51e>
    return;
 80092c0:	bf00      	nop
 80092c2:	e002      	b.n	80092ca <HAL_UART_IRQHandler+0x51e>
      return;
 80092c4:	bf00      	nop
 80092c6:	e000      	b.n	80092ca <HAL_UART_IRQHandler+0x51e>
      return;
 80092c8:	bf00      	nop
  }
}
 80092ca:	37e8      	adds	r7, #232	; 0xe8
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80092d8:	bf00      	nop
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80092ec:	bf00      	nop
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	460b      	mov	r3, r1
 8009302:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009304:	bf00      	nop
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	603b      	str	r3, [r7, #0]
 800931c:	4613      	mov	r3, r2
 800931e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009320:	e03b      	b.n	800939a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009322:	6a3b      	ldr	r3, [r7, #32]
 8009324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009328:	d037      	beq.n	800939a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800932a:	f7fc fb95 	bl	8005a58 <HAL_GetTick>
 800932e:	4602      	mov	r2, r0
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	1ad3      	subs	r3, r2, r3
 8009334:	6a3a      	ldr	r2, [r7, #32]
 8009336:	429a      	cmp	r2, r3
 8009338:	d302      	bcc.n	8009340 <UART_WaitOnFlagUntilTimeout+0x30>
 800933a:	6a3b      	ldr	r3, [r7, #32]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d101      	bne.n	8009344 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009340:	2303      	movs	r3, #3
 8009342:	e03a      	b.n	80093ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	f003 0304 	and.w	r3, r3, #4
 800934e:	2b00      	cmp	r3, #0
 8009350:	d023      	beq.n	800939a <UART_WaitOnFlagUntilTimeout+0x8a>
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	2b80      	cmp	r3, #128	; 0x80
 8009356:	d020      	beq.n	800939a <UART_WaitOnFlagUntilTimeout+0x8a>
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	2b40      	cmp	r3, #64	; 0x40
 800935c:	d01d      	beq.n	800939a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f003 0308 	and.w	r3, r3, #8
 8009368:	2b08      	cmp	r3, #8
 800936a:	d116      	bne.n	800939a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800936c:	2300      	movs	r3, #0
 800936e:	617b      	str	r3, [r7, #20]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	617b      	str	r3, [r7, #20]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	617b      	str	r3, [r7, #20]
 8009380:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f000 f857 	bl	8009436 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2208      	movs	r2, #8
 800938c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2200      	movs	r2, #0
 8009392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	e00f      	b.n	80093ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	4013      	ands	r3, r2
 80093a4:	68ba      	ldr	r2, [r7, #8]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	bf0c      	ite	eq
 80093aa:	2301      	moveq	r3, #1
 80093ac:	2300      	movne	r3, #0
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	461a      	mov	r2, r3
 80093b2:	79fb      	ldrb	r3, [r7, #7]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d0b4      	beq.n	8009322 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3718      	adds	r7, #24
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093c2:	b480      	push	{r7}
 80093c4:	b085      	sub	sp, #20
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	60f8      	str	r0, [r7, #12]
 80093ca:	60b9      	str	r1, [r7, #8]
 80093cc:	4613      	mov	r3, r2
 80093ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	68ba      	ldr	r2, [r7, #8]
 80093d4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	88fa      	ldrh	r2, [r7, #6]
 80093da:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	88fa      	ldrh	r2, [r7, #6]
 80093e0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2200      	movs	r2, #0
 80093e6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2222      	movs	r2, #34	; 0x22
 80093ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d007      	beq.n	8009408 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	68da      	ldr	r2, [r3, #12]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009406:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	695a      	ldr	r2, [r3, #20]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f042 0201 	orr.w	r2, r2, #1
 8009416:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68da      	ldr	r2, [r3, #12]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f042 0220 	orr.w	r2, r2, #32
 8009426:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr

08009436 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009436:	b480      	push	{r7}
 8009438:	b095      	sub	sp, #84	; 0x54
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	330c      	adds	r3, #12
 8009444:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009448:	e853 3f00 	ldrex	r3, [r3]
 800944c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800944e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009450:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009454:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	330c      	adds	r3, #12
 800945c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800945e:	643a      	str	r2, [r7, #64]	; 0x40
 8009460:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009462:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009464:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009466:	e841 2300 	strex	r3, r2, [r1]
 800946a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800946c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1e5      	bne.n	800943e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3314      	adds	r3, #20
 8009478:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947a:	6a3b      	ldr	r3, [r7, #32]
 800947c:	e853 3f00 	ldrex	r3, [r3]
 8009480:	61fb      	str	r3, [r7, #28]
   return(result);
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	f023 0301 	bic.w	r3, r3, #1
 8009488:	64bb      	str	r3, [r7, #72]	; 0x48
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	3314      	adds	r3, #20
 8009490:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009492:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009494:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009496:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800949a:	e841 2300 	strex	r3, r2, [r1]
 800949e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1e5      	bne.n	8009472 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d119      	bne.n	80094e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	330c      	adds	r3, #12
 80094b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	e853 3f00 	ldrex	r3, [r3]
 80094bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	f023 0310 	bic.w	r3, r3, #16
 80094c4:	647b      	str	r3, [r7, #68]	; 0x44
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	330c      	adds	r3, #12
 80094cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094ce:	61ba      	str	r2, [r7, #24]
 80094d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d2:	6979      	ldr	r1, [r7, #20]
 80094d4:	69ba      	ldr	r2, [r7, #24]
 80094d6:	e841 2300 	strex	r3, r2, [r1]
 80094da:	613b      	str	r3, [r7, #16]
   return(result);
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1e5      	bne.n	80094ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2220      	movs	r2, #32
 80094e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	631a      	str	r2, [r3, #48]	; 0x30
}
 80094f0:	bf00      	nop
 80094f2:	3754      	adds	r7, #84	; 0x54
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009508:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2200      	movs	r2, #0
 800950e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2200      	movs	r2, #0
 8009514:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	f7ff fee4 	bl	80092e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800951c:	bf00      	nop
 800951e:	3710      	adds	r7, #16
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009524:	b480      	push	{r7}
 8009526:	b085      	sub	sp, #20
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009532:	b2db      	uxtb	r3, r3
 8009534:	2b21      	cmp	r3, #33	; 0x21
 8009536:	d13e      	bne.n	80095b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009540:	d114      	bne.n	800956c <UART_Transmit_IT+0x48>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d110      	bne.n	800956c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a1b      	ldr	r3, [r3, #32]
 800954e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	881b      	ldrh	r3, [r3, #0]
 8009554:	461a      	mov	r2, r3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800955e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6a1b      	ldr	r3, [r3, #32]
 8009564:	1c9a      	adds	r2, r3, #2
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	621a      	str	r2, [r3, #32]
 800956a:	e008      	b.n	800957e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a1b      	ldr	r3, [r3, #32]
 8009570:	1c59      	adds	r1, r3, #1
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	6211      	str	r1, [r2, #32]
 8009576:	781a      	ldrb	r2, [r3, #0]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009582:	b29b      	uxth	r3, r3
 8009584:	3b01      	subs	r3, #1
 8009586:	b29b      	uxth	r3, r3
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	4619      	mov	r1, r3
 800958c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10f      	bne.n	80095b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68da      	ldr	r2, [r3, #12]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68da      	ldr	r2, [r3, #12]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80095b2:	2300      	movs	r3, #0
 80095b4:	e000      	b.n	80095b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80095b6:	2302      	movs	r3, #2
  }
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3714      	adds	r7, #20
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	68da      	ldr	r2, [r3, #12]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2220      	movs	r2, #32
 80095e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f7ff fe73 	bl	80092d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80095ea:	2300      	movs	r3, #0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b08c      	sub	sp, #48	; 0x30
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009602:	b2db      	uxtb	r3, r3
 8009604:	2b22      	cmp	r3, #34	; 0x22
 8009606:	f040 80ae 	bne.w	8009766 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009612:	d117      	bne.n	8009644 <UART_Receive_IT+0x50>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	691b      	ldr	r3, [r3, #16]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d113      	bne.n	8009644 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800961c:	2300      	movs	r3, #0
 800961e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009624:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	b29b      	uxth	r3, r3
 800962e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009632:	b29a      	uxth	r2, r3
 8009634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009636:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800963c:	1c9a      	adds	r2, r3, #2
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	629a      	str	r2, [r3, #40]	; 0x28
 8009642:	e026      	b.n	8009692 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009648:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800964a:	2300      	movs	r3, #0
 800964c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009656:	d007      	beq.n	8009668 <UART_Receive_IT+0x74>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d10a      	bne.n	8009676 <UART_Receive_IT+0x82>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	691b      	ldr	r3, [r3, #16]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d106      	bne.n	8009676 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	b2da      	uxtb	r2, r3
 8009670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009672:	701a      	strb	r2, [r3, #0]
 8009674:	e008      	b.n	8009688 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	b2db      	uxtb	r3, r3
 800967e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009682:	b2da      	uxtb	r2, r3
 8009684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009686:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800968c:	1c5a      	adds	r2, r3, #1
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009696:	b29b      	uxth	r3, r3
 8009698:	3b01      	subs	r3, #1
 800969a:	b29b      	uxth	r3, r3
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	4619      	mov	r1, r3
 80096a0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d15d      	bne.n	8009762 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	68da      	ldr	r2, [r3, #12]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f022 0220 	bic.w	r2, r2, #32
 80096b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	68da      	ldr	r2, [r3, #12]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80096c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	695a      	ldr	r2, [r3, #20]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f022 0201 	bic.w	r2, r2, #1
 80096d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2220      	movs	r2, #32
 80096da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2200      	movs	r2, #0
 80096e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d135      	bne.n	8009758 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	330c      	adds	r3, #12
 80096f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	e853 3f00 	ldrex	r3, [r3]
 8009700:	613b      	str	r3, [r7, #16]
   return(result);
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	f023 0310 	bic.w	r3, r3, #16
 8009708:	627b      	str	r3, [r7, #36]	; 0x24
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	330c      	adds	r3, #12
 8009710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009712:	623a      	str	r2, [r7, #32]
 8009714:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009716:	69f9      	ldr	r1, [r7, #28]
 8009718:	6a3a      	ldr	r2, [r7, #32]
 800971a:	e841 2300 	strex	r3, r2, [r1]
 800971e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1e5      	bne.n	80096f2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 0310 	and.w	r3, r3, #16
 8009730:	2b10      	cmp	r3, #16
 8009732:	d10a      	bne.n	800974a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009734:	2300      	movs	r3, #0
 8009736:	60fb      	str	r3, [r7, #12]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	60fb      	str	r3, [r7, #12]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	60fb      	str	r3, [r7, #12]
 8009748:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800974e:	4619      	mov	r1, r3
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f7ff fdd1 	bl	80092f8 <HAL_UARTEx_RxEventCallback>
 8009756:	e002      	b.n	800975e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f7f9 f9dd 	bl	8002b18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	e002      	b.n	8009768 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009762:	2300      	movs	r3, #0
 8009764:	e000      	b.n	8009768 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009766:	2302      	movs	r3, #2
  }
}
 8009768:	4618      	mov	r0, r3
 800976a:	3730      	adds	r7, #48	; 0x30
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009774:	b0c0      	sub	sp, #256	; 0x100
 8009776:	af00      	add	r7, sp, #0
 8009778:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800977c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800978c:	68d9      	ldr	r1, [r3, #12]
 800978e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	ea40 0301 	orr.w	r3, r0, r1
 8009798:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800979a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800979e:	689a      	ldr	r2, [r3, #8]
 80097a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	431a      	orrs	r2, r3
 80097a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	431a      	orrs	r2, r3
 80097b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097b4:	69db      	ldr	r3, [r3, #28]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80097bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80097c8:	f021 010c 	bic.w	r1, r1, #12
 80097cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80097d6:	430b      	orrs	r3, r1
 80097d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80097da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	695b      	ldr	r3, [r3, #20]
 80097e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80097e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ea:	6999      	ldr	r1, [r3, #24]
 80097ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	ea40 0301 	orr.w	r3, r0, r1
 80097f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80097f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	4b8f      	ldr	r3, [pc, #572]	; (8009a3c <UART_SetConfig+0x2cc>)
 8009800:	429a      	cmp	r2, r3
 8009802:	d005      	beq.n	8009810 <UART_SetConfig+0xa0>
 8009804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	4b8d      	ldr	r3, [pc, #564]	; (8009a40 <UART_SetConfig+0x2d0>)
 800980c:	429a      	cmp	r2, r3
 800980e:	d104      	bne.n	800981a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009810:	f7fe f8c0 	bl	8007994 <HAL_RCC_GetPCLK2Freq>
 8009814:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009818:	e003      	b.n	8009822 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800981a:	f7fe f8a7 	bl	800796c <HAL_RCC_GetPCLK1Freq>
 800981e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009826:	69db      	ldr	r3, [r3, #28]
 8009828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800982c:	f040 810c 	bne.w	8009a48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009834:	2200      	movs	r2, #0
 8009836:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800983a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800983e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009842:	4622      	mov	r2, r4
 8009844:	462b      	mov	r3, r5
 8009846:	1891      	adds	r1, r2, r2
 8009848:	65b9      	str	r1, [r7, #88]	; 0x58
 800984a:	415b      	adcs	r3, r3
 800984c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800984e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009852:	4621      	mov	r1, r4
 8009854:	eb12 0801 	adds.w	r8, r2, r1
 8009858:	4629      	mov	r1, r5
 800985a:	eb43 0901 	adc.w	r9, r3, r1
 800985e:	f04f 0200 	mov.w	r2, #0
 8009862:	f04f 0300 	mov.w	r3, #0
 8009866:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800986a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800986e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009872:	4690      	mov	r8, r2
 8009874:	4699      	mov	r9, r3
 8009876:	4623      	mov	r3, r4
 8009878:	eb18 0303 	adds.w	r3, r8, r3
 800987c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009880:	462b      	mov	r3, r5
 8009882:	eb49 0303 	adc.w	r3, r9, r3
 8009886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800988a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009896:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800989a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800989e:	460b      	mov	r3, r1
 80098a0:	18db      	adds	r3, r3, r3
 80098a2:	653b      	str	r3, [r7, #80]	; 0x50
 80098a4:	4613      	mov	r3, r2
 80098a6:	eb42 0303 	adc.w	r3, r2, r3
 80098aa:	657b      	str	r3, [r7, #84]	; 0x54
 80098ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80098b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80098b4:	f7f7 f98c 	bl	8000bd0 <__aeabi_uldivmod>
 80098b8:	4602      	mov	r2, r0
 80098ba:	460b      	mov	r3, r1
 80098bc:	4b61      	ldr	r3, [pc, #388]	; (8009a44 <UART_SetConfig+0x2d4>)
 80098be:	fba3 2302 	umull	r2, r3, r3, r2
 80098c2:	095b      	lsrs	r3, r3, #5
 80098c4:	011c      	lsls	r4, r3, #4
 80098c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098ca:	2200      	movs	r2, #0
 80098cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80098d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80098d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80098d8:	4642      	mov	r2, r8
 80098da:	464b      	mov	r3, r9
 80098dc:	1891      	adds	r1, r2, r2
 80098de:	64b9      	str	r1, [r7, #72]	; 0x48
 80098e0:	415b      	adcs	r3, r3
 80098e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80098e8:	4641      	mov	r1, r8
 80098ea:	eb12 0a01 	adds.w	sl, r2, r1
 80098ee:	4649      	mov	r1, r9
 80098f0:	eb43 0b01 	adc.w	fp, r3, r1
 80098f4:	f04f 0200 	mov.w	r2, #0
 80098f8:	f04f 0300 	mov.w	r3, #0
 80098fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009900:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009904:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009908:	4692      	mov	sl, r2
 800990a:	469b      	mov	fp, r3
 800990c:	4643      	mov	r3, r8
 800990e:	eb1a 0303 	adds.w	r3, sl, r3
 8009912:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009916:	464b      	mov	r3, r9
 8009918:	eb4b 0303 	adc.w	r3, fp, r3
 800991c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800992c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009930:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009934:	460b      	mov	r3, r1
 8009936:	18db      	adds	r3, r3, r3
 8009938:	643b      	str	r3, [r7, #64]	; 0x40
 800993a:	4613      	mov	r3, r2
 800993c:	eb42 0303 	adc.w	r3, r2, r3
 8009940:	647b      	str	r3, [r7, #68]	; 0x44
 8009942:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009946:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800994a:	f7f7 f941 	bl	8000bd0 <__aeabi_uldivmod>
 800994e:	4602      	mov	r2, r0
 8009950:	460b      	mov	r3, r1
 8009952:	4611      	mov	r1, r2
 8009954:	4b3b      	ldr	r3, [pc, #236]	; (8009a44 <UART_SetConfig+0x2d4>)
 8009956:	fba3 2301 	umull	r2, r3, r3, r1
 800995a:	095b      	lsrs	r3, r3, #5
 800995c:	2264      	movs	r2, #100	; 0x64
 800995e:	fb02 f303 	mul.w	r3, r2, r3
 8009962:	1acb      	subs	r3, r1, r3
 8009964:	00db      	lsls	r3, r3, #3
 8009966:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800996a:	4b36      	ldr	r3, [pc, #216]	; (8009a44 <UART_SetConfig+0x2d4>)
 800996c:	fba3 2302 	umull	r2, r3, r3, r2
 8009970:	095b      	lsrs	r3, r3, #5
 8009972:	005b      	lsls	r3, r3, #1
 8009974:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009978:	441c      	add	r4, r3
 800997a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800997e:	2200      	movs	r2, #0
 8009980:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009984:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009988:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800998c:	4642      	mov	r2, r8
 800998e:	464b      	mov	r3, r9
 8009990:	1891      	adds	r1, r2, r2
 8009992:	63b9      	str	r1, [r7, #56]	; 0x38
 8009994:	415b      	adcs	r3, r3
 8009996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009998:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800999c:	4641      	mov	r1, r8
 800999e:	1851      	adds	r1, r2, r1
 80099a0:	6339      	str	r1, [r7, #48]	; 0x30
 80099a2:	4649      	mov	r1, r9
 80099a4:	414b      	adcs	r3, r1
 80099a6:	637b      	str	r3, [r7, #52]	; 0x34
 80099a8:	f04f 0200 	mov.w	r2, #0
 80099ac:	f04f 0300 	mov.w	r3, #0
 80099b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80099b4:	4659      	mov	r1, fp
 80099b6:	00cb      	lsls	r3, r1, #3
 80099b8:	4651      	mov	r1, sl
 80099ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80099be:	4651      	mov	r1, sl
 80099c0:	00ca      	lsls	r2, r1, #3
 80099c2:	4610      	mov	r0, r2
 80099c4:	4619      	mov	r1, r3
 80099c6:	4603      	mov	r3, r0
 80099c8:	4642      	mov	r2, r8
 80099ca:	189b      	adds	r3, r3, r2
 80099cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80099d0:	464b      	mov	r3, r9
 80099d2:	460a      	mov	r2, r1
 80099d4:	eb42 0303 	adc.w	r3, r2, r3
 80099d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80099dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80099e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80099ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80099f0:	460b      	mov	r3, r1
 80099f2:	18db      	adds	r3, r3, r3
 80099f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80099f6:	4613      	mov	r3, r2
 80099f8:	eb42 0303 	adc.w	r3, r2, r3
 80099fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009a06:	f7f7 f8e3 	bl	8000bd0 <__aeabi_uldivmod>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	4b0d      	ldr	r3, [pc, #52]	; (8009a44 <UART_SetConfig+0x2d4>)
 8009a10:	fba3 1302 	umull	r1, r3, r3, r2
 8009a14:	095b      	lsrs	r3, r3, #5
 8009a16:	2164      	movs	r1, #100	; 0x64
 8009a18:	fb01 f303 	mul.w	r3, r1, r3
 8009a1c:	1ad3      	subs	r3, r2, r3
 8009a1e:	00db      	lsls	r3, r3, #3
 8009a20:	3332      	adds	r3, #50	; 0x32
 8009a22:	4a08      	ldr	r2, [pc, #32]	; (8009a44 <UART_SetConfig+0x2d4>)
 8009a24:	fba2 2303 	umull	r2, r3, r2, r3
 8009a28:	095b      	lsrs	r3, r3, #5
 8009a2a:	f003 0207 	and.w	r2, r3, #7
 8009a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4422      	add	r2, r4
 8009a36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009a38:	e106      	b.n	8009c48 <UART_SetConfig+0x4d8>
 8009a3a:	bf00      	nop
 8009a3c:	40011000 	.word	0x40011000
 8009a40:	40011400 	.word	0x40011400
 8009a44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009a52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009a56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009a5a:	4642      	mov	r2, r8
 8009a5c:	464b      	mov	r3, r9
 8009a5e:	1891      	adds	r1, r2, r2
 8009a60:	6239      	str	r1, [r7, #32]
 8009a62:	415b      	adcs	r3, r3
 8009a64:	627b      	str	r3, [r7, #36]	; 0x24
 8009a66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a6a:	4641      	mov	r1, r8
 8009a6c:	1854      	adds	r4, r2, r1
 8009a6e:	4649      	mov	r1, r9
 8009a70:	eb43 0501 	adc.w	r5, r3, r1
 8009a74:	f04f 0200 	mov.w	r2, #0
 8009a78:	f04f 0300 	mov.w	r3, #0
 8009a7c:	00eb      	lsls	r3, r5, #3
 8009a7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009a82:	00e2      	lsls	r2, r4, #3
 8009a84:	4614      	mov	r4, r2
 8009a86:	461d      	mov	r5, r3
 8009a88:	4643      	mov	r3, r8
 8009a8a:	18e3      	adds	r3, r4, r3
 8009a8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009a90:	464b      	mov	r3, r9
 8009a92:	eb45 0303 	adc.w	r3, r5, r3
 8009a96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009aa6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009aaa:	f04f 0200 	mov.w	r2, #0
 8009aae:	f04f 0300 	mov.w	r3, #0
 8009ab2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009ab6:	4629      	mov	r1, r5
 8009ab8:	008b      	lsls	r3, r1, #2
 8009aba:	4621      	mov	r1, r4
 8009abc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ac0:	4621      	mov	r1, r4
 8009ac2:	008a      	lsls	r2, r1, #2
 8009ac4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009ac8:	f7f7 f882 	bl	8000bd0 <__aeabi_uldivmod>
 8009acc:	4602      	mov	r2, r0
 8009ace:	460b      	mov	r3, r1
 8009ad0:	4b60      	ldr	r3, [pc, #384]	; (8009c54 <UART_SetConfig+0x4e4>)
 8009ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8009ad6:	095b      	lsrs	r3, r3, #5
 8009ad8:	011c      	lsls	r4, r3, #4
 8009ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009ae4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009ae8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009aec:	4642      	mov	r2, r8
 8009aee:	464b      	mov	r3, r9
 8009af0:	1891      	adds	r1, r2, r2
 8009af2:	61b9      	str	r1, [r7, #24]
 8009af4:	415b      	adcs	r3, r3
 8009af6:	61fb      	str	r3, [r7, #28]
 8009af8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009afc:	4641      	mov	r1, r8
 8009afe:	1851      	adds	r1, r2, r1
 8009b00:	6139      	str	r1, [r7, #16]
 8009b02:	4649      	mov	r1, r9
 8009b04:	414b      	adcs	r3, r1
 8009b06:	617b      	str	r3, [r7, #20]
 8009b08:	f04f 0200 	mov.w	r2, #0
 8009b0c:	f04f 0300 	mov.w	r3, #0
 8009b10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009b14:	4659      	mov	r1, fp
 8009b16:	00cb      	lsls	r3, r1, #3
 8009b18:	4651      	mov	r1, sl
 8009b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b1e:	4651      	mov	r1, sl
 8009b20:	00ca      	lsls	r2, r1, #3
 8009b22:	4610      	mov	r0, r2
 8009b24:	4619      	mov	r1, r3
 8009b26:	4603      	mov	r3, r0
 8009b28:	4642      	mov	r2, r8
 8009b2a:	189b      	adds	r3, r3, r2
 8009b2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009b30:	464b      	mov	r3, r9
 8009b32:	460a      	mov	r2, r1
 8009b34:	eb42 0303 	adc.w	r3, r2, r3
 8009b38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009b48:	f04f 0200 	mov.w	r2, #0
 8009b4c:	f04f 0300 	mov.w	r3, #0
 8009b50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009b54:	4649      	mov	r1, r9
 8009b56:	008b      	lsls	r3, r1, #2
 8009b58:	4641      	mov	r1, r8
 8009b5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b5e:	4641      	mov	r1, r8
 8009b60:	008a      	lsls	r2, r1, #2
 8009b62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009b66:	f7f7 f833 	bl	8000bd0 <__aeabi_uldivmod>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	4611      	mov	r1, r2
 8009b70:	4b38      	ldr	r3, [pc, #224]	; (8009c54 <UART_SetConfig+0x4e4>)
 8009b72:	fba3 2301 	umull	r2, r3, r3, r1
 8009b76:	095b      	lsrs	r3, r3, #5
 8009b78:	2264      	movs	r2, #100	; 0x64
 8009b7a:	fb02 f303 	mul.w	r3, r2, r3
 8009b7e:	1acb      	subs	r3, r1, r3
 8009b80:	011b      	lsls	r3, r3, #4
 8009b82:	3332      	adds	r3, #50	; 0x32
 8009b84:	4a33      	ldr	r2, [pc, #204]	; (8009c54 <UART_SetConfig+0x4e4>)
 8009b86:	fba2 2303 	umull	r2, r3, r2, r3
 8009b8a:	095b      	lsrs	r3, r3, #5
 8009b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b90:	441c      	add	r4, r3
 8009b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b96:	2200      	movs	r2, #0
 8009b98:	673b      	str	r3, [r7, #112]	; 0x70
 8009b9a:	677a      	str	r2, [r7, #116]	; 0x74
 8009b9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009ba0:	4642      	mov	r2, r8
 8009ba2:	464b      	mov	r3, r9
 8009ba4:	1891      	adds	r1, r2, r2
 8009ba6:	60b9      	str	r1, [r7, #8]
 8009ba8:	415b      	adcs	r3, r3
 8009baa:	60fb      	str	r3, [r7, #12]
 8009bac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009bb0:	4641      	mov	r1, r8
 8009bb2:	1851      	adds	r1, r2, r1
 8009bb4:	6039      	str	r1, [r7, #0]
 8009bb6:	4649      	mov	r1, r9
 8009bb8:	414b      	adcs	r3, r1
 8009bba:	607b      	str	r3, [r7, #4]
 8009bbc:	f04f 0200 	mov.w	r2, #0
 8009bc0:	f04f 0300 	mov.w	r3, #0
 8009bc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009bc8:	4659      	mov	r1, fp
 8009bca:	00cb      	lsls	r3, r1, #3
 8009bcc:	4651      	mov	r1, sl
 8009bce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009bd2:	4651      	mov	r1, sl
 8009bd4:	00ca      	lsls	r2, r1, #3
 8009bd6:	4610      	mov	r0, r2
 8009bd8:	4619      	mov	r1, r3
 8009bda:	4603      	mov	r3, r0
 8009bdc:	4642      	mov	r2, r8
 8009bde:	189b      	adds	r3, r3, r2
 8009be0:	66bb      	str	r3, [r7, #104]	; 0x68
 8009be2:	464b      	mov	r3, r9
 8009be4:	460a      	mov	r2, r1
 8009be6:	eb42 0303 	adc.w	r3, r2, r3
 8009bea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	663b      	str	r3, [r7, #96]	; 0x60
 8009bf6:	667a      	str	r2, [r7, #100]	; 0x64
 8009bf8:	f04f 0200 	mov.w	r2, #0
 8009bfc:	f04f 0300 	mov.w	r3, #0
 8009c00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009c04:	4649      	mov	r1, r9
 8009c06:	008b      	lsls	r3, r1, #2
 8009c08:	4641      	mov	r1, r8
 8009c0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c0e:	4641      	mov	r1, r8
 8009c10:	008a      	lsls	r2, r1, #2
 8009c12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009c16:	f7f6 ffdb 	bl	8000bd0 <__aeabi_uldivmod>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	4b0d      	ldr	r3, [pc, #52]	; (8009c54 <UART_SetConfig+0x4e4>)
 8009c20:	fba3 1302 	umull	r1, r3, r3, r2
 8009c24:	095b      	lsrs	r3, r3, #5
 8009c26:	2164      	movs	r1, #100	; 0x64
 8009c28:	fb01 f303 	mul.w	r3, r1, r3
 8009c2c:	1ad3      	subs	r3, r2, r3
 8009c2e:	011b      	lsls	r3, r3, #4
 8009c30:	3332      	adds	r3, #50	; 0x32
 8009c32:	4a08      	ldr	r2, [pc, #32]	; (8009c54 <UART_SetConfig+0x4e4>)
 8009c34:	fba2 2303 	umull	r2, r3, r2, r3
 8009c38:	095b      	lsrs	r3, r3, #5
 8009c3a:	f003 020f 	and.w	r2, r3, #15
 8009c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4422      	add	r2, r4
 8009c46:	609a      	str	r2, [r3, #8]
}
 8009c48:	bf00      	nop
 8009c4a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c54:	51eb851f 	.word	0x51eb851f

08009c58 <__itoa>:
 8009c58:	1e93      	subs	r3, r2, #2
 8009c5a:	2b22      	cmp	r3, #34	; 0x22
 8009c5c:	b510      	push	{r4, lr}
 8009c5e:	460c      	mov	r4, r1
 8009c60:	d904      	bls.n	8009c6c <__itoa+0x14>
 8009c62:	2300      	movs	r3, #0
 8009c64:	700b      	strb	r3, [r1, #0]
 8009c66:	461c      	mov	r4, r3
 8009c68:	4620      	mov	r0, r4
 8009c6a:	bd10      	pop	{r4, pc}
 8009c6c:	2a0a      	cmp	r2, #10
 8009c6e:	d109      	bne.n	8009c84 <__itoa+0x2c>
 8009c70:	2800      	cmp	r0, #0
 8009c72:	da07      	bge.n	8009c84 <__itoa+0x2c>
 8009c74:	232d      	movs	r3, #45	; 0x2d
 8009c76:	700b      	strb	r3, [r1, #0]
 8009c78:	4240      	negs	r0, r0
 8009c7a:	2101      	movs	r1, #1
 8009c7c:	4421      	add	r1, r4
 8009c7e:	f000 f8b9 	bl	8009df4 <__utoa>
 8009c82:	e7f1      	b.n	8009c68 <__itoa+0x10>
 8009c84:	2100      	movs	r1, #0
 8009c86:	e7f9      	b.n	8009c7c <__itoa+0x24>

08009c88 <itoa>:
 8009c88:	f7ff bfe6 	b.w	8009c58 <__itoa>

08009c8c <malloc>:
 8009c8c:	4b02      	ldr	r3, [pc, #8]	; (8009c98 <malloc+0xc>)
 8009c8e:	4601      	mov	r1, r0
 8009c90:	6818      	ldr	r0, [r3, #0]
 8009c92:	f000 b823 	b.w	8009cdc <_malloc_r>
 8009c96:	bf00      	nop
 8009c98:	200000c8 	.word	0x200000c8

08009c9c <sbrk_aligned>:
 8009c9c:	b570      	push	{r4, r5, r6, lr}
 8009c9e:	4e0e      	ldr	r6, [pc, #56]	; (8009cd8 <sbrk_aligned+0x3c>)
 8009ca0:	460c      	mov	r4, r1
 8009ca2:	6831      	ldr	r1, [r6, #0]
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	b911      	cbnz	r1, 8009cae <sbrk_aligned+0x12>
 8009ca8:	f000 f8ee 	bl	8009e88 <_sbrk_r>
 8009cac:	6030      	str	r0, [r6, #0]
 8009cae:	4621      	mov	r1, r4
 8009cb0:	4628      	mov	r0, r5
 8009cb2:	f000 f8e9 	bl	8009e88 <_sbrk_r>
 8009cb6:	1c43      	adds	r3, r0, #1
 8009cb8:	d00a      	beq.n	8009cd0 <sbrk_aligned+0x34>
 8009cba:	1cc4      	adds	r4, r0, #3
 8009cbc:	f024 0403 	bic.w	r4, r4, #3
 8009cc0:	42a0      	cmp	r0, r4
 8009cc2:	d007      	beq.n	8009cd4 <sbrk_aligned+0x38>
 8009cc4:	1a21      	subs	r1, r4, r0
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	f000 f8de 	bl	8009e88 <_sbrk_r>
 8009ccc:	3001      	adds	r0, #1
 8009cce:	d101      	bne.n	8009cd4 <sbrk_aligned+0x38>
 8009cd0:	f04f 34ff 	mov.w	r4, #4294967295
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	bd70      	pop	{r4, r5, r6, pc}
 8009cd8:	20000ae4 	.word	0x20000ae4

08009cdc <_malloc_r>:
 8009cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ce0:	1ccd      	adds	r5, r1, #3
 8009ce2:	f025 0503 	bic.w	r5, r5, #3
 8009ce6:	3508      	adds	r5, #8
 8009ce8:	2d0c      	cmp	r5, #12
 8009cea:	bf38      	it	cc
 8009cec:	250c      	movcc	r5, #12
 8009cee:	2d00      	cmp	r5, #0
 8009cf0:	4607      	mov	r7, r0
 8009cf2:	db01      	blt.n	8009cf8 <_malloc_r+0x1c>
 8009cf4:	42a9      	cmp	r1, r5
 8009cf6:	d905      	bls.n	8009d04 <_malloc_r+0x28>
 8009cf8:	230c      	movs	r3, #12
 8009cfa:	603b      	str	r3, [r7, #0]
 8009cfc:	2600      	movs	r6, #0
 8009cfe:	4630      	mov	r0, r6
 8009d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d04:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009dd8 <_malloc_r+0xfc>
 8009d08:	f000 f868 	bl	8009ddc <__malloc_lock>
 8009d0c:	f8d8 3000 	ldr.w	r3, [r8]
 8009d10:	461c      	mov	r4, r3
 8009d12:	bb5c      	cbnz	r4, 8009d6c <_malloc_r+0x90>
 8009d14:	4629      	mov	r1, r5
 8009d16:	4638      	mov	r0, r7
 8009d18:	f7ff ffc0 	bl	8009c9c <sbrk_aligned>
 8009d1c:	1c43      	adds	r3, r0, #1
 8009d1e:	4604      	mov	r4, r0
 8009d20:	d155      	bne.n	8009dce <_malloc_r+0xf2>
 8009d22:	f8d8 4000 	ldr.w	r4, [r8]
 8009d26:	4626      	mov	r6, r4
 8009d28:	2e00      	cmp	r6, #0
 8009d2a:	d145      	bne.n	8009db8 <_malloc_r+0xdc>
 8009d2c:	2c00      	cmp	r4, #0
 8009d2e:	d048      	beq.n	8009dc2 <_malloc_r+0xe6>
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	4631      	mov	r1, r6
 8009d34:	4638      	mov	r0, r7
 8009d36:	eb04 0903 	add.w	r9, r4, r3
 8009d3a:	f000 f8a5 	bl	8009e88 <_sbrk_r>
 8009d3e:	4581      	cmp	r9, r0
 8009d40:	d13f      	bne.n	8009dc2 <_malloc_r+0xe6>
 8009d42:	6821      	ldr	r1, [r4, #0]
 8009d44:	1a6d      	subs	r5, r5, r1
 8009d46:	4629      	mov	r1, r5
 8009d48:	4638      	mov	r0, r7
 8009d4a:	f7ff ffa7 	bl	8009c9c <sbrk_aligned>
 8009d4e:	3001      	adds	r0, #1
 8009d50:	d037      	beq.n	8009dc2 <_malloc_r+0xe6>
 8009d52:	6823      	ldr	r3, [r4, #0]
 8009d54:	442b      	add	r3, r5
 8009d56:	6023      	str	r3, [r4, #0]
 8009d58:	f8d8 3000 	ldr.w	r3, [r8]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d038      	beq.n	8009dd2 <_malloc_r+0xf6>
 8009d60:	685a      	ldr	r2, [r3, #4]
 8009d62:	42a2      	cmp	r2, r4
 8009d64:	d12b      	bne.n	8009dbe <_malloc_r+0xe2>
 8009d66:	2200      	movs	r2, #0
 8009d68:	605a      	str	r2, [r3, #4]
 8009d6a:	e00f      	b.n	8009d8c <_malloc_r+0xb0>
 8009d6c:	6822      	ldr	r2, [r4, #0]
 8009d6e:	1b52      	subs	r2, r2, r5
 8009d70:	d41f      	bmi.n	8009db2 <_malloc_r+0xd6>
 8009d72:	2a0b      	cmp	r2, #11
 8009d74:	d917      	bls.n	8009da6 <_malloc_r+0xca>
 8009d76:	1961      	adds	r1, r4, r5
 8009d78:	42a3      	cmp	r3, r4
 8009d7a:	6025      	str	r5, [r4, #0]
 8009d7c:	bf18      	it	ne
 8009d7e:	6059      	strne	r1, [r3, #4]
 8009d80:	6863      	ldr	r3, [r4, #4]
 8009d82:	bf08      	it	eq
 8009d84:	f8c8 1000 	streq.w	r1, [r8]
 8009d88:	5162      	str	r2, [r4, r5]
 8009d8a:	604b      	str	r3, [r1, #4]
 8009d8c:	4638      	mov	r0, r7
 8009d8e:	f104 060b 	add.w	r6, r4, #11
 8009d92:	f000 f829 	bl	8009de8 <__malloc_unlock>
 8009d96:	f026 0607 	bic.w	r6, r6, #7
 8009d9a:	1d23      	adds	r3, r4, #4
 8009d9c:	1af2      	subs	r2, r6, r3
 8009d9e:	d0ae      	beq.n	8009cfe <_malloc_r+0x22>
 8009da0:	1b9b      	subs	r3, r3, r6
 8009da2:	50a3      	str	r3, [r4, r2]
 8009da4:	e7ab      	b.n	8009cfe <_malloc_r+0x22>
 8009da6:	42a3      	cmp	r3, r4
 8009da8:	6862      	ldr	r2, [r4, #4]
 8009daa:	d1dd      	bne.n	8009d68 <_malloc_r+0x8c>
 8009dac:	f8c8 2000 	str.w	r2, [r8]
 8009db0:	e7ec      	b.n	8009d8c <_malloc_r+0xb0>
 8009db2:	4623      	mov	r3, r4
 8009db4:	6864      	ldr	r4, [r4, #4]
 8009db6:	e7ac      	b.n	8009d12 <_malloc_r+0x36>
 8009db8:	4634      	mov	r4, r6
 8009dba:	6876      	ldr	r6, [r6, #4]
 8009dbc:	e7b4      	b.n	8009d28 <_malloc_r+0x4c>
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	e7cc      	b.n	8009d5c <_malloc_r+0x80>
 8009dc2:	230c      	movs	r3, #12
 8009dc4:	603b      	str	r3, [r7, #0]
 8009dc6:	4638      	mov	r0, r7
 8009dc8:	f000 f80e 	bl	8009de8 <__malloc_unlock>
 8009dcc:	e797      	b.n	8009cfe <_malloc_r+0x22>
 8009dce:	6025      	str	r5, [r4, #0]
 8009dd0:	e7dc      	b.n	8009d8c <_malloc_r+0xb0>
 8009dd2:	605b      	str	r3, [r3, #4]
 8009dd4:	deff      	udf	#255	; 0xff
 8009dd6:	bf00      	nop
 8009dd8:	20000ae0 	.word	0x20000ae0

08009ddc <__malloc_lock>:
 8009ddc:	4801      	ldr	r0, [pc, #4]	; (8009de4 <__malloc_lock+0x8>)
 8009dde:	f000 b88d 	b.w	8009efc <__retarget_lock_acquire_recursive>
 8009de2:	bf00      	nop
 8009de4:	20000c24 	.word	0x20000c24

08009de8 <__malloc_unlock>:
 8009de8:	4801      	ldr	r0, [pc, #4]	; (8009df0 <__malloc_unlock+0x8>)
 8009dea:	f000 b888 	b.w	8009efe <__retarget_lock_release_recursive>
 8009dee:	bf00      	nop
 8009df0:	20000c24 	.word	0x20000c24

08009df4 <__utoa>:
 8009df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009df6:	4c1f      	ldr	r4, [pc, #124]	; (8009e74 <__utoa+0x80>)
 8009df8:	b08b      	sub	sp, #44	; 0x2c
 8009dfa:	4605      	mov	r5, r0
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	466e      	mov	r6, sp
 8009e00:	f104 0c20 	add.w	ip, r4, #32
 8009e04:	6820      	ldr	r0, [r4, #0]
 8009e06:	6861      	ldr	r1, [r4, #4]
 8009e08:	4637      	mov	r7, r6
 8009e0a:	c703      	stmia	r7!, {r0, r1}
 8009e0c:	3408      	adds	r4, #8
 8009e0e:	4564      	cmp	r4, ip
 8009e10:	463e      	mov	r6, r7
 8009e12:	d1f7      	bne.n	8009e04 <__utoa+0x10>
 8009e14:	7921      	ldrb	r1, [r4, #4]
 8009e16:	7139      	strb	r1, [r7, #4]
 8009e18:	1e91      	subs	r1, r2, #2
 8009e1a:	6820      	ldr	r0, [r4, #0]
 8009e1c:	6038      	str	r0, [r7, #0]
 8009e1e:	2922      	cmp	r1, #34	; 0x22
 8009e20:	f04f 0100 	mov.w	r1, #0
 8009e24:	d904      	bls.n	8009e30 <__utoa+0x3c>
 8009e26:	7019      	strb	r1, [r3, #0]
 8009e28:	460b      	mov	r3, r1
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	b00b      	add	sp, #44	; 0x2c
 8009e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e30:	1e58      	subs	r0, r3, #1
 8009e32:	4684      	mov	ip, r0
 8009e34:	fbb5 f7f2 	udiv	r7, r5, r2
 8009e38:	fb02 5617 	mls	r6, r2, r7, r5
 8009e3c:	3628      	adds	r6, #40	; 0x28
 8009e3e:	446e      	add	r6, sp
 8009e40:	460c      	mov	r4, r1
 8009e42:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009e46:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009e4a:	462e      	mov	r6, r5
 8009e4c:	42b2      	cmp	r2, r6
 8009e4e:	f101 0101 	add.w	r1, r1, #1
 8009e52:	463d      	mov	r5, r7
 8009e54:	d9ee      	bls.n	8009e34 <__utoa+0x40>
 8009e56:	2200      	movs	r2, #0
 8009e58:	545a      	strb	r2, [r3, r1]
 8009e5a:	1919      	adds	r1, r3, r4
 8009e5c:	1aa5      	subs	r5, r4, r2
 8009e5e:	42aa      	cmp	r2, r5
 8009e60:	dae3      	bge.n	8009e2a <__utoa+0x36>
 8009e62:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009e66:	780e      	ldrb	r6, [r1, #0]
 8009e68:	7006      	strb	r6, [r0, #0]
 8009e6a:	3201      	adds	r2, #1
 8009e6c:	f801 5901 	strb.w	r5, [r1], #-1
 8009e70:	e7f4      	b.n	8009e5c <__utoa+0x68>
 8009e72:	bf00      	nop
 8009e74:	0800b6d0 	.word	0x0800b6d0

08009e78 <memset>:
 8009e78:	4402      	add	r2, r0
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d100      	bne.n	8009e82 <memset+0xa>
 8009e80:	4770      	bx	lr
 8009e82:	f803 1b01 	strb.w	r1, [r3], #1
 8009e86:	e7f9      	b.n	8009e7c <memset+0x4>

08009e88 <_sbrk_r>:
 8009e88:	b538      	push	{r3, r4, r5, lr}
 8009e8a:	4d06      	ldr	r5, [pc, #24]	; (8009ea4 <_sbrk_r+0x1c>)
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	4604      	mov	r4, r0
 8009e90:	4608      	mov	r0, r1
 8009e92:	602b      	str	r3, [r5, #0]
 8009e94:	f7f9 fbd2 	bl	800363c <_sbrk>
 8009e98:	1c43      	adds	r3, r0, #1
 8009e9a:	d102      	bne.n	8009ea2 <_sbrk_r+0x1a>
 8009e9c:	682b      	ldr	r3, [r5, #0]
 8009e9e:	b103      	cbz	r3, 8009ea2 <_sbrk_r+0x1a>
 8009ea0:	6023      	str	r3, [r4, #0]
 8009ea2:	bd38      	pop	{r3, r4, r5, pc}
 8009ea4:	20000c20 	.word	0x20000c20

08009ea8 <__errno>:
 8009ea8:	4b01      	ldr	r3, [pc, #4]	; (8009eb0 <__errno+0x8>)
 8009eaa:	6818      	ldr	r0, [r3, #0]
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	200000c8 	.word	0x200000c8

08009eb4 <__libc_init_array>:
 8009eb4:	b570      	push	{r4, r5, r6, lr}
 8009eb6:	4d0d      	ldr	r5, [pc, #52]	; (8009eec <__libc_init_array+0x38>)
 8009eb8:	4c0d      	ldr	r4, [pc, #52]	; (8009ef0 <__libc_init_array+0x3c>)
 8009eba:	1b64      	subs	r4, r4, r5
 8009ebc:	10a4      	asrs	r4, r4, #2
 8009ebe:	2600      	movs	r6, #0
 8009ec0:	42a6      	cmp	r6, r4
 8009ec2:	d109      	bne.n	8009ed8 <__libc_init_array+0x24>
 8009ec4:	4d0b      	ldr	r5, [pc, #44]	; (8009ef4 <__libc_init_array+0x40>)
 8009ec6:	4c0c      	ldr	r4, [pc, #48]	; (8009ef8 <__libc_init_array+0x44>)
 8009ec8:	f000 fffa 	bl	800aec0 <_init>
 8009ecc:	1b64      	subs	r4, r4, r5
 8009ece:	10a4      	asrs	r4, r4, #2
 8009ed0:	2600      	movs	r6, #0
 8009ed2:	42a6      	cmp	r6, r4
 8009ed4:	d105      	bne.n	8009ee2 <__libc_init_array+0x2e>
 8009ed6:	bd70      	pop	{r4, r5, r6, pc}
 8009ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009edc:	4798      	blx	r3
 8009ede:	3601      	adds	r6, #1
 8009ee0:	e7ee      	b.n	8009ec0 <__libc_init_array+0xc>
 8009ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ee6:	4798      	blx	r3
 8009ee8:	3601      	adds	r6, #1
 8009eea:	e7f2      	b.n	8009ed2 <__libc_init_array+0x1e>
 8009eec:	0800b730 	.word	0x0800b730
 8009ef0:	0800b730 	.word	0x0800b730
 8009ef4:	0800b730 	.word	0x0800b730
 8009ef8:	0800b734 	.word	0x0800b734

08009efc <__retarget_lock_acquire_recursive>:
 8009efc:	4770      	bx	lr

08009efe <__retarget_lock_release_recursive>:
 8009efe:	4770      	bx	lr

08009f00 <memcpy>:
 8009f00:	440a      	add	r2, r1
 8009f02:	4291      	cmp	r1, r2
 8009f04:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f08:	d100      	bne.n	8009f0c <memcpy+0xc>
 8009f0a:	4770      	bx	lr
 8009f0c:	b510      	push	{r4, lr}
 8009f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f16:	4291      	cmp	r1, r2
 8009f18:	d1f9      	bne.n	8009f0e <memcpy+0xe>
 8009f1a:	bd10      	pop	{r4, pc}

08009f1c <pow>:
 8009f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1e:	ed2d 8b02 	vpush	{d8}
 8009f22:	eeb0 8a40 	vmov.f32	s16, s0
 8009f26:	eef0 8a60 	vmov.f32	s17, s1
 8009f2a:	ec55 4b11 	vmov	r4, r5, d1
 8009f2e:	f000 f90b 	bl	800a148 <__ieee754_pow>
 8009f32:	4622      	mov	r2, r4
 8009f34:	462b      	mov	r3, r5
 8009f36:	4620      	mov	r0, r4
 8009f38:	4629      	mov	r1, r5
 8009f3a:	ec57 6b10 	vmov	r6, r7, d0
 8009f3e:	f7f6 fd99 	bl	8000a74 <__aeabi_dcmpun>
 8009f42:	2800      	cmp	r0, #0
 8009f44:	d13b      	bne.n	8009fbe <pow+0xa2>
 8009f46:	ec51 0b18 	vmov	r0, r1, d8
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	f7f6 fd5f 	bl	8000a10 <__aeabi_dcmpeq>
 8009f52:	b1b8      	cbz	r0, 8009f84 <pow+0x68>
 8009f54:	2200      	movs	r2, #0
 8009f56:	2300      	movs	r3, #0
 8009f58:	4620      	mov	r0, r4
 8009f5a:	4629      	mov	r1, r5
 8009f5c:	f7f6 fd58 	bl	8000a10 <__aeabi_dcmpeq>
 8009f60:	2800      	cmp	r0, #0
 8009f62:	d146      	bne.n	8009ff2 <pow+0xd6>
 8009f64:	ec45 4b10 	vmov	d0, r4, r5
 8009f68:	f000 f848 	bl	8009ffc <finite>
 8009f6c:	b338      	cbz	r0, 8009fbe <pow+0xa2>
 8009f6e:	2200      	movs	r2, #0
 8009f70:	2300      	movs	r3, #0
 8009f72:	4620      	mov	r0, r4
 8009f74:	4629      	mov	r1, r5
 8009f76:	f7f6 fd55 	bl	8000a24 <__aeabi_dcmplt>
 8009f7a:	b300      	cbz	r0, 8009fbe <pow+0xa2>
 8009f7c:	f7ff ff94 	bl	8009ea8 <__errno>
 8009f80:	2322      	movs	r3, #34	; 0x22
 8009f82:	e01b      	b.n	8009fbc <pow+0xa0>
 8009f84:	ec47 6b10 	vmov	d0, r6, r7
 8009f88:	f000 f838 	bl	8009ffc <finite>
 8009f8c:	b9e0      	cbnz	r0, 8009fc8 <pow+0xac>
 8009f8e:	eeb0 0a48 	vmov.f32	s0, s16
 8009f92:	eef0 0a68 	vmov.f32	s1, s17
 8009f96:	f000 f831 	bl	8009ffc <finite>
 8009f9a:	b1a8      	cbz	r0, 8009fc8 <pow+0xac>
 8009f9c:	ec45 4b10 	vmov	d0, r4, r5
 8009fa0:	f000 f82c 	bl	8009ffc <finite>
 8009fa4:	b180      	cbz	r0, 8009fc8 <pow+0xac>
 8009fa6:	4632      	mov	r2, r6
 8009fa8:	463b      	mov	r3, r7
 8009faa:	4630      	mov	r0, r6
 8009fac:	4639      	mov	r1, r7
 8009fae:	f7f6 fd61 	bl	8000a74 <__aeabi_dcmpun>
 8009fb2:	2800      	cmp	r0, #0
 8009fb4:	d0e2      	beq.n	8009f7c <pow+0x60>
 8009fb6:	f7ff ff77 	bl	8009ea8 <__errno>
 8009fba:	2321      	movs	r3, #33	; 0x21
 8009fbc:	6003      	str	r3, [r0, #0]
 8009fbe:	ecbd 8b02 	vpop	{d8}
 8009fc2:	ec47 6b10 	vmov	d0, r6, r7
 8009fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fc8:	2200      	movs	r2, #0
 8009fca:	2300      	movs	r3, #0
 8009fcc:	4630      	mov	r0, r6
 8009fce:	4639      	mov	r1, r7
 8009fd0:	f7f6 fd1e 	bl	8000a10 <__aeabi_dcmpeq>
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	d0f2      	beq.n	8009fbe <pow+0xa2>
 8009fd8:	eeb0 0a48 	vmov.f32	s0, s16
 8009fdc:	eef0 0a68 	vmov.f32	s1, s17
 8009fe0:	f000 f80c 	bl	8009ffc <finite>
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	d0ea      	beq.n	8009fbe <pow+0xa2>
 8009fe8:	ec45 4b10 	vmov	d0, r4, r5
 8009fec:	f000 f806 	bl	8009ffc <finite>
 8009ff0:	e7c3      	b.n	8009f7a <pow+0x5e>
 8009ff2:	4f01      	ldr	r7, [pc, #4]	; (8009ff8 <pow+0xdc>)
 8009ff4:	2600      	movs	r6, #0
 8009ff6:	e7e2      	b.n	8009fbe <pow+0xa2>
 8009ff8:	3ff00000 	.word	0x3ff00000

08009ffc <finite>:
 8009ffc:	b082      	sub	sp, #8
 8009ffe:	ed8d 0b00 	vstr	d0, [sp]
 800a002:	9801      	ldr	r0, [sp, #4]
 800a004:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a008:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a00c:	0fc0      	lsrs	r0, r0, #31
 800a00e:	b002      	add	sp, #8
 800a010:	4770      	bx	lr

0800a012 <fmin>:
 800a012:	b508      	push	{r3, lr}
 800a014:	ed2d 8b04 	vpush	{d8-d9}
 800a018:	eeb0 8a40 	vmov.f32	s16, s0
 800a01c:	eef0 8a60 	vmov.f32	s17, s1
 800a020:	eeb0 9a41 	vmov.f32	s18, s2
 800a024:	eef0 9a61 	vmov.f32	s19, s3
 800a028:	f000 f81a 	bl	800a060 <__fpclassifyd>
 800a02c:	b168      	cbz	r0, 800a04a <fmin+0x38>
 800a02e:	eeb0 0a49 	vmov.f32	s0, s18
 800a032:	eef0 0a69 	vmov.f32	s1, s19
 800a036:	f000 f813 	bl	800a060 <__fpclassifyd>
 800a03a:	b150      	cbz	r0, 800a052 <fmin+0x40>
 800a03c:	ec53 2b19 	vmov	r2, r3, d9
 800a040:	ec51 0b18 	vmov	r0, r1, d8
 800a044:	f7f6 fcee 	bl	8000a24 <__aeabi_dcmplt>
 800a048:	b918      	cbnz	r0, 800a052 <fmin+0x40>
 800a04a:	eeb0 8a49 	vmov.f32	s16, s18
 800a04e:	eef0 8a69 	vmov.f32	s17, s19
 800a052:	eeb0 0a48 	vmov.f32	s0, s16
 800a056:	eef0 0a68 	vmov.f32	s1, s17
 800a05a:	ecbd 8b04 	vpop	{d8-d9}
 800a05e:	bd08      	pop	{r3, pc}

0800a060 <__fpclassifyd>:
 800a060:	ec51 0b10 	vmov	r0, r1, d0
 800a064:	b510      	push	{r4, lr}
 800a066:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800a06a:	460b      	mov	r3, r1
 800a06c:	d019      	beq.n	800a0a2 <__fpclassifyd+0x42>
 800a06e:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 800a072:	490e      	ldr	r1, [pc, #56]	; (800a0ac <__fpclassifyd+0x4c>)
 800a074:	428a      	cmp	r2, r1
 800a076:	d90e      	bls.n	800a096 <__fpclassifyd+0x36>
 800a078:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 800a07c:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 800a080:	428a      	cmp	r2, r1
 800a082:	d908      	bls.n	800a096 <__fpclassifyd+0x36>
 800a084:	4a0a      	ldr	r2, [pc, #40]	; (800a0b0 <__fpclassifyd+0x50>)
 800a086:	4213      	tst	r3, r2
 800a088:	d007      	beq.n	800a09a <__fpclassifyd+0x3a>
 800a08a:	4294      	cmp	r4, r2
 800a08c:	d107      	bne.n	800a09e <__fpclassifyd+0x3e>
 800a08e:	fab0 f080 	clz	r0, r0
 800a092:	0940      	lsrs	r0, r0, #5
 800a094:	bd10      	pop	{r4, pc}
 800a096:	2004      	movs	r0, #4
 800a098:	e7fc      	b.n	800a094 <__fpclassifyd+0x34>
 800a09a:	2003      	movs	r0, #3
 800a09c:	e7fa      	b.n	800a094 <__fpclassifyd+0x34>
 800a09e:	2000      	movs	r0, #0
 800a0a0:	e7f8      	b.n	800a094 <__fpclassifyd+0x34>
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	d1ee      	bne.n	800a084 <__fpclassifyd+0x24>
 800a0a6:	2002      	movs	r0, #2
 800a0a8:	e7f4      	b.n	800a094 <__fpclassifyd+0x34>
 800a0aa:	bf00      	nop
 800a0ac:	7fdfffff 	.word	0x7fdfffff
 800a0b0:	7ff00000 	.word	0x7ff00000

0800a0b4 <round>:
 800a0b4:	ec53 2b10 	vmov	r2, r3, d0
 800a0b8:	b570      	push	{r4, r5, r6, lr}
 800a0ba:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800a0be:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800a0c2:	2813      	cmp	r0, #19
 800a0c4:	ee10 5a10 	vmov	r5, s0
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	dc18      	bgt.n	800a0fe <round+0x4a>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	da09      	bge.n	800a0e4 <round+0x30>
 800a0d0:	3001      	adds	r0, #1
 800a0d2:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800a0d6:	d103      	bne.n	800a0e0 <round+0x2c>
 800a0d8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800a0dc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	e02a      	b.n	800a13a <round+0x86>
 800a0e4:	4c16      	ldr	r4, [pc, #88]	; (800a140 <round+0x8c>)
 800a0e6:	4104      	asrs	r4, r0
 800a0e8:	ea03 0604 	and.w	r6, r3, r4
 800a0ec:	4316      	orrs	r6, r2
 800a0ee:	d011      	beq.n	800a114 <round+0x60>
 800a0f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a0f4:	4103      	asrs	r3, r0
 800a0f6:	440b      	add	r3, r1
 800a0f8:	ea23 0104 	bic.w	r1, r3, r4
 800a0fc:	e7f0      	b.n	800a0e0 <round+0x2c>
 800a0fe:	2833      	cmp	r0, #51	; 0x33
 800a100:	dd0b      	ble.n	800a11a <round+0x66>
 800a102:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a106:	d105      	bne.n	800a114 <round+0x60>
 800a108:	ee10 0a10 	vmov	r0, s0
 800a10c:	f7f6 f862 	bl	80001d4 <__adddf3>
 800a110:	4602      	mov	r2, r0
 800a112:	460b      	mov	r3, r1
 800a114:	ec43 2b10 	vmov	d0, r2, r3
 800a118:	bd70      	pop	{r4, r5, r6, pc}
 800a11a:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800a11e:	f04f 34ff 	mov.w	r4, #4294967295
 800a122:	40f4      	lsrs	r4, r6
 800a124:	4214      	tst	r4, r2
 800a126:	d0f5      	beq.n	800a114 <round+0x60>
 800a128:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800a12c:	2301      	movs	r3, #1
 800a12e:	4083      	lsls	r3, r0
 800a130:	195b      	adds	r3, r3, r5
 800a132:	bf28      	it	cs
 800a134:	3101      	addcs	r1, #1
 800a136:	ea23 0304 	bic.w	r3, r3, r4
 800a13a:	461a      	mov	r2, r3
 800a13c:	460b      	mov	r3, r1
 800a13e:	e7e9      	b.n	800a114 <round+0x60>
 800a140:	000fffff 	.word	0x000fffff
 800a144:	00000000 	.word	0x00000000

0800a148 <__ieee754_pow>:
 800a148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14c:	ed2d 8b06 	vpush	{d8-d10}
 800a150:	b089      	sub	sp, #36	; 0x24
 800a152:	ed8d 1b00 	vstr	d1, [sp]
 800a156:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a15a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a15e:	ea58 0102 	orrs.w	r1, r8, r2
 800a162:	ec57 6b10 	vmov	r6, r7, d0
 800a166:	d115      	bne.n	800a194 <__ieee754_pow+0x4c>
 800a168:	19b3      	adds	r3, r6, r6
 800a16a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a16e:	4152      	adcs	r2, r2
 800a170:	4299      	cmp	r1, r3
 800a172:	4b89      	ldr	r3, [pc, #548]	; (800a398 <__ieee754_pow+0x250>)
 800a174:	4193      	sbcs	r3, r2
 800a176:	f080 84d1 	bcs.w	800ab1c <__ieee754_pow+0x9d4>
 800a17a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a17e:	4630      	mov	r0, r6
 800a180:	4639      	mov	r1, r7
 800a182:	f7f6 f827 	bl	80001d4 <__adddf3>
 800a186:	ec41 0b10 	vmov	d0, r0, r1
 800a18a:	b009      	add	sp, #36	; 0x24
 800a18c:	ecbd 8b06 	vpop	{d8-d10}
 800a190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a194:	4b81      	ldr	r3, [pc, #516]	; (800a39c <__ieee754_pow+0x254>)
 800a196:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a19a:	429c      	cmp	r4, r3
 800a19c:	ee10 aa10 	vmov	sl, s0
 800a1a0:	463d      	mov	r5, r7
 800a1a2:	dc06      	bgt.n	800a1b2 <__ieee754_pow+0x6a>
 800a1a4:	d101      	bne.n	800a1aa <__ieee754_pow+0x62>
 800a1a6:	2e00      	cmp	r6, #0
 800a1a8:	d1e7      	bne.n	800a17a <__ieee754_pow+0x32>
 800a1aa:	4598      	cmp	r8, r3
 800a1ac:	dc01      	bgt.n	800a1b2 <__ieee754_pow+0x6a>
 800a1ae:	d10f      	bne.n	800a1d0 <__ieee754_pow+0x88>
 800a1b0:	b172      	cbz	r2, 800a1d0 <__ieee754_pow+0x88>
 800a1b2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a1b6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a1ba:	ea55 050a 	orrs.w	r5, r5, sl
 800a1be:	d1dc      	bne.n	800a17a <__ieee754_pow+0x32>
 800a1c0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a1c4:	18db      	adds	r3, r3, r3
 800a1c6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a1ca:	4152      	adcs	r2, r2
 800a1cc:	429d      	cmp	r5, r3
 800a1ce:	e7d0      	b.n	800a172 <__ieee754_pow+0x2a>
 800a1d0:	2d00      	cmp	r5, #0
 800a1d2:	da3b      	bge.n	800a24c <__ieee754_pow+0x104>
 800a1d4:	4b72      	ldr	r3, [pc, #456]	; (800a3a0 <__ieee754_pow+0x258>)
 800a1d6:	4598      	cmp	r8, r3
 800a1d8:	dc51      	bgt.n	800a27e <__ieee754_pow+0x136>
 800a1da:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a1de:	4598      	cmp	r8, r3
 800a1e0:	f340 84ab 	ble.w	800ab3a <__ieee754_pow+0x9f2>
 800a1e4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a1e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a1ec:	2b14      	cmp	r3, #20
 800a1ee:	dd0f      	ble.n	800a210 <__ieee754_pow+0xc8>
 800a1f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a1f4:	fa22 f103 	lsr.w	r1, r2, r3
 800a1f8:	fa01 f303 	lsl.w	r3, r1, r3
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	f040 849c 	bne.w	800ab3a <__ieee754_pow+0x9f2>
 800a202:	f001 0101 	and.w	r1, r1, #1
 800a206:	f1c1 0302 	rsb	r3, r1, #2
 800a20a:	9304      	str	r3, [sp, #16]
 800a20c:	b182      	cbz	r2, 800a230 <__ieee754_pow+0xe8>
 800a20e:	e05f      	b.n	800a2d0 <__ieee754_pow+0x188>
 800a210:	2a00      	cmp	r2, #0
 800a212:	d15b      	bne.n	800a2cc <__ieee754_pow+0x184>
 800a214:	f1c3 0314 	rsb	r3, r3, #20
 800a218:	fa48 f103 	asr.w	r1, r8, r3
 800a21c:	fa01 f303 	lsl.w	r3, r1, r3
 800a220:	4543      	cmp	r3, r8
 800a222:	f040 8487 	bne.w	800ab34 <__ieee754_pow+0x9ec>
 800a226:	f001 0101 	and.w	r1, r1, #1
 800a22a:	f1c1 0302 	rsb	r3, r1, #2
 800a22e:	9304      	str	r3, [sp, #16]
 800a230:	4b5c      	ldr	r3, [pc, #368]	; (800a3a4 <__ieee754_pow+0x25c>)
 800a232:	4598      	cmp	r8, r3
 800a234:	d132      	bne.n	800a29c <__ieee754_pow+0x154>
 800a236:	f1b9 0f00 	cmp.w	r9, #0
 800a23a:	f280 8477 	bge.w	800ab2c <__ieee754_pow+0x9e4>
 800a23e:	4959      	ldr	r1, [pc, #356]	; (800a3a4 <__ieee754_pow+0x25c>)
 800a240:	4632      	mov	r2, r6
 800a242:	463b      	mov	r3, r7
 800a244:	2000      	movs	r0, #0
 800a246:	f7f6 faa5 	bl	8000794 <__aeabi_ddiv>
 800a24a:	e79c      	b.n	800a186 <__ieee754_pow+0x3e>
 800a24c:	2300      	movs	r3, #0
 800a24e:	9304      	str	r3, [sp, #16]
 800a250:	2a00      	cmp	r2, #0
 800a252:	d13d      	bne.n	800a2d0 <__ieee754_pow+0x188>
 800a254:	4b51      	ldr	r3, [pc, #324]	; (800a39c <__ieee754_pow+0x254>)
 800a256:	4598      	cmp	r8, r3
 800a258:	d1ea      	bne.n	800a230 <__ieee754_pow+0xe8>
 800a25a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a25e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a262:	ea53 030a 	orrs.w	r3, r3, sl
 800a266:	f000 8459 	beq.w	800ab1c <__ieee754_pow+0x9d4>
 800a26a:	4b4f      	ldr	r3, [pc, #316]	; (800a3a8 <__ieee754_pow+0x260>)
 800a26c:	429c      	cmp	r4, r3
 800a26e:	dd08      	ble.n	800a282 <__ieee754_pow+0x13a>
 800a270:	f1b9 0f00 	cmp.w	r9, #0
 800a274:	f2c0 8456 	blt.w	800ab24 <__ieee754_pow+0x9dc>
 800a278:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a27c:	e783      	b.n	800a186 <__ieee754_pow+0x3e>
 800a27e:	2302      	movs	r3, #2
 800a280:	e7e5      	b.n	800a24e <__ieee754_pow+0x106>
 800a282:	f1b9 0f00 	cmp.w	r9, #0
 800a286:	f04f 0000 	mov.w	r0, #0
 800a28a:	f04f 0100 	mov.w	r1, #0
 800a28e:	f6bf af7a 	bge.w	800a186 <__ieee754_pow+0x3e>
 800a292:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a296:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a29a:	e774      	b.n	800a186 <__ieee754_pow+0x3e>
 800a29c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a2a0:	d106      	bne.n	800a2b0 <__ieee754_pow+0x168>
 800a2a2:	4632      	mov	r2, r6
 800a2a4:	463b      	mov	r3, r7
 800a2a6:	4630      	mov	r0, r6
 800a2a8:	4639      	mov	r1, r7
 800a2aa:	f7f6 f949 	bl	8000540 <__aeabi_dmul>
 800a2ae:	e76a      	b.n	800a186 <__ieee754_pow+0x3e>
 800a2b0:	4b3e      	ldr	r3, [pc, #248]	; (800a3ac <__ieee754_pow+0x264>)
 800a2b2:	4599      	cmp	r9, r3
 800a2b4:	d10c      	bne.n	800a2d0 <__ieee754_pow+0x188>
 800a2b6:	2d00      	cmp	r5, #0
 800a2b8:	db0a      	blt.n	800a2d0 <__ieee754_pow+0x188>
 800a2ba:	ec47 6b10 	vmov	d0, r6, r7
 800a2be:	b009      	add	sp, #36	; 0x24
 800a2c0:	ecbd 8b06 	vpop	{d8-d10}
 800a2c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c8:	f000 bd20 	b.w	800ad0c <__ieee754_sqrt>
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	9304      	str	r3, [sp, #16]
 800a2d0:	ec47 6b10 	vmov	d0, r6, r7
 800a2d4:	f000 fc62 	bl	800ab9c <fabs>
 800a2d8:	ec51 0b10 	vmov	r0, r1, d0
 800a2dc:	f1ba 0f00 	cmp.w	sl, #0
 800a2e0:	d129      	bne.n	800a336 <__ieee754_pow+0x1ee>
 800a2e2:	b124      	cbz	r4, 800a2ee <__ieee754_pow+0x1a6>
 800a2e4:	4b2f      	ldr	r3, [pc, #188]	; (800a3a4 <__ieee754_pow+0x25c>)
 800a2e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d123      	bne.n	800a336 <__ieee754_pow+0x1ee>
 800a2ee:	f1b9 0f00 	cmp.w	r9, #0
 800a2f2:	da05      	bge.n	800a300 <__ieee754_pow+0x1b8>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	492a      	ldr	r1, [pc, #168]	; (800a3a4 <__ieee754_pow+0x25c>)
 800a2fc:	f7f6 fa4a 	bl	8000794 <__aeabi_ddiv>
 800a300:	2d00      	cmp	r5, #0
 800a302:	f6bf af40 	bge.w	800a186 <__ieee754_pow+0x3e>
 800a306:	9b04      	ldr	r3, [sp, #16]
 800a308:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a30c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a310:	431c      	orrs	r4, r3
 800a312:	d108      	bne.n	800a326 <__ieee754_pow+0x1de>
 800a314:	4602      	mov	r2, r0
 800a316:	460b      	mov	r3, r1
 800a318:	4610      	mov	r0, r2
 800a31a:	4619      	mov	r1, r3
 800a31c:	f7f5 ff58 	bl	80001d0 <__aeabi_dsub>
 800a320:	4602      	mov	r2, r0
 800a322:	460b      	mov	r3, r1
 800a324:	e78f      	b.n	800a246 <__ieee754_pow+0xfe>
 800a326:	9b04      	ldr	r3, [sp, #16]
 800a328:	2b01      	cmp	r3, #1
 800a32a:	f47f af2c 	bne.w	800a186 <__ieee754_pow+0x3e>
 800a32e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a332:	4619      	mov	r1, r3
 800a334:	e727      	b.n	800a186 <__ieee754_pow+0x3e>
 800a336:	0feb      	lsrs	r3, r5, #31
 800a338:	3b01      	subs	r3, #1
 800a33a:	9306      	str	r3, [sp, #24]
 800a33c:	9a06      	ldr	r2, [sp, #24]
 800a33e:	9b04      	ldr	r3, [sp, #16]
 800a340:	4313      	orrs	r3, r2
 800a342:	d102      	bne.n	800a34a <__ieee754_pow+0x202>
 800a344:	4632      	mov	r2, r6
 800a346:	463b      	mov	r3, r7
 800a348:	e7e6      	b.n	800a318 <__ieee754_pow+0x1d0>
 800a34a:	4b19      	ldr	r3, [pc, #100]	; (800a3b0 <__ieee754_pow+0x268>)
 800a34c:	4598      	cmp	r8, r3
 800a34e:	f340 80fb 	ble.w	800a548 <__ieee754_pow+0x400>
 800a352:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a356:	4598      	cmp	r8, r3
 800a358:	4b13      	ldr	r3, [pc, #76]	; (800a3a8 <__ieee754_pow+0x260>)
 800a35a:	dd0c      	ble.n	800a376 <__ieee754_pow+0x22e>
 800a35c:	429c      	cmp	r4, r3
 800a35e:	dc0f      	bgt.n	800a380 <__ieee754_pow+0x238>
 800a360:	f1b9 0f00 	cmp.w	r9, #0
 800a364:	da0f      	bge.n	800a386 <__ieee754_pow+0x23e>
 800a366:	2000      	movs	r0, #0
 800a368:	b009      	add	sp, #36	; 0x24
 800a36a:	ecbd 8b06 	vpop	{d8-d10}
 800a36e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a372:	f000 bcc2 	b.w	800acfa <__math_oflow>
 800a376:	429c      	cmp	r4, r3
 800a378:	dbf2      	blt.n	800a360 <__ieee754_pow+0x218>
 800a37a:	4b0a      	ldr	r3, [pc, #40]	; (800a3a4 <__ieee754_pow+0x25c>)
 800a37c:	429c      	cmp	r4, r3
 800a37e:	dd19      	ble.n	800a3b4 <__ieee754_pow+0x26c>
 800a380:	f1b9 0f00 	cmp.w	r9, #0
 800a384:	dcef      	bgt.n	800a366 <__ieee754_pow+0x21e>
 800a386:	2000      	movs	r0, #0
 800a388:	b009      	add	sp, #36	; 0x24
 800a38a:	ecbd 8b06 	vpop	{d8-d10}
 800a38e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a392:	f000 bca9 	b.w	800ace8 <__math_uflow>
 800a396:	bf00      	nop
 800a398:	fff00000 	.word	0xfff00000
 800a39c:	7ff00000 	.word	0x7ff00000
 800a3a0:	433fffff 	.word	0x433fffff
 800a3a4:	3ff00000 	.word	0x3ff00000
 800a3a8:	3fefffff 	.word	0x3fefffff
 800a3ac:	3fe00000 	.word	0x3fe00000
 800a3b0:	41e00000 	.word	0x41e00000
 800a3b4:	4b60      	ldr	r3, [pc, #384]	; (800a538 <__ieee754_pow+0x3f0>)
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f7f5 ff0a 	bl	80001d0 <__aeabi_dsub>
 800a3bc:	a354      	add	r3, pc, #336	; (adr r3, 800a510 <__ieee754_pow+0x3c8>)
 800a3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c2:	4604      	mov	r4, r0
 800a3c4:	460d      	mov	r5, r1
 800a3c6:	f7f6 f8bb 	bl	8000540 <__aeabi_dmul>
 800a3ca:	a353      	add	r3, pc, #332	; (adr r3, 800a518 <__ieee754_pow+0x3d0>)
 800a3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d0:	4606      	mov	r6, r0
 800a3d2:	460f      	mov	r7, r1
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	4629      	mov	r1, r5
 800a3d8:	f7f6 f8b2 	bl	8000540 <__aeabi_dmul>
 800a3dc:	4b57      	ldr	r3, [pc, #348]	; (800a53c <__ieee754_pow+0x3f4>)
 800a3de:	4682      	mov	sl, r0
 800a3e0:	468b      	mov	fp, r1
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	f7f6 f8aa 	bl	8000540 <__aeabi_dmul>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	a14b      	add	r1, pc, #300	; (adr r1, 800a520 <__ieee754_pow+0x3d8>)
 800a3f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3f6:	f7f5 feeb 	bl	80001d0 <__aeabi_dsub>
 800a3fa:	4622      	mov	r2, r4
 800a3fc:	462b      	mov	r3, r5
 800a3fe:	f7f6 f89f 	bl	8000540 <__aeabi_dmul>
 800a402:	4602      	mov	r2, r0
 800a404:	460b      	mov	r3, r1
 800a406:	2000      	movs	r0, #0
 800a408:	494d      	ldr	r1, [pc, #308]	; (800a540 <__ieee754_pow+0x3f8>)
 800a40a:	f7f5 fee1 	bl	80001d0 <__aeabi_dsub>
 800a40e:	4622      	mov	r2, r4
 800a410:	4680      	mov	r8, r0
 800a412:	4689      	mov	r9, r1
 800a414:	462b      	mov	r3, r5
 800a416:	4620      	mov	r0, r4
 800a418:	4629      	mov	r1, r5
 800a41a:	f7f6 f891 	bl	8000540 <__aeabi_dmul>
 800a41e:	4602      	mov	r2, r0
 800a420:	460b      	mov	r3, r1
 800a422:	4640      	mov	r0, r8
 800a424:	4649      	mov	r1, r9
 800a426:	f7f6 f88b 	bl	8000540 <__aeabi_dmul>
 800a42a:	a33f      	add	r3, pc, #252	; (adr r3, 800a528 <__ieee754_pow+0x3e0>)
 800a42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a430:	f7f6 f886 	bl	8000540 <__aeabi_dmul>
 800a434:	4602      	mov	r2, r0
 800a436:	460b      	mov	r3, r1
 800a438:	4650      	mov	r0, sl
 800a43a:	4659      	mov	r1, fp
 800a43c:	f7f5 fec8 	bl	80001d0 <__aeabi_dsub>
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	4680      	mov	r8, r0
 800a446:	4689      	mov	r9, r1
 800a448:	4630      	mov	r0, r6
 800a44a:	4639      	mov	r1, r7
 800a44c:	f7f5 fec2 	bl	80001d4 <__adddf3>
 800a450:	2000      	movs	r0, #0
 800a452:	4632      	mov	r2, r6
 800a454:	463b      	mov	r3, r7
 800a456:	4604      	mov	r4, r0
 800a458:	460d      	mov	r5, r1
 800a45a:	f7f5 feb9 	bl	80001d0 <__aeabi_dsub>
 800a45e:	4602      	mov	r2, r0
 800a460:	460b      	mov	r3, r1
 800a462:	4640      	mov	r0, r8
 800a464:	4649      	mov	r1, r9
 800a466:	f7f5 feb3 	bl	80001d0 <__aeabi_dsub>
 800a46a:	9b04      	ldr	r3, [sp, #16]
 800a46c:	9a06      	ldr	r2, [sp, #24]
 800a46e:	3b01      	subs	r3, #1
 800a470:	4313      	orrs	r3, r2
 800a472:	4682      	mov	sl, r0
 800a474:	468b      	mov	fp, r1
 800a476:	f040 81e7 	bne.w	800a848 <__ieee754_pow+0x700>
 800a47a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a530 <__ieee754_pow+0x3e8>
 800a47e:	eeb0 8a47 	vmov.f32	s16, s14
 800a482:	eef0 8a67 	vmov.f32	s17, s15
 800a486:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a48a:	2600      	movs	r6, #0
 800a48c:	4632      	mov	r2, r6
 800a48e:	463b      	mov	r3, r7
 800a490:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a494:	f7f5 fe9c 	bl	80001d0 <__aeabi_dsub>
 800a498:	4622      	mov	r2, r4
 800a49a:	462b      	mov	r3, r5
 800a49c:	f7f6 f850 	bl	8000540 <__aeabi_dmul>
 800a4a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4a4:	4680      	mov	r8, r0
 800a4a6:	4689      	mov	r9, r1
 800a4a8:	4650      	mov	r0, sl
 800a4aa:	4659      	mov	r1, fp
 800a4ac:	f7f6 f848 	bl	8000540 <__aeabi_dmul>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	4640      	mov	r0, r8
 800a4b6:	4649      	mov	r1, r9
 800a4b8:	f7f5 fe8c 	bl	80001d4 <__adddf3>
 800a4bc:	4632      	mov	r2, r6
 800a4be:	463b      	mov	r3, r7
 800a4c0:	4680      	mov	r8, r0
 800a4c2:	4689      	mov	r9, r1
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	4629      	mov	r1, r5
 800a4c8:	f7f6 f83a 	bl	8000540 <__aeabi_dmul>
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	460d      	mov	r5, r1
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	4649      	mov	r1, r9
 800a4d6:	4640      	mov	r0, r8
 800a4d8:	f7f5 fe7c 	bl	80001d4 <__adddf3>
 800a4dc:	4b19      	ldr	r3, [pc, #100]	; (800a544 <__ieee754_pow+0x3fc>)
 800a4de:	4299      	cmp	r1, r3
 800a4e0:	ec45 4b19 	vmov	d9, r4, r5
 800a4e4:	4606      	mov	r6, r0
 800a4e6:	460f      	mov	r7, r1
 800a4e8:	468b      	mov	fp, r1
 800a4ea:	f340 82f0 	ble.w	800aace <__ieee754_pow+0x986>
 800a4ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a4f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a4f6:	4303      	orrs	r3, r0
 800a4f8:	f000 81e4 	beq.w	800a8c4 <__ieee754_pow+0x77c>
 800a4fc:	ec51 0b18 	vmov	r0, r1, d8
 800a500:	2200      	movs	r2, #0
 800a502:	2300      	movs	r3, #0
 800a504:	f7f6 fa8e 	bl	8000a24 <__aeabi_dcmplt>
 800a508:	3800      	subs	r0, #0
 800a50a:	bf18      	it	ne
 800a50c:	2001      	movne	r0, #1
 800a50e:	e72b      	b.n	800a368 <__ieee754_pow+0x220>
 800a510:	60000000 	.word	0x60000000
 800a514:	3ff71547 	.word	0x3ff71547
 800a518:	f85ddf44 	.word	0xf85ddf44
 800a51c:	3e54ae0b 	.word	0x3e54ae0b
 800a520:	55555555 	.word	0x55555555
 800a524:	3fd55555 	.word	0x3fd55555
 800a528:	652b82fe 	.word	0x652b82fe
 800a52c:	3ff71547 	.word	0x3ff71547
 800a530:	00000000 	.word	0x00000000
 800a534:	bff00000 	.word	0xbff00000
 800a538:	3ff00000 	.word	0x3ff00000
 800a53c:	3fd00000 	.word	0x3fd00000
 800a540:	3fe00000 	.word	0x3fe00000
 800a544:	408fffff 	.word	0x408fffff
 800a548:	4bd5      	ldr	r3, [pc, #852]	; (800a8a0 <__ieee754_pow+0x758>)
 800a54a:	402b      	ands	r3, r5
 800a54c:	2200      	movs	r2, #0
 800a54e:	b92b      	cbnz	r3, 800a55c <__ieee754_pow+0x414>
 800a550:	4bd4      	ldr	r3, [pc, #848]	; (800a8a4 <__ieee754_pow+0x75c>)
 800a552:	f7f5 fff5 	bl	8000540 <__aeabi_dmul>
 800a556:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a55a:	460c      	mov	r4, r1
 800a55c:	1523      	asrs	r3, r4, #20
 800a55e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a562:	4413      	add	r3, r2
 800a564:	9305      	str	r3, [sp, #20]
 800a566:	4bd0      	ldr	r3, [pc, #832]	; (800a8a8 <__ieee754_pow+0x760>)
 800a568:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a56c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a570:	429c      	cmp	r4, r3
 800a572:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a576:	dd08      	ble.n	800a58a <__ieee754_pow+0x442>
 800a578:	4bcc      	ldr	r3, [pc, #816]	; (800a8ac <__ieee754_pow+0x764>)
 800a57a:	429c      	cmp	r4, r3
 800a57c:	f340 8162 	ble.w	800a844 <__ieee754_pow+0x6fc>
 800a580:	9b05      	ldr	r3, [sp, #20]
 800a582:	3301      	adds	r3, #1
 800a584:	9305      	str	r3, [sp, #20]
 800a586:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a58a:	2400      	movs	r4, #0
 800a58c:	00e3      	lsls	r3, r4, #3
 800a58e:	9307      	str	r3, [sp, #28]
 800a590:	4bc7      	ldr	r3, [pc, #796]	; (800a8b0 <__ieee754_pow+0x768>)
 800a592:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a596:	ed93 7b00 	vldr	d7, [r3]
 800a59a:	4629      	mov	r1, r5
 800a59c:	ec53 2b17 	vmov	r2, r3, d7
 800a5a0:	eeb0 9a47 	vmov.f32	s18, s14
 800a5a4:	eef0 9a67 	vmov.f32	s19, s15
 800a5a8:	4682      	mov	sl, r0
 800a5aa:	f7f5 fe11 	bl	80001d0 <__aeabi_dsub>
 800a5ae:	4652      	mov	r2, sl
 800a5b0:	4606      	mov	r6, r0
 800a5b2:	460f      	mov	r7, r1
 800a5b4:	462b      	mov	r3, r5
 800a5b6:	ec51 0b19 	vmov	r0, r1, d9
 800a5ba:	f7f5 fe0b 	bl	80001d4 <__adddf3>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	2000      	movs	r0, #0
 800a5c4:	49bb      	ldr	r1, [pc, #748]	; (800a8b4 <__ieee754_pow+0x76c>)
 800a5c6:	f7f6 f8e5 	bl	8000794 <__aeabi_ddiv>
 800a5ca:	ec41 0b1a 	vmov	d10, r0, r1
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	4639      	mov	r1, r7
 800a5d6:	f7f5 ffb3 	bl	8000540 <__aeabi_dmul>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5e0:	9302      	str	r3, [sp, #8]
 800a5e2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a5e6:	46ab      	mov	fp, r5
 800a5e8:	106d      	asrs	r5, r5, #1
 800a5ea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a5ee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a5f2:	ec41 0b18 	vmov	d8, r0, r1
 800a5f6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	4640      	mov	r0, r8
 800a5fe:	4649      	mov	r1, r9
 800a600:	4614      	mov	r4, r2
 800a602:	461d      	mov	r5, r3
 800a604:	f7f5 ff9c 	bl	8000540 <__aeabi_dmul>
 800a608:	4602      	mov	r2, r0
 800a60a:	460b      	mov	r3, r1
 800a60c:	4630      	mov	r0, r6
 800a60e:	4639      	mov	r1, r7
 800a610:	f7f5 fdde 	bl	80001d0 <__aeabi_dsub>
 800a614:	ec53 2b19 	vmov	r2, r3, d9
 800a618:	4606      	mov	r6, r0
 800a61a:	460f      	mov	r7, r1
 800a61c:	4620      	mov	r0, r4
 800a61e:	4629      	mov	r1, r5
 800a620:	f7f5 fdd6 	bl	80001d0 <__aeabi_dsub>
 800a624:	4602      	mov	r2, r0
 800a626:	460b      	mov	r3, r1
 800a628:	4650      	mov	r0, sl
 800a62a:	4659      	mov	r1, fp
 800a62c:	f7f5 fdd0 	bl	80001d0 <__aeabi_dsub>
 800a630:	4642      	mov	r2, r8
 800a632:	464b      	mov	r3, r9
 800a634:	f7f5 ff84 	bl	8000540 <__aeabi_dmul>
 800a638:	4602      	mov	r2, r0
 800a63a:	460b      	mov	r3, r1
 800a63c:	4630      	mov	r0, r6
 800a63e:	4639      	mov	r1, r7
 800a640:	f7f5 fdc6 	bl	80001d0 <__aeabi_dsub>
 800a644:	ec53 2b1a 	vmov	r2, r3, d10
 800a648:	f7f5 ff7a 	bl	8000540 <__aeabi_dmul>
 800a64c:	ec53 2b18 	vmov	r2, r3, d8
 800a650:	ec41 0b19 	vmov	d9, r0, r1
 800a654:	ec51 0b18 	vmov	r0, r1, d8
 800a658:	f7f5 ff72 	bl	8000540 <__aeabi_dmul>
 800a65c:	a37c      	add	r3, pc, #496	; (adr r3, 800a850 <__ieee754_pow+0x708>)
 800a65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a662:	4604      	mov	r4, r0
 800a664:	460d      	mov	r5, r1
 800a666:	f7f5 ff6b 	bl	8000540 <__aeabi_dmul>
 800a66a:	a37b      	add	r3, pc, #492	; (adr r3, 800a858 <__ieee754_pow+0x710>)
 800a66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a670:	f7f5 fdb0 	bl	80001d4 <__adddf3>
 800a674:	4622      	mov	r2, r4
 800a676:	462b      	mov	r3, r5
 800a678:	f7f5 ff62 	bl	8000540 <__aeabi_dmul>
 800a67c:	a378      	add	r3, pc, #480	; (adr r3, 800a860 <__ieee754_pow+0x718>)
 800a67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a682:	f7f5 fda7 	bl	80001d4 <__adddf3>
 800a686:	4622      	mov	r2, r4
 800a688:	462b      	mov	r3, r5
 800a68a:	f7f5 ff59 	bl	8000540 <__aeabi_dmul>
 800a68e:	a376      	add	r3, pc, #472	; (adr r3, 800a868 <__ieee754_pow+0x720>)
 800a690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a694:	f7f5 fd9e 	bl	80001d4 <__adddf3>
 800a698:	4622      	mov	r2, r4
 800a69a:	462b      	mov	r3, r5
 800a69c:	f7f5 ff50 	bl	8000540 <__aeabi_dmul>
 800a6a0:	a373      	add	r3, pc, #460	; (adr r3, 800a870 <__ieee754_pow+0x728>)
 800a6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a6:	f7f5 fd95 	bl	80001d4 <__adddf3>
 800a6aa:	4622      	mov	r2, r4
 800a6ac:	462b      	mov	r3, r5
 800a6ae:	f7f5 ff47 	bl	8000540 <__aeabi_dmul>
 800a6b2:	a371      	add	r3, pc, #452	; (adr r3, 800a878 <__ieee754_pow+0x730>)
 800a6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b8:	f7f5 fd8c 	bl	80001d4 <__adddf3>
 800a6bc:	4622      	mov	r2, r4
 800a6be:	4606      	mov	r6, r0
 800a6c0:	460f      	mov	r7, r1
 800a6c2:	462b      	mov	r3, r5
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	4629      	mov	r1, r5
 800a6c8:	f7f5 ff3a 	bl	8000540 <__aeabi_dmul>
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	4639      	mov	r1, r7
 800a6d4:	f7f5 ff34 	bl	8000540 <__aeabi_dmul>
 800a6d8:	4642      	mov	r2, r8
 800a6da:	4604      	mov	r4, r0
 800a6dc:	460d      	mov	r5, r1
 800a6de:	464b      	mov	r3, r9
 800a6e0:	ec51 0b18 	vmov	r0, r1, d8
 800a6e4:	f7f5 fd76 	bl	80001d4 <__adddf3>
 800a6e8:	ec53 2b19 	vmov	r2, r3, d9
 800a6ec:	f7f5 ff28 	bl	8000540 <__aeabi_dmul>
 800a6f0:	4622      	mov	r2, r4
 800a6f2:	462b      	mov	r3, r5
 800a6f4:	f7f5 fd6e 	bl	80001d4 <__adddf3>
 800a6f8:	4642      	mov	r2, r8
 800a6fa:	4682      	mov	sl, r0
 800a6fc:	468b      	mov	fp, r1
 800a6fe:	464b      	mov	r3, r9
 800a700:	4640      	mov	r0, r8
 800a702:	4649      	mov	r1, r9
 800a704:	f7f5 ff1c 	bl	8000540 <__aeabi_dmul>
 800a708:	4b6b      	ldr	r3, [pc, #428]	; (800a8b8 <__ieee754_pow+0x770>)
 800a70a:	2200      	movs	r2, #0
 800a70c:	4606      	mov	r6, r0
 800a70e:	460f      	mov	r7, r1
 800a710:	f7f5 fd60 	bl	80001d4 <__adddf3>
 800a714:	4652      	mov	r2, sl
 800a716:	465b      	mov	r3, fp
 800a718:	f7f5 fd5c 	bl	80001d4 <__adddf3>
 800a71c:	2000      	movs	r0, #0
 800a71e:	4604      	mov	r4, r0
 800a720:	460d      	mov	r5, r1
 800a722:	4602      	mov	r2, r0
 800a724:	460b      	mov	r3, r1
 800a726:	4640      	mov	r0, r8
 800a728:	4649      	mov	r1, r9
 800a72a:	f7f5 ff09 	bl	8000540 <__aeabi_dmul>
 800a72e:	4b62      	ldr	r3, [pc, #392]	; (800a8b8 <__ieee754_pow+0x770>)
 800a730:	4680      	mov	r8, r0
 800a732:	4689      	mov	r9, r1
 800a734:	2200      	movs	r2, #0
 800a736:	4620      	mov	r0, r4
 800a738:	4629      	mov	r1, r5
 800a73a:	f7f5 fd49 	bl	80001d0 <__aeabi_dsub>
 800a73e:	4632      	mov	r2, r6
 800a740:	463b      	mov	r3, r7
 800a742:	f7f5 fd45 	bl	80001d0 <__aeabi_dsub>
 800a746:	4602      	mov	r2, r0
 800a748:	460b      	mov	r3, r1
 800a74a:	4650      	mov	r0, sl
 800a74c:	4659      	mov	r1, fp
 800a74e:	f7f5 fd3f 	bl	80001d0 <__aeabi_dsub>
 800a752:	ec53 2b18 	vmov	r2, r3, d8
 800a756:	f7f5 fef3 	bl	8000540 <__aeabi_dmul>
 800a75a:	4622      	mov	r2, r4
 800a75c:	4606      	mov	r6, r0
 800a75e:	460f      	mov	r7, r1
 800a760:	462b      	mov	r3, r5
 800a762:	ec51 0b19 	vmov	r0, r1, d9
 800a766:	f7f5 feeb 	bl	8000540 <__aeabi_dmul>
 800a76a:	4602      	mov	r2, r0
 800a76c:	460b      	mov	r3, r1
 800a76e:	4630      	mov	r0, r6
 800a770:	4639      	mov	r1, r7
 800a772:	f7f5 fd2f 	bl	80001d4 <__adddf3>
 800a776:	4606      	mov	r6, r0
 800a778:	460f      	mov	r7, r1
 800a77a:	4602      	mov	r2, r0
 800a77c:	460b      	mov	r3, r1
 800a77e:	4640      	mov	r0, r8
 800a780:	4649      	mov	r1, r9
 800a782:	f7f5 fd27 	bl	80001d4 <__adddf3>
 800a786:	a33e      	add	r3, pc, #248	; (adr r3, 800a880 <__ieee754_pow+0x738>)
 800a788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78c:	2000      	movs	r0, #0
 800a78e:	4604      	mov	r4, r0
 800a790:	460d      	mov	r5, r1
 800a792:	f7f5 fed5 	bl	8000540 <__aeabi_dmul>
 800a796:	4642      	mov	r2, r8
 800a798:	ec41 0b18 	vmov	d8, r0, r1
 800a79c:	464b      	mov	r3, r9
 800a79e:	4620      	mov	r0, r4
 800a7a0:	4629      	mov	r1, r5
 800a7a2:	f7f5 fd15 	bl	80001d0 <__aeabi_dsub>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	4639      	mov	r1, r7
 800a7ae:	f7f5 fd0f 	bl	80001d0 <__aeabi_dsub>
 800a7b2:	a335      	add	r3, pc, #212	; (adr r3, 800a888 <__ieee754_pow+0x740>)
 800a7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b8:	f7f5 fec2 	bl	8000540 <__aeabi_dmul>
 800a7bc:	a334      	add	r3, pc, #208	; (adr r3, 800a890 <__ieee754_pow+0x748>)
 800a7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c2:	4606      	mov	r6, r0
 800a7c4:	460f      	mov	r7, r1
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	4629      	mov	r1, r5
 800a7ca:	f7f5 feb9 	bl	8000540 <__aeabi_dmul>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	4639      	mov	r1, r7
 800a7d6:	f7f5 fcfd 	bl	80001d4 <__adddf3>
 800a7da:	9a07      	ldr	r2, [sp, #28]
 800a7dc:	4b37      	ldr	r3, [pc, #220]	; (800a8bc <__ieee754_pow+0x774>)
 800a7de:	4413      	add	r3, r2
 800a7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e4:	f7f5 fcf6 	bl	80001d4 <__adddf3>
 800a7e8:	4682      	mov	sl, r0
 800a7ea:	9805      	ldr	r0, [sp, #20]
 800a7ec:	468b      	mov	fp, r1
 800a7ee:	f7f5 fe3d 	bl	800046c <__aeabi_i2d>
 800a7f2:	9a07      	ldr	r2, [sp, #28]
 800a7f4:	4b32      	ldr	r3, [pc, #200]	; (800a8c0 <__ieee754_pow+0x778>)
 800a7f6:	4413      	add	r3, r2
 800a7f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a7fc:	4606      	mov	r6, r0
 800a7fe:	460f      	mov	r7, r1
 800a800:	4652      	mov	r2, sl
 800a802:	465b      	mov	r3, fp
 800a804:	ec51 0b18 	vmov	r0, r1, d8
 800a808:	f7f5 fce4 	bl	80001d4 <__adddf3>
 800a80c:	4642      	mov	r2, r8
 800a80e:	464b      	mov	r3, r9
 800a810:	f7f5 fce0 	bl	80001d4 <__adddf3>
 800a814:	4632      	mov	r2, r6
 800a816:	463b      	mov	r3, r7
 800a818:	f7f5 fcdc 	bl	80001d4 <__adddf3>
 800a81c:	2000      	movs	r0, #0
 800a81e:	4632      	mov	r2, r6
 800a820:	463b      	mov	r3, r7
 800a822:	4604      	mov	r4, r0
 800a824:	460d      	mov	r5, r1
 800a826:	f7f5 fcd3 	bl	80001d0 <__aeabi_dsub>
 800a82a:	4642      	mov	r2, r8
 800a82c:	464b      	mov	r3, r9
 800a82e:	f7f5 fccf 	bl	80001d0 <__aeabi_dsub>
 800a832:	ec53 2b18 	vmov	r2, r3, d8
 800a836:	f7f5 fccb 	bl	80001d0 <__aeabi_dsub>
 800a83a:	4602      	mov	r2, r0
 800a83c:	460b      	mov	r3, r1
 800a83e:	4650      	mov	r0, sl
 800a840:	4659      	mov	r1, fp
 800a842:	e610      	b.n	800a466 <__ieee754_pow+0x31e>
 800a844:	2401      	movs	r4, #1
 800a846:	e6a1      	b.n	800a58c <__ieee754_pow+0x444>
 800a848:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a898 <__ieee754_pow+0x750>
 800a84c:	e617      	b.n	800a47e <__ieee754_pow+0x336>
 800a84e:	bf00      	nop
 800a850:	4a454eef 	.word	0x4a454eef
 800a854:	3fca7e28 	.word	0x3fca7e28
 800a858:	93c9db65 	.word	0x93c9db65
 800a85c:	3fcd864a 	.word	0x3fcd864a
 800a860:	a91d4101 	.word	0xa91d4101
 800a864:	3fd17460 	.word	0x3fd17460
 800a868:	518f264d 	.word	0x518f264d
 800a86c:	3fd55555 	.word	0x3fd55555
 800a870:	db6fabff 	.word	0xdb6fabff
 800a874:	3fdb6db6 	.word	0x3fdb6db6
 800a878:	33333303 	.word	0x33333303
 800a87c:	3fe33333 	.word	0x3fe33333
 800a880:	e0000000 	.word	0xe0000000
 800a884:	3feec709 	.word	0x3feec709
 800a888:	dc3a03fd 	.word	0xdc3a03fd
 800a88c:	3feec709 	.word	0x3feec709
 800a890:	145b01f5 	.word	0x145b01f5
 800a894:	be3e2fe0 	.word	0xbe3e2fe0
 800a898:	00000000 	.word	0x00000000
 800a89c:	3ff00000 	.word	0x3ff00000
 800a8a0:	7ff00000 	.word	0x7ff00000
 800a8a4:	43400000 	.word	0x43400000
 800a8a8:	0003988e 	.word	0x0003988e
 800a8ac:	000bb679 	.word	0x000bb679
 800a8b0:	0800b6f8 	.word	0x0800b6f8
 800a8b4:	3ff00000 	.word	0x3ff00000
 800a8b8:	40080000 	.word	0x40080000
 800a8bc:	0800b718 	.word	0x0800b718
 800a8c0:	0800b708 	.word	0x0800b708
 800a8c4:	a3b3      	add	r3, pc, #716	; (adr r3, 800ab94 <__ieee754_pow+0xa4c>)
 800a8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ca:	4640      	mov	r0, r8
 800a8cc:	4649      	mov	r1, r9
 800a8ce:	f7f5 fc81 	bl	80001d4 <__adddf3>
 800a8d2:	4622      	mov	r2, r4
 800a8d4:	ec41 0b1a 	vmov	d10, r0, r1
 800a8d8:	462b      	mov	r3, r5
 800a8da:	4630      	mov	r0, r6
 800a8dc:	4639      	mov	r1, r7
 800a8de:	f7f5 fc77 	bl	80001d0 <__aeabi_dsub>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	ec51 0b1a 	vmov	r0, r1, d10
 800a8ea:	f7f6 f8b9 	bl	8000a60 <__aeabi_dcmpgt>
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	f47f ae04 	bne.w	800a4fc <__ieee754_pow+0x3b4>
 800a8f4:	4aa2      	ldr	r2, [pc, #648]	; (800ab80 <__ieee754_pow+0xa38>)
 800a8f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	f340 8107 	ble.w	800ab0e <__ieee754_pow+0x9c6>
 800a900:	151b      	asrs	r3, r3, #20
 800a902:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a906:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a90a:	fa4a fa03 	asr.w	sl, sl, r3
 800a90e:	44da      	add	sl, fp
 800a910:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a914:	489b      	ldr	r0, [pc, #620]	; (800ab84 <__ieee754_pow+0xa3c>)
 800a916:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a91a:	4108      	asrs	r0, r1
 800a91c:	ea00 030a 	and.w	r3, r0, sl
 800a920:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a924:	f1c1 0114 	rsb	r1, r1, #20
 800a928:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a92c:	fa4a fa01 	asr.w	sl, sl, r1
 800a930:	f1bb 0f00 	cmp.w	fp, #0
 800a934:	f04f 0200 	mov.w	r2, #0
 800a938:	4620      	mov	r0, r4
 800a93a:	4629      	mov	r1, r5
 800a93c:	bfb8      	it	lt
 800a93e:	f1ca 0a00 	rsblt	sl, sl, #0
 800a942:	f7f5 fc45 	bl	80001d0 <__aeabi_dsub>
 800a946:	ec41 0b19 	vmov	d9, r0, r1
 800a94a:	4642      	mov	r2, r8
 800a94c:	464b      	mov	r3, r9
 800a94e:	ec51 0b19 	vmov	r0, r1, d9
 800a952:	f7f5 fc3f 	bl	80001d4 <__adddf3>
 800a956:	a37a      	add	r3, pc, #488	; (adr r3, 800ab40 <__ieee754_pow+0x9f8>)
 800a958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95c:	2000      	movs	r0, #0
 800a95e:	4604      	mov	r4, r0
 800a960:	460d      	mov	r5, r1
 800a962:	f7f5 fded 	bl	8000540 <__aeabi_dmul>
 800a966:	ec53 2b19 	vmov	r2, r3, d9
 800a96a:	4606      	mov	r6, r0
 800a96c:	460f      	mov	r7, r1
 800a96e:	4620      	mov	r0, r4
 800a970:	4629      	mov	r1, r5
 800a972:	f7f5 fc2d 	bl	80001d0 <__aeabi_dsub>
 800a976:	4602      	mov	r2, r0
 800a978:	460b      	mov	r3, r1
 800a97a:	4640      	mov	r0, r8
 800a97c:	4649      	mov	r1, r9
 800a97e:	f7f5 fc27 	bl	80001d0 <__aeabi_dsub>
 800a982:	a371      	add	r3, pc, #452	; (adr r3, 800ab48 <__ieee754_pow+0xa00>)
 800a984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a988:	f7f5 fdda 	bl	8000540 <__aeabi_dmul>
 800a98c:	a370      	add	r3, pc, #448	; (adr r3, 800ab50 <__ieee754_pow+0xa08>)
 800a98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a992:	4680      	mov	r8, r0
 800a994:	4689      	mov	r9, r1
 800a996:	4620      	mov	r0, r4
 800a998:	4629      	mov	r1, r5
 800a99a:	f7f5 fdd1 	bl	8000540 <__aeabi_dmul>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	4640      	mov	r0, r8
 800a9a4:	4649      	mov	r1, r9
 800a9a6:	f7f5 fc15 	bl	80001d4 <__adddf3>
 800a9aa:	4604      	mov	r4, r0
 800a9ac:	460d      	mov	r5, r1
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	4639      	mov	r1, r7
 800a9b6:	f7f5 fc0d 	bl	80001d4 <__adddf3>
 800a9ba:	4632      	mov	r2, r6
 800a9bc:	463b      	mov	r3, r7
 800a9be:	4680      	mov	r8, r0
 800a9c0:	4689      	mov	r9, r1
 800a9c2:	f7f5 fc05 	bl	80001d0 <__aeabi_dsub>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	4629      	mov	r1, r5
 800a9ce:	f7f5 fbff 	bl	80001d0 <__aeabi_dsub>
 800a9d2:	4642      	mov	r2, r8
 800a9d4:	4606      	mov	r6, r0
 800a9d6:	460f      	mov	r7, r1
 800a9d8:	464b      	mov	r3, r9
 800a9da:	4640      	mov	r0, r8
 800a9dc:	4649      	mov	r1, r9
 800a9de:	f7f5 fdaf 	bl	8000540 <__aeabi_dmul>
 800a9e2:	a35d      	add	r3, pc, #372	; (adr r3, 800ab58 <__ieee754_pow+0xa10>)
 800a9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e8:	4604      	mov	r4, r0
 800a9ea:	460d      	mov	r5, r1
 800a9ec:	f7f5 fda8 	bl	8000540 <__aeabi_dmul>
 800a9f0:	a35b      	add	r3, pc, #364	; (adr r3, 800ab60 <__ieee754_pow+0xa18>)
 800a9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f6:	f7f5 fbeb 	bl	80001d0 <__aeabi_dsub>
 800a9fa:	4622      	mov	r2, r4
 800a9fc:	462b      	mov	r3, r5
 800a9fe:	f7f5 fd9f 	bl	8000540 <__aeabi_dmul>
 800aa02:	a359      	add	r3, pc, #356	; (adr r3, 800ab68 <__ieee754_pow+0xa20>)
 800aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa08:	f7f5 fbe4 	bl	80001d4 <__adddf3>
 800aa0c:	4622      	mov	r2, r4
 800aa0e:	462b      	mov	r3, r5
 800aa10:	f7f5 fd96 	bl	8000540 <__aeabi_dmul>
 800aa14:	a356      	add	r3, pc, #344	; (adr r3, 800ab70 <__ieee754_pow+0xa28>)
 800aa16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1a:	f7f5 fbd9 	bl	80001d0 <__aeabi_dsub>
 800aa1e:	4622      	mov	r2, r4
 800aa20:	462b      	mov	r3, r5
 800aa22:	f7f5 fd8d 	bl	8000540 <__aeabi_dmul>
 800aa26:	a354      	add	r3, pc, #336	; (adr r3, 800ab78 <__ieee754_pow+0xa30>)
 800aa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2c:	f7f5 fbd2 	bl	80001d4 <__adddf3>
 800aa30:	4622      	mov	r2, r4
 800aa32:	462b      	mov	r3, r5
 800aa34:	f7f5 fd84 	bl	8000540 <__aeabi_dmul>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	4640      	mov	r0, r8
 800aa3e:	4649      	mov	r1, r9
 800aa40:	f7f5 fbc6 	bl	80001d0 <__aeabi_dsub>
 800aa44:	4604      	mov	r4, r0
 800aa46:	460d      	mov	r5, r1
 800aa48:	4602      	mov	r2, r0
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	4640      	mov	r0, r8
 800aa4e:	4649      	mov	r1, r9
 800aa50:	f7f5 fd76 	bl	8000540 <__aeabi_dmul>
 800aa54:	2200      	movs	r2, #0
 800aa56:	ec41 0b19 	vmov	d9, r0, r1
 800aa5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aa5e:	4620      	mov	r0, r4
 800aa60:	4629      	mov	r1, r5
 800aa62:	f7f5 fbb5 	bl	80001d0 <__aeabi_dsub>
 800aa66:	4602      	mov	r2, r0
 800aa68:	460b      	mov	r3, r1
 800aa6a:	ec51 0b19 	vmov	r0, r1, d9
 800aa6e:	f7f5 fe91 	bl	8000794 <__aeabi_ddiv>
 800aa72:	4632      	mov	r2, r6
 800aa74:	4604      	mov	r4, r0
 800aa76:	460d      	mov	r5, r1
 800aa78:	463b      	mov	r3, r7
 800aa7a:	4640      	mov	r0, r8
 800aa7c:	4649      	mov	r1, r9
 800aa7e:	f7f5 fd5f 	bl	8000540 <__aeabi_dmul>
 800aa82:	4632      	mov	r2, r6
 800aa84:	463b      	mov	r3, r7
 800aa86:	f7f5 fba5 	bl	80001d4 <__adddf3>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	4620      	mov	r0, r4
 800aa90:	4629      	mov	r1, r5
 800aa92:	f7f5 fb9d 	bl	80001d0 <__aeabi_dsub>
 800aa96:	4642      	mov	r2, r8
 800aa98:	464b      	mov	r3, r9
 800aa9a:	f7f5 fb99 	bl	80001d0 <__aeabi_dsub>
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	4939      	ldr	r1, [pc, #228]	; (800ab88 <__ieee754_pow+0xa40>)
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	f7f5 fb93 	bl	80001d0 <__aeabi_dsub>
 800aaaa:	ec41 0b10 	vmov	d0, r0, r1
 800aaae:	ee10 3a90 	vmov	r3, s1
 800aab2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800aab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aaba:	da2b      	bge.n	800ab14 <__ieee754_pow+0x9cc>
 800aabc:	4650      	mov	r0, sl
 800aabe:	f000 f877 	bl	800abb0 <scalbn>
 800aac2:	ec51 0b10 	vmov	r0, r1, d0
 800aac6:	ec53 2b18 	vmov	r2, r3, d8
 800aaca:	f7ff bbee 	b.w	800a2aa <__ieee754_pow+0x162>
 800aace:	4b2f      	ldr	r3, [pc, #188]	; (800ab8c <__ieee754_pow+0xa44>)
 800aad0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800aad4:	429e      	cmp	r6, r3
 800aad6:	f77f af0d 	ble.w	800a8f4 <__ieee754_pow+0x7ac>
 800aada:	4b2d      	ldr	r3, [pc, #180]	; (800ab90 <__ieee754_pow+0xa48>)
 800aadc:	440b      	add	r3, r1
 800aade:	4303      	orrs	r3, r0
 800aae0:	d009      	beq.n	800aaf6 <__ieee754_pow+0x9ae>
 800aae2:	ec51 0b18 	vmov	r0, r1, d8
 800aae6:	2200      	movs	r2, #0
 800aae8:	2300      	movs	r3, #0
 800aaea:	f7f5 ff9b 	bl	8000a24 <__aeabi_dcmplt>
 800aaee:	3800      	subs	r0, #0
 800aaf0:	bf18      	it	ne
 800aaf2:	2001      	movne	r0, #1
 800aaf4:	e448      	b.n	800a388 <__ieee754_pow+0x240>
 800aaf6:	4622      	mov	r2, r4
 800aaf8:	462b      	mov	r3, r5
 800aafa:	f7f5 fb69 	bl	80001d0 <__aeabi_dsub>
 800aafe:	4642      	mov	r2, r8
 800ab00:	464b      	mov	r3, r9
 800ab02:	f7f5 ffa3 	bl	8000a4c <__aeabi_dcmpge>
 800ab06:	2800      	cmp	r0, #0
 800ab08:	f43f aef4 	beq.w	800a8f4 <__ieee754_pow+0x7ac>
 800ab0c:	e7e9      	b.n	800aae2 <__ieee754_pow+0x99a>
 800ab0e:	f04f 0a00 	mov.w	sl, #0
 800ab12:	e71a      	b.n	800a94a <__ieee754_pow+0x802>
 800ab14:	ec51 0b10 	vmov	r0, r1, d0
 800ab18:	4619      	mov	r1, r3
 800ab1a:	e7d4      	b.n	800aac6 <__ieee754_pow+0x97e>
 800ab1c:	491a      	ldr	r1, [pc, #104]	; (800ab88 <__ieee754_pow+0xa40>)
 800ab1e:	2000      	movs	r0, #0
 800ab20:	f7ff bb31 	b.w	800a186 <__ieee754_pow+0x3e>
 800ab24:	2000      	movs	r0, #0
 800ab26:	2100      	movs	r1, #0
 800ab28:	f7ff bb2d 	b.w	800a186 <__ieee754_pow+0x3e>
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	4639      	mov	r1, r7
 800ab30:	f7ff bb29 	b.w	800a186 <__ieee754_pow+0x3e>
 800ab34:	9204      	str	r2, [sp, #16]
 800ab36:	f7ff bb7b 	b.w	800a230 <__ieee754_pow+0xe8>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	f7ff bb65 	b.w	800a20a <__ieee754_pow+0xc2>
 800ab40:	00000000 	.word	0x00000000
 800ab44:	3fe62e43 	.word	0x3fe62e43
 800ab48:	fefa39ef 	.word	0xfefa39ef
 800ab4c:	3fe62e42 	.word	0x3fe62e42
 800ab50:	0ca86c39 	.word	0x0ca86c39
 800ab54:	be205c61 	.word	0xbe205c61
 800ab58:	72bea4d0 	.word	0x72bea4d0
 800ab5c:	3e663769 	.word	0x3e663769
 800ab60:	c5d26bf1 	.word	0xc5d26bf1
 800ab64:	3ebbbd41 	.word	0x3ebbbd41
 800ab68:	af25de2c 	.word	0xaf25de2c
 800ab6c:	3f11566a 	.word	0x3f11566a
 800ab70:	16bebd93 	.word	0x16bebd93
 800ab74:	3f66c16c 	.word	0x3f66c16c
 800ab78:	5555553e 	.word	0x5555553e
 800ab7c:	3fc55555 	.word	0x3fc55555
 800ab80:	3fe00000 	.word	0x3fe00000
 800ab84:	fff00000 	.word	0xfff00000
 800ab88:	3ff00000 	.word	0x3ff00000
 800ab8c:	4090cbff 	.word	0x4090cbff
 800ab90:	3f6f3400 	.word	0x3f6f3400
 800ab94:	652b82fe 	.word	0x652b82fe
 800ab98:	3c971547 	.word	0x3c971547

0800ab9c <fabs>:
 800ab9c:	ec51 0b10 	vmov	r0, r1, d0
 800aba0:	ee10 2a10 	vmov	r2, s0
 800aba4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aba8:	ec43 2b10 	vmov	d0, r2, r3
 800abac:	4770      	bx	lr
	...

0800abb0 <scalbn>:
 800abb0:	b570      	push	{r4, r5, r6, lr}
 800abb2:	ec55 4b10 	vmov	r4, r5, d0
 800abb6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800abba:	4606      	mov	r6, r0
 800abbc:	462b      	mov	r3, r5
 800abbe:	b999      	cbnz	r1, 800abe8 <scalbn+0x38>
 800abc0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800abc4:	4323      	orrs	r3, r4
 800abc6:	d03f      	beq.n	800ac48 <scalbn+0x98>
 800abc8:	4b35      	ldr	r3, [pc, #212]	; (800aca0 <scalbn+0xf0>)
 800abca:	4629      	mov	r1, r5
 800abcc:	ee10 0a10 	vmov	r0, s0
 800abd0:	2200      	movs	r2, #0
 800abd2:	f7f5 fcb5 	bl	8000540 <__aeabi_dmul>
 800abd6:	4b33      	ldr	r3, [pc, #204]	; (800aca4 <scalbn+0xf4>)
 800abd8:	429e      	cmp	r6, r3
 800abda:	4604      	mov	r4, r0
 800abdc:	460d      	mov	r5, r1
 800abde:	da10      	bge.n	800ac02 <scalbn+0x52>
 800abe0:	a327      	add	r3, pc, #156	; (adr r3, 800ac80 <scalbn+0xd0>)
 800abe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe6:	e01f      	b.n	800ac28 <scalbn+0x78>
 800abe8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800abec:	4291      	cmp	r1, r2
 800abee:	d10c      	bne.n	800ac0a <scalbn+0x5a>
 800abf0:	ee10 2a10 	vmov	r2, s0
 800abf4:	4620      	mov	r0, r4
 800abf6:	4629      	mov	r1, r5
 800abf8:	f7f5 faec 	bl	80001d4 <__adddf3>
 800abfc:	4604      	mov	r4, r0
 800abfe:	460d      	mov	r5, r1
 800ac00:	e022      	b.n	800ac48 <scalbn+0x98>
 800ac02:	460b      	mov	r3, r1
 800ac04:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ac08:	3936      	subs	r1, #54	; 0x36
 800ac0a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ac0e:	4296      	cmp	r6, r2
 800ac10:	dd0d      	ble.n	800ac2e <scalbn+0x7e>
 800ac12:	2d00      	cmp	r5, #0
 800ac14:	a11c      	add	r1, pc, #112	; (adr r1, 800ac88 <scalbn+0xd8>)
 800ac16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac1a:	da02      	bge.n	800ac22 <scalbn+0x72>
 800ac1c:	a11c      	add	r1, pc, #112	; (adr r1, 800ac90 <scalbn+0xe0>)
 800ac1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac22:	a319      	add	r3, pc, #100	; (adr r3, 800ac88 <scalbn+0xd8>)
 800ac24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac28:	f7f5 fc8a 	bl	8000540 <__aeabi_dmul>
 800ac2c:	e7e6      	b.n	800abfc <scalbn+0x4c>
 800ac2e:	1872      	adds	r2, r6, r1
 800ac30:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ac34:	428a      	cmp	r2, r1
 800ac36:	dcec      	bgt.n	800ac12 <scalbn+0x62>
 800ac38:	2a00      	cmp	r2, #0
 800ac3a:	dd08      	ble.n	800ac4e <scalbn+0x9e>
 800ac3c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ac40:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ac44:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ac48:	ec45 4b10 	vmov	d0, r4, r5
 800ac4c:	bd70      	pop	{r4, r5, r6, pc}
 800ac4e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ac52:	da08      	bge.n	800ac66 <scalbn+0xb6>
 800ac54:	2d00      	cmp	r5, #0
 800ac56:	a10a      	add	r1, pc, #40	; (adr r1, 800ac80 <scalbn+0xd0>)
 800ac58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac5c:	dac0      	bge.n	800abe0 <scalbn+0x30>
 800ac5e:	a10e      	add	r1, pc, #56	; (adr r1, 800ac98 <scalbn+0xe8>)
 800ac60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac64:	e7bc      	b.n	800abe0 <scalbn+0x30>
 800ac66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ac6a:	3236      	adds	r2, #54	; 0x36
 800ac6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ac70:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ac74:	4620      	mov	r0, r4
 800ac76:	4b0c      	ldr	r3, [pc, #48]	; (800aca8 <scalbn+0xf8>)
 800ac78:	2200      	movs	r2, #0
 800ac7a:	e7d5      	b.n	800ac28 <scalbn+0x78>
 800ac7c:	f3af 8000 	nop.w
 800ac80:	c2f8f359 	.word	0xc2f8f359
 800ac84:	01a56e1f 	.word	0x01a56e1f
 800ac88:	8800759c 	.word	0x8800759c
 800ac8c:	7e37e43c 	.word	0x7e37e43c
 800ac90:	8800759c 	.word	0x8800759c
 800ac94:	fe37e43c 	.word	0xfe37e43c
 800ac98:	c2f8f359 	.word	0xc2f8f359
 800ac9c:	81a56e1f 	.word	0x81a56e1f
 800aca0:	43500000 	.word	0x43500000
 800aca4:	ffff3cb0 	.word	0xffff3cb0
 800aca8:	3c900000 	.word	0x3c900000

0800acac <with_errno>:
 800acac:	b570      	push	{r4, r5, r6, lr}
 800acae:	4604      	mov	r4, r0
 800acb0:	460d      	mov	r5, r1
 800acb2:	4616      	mov	r6, r2
 800acb4:	f7ff f8f8 	bl	8009ea8 <__errno>
 800acb8:	4629      	mov	r1, r5
 800acba:	6006      	str	r6, [r0, #0]
 800acbc:	4620      	mov	r0, r4
 800acbe:	bd70      	pop	{r4, r5, r6, pc}

0800acc0 <xflow>:
 800acc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acc2:	4614      	mov	r4, r2
 800acc4:	461d      	mov	r5, r3
 800acc6:	b108      	cbz	r0, 800accc <xflow+0xc>
 800acc8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800accc:	e9cd 2300 	strd	r2, r3, [sp]
 800acd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acd4:	4620      	mov	r0, r4
 800acd6:	4629      	mov	r1, r5
 800acd8:	f7f5 fc32 	bl	8000540 <__aeabi_dmul>
 800acdc:	2222      	movs	r2, #34	; 0x22
 800acde:	b003      	add	sp, #12
 800ace0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ace4:	f7ff bfe2 	b.w	800acac <with_errno>

0800ace8 <__math_uflow>:
 800ace8:	b508      	push	{r3, lr}
 800acea:	2200      	movs	r2, #0
 800acec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800acf0:	f7ff ffe6 	bl	800acc0 <xflow>
 800acf4:	ec41 0b10 	vmov	d0, r0, r1
 800acf8:	bd08      	pop	{r3, pc}

0800acfa <__math_oflow>:
 800acfa:	b508      	push	{r3, lr}
 800acfc:	2200      	movs	r2, #0
 800acfe:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ad02:	f7ff ffdd 	bl	800acc0 <xflow>
 800ad06:	ec41 0b10 	vmov	d0, r0, r1
 800ad0a:	bd08      	pop	{r3, pc}

0800ad0c <__ieee754_sqrt>:
 800ad0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad10:	ec55 4b10 	vmov	r4, r5, d0
 800ad14:	4e67      	ldr	r6, [pc, #412]	; (800aeb4 <__ieee754_sqrt+0x1a8>)
 800ad16:	43ae      	bics	r6, r5
 800ad18:	ee10 0a10 	vmov	r0, s0
 800ad1c:	ee10 2a10 	vmov	r2, s0
 800ad20:	4629      	mov	r1, r5
 800ad22:	462b      	mov	r3, r5
 800ad24:	d10d      	bne.n	800ad42 <__ieee754_sqrt+0x36>
 800ad26:	f7f5 fc0b 	bl	8000540 <__aeabi_dmul>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	4620      	mov	r0, r4
 800ad30:	4629      	mov	r1, r5
 800ad32:	f7f5 fa4f 	bl	80001d4 <__adddf3>
 800ad36:	4604      	mov	r4, r0
 800ad38:	460d      	mov	r5, r1
 800ad3a:	ec45 4b10 	vmov	d0, r4, r5
 800ad3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad42:	2d00      	cmp	r5, #0
 800ad44:	dc0b      	bgt.n	800ad5e <__ieee754_sqrt+0x52>
 800ad46:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ad4a:	4326      	orrs	r6, r4
 800ad4c:	d0f5      	beq.n	800ad3a <__ieee754_sqrt+0x2e>
 800ad4e:	b135      	cbz	r5, 800ad5e <__ieee754_sqrt+0x52>
 800ad50:	f7f5 fa3e 	bl	80001d0 <__aeabi_dsub>
 800ad54:	4602      	mov	r2, r0
 800ad56:	460b      	mov	r3, r1
 800ad58:	f7f5 fd1c 	bl	8000794 <__aeabi_ddiv>
 800ad5c:	e7eb      	b.n	800ad36 <__ieee754_sqrt+0x2a>
 800ad5e:	1509      	asrs	r1, r1, #20
 800ad60:	f000 808d 	beq.w	800ae7e <__ieee754_sqrt+0x172>
 800ad64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad68:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800ad6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad70:	07c9      	lsls	r1, r1, #31
 800ad72:	bf5c      	itt	pl
 800ad74:	005b      	lslpl	r3, r3, #1
 800ad76:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800ad7a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ad7e:	bf58      	it	pl
 800ad80:	0052      	lslpl	r2, r2, #1
 800ad82:	2500      	movs	r5, #0
 800ad84:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ad88:	1076      	asrs	r6, r6, #1
 800ad8a:	0052      	lsls	r2, r2, #1
 800ad8c:	f04f 0e16 	mov.w	lr, #22
 800ad90:	46ac      	mov	ip, r5
 800ad92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ad96:	eb0c 0001 	add.w	r0, ip, r1
 800ad9a:	4298      	cmp	r0, r3
 800ad9c:	bfde      	ittt	le
 800ad9e:	1a1b      	suble	r3, r3, r0
 800ada0:	eb00 0c01 	addle.w	ip, r0, r1
 800ada4:	186d      	addle	r5, r5, r1
 800ada6:	005b      	lsls	r3, r3, #1
 800ada8:	f1be 0e01 	subs.w	lr, lr, #1
 800adac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800adb0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800adb4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800adb8:	d1ed      	bne.n	800ad96 <__ieee754_sqrt+0x8a>
 800adba:	4674      	mov	r4, lr
 800adbc:	2720      	movs	r7, #32
 800adbe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800adc2:	4563      	cmp	r3, ip
 800adc4:	eb01 000e 	add.w	r0, r1, lr
 800adc8:	dc02      	bgt.n	800add0 <__ieee754_sqrt+0xc4>
 800adca:	d113      	bne.n	800adf4 <__ieee754_sqrt+0xe8>
 800adcc:	4290      	cmp	r0, r2
 800adce:	d811      	bhi.n	800adf4 <__ieee754_sqrt+0xe8>
 800add0:	2800      	cmp	r0, #0
 800add2:	eb00 0e01 	add.w	lr, r0, r1
 800add6:	da57      	bge.n	800ae88 <__ieee754_sqrt+0x17c>
 800add8:	f1be 0f00 	cmp.w	lr, #0
 800addc:	db54      	blt.n	800ae88 <__ieee754_sqrt+0x17c>
 800adde:	f10c 0801 	add.w	r8, ip, #1
 800ade2:	eba3 030c 	sub.w	r3, r3, ip
 800ade6:	4290      	cmp	r0, r2
 800ade8:	bf88      	it	hi
 800adea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800adee:	1a12      	subs	r2, r2, r0
 800adf0:	440c      	add	r4, r1
 800adf2:	46c4      	mov	ip, r8
 800adf4:	005b      	lsls	r3, r3, #1
 800adf6:	3f01      	subs	r7, #1
 800adf8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800adfc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ae00:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ae04:	d1dd      	bne.n	800adc2 <__ieee754_sqrt+0xb6>
 800ae06:	4313      	orrs	r3, r2
 800ae08:	d01b      	beq.n	800ae42 <__ieee754_sqrt+0x136>
 800ae0a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800aeb8 <__ieee754_sqrt+0x1ac>
 800ae0e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800aebc <__ieee754_sqrt+0x1b0>
 800ae12:	e9da 0100 	ldrd	r0, r1, [sl]
 800ae16:	e9db 2300 	ldrd	r2, r3, [fp]
 800ae1a:	f7f5 f9d9 	bl	80001d0 <__aeabi_dsub>
 800ae1e:	e9da 8900 	ldrd	r8, r9, [sl]
 800ae22:	4602      	mov	r2, r0
 800ae24:	460b      	mov	r3, r1
 800ae26:	4640      	mov	r0, r8
 800ae28:	4649      	mov	r1, r9
 800ae2a:	f7f5 fe05 	bl	8000a38 <__aeabi_dcmple>
 800ae2e:	b140      	cbz	r0, 800ae42 <__ieee754_sqrt+0x136>
 800ae30:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ae34:	e9da 0100 	ldrd	r0, r1, [sl]
 800ae38:	e9db 2300 	ldrd	r2, r3, [fp]
 800ae3c:	d126      	bne.n	800ae8c <__ieee754_sqrt+0x180>
 800ae3e:	3501      	adds	r5, #1
 800ae40:	463c      	mov	r4, r7
 800ae42:	106a      	asrs	r2, r5, #1
 800ae44:	0863      	lsrs	r3, r4, #1
 800ae46:	07e9      	lsls	r1, r5, #31
 800ae48:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ae4c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ae50:	bf48      	it	mi
 800ae52:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ae56:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800ae5a:	461c      	mov	r4, r3
 800ae5c:	e76d      	b.n	800ad3a <__ieee754_sqrt+0x2e>
 800ae5e:	0ad3      	lsrs	r3, r2, #11
 800ae60:	3815      	subs	r0, #21
 800ae62:	0552      	lsls	r2, r2, #21
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d0fa      	beq.n	800ae5e <__ieee754_sqrt+0x152>
 800ae68:	02dc      	lsls	r4, r3, #11
 800ae6a:	d50a      	bpl.n	800ae82 <__ieee754_sqrt+0x176>
 800ae6c:	f1c1 0420 	rsb	r4, r1, #32
 800ae70:	fa22 f404 	lsr.w	r4, r2, r4
 800ae74:	1e4d      	subs	r5, r1, #1
 800ae76:	408a      	lsls	r2, r1
 800ae78:	4323      	orrs	r3, r4
 800ae7a:	1b41      	subs	r1, r0, r5
 800ae7c:	e772      	b.n	800ad64 <__ieee754_sqrt+0x58>
 800ae7e:	4608      	mov	r0, r1
 800ae80:	e7f0      	b.n	800ae64 <__ieee754_sqrt+0x158>
 800ae82:	005b      	lsls	r3, r3, #1
 800ae84:	3101      	adds	r1, #1
 800ae86:	e7ef      	b.n	800ae68 <__ieee754_sqrt+0x15c>
 800ae88:	46e0      	mov	r8, ip
 800ae8a:	e7aa      	b.n	800ade2 <__ieee754_sqrt+0xd6>
 800ae8c:	f7f5 f9a2 	bl	80001d4 <__adddf3>
 800ae90:	e9da 8900 	ldrd	r8, r9, [sl]
 800ae94:	4602      	mov	r2, r0
 800ae96:	460b      	mov	r3, r1
 800ae98:	4640      	mov	r0, r8
 800ae9a:	4649      	mov	r1, r9
 800ae9c:	f7f5 fdc2 	bl	8000a24 <__aeabi_dcmplt>
 800aea0:	b120      	cbz	r0, 800aeac <__ieee754_sqrt+0x1a0>
 800aea2:	1ca0      	adds	r0, r4, #2
 800aea4:	bf08      	it	eq
 800aea6:	3501      	addeq	r5, #1
 800aea8:	3402      	adds	r4, #2
 800aeaa:	e7ca      	b.n	800ae42 <__ieee754_sqrt+0x136>
 800aeac:	3401      	adds	r4, #1
 800aeae:	f024 0401 	bic.w	r4, r4, #1
 800aeb2:	e7c6      	b.n	800ae42 <__ieee754_sqrt+0x136>
 800aeb4:	7ff00000 	.word	0x7ff00000
 800aeb8:	200000d0 	.word	0x200000d0
 800aebc:	200000d8 	.word	0x200000d8

0800aec0 <_init>:
 800aec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aec2:	bf00      	nop
 800aec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aec6:	bc08      	pop	{r3}
 800aec8:	469e      	mov	lr, r3
 800aeca:	4770      	bx	lr

0800aecc <_fini>:
 800aecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aece:	bf00      	nop
 800aed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aed2:	bc08      	pop	{r3}
 800aed4:	469e      	mov	lr, r3
 800aed6:	4770      	bx	lr
